
SecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001224  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     00000024  20000000  00001224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000034  20000024  00001248  00020024  2**2
                  ALLOC
  4 .heap         00000200  20000058  0000127c  00020024  2**0
                  ALLOC
  5 .stack        00001000  20000258  0000147c  00020024  2**0
                  ALLOC
  6 .userRowBlock 0000003c  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .bocorBlock   00000008  0080c000  0080c000  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .bocorcekeyBlock 00000030  0080c010  0080c010  0003c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .bocorbootkeyBlock 00000020  0080c050  0080c050  0003c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .ARM.attributes 0000002c  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY
 11 .comment      00000059  00000000  00000000  0003c09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005927  00000000  00000000  0003c0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cb0  00000000  00000000  00041a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001b5b  00000000  00000000  000426cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000168  00000000  00000000  00044227  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002b0  00000000  00000000  0004438f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00014bff  00000000  00000000  0004463f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000301b  00000000  00000000  0005923e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00087556  00000000  00000000  0005c259  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  000003c0  00000000  00000000  000e37b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
    // Not implemented
    SystemCoreClock = __SYSTEM_CLOCK;
       0:	58 12 00 20 19 0d 00 00 11 0d 00 00 15 0d 00 00     X.. ............
	...
      2c:	11 0d 00 00 00 00 00 00 00 00 00 00 11 0d 00 00     ................
      3c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      4c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      5c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      6c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      7c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      8c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      9c:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      ac:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      bc:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      cc:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      dc:	11 0d 00 00 11 0d 00 00 11 0d 00 00 11 0d 00 00     ................
      ec:	11 0d 00 00 11 0d 00 00                             ........

000000f4 <__acle_se_secure_checkState>:
#include "secure.h"    /* Header file with secure interface API */


void __attribute__((cmse_nonsecure_entry)) secure_checkState(uint8_t *state, int state_size)
{
	return checkState(state, state_size);
      f4:	f640 6389 	movw	r3, #3721	; 0xe89
{
      f8:	b510      	push	{r4, lr}
	return checkState(state, state_size);
      fa:	f2c0 0300 	movt	r3, #0
      fe:	4798      	blx	r3
}
     100:	2000      	movs	r0, #0
     102:	0001      	movs	r1, r0
     104:	0002      	movs	r2, r0
     106:	0003      	movs	r3, r0
     108:	4684      	mov	ip, r0
     10a:	bc10      	pop	{r4}
     10c:	bc01      	pop	{r0}
     10e:	4686      	mov	lr, r0
     110:	f380 8800 	msr	CPSR_f, r0
     114:	4704      	bxns	r0
     116:	46c0      	nop			; (mov r8, r8)

00000118 <__acle_se_secure_setState>:

void __attribute__((cmse_nonsecure_entry)) secure_setState(uint8_t *state, int state_size)
{
	return setState(state, state_size);
     118:	f640 632d 	movw	r3, #3629	; 0xe2d
{
     11c:	b510      	push	{r4, lr}
	return setState(state, state_size);
     11e:	f2c0 0300 	movt	r3, #0
     122:	4798      	blx	r3
}
     124:	2000      	movs	r0, #0
     126:	0001      	movs	r1, r0
     128:	0002      	movs	r2, r0
     12a:	0003      	movs	r3, r0
     12c:	4684      	mov	ip, r0
     12e:	bc10      	pop	{r4}
     130:	bc01      	pop	{r0}
     132:	4686      	mov	lr, r0
     134:	f380 8800 	msr	CPSR_f, r0
     138:	4704      	bxns	r0
     13a:	46c0      	nop			; (mov r8, r8)

0000013c <__acle_se_secure_pox>:

void __attribute__((cmse_nonsecure_entry)) secure_pox(pox_call_t *pox_fn, uint8_t *pox_token)
{
	return pox(pox_fn, pox_token);
     13c:	f640 63dd 	movw	r3, #3805	; 0xedd
{
     140:	b510      	push	{r4, lr}
	return pox(pox_fn, pox_token);
     142:	f2c0 0300 	movt	r3, #0
     146:	4798      	blx	r3
}
     148:	2000      	movs	r0, #0
     14a:	0001      	movs	r1, r0
     14c:	0002      	movs	r2, r0
     14e:	0003      	movs	r3, r0
     150:	4684      	mov	ip, r0
     152:	bc10      	pop	{r4}
     154:	bc01      	pop	{r0}
     156:	4686      	mov	lr, r0
     158:	f380 8800 	msr	CPSR_f, r0
     15c:	4704      	bxns	r0
     15e:	46c0      	nop			; (mov r8, r8)

00000160 <__do_global_dtors_aux>:
     160:	b510      	push	{r4, lr}
     162:	f240 0424 	movw	r4, #36	; 0x24
     166:	f2c2 0400 	movt	r4, #8192	; 0x2000
     16a:	7823      	ldrb	r3, [r4, #0]
     16c:	b963      	cbnz	r3, 188 <__do_global_dtors_aux+0x28>
     16e:	f240 0300 	movw	r3, #0
     172:	f2c0 0300 	movt	r3, #0
     176:	b12b      	cbz	r3, 184 <__do_global_dtors_aux+0x24>
     178:	f24c 0070 	movw	r0, #49264	; 0xc070
     17c:	f2c0 0080 	movt	r0, #128	; 0x80
     180:	e000      	b.n	184 <__do_global_dtors_aux+0x24>
     182:	bf00      	nop
     184:	2301      	movs	r3, #1
     186:	7023      	strb	r3, [r4, #0]
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <frame_dummy>:
     18c:	f240 0300 	movw	r3, #0
     190:	f2c0 0300 	movt	r3, #0
     194:	b510      	push	{r4, lr}
     196:	b14b      	cbz	r3, 1ac <frame_dummy+0x20>
     198:	f240 0128 	movw	r1, #40	; 0x28
     19c:	f24c 0070 	movw	r0, #49264	; 0xc070
     1a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     1a4:	f2c0 0080 	movt	r0, #128	; 0x80
     1a8:	e000      	b.n	1ac <frame_dummy+0x20>
     1aa:	bf00      	nop
     1ac:	f24c 0070 	movw	r0, #49264	; 0xc070
     1b0:	f2c0 0080 	movt	r0, #128	; 0x80
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b903      	cbnz	r3, 1ba <frame_dummy+0x2e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	f240 0300 	movw	r3, #0
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	2b00      	cmp	r3, #0
     1c4:	d0f8      	beq.n	1b8 <frame_dummy+0x2c>
     1c6:	4798      	blx	r3
     1c8:	e7f6      	b.n	1b8 <frame_dummy+0x2c>
     1ca:	46c0      	nop			; (mov r8, r8)

000001cc <sha256_initialize>:
    uint8_t terminator[64 + 8] = { 0x80 };
    /* Hash the final message bytes if necessary. */
    if (length > 0) sha256_update(sha, message, length);
    /* Create a terminator that includes a stop bit, padding, and
     * the the total message length. See FIPS 180-2 for details. */
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     1cc:	b570      	push	{r4, r5, r6, lr}
     1ce:	f241 05f5 	movw	r5, #4341	; 0x10f5
     1d2:	0004      	movs	r4, r0
     1d4:	f2c0 0500 	movt	r5, #0
     1d8:	2244      	movs	r2, #68	; 0x44
     1da:	2100      	movs	r1, #0
    if (length < 9) length += 64;
     1dc:	3020      	adds	r0, #32
     1de:	47a8      	blx	r5
     1e0:	f24e 6367 	movw	r3, #58983	; 0xe667
     1e4:	f6c6 2309 	movt	r3, #27145	; 0x6a09
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     1e8:	6623      	str	r3, [r4, #96]	; 0x60
     1ea:	f64a 6385 	movw	r3, #44677	; 0xae85
     1ee:	f6cb 3367 	movt	r3, #47975	; 0xbb67
    /* Hash the terminator to finalize the message digest. */
    sha256_update(sha, terminator, length);
     1f2:	6663      	str	r3, [r4, #100]	; 0x64
     1f4:	f24f 3372 	movw	r3, #62322	; 0xf372
     1f8:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
    /* Extract the message digest. */
    for (i = 0; i < 32; ++i) {
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     1fc:	66a3      	str	r3, [r4, #104]	; 0x68
     1fe:	f24f 533a 	movw	r3, #62778	; 0xf53a
     202:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     206:	66e3      	str	r3, [r4, #108]	; 0x6c
     208:	f245 237f 	movw	r3, #21119	; 0x527f
     20c:	f2c5 130e 	movt	r3, #20750	; 0x510e
     210:	6723      	str	r3, [r4, #112]	; 0x70
     212:	f646 038c 	movw	r3, #26764	; 0x688c
     216:	f6c9 3305 	movt	r3, #39685	; 0x9b05
    for (i = 0; i < 32; ++i) {
     21a:	6763      	str	r3, [r4, #116]	; 0x74
    /* Calculate the outer hash. */
    sha256_initialize(&(hmac->sha));
    sha256_update(&(hmac->sha), hmac->key, 64);
    sha256_finalize(&(hmac->sha), hmac->digest, 32);
    /* Use the outer hash value as the HMAC digest. */
    for (i = 0; i < 32; ++i) hmac->digest[i] = hmac->sha.hash[i];
     21c:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
     220:	f6c1 7383 	movt	r3, #8067	; 0x1f83
     224:	67a3      	str	r3, [r4, #120]	; 0x78
     226:	f64c 5319 	movw	r3, #52505	; 0xcd19
     22a:	0020      	movs	r0, r4
     22c:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
     230:	67e3      	str	r3, [r4, #124]	; 0x7c
     232:	2208      	movs	r2, #8
     234:	2100      	movs	r1, #0
     236:	3080      	adds	r0, #128	; 0x80
     238:	47a8      	blx	r5
     23a:	bd70      	pop	{r4, r5, r6, pc}

0000023c <sha256_update>:
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	4657      	mov	r7, sl
     240:	464e      	mov	r6, r9
    int i;
    hmac_sha256 hmac;
    hmac_sha256_initialize(&hmac, key, key_length);
    hmac_sha256_finalize(&hmac, message, message_length);
    for (i = 0; i < 32; ++i) digest[i] = hmac.digest[i];
}
     242:	4645      	mov	r5, r8
     244:	46de      	mov	lr, fp
     246:	00d3      	lsls	r3, r2, #3
     248:	469c      	mov	ip, r3
     24a:	b5e0      	push	{r5, r6, r7, lr}
     24c:	4ce8      	ldr	r4, [pc, #928]	; (5f0 <//STACK_SIZE+0x1f0>)
     24e:	23ff      	movs	r3, #255	; 0xff
    if (length > 0) sha256_update(sha, message, length);
     250:	44a5      	add	sp, r4
     252:	9206      	str	r2, [sp, #24]
     254:	4662      	mov	r2, ip
     256:	401a      	ands	r2, r3
     258:	9203      	str	r2, [sp, #12]
     25a:	4663      	mov	r3, ip
     25c:	466a      	mov	r2, sp
     25e:	7113      	strb	r3, [r2, #4]
     260:	7913      	ldrb	r3, [r2, #4]
		bits &= 0xff;
     262:	2702      	movs	r7, #2
     264:	469a      	mov	sl, r3
     266:	0003      	movs	r3, r0
     268:	2506      	movs	r5, #6
     26a:	2600      	movs	r6, #0
     26c:	2407      	movs	r4, #7
     26e:	f240 09ff 	movw	r9, #255	; 0xff
                   uint32_t length) {
     272:	9105      	str	r1, [sp, #20]
     274:	3380      	adds	r3, #128	; 0x80
		bits &= 0xff;
     276:	9001      	str	r0, [sp, #4]
		if (i == 7)
     278:	2c07      	cmp	r4, #7
     27a:	d100      	bne.n	27e <sha256_update+0x42>
     27c:	e1ba      	b.n	5f4 <//STACK_SIZE+0x1f4>
		else if (i == 0 || i == 1 || i == 2)
     27e:	2c02      	cmp	r4, #2
     280:	dd00      	ble.n	284 <sha256_update+0x48>
     282:	e1f4      	b.n	66e <//STACK_SIZE+0x26e>
     284:	2100      	movs	r1, #0
     286:	79da      	ldrb	r2, [r3, #7]
        sha->length[i] += bits;
     288:	1852      	adds	r2, r2, r1
     28a:	71da      	strb	r2, [r3, #7]
     28c:	3e01      	subs	r6, #1
     28e:	3d01      	subs	r5, #1
     290:	3b01      	subs	r3, #1
     292:	3f01      	subs	r7, #1
    for (i = 7; i >= 0; --i) {
     294:	3c01      	subs	r4, #1
     296:	d2ef      	bcs.n	278 <sha256_update+0x3c>
     298:	9b01      	ldr	r3, [sp, #4]
     29a:	469b      	mov	fp, r3
    while (length > 0) {
     29c:	9b06      	ldr	r3, [sp, #24]
     29e:	2b00      	cmp	r3, #0
     2a0:	d040      	beq.n	324 <sha256_update+0xe8>
        int index = sha->length[6] % 2 * 32 + sha->length[7] / 8;
     2a2:	2386      	movs	r3, #134	; 0x86
     2a4:	465a      	mov	r2, fp
     2a6:	5cd2      	ldrb	r2, [r2, r3]
     2a8:	3b85      	subs	r3, #133	; 0x85
     2aa:	4013      	ands	r3, r2
     2ac:	4659      	mov	r1, fp
     2ae:	2287      	movs	r2, #135	; 0x87
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2b0:	2603      	movs	r6, #3
        index = (index + 64 - length % 64) % 64;
     2b2:	253f      	movs	r5, #63	; 0x3f
        int index = sha->length[6] % 2 * 32 + sha->length[7] / 8;
     2b4:	5c8a      	ldrb	r2, [r1, r2]
        index = (index + 64 - length % 64) % 64;
     2b6:	9806      	ldr	r0, [sp, #24]
        int index = sha->length[6] % 2 * 32 + sha->length[7] / 8;
     2b8:	08d2      	lsrs	r2, r2, #3
     2ba:	015b      	lsls	r3, r3, #5
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2bc:	9c05      	ldr	r4, [sp, #20]
        int index = sha->length[6] % 2 * 32 + sha->length[7] / 8;
     2be:	189b      	adds	r3, r3, r2
        index = (index + 64 - length % 64) % 64;
     2c0:	1a1b      	subs	r3, r3, r0
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2c2:	7821      	ldrb	r1, [r4, #0]
     2c4:	439e      	bics	r6, r3
        index = (index + 64 - length % 64) % 64;
     2c6:	401d      	ands	r5, r3
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2c8:	00f3      	lsls	r3, r6, #3
     2ca:	4099      	lsls	r1, r3
     2cc:	000b      	movs	r3, r1
     2ce:	10aa      	asrs	r2, r5, #2
     2d0:	0092      	lsls	r2, r2, #2
     2d2:	445a      	add	r2, fp
     2d4:	6a11      	ldr	r1, [r2, #32]
     2d6:	430b      	orrs	r3, r1
     2d8:	6213      	str	r3, [r2, #32]
        for (;length > 0 && index < 64; ++message, ++index, --length) {
     2da:	0002      	movs	r2, r0
     2dc:	1c63      	adds	r3, r4, #1
     2de:	9305      	str	r3, [sp, #20]
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2e0:	43d3      	mvns	r3, r2
        for (;length > 0 && index < 64; ++message, ++index, --length) {
     2e2:	3801      	subs	r0, #1
     2e4:	1c6c      	adds	r4, r5, #1
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2e6:	1b5d      	subs	r5, r3, r5
        for (;length > 0 && index < 64; ++message, ++index, --length) {
     2e8:	b1c8      	cbz	r0, 31e <sha256_update+0xe2>
     2ea:	465e      	mov	r6, fp
     2ec:	46ac      	mov	ip, r5
     2ee:	9905      	ldr	r1, [sp, #20]
     2f0:	2c40      	cmp	r4, #64	; 0x40
     2f2:	d020      	beq.n	336 <sha256_update+0xfa>
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     2f4:	4662      	mov	r2, ip
     2f6:	2503      	movs	r5, #3
     2f8:	1812      	adds	r2, r2, r0
     2fa:	780f      	ldrb	r7, [r1, #0]
     2fc:	402a      	ands	r2, r5
     2fe:	00d2      	lsls	r2, r2, #3
     300:	4097      	lsls	r7, r2
     302:	003a      	movs	r2, r7
     304:	10a3      	asrs	r3, r4, #2
     306:	009b      	lsls	r3, r3, #2
     308:	18f3      	adds	r3, r6, r3
     30a:	6a1d      	ldr	r5, [r3, #32]
        for (;length > 0 && index < 64; ++message, ++index, --length) {
     30c:	3801      	subs	r0, #1
            sha->buffer[index / 4] |= *message << (24 - index % 4 * 8);
     30e:	432a      	orrs	r2, r5
     310:	621a      	str	r2, [r3, #32]
        for (;length > 0 && index < 64; ++message, ++index, --length) {
     312:	3101      	adds	r1, #1
     314:	3401      	adds	r4, #1
     316:	2800      	cmp	r0, #0
     318:	d1ea      	bne.n	2f0 <sha256_update+0xb4>
     31a:	46b3      	mov	fp, r6
     31c:	9105      	str	r1, [sp, #20]
        if (index == 64) {
     31e:	2c40      	cmp	r4, #64	; 0x40
     320:	d100      	bne.n	324 <sha256_update+0xe8>
     322:	e161      	b.n	5e8 <//STACK_SIZE+0x1e8>
}
     324:	f240 2344 	movw	r3, #580	; 0x244
     328:	449d      	add	sp, r3
     32a:	bc3c      	pop	{r2, r3, r4, r5}
     32c:	4690      	mov	r8, r2
     32e:	4699      	mov	r9, r3
     330:	46a2      	mov	sl, r4
     332:	46ab      	mov	fp, r5
     334:	bdf0      	pop	{r4, r5, r6, r7, pc}
     336:	46b3      	mov	fp, r6
     338:	9105      	str	r1, [sp, #20]
     33a:	9006      	str	r0, [sp, #24]
            const uint32_t k[64] = {
     33c:	f241 1104 	movw	r1, #4356	; 0x1104
     340:	f241 03e3 	movw	r3, #4323	; 0x10e3
     344:	f240 1200 	movw	r2, #256	; 0x100
     348:	f2c0 0100 	movt	r1, #0
     34c:	f2c0 0300 	movt	r3, #0
     350:	a810      	add	r0, sp, #64	; 0x40
     352:	4798      	blx	r3
                sha->buffer[t] = 0;
     354:	2200      	movs	r2, #0
                w[t] = sha->buffer[t];
     356:	465b      	mov	r3, fp
     358:	6a1e      	ldr	r6, [r3, #32]
                sha->buffer[t] = 0;
     35a:	621a      	str	r2, [r3, #32]
                w[t] = sha->buffer[t];
     35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     35e:	9650      	str	r6, [sp, #320]	; 0x140
     360:	9351      	str	r3, [sp, #324]	; 0x144
                sha->buffer[t] = 0;
     362:	465b      	mov	r3, fp
     364:	625a      	str	r2, [r3, #36]	; 0x24
                w[t] = sha->buffer[t];
     366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                sha->buffer[t] = 0;
     368:	4659      	mov	r1, fp
                w[t] = sha->buffer[t];
     36a:	9352      	str	r3, [sp, #328]	; 0x148
                sha->buffer[t] = 0;
     36c:	465b      	mov	r3, fp
     36e:	629a      	str	r2, [r3, #40]	; 0x28
                w[t] = sha->buffer[t];
     370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                sha->buffer[t] = 0;
     372:	2710      	movs	r7, #16
                w[t] = sha->buffer[t];
     374:	9353      	str	r3, [sp, #332]	; 0x14c
                sha->buffer[t] = 0;
     376:	465b      	mov	r3, fp
     378:	62da      	str	r2, [r3, #44]	; 0x2c
                w[t] = sha->buffer[t];
     37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     37c:	f240 0807 	movw	r8, #7
                w[t] = sha->buffer[t];
     380:	9354      	str	r3, [sp, #336]	; 0x150
                sha->buffer[t] = 0;
     382:	465b      	mov	r3, fp
     384:	631a      	str	r2, [r3, #48]	; 0x30
                w[t] = sha->buffer[t];
     386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     388:	f240 0c12 	movw	ip, #18
                w[t] = sha->buffer[t];
     38c:	9355      	str	r3, [sp, #340]	; 0x154
                sha->buffer[t] = 0;
     38e:	465b      	mov	r3, fp
     390:	635a      	str	r2, [r3, #52]	; 0x34
                w[t] = sha->buffer[t];
     392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     394:	f240 0a11 	movw	sl, #17
                w[t] = sha->buffer[t];
     398:	9356      	str	r3, [sp, #344]	; 0x158
                sha->buffer[t] = 0;
     39a:	465b      	mov	r3, fp
     39c:	639a      	str	r2, [r3, #56]	; 0x38
                w[t] = sha->buffer[t];
     39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     3a0:	ad51      	add	r5, sp, #324	; 0x144
     3a2:	9357      	str	r3, [sp, #348]	; 0x15c
                sha->buffer[t] = 0;
     3a4:	465b      	mov	r3, fp
     3a6:	63da      	str	r2, [r3, #60]	; 0x3c
                w[t] = sha->buffer[t];
     3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     3aa:	9358      	str	r3, [sp, #352]	; 0x160
                sha->buffer[t] = 0;
     3ac:	465b      	mov	r3, fp
     3ae:	641a      	str	r2, [r3, #64]	; 0x40
                w[t] = sha->buffer[t];
     3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     3b2:	9359      	str	r3, [sp, #356]	; 0x164
                sha->buffer[t] = 0;
     3b4:	465b      	mov	r3, fp
     3b6:	645a      	str	r2, [r3, #68]	; 0x44
                w[t] = sha->buffer[t];
     3b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     3ba:	935a      	str	r3, [sp, #360]	; 0x168
                sha->buffer[t] = 0;
     3bc:	465b      	mov	r3, fp
     3be:	649a      	str	r2, [r3, #72]	; 0x48
                w[t] = sha->buffer[t];
     3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3c2:	9701      	str	r7, [sp, #4]
                w[t] = sha->buffer[t];
     3c4:	935b      	str	r3, [sp, #364]	; 0x16c
                sha->buffer[t] = 0;
     3c6:	465b      	mov	r3, fp
     3c8:	64da      	str	r2, [r3, #76]	; 0x4c
                w[t] = sha->buffer[t];
     3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     3cc:	935c      	str	r3, [sp, #368]	; 0x170
                sha->buffer[t] = 0;
     3ce:	465b      	mov	r3, fp
     3d0:	651a      	str	r2, [r3, #80]	; 0x50
                w[t] = sha->buffer[t];
     3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     3d4:	935d      	str	r3, [sp, #372]	; 0x174
                sha->buffer[t] = 0;
     3d6:	465b      	mov	r3, fp
                w[t] = sha->buffer[t];
     3d8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
                sha->buffer[t] = 0;
     3da:	655a      	str	r2, [r3, #84]	; 0x54
     3dc:	659a      	str	r2, [r3, #88]	; 0x58
                w[t] = sha->buffer[t];
     3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     3e0:	945e      	str	r4, [sp, #376]	; 0x178
     3e2:	935f      	str	r3, [sp, #380]	; 0x17c
                sha->buffer[t] = 0;
     3e4:	65ca      	str	r2, [r1, #92]	; 0x5c
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3e6:	682a      	ldr	r2, [r5, #0]
     3e8:	4640      	mov	r0, r8
     3ea:	0011      	movs	r1, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3ec:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3ee:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3f0:	0010      	movs	r0, r2
     3f2:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3f4:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3f6:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3f8:	0020      	movs	r0, r4
     3fa:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3fc:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3fe:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     400:	0020      	movs	r0, r4
     402:	41f8      	rors	r0, r7
     404:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     406:	0aa4      	lsrs	r4, r4, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     408:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     40a:	4044      	eors	r4, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     40c:	6a28      	ldr	r0, [r5, #32]
     40e:	19a4      	adds	r4, r4, r6
     410:	4681      	mov	r9, r0
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     412:	686e      	ldr	r6, [r5, #4]
                s0 ^= (w[t - 15] >> 3);
     414:	08d0      	lsrs	r0, r2, #3
     416:	4041      	eors	r1, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     418:	444c      	add	r4, r9
     41a:	1864      	adds	r4, r4, r1
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     41c:	4640      	mov	r0, r8
     41e:	0031      	movs	r1, r6
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     420:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     422:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     424:	0030      	movs	r0, r6
     426:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     428:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     42a:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     42c:	0018      	movs	r0, r3
     42e:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     430:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     432:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     434:	0018      	movs	r0, r3
     436:	41f8      	rors	r0, r7
     438:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     43a:	0a9b      	lsrs	r3, r3, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     43c:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     43e:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     440:	6a68      	ldr	r0, [r5, #36]	; 0x24
     442:	63ec      	str	r4, [r5, #60]	; 0x3c
     444:	4681      	mov	r9, r0
     446:	444b      	add	r3, r9
     448:	189b      	adds	r3, r3, r2
                s0 ^= (w[t - 15] >> 3);
     44a:	08f2      	lsrs	r2, r6, #3
     44c:	4051      	eors	r1, r2
     44e:	9a01      	ldr	r2, [sp, #4]
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     450:	185b      	adds	r3, r3, r1
     452:	3202      	adds	r2, #2
     454:	642b      	str	r3, [r5, #64]	; 0x40
     456:	9201      	str	r2, [sp, #4]
     458:	3508      	adds	r5, #8
     45a:	2a3e      	cmp	r2, #62	; 0x3e
     45c:	d1c3      	bne.n	3e6 <sha256_update+0x1aa>
     45e:	ab80      	add	r3, sp, #512	; 0x200
     460:	4699      	mov	r9, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     462:	465b      	mov	r3, fp
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     464:	f240 0807 	movw	r8, #7
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     468:	f240 0c12 	movw	ip, #18
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     46c:	2711      	movs	r7, #17
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     46e:	2613      	movs	r6, #19
     470:	ad7e      	add	r5, sp, #504	; 0x1f8
     472:	9301      	str	r3, [sp, #4]
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     474:	686a      	ldr	r2, [r5, #4]
     476:	4641      	mov	r1, r8
     478:	0013      	movs	r3, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     47a:	0014      	movs	r4, r2
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     47c:	41cb      	rors	r3, r1
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     47e:	4661      	mov	r1, ip
     480:	41cc      	rors	r4, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     482:	6ba9      	ldr	r1, [r5, #56]	; 0x38
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     484:	405c      	eors	r4, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     486:	0008      	movs	r0, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     488:	000b      	movs	r3, r1
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     48a:	41f0      	rors	r0, r6
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     48c:	41fb      	rors	r3, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     48e:	4058      	eors	r0, r3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     490:	682b      	ldr	r3, [r5, #0]
                s0 ^= (w[t - 15] >> 3);
     492:	08d2      	lsrs	r2, r2, #3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     494:	469b      	mov	fp, r3
     496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                s0 ^= (w[t - 15] >> 3);
     498:	4062      	eors	r2, r4
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     49a:	469a      	mov	sl, r3
     49c:	44d3      	add	fp, sl
     49e:	465b      	mov	r3, fp
     4a0:	189a      	adds	r2, r3, r2
                s1 ^= (w[t - 2] >> 10);
     4a2:	0a8b      	lsrs	r3, r1, #10
     4a4:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     4a6:	18d3      	adds	r3, r2, r3
     4a8:	642b      	str	r3, [r5, #64]	; 0x40
     4aa:	3504      	adds	r5, #4
            for (t = 16; t < 64; ++t) {
     4ac:	45a9      	cmp	r9, r5
     4ae:	d1e1      	bne.n	474 <//STACK_SIZE+0x74>
     4b0:	9b01      	ldr	r3, [sp, #4]
     4b2:	469b      	mov	fp, r3
            a = sha->state[0];
     4b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     4b6:	001e      	movs	r6, r3
     4b8:	9307      	str	r3, [sp, #28]
            b = sha->state[1];
     4ba:	465b      	mov	r3, fp
     4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     4be:	001a      	movs	r2, r3
     4c0:	9308      	str	r3, [sp, #32]
            c = sha->state[2];
     4c2:	465b      	mov	r3, fp
     4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     4c6:	0019      	movs	r1, r3
     4c8:	9309      	str	r3, [sp, #36]	; 0x24
            d = sha->state[3];
     4ca:	465b      	mov	r3, fp
     4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     4ce:	0018      	movs	r0, r3
     4d0:	930a      	str	r3, [sp, #40]	; 0x28
            e = sha->state[4];
     4d2:	465b      	mov	r3, fp
     4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     4d6:	001d      	movs	r5, r3
     4d8:	930b      	str	r3, [sp, #44]	; 0x2c
            f = sha->state[5];
     4da:	465b      	mov	r3, fp
     4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     4de:	001c      	movs	r4, r3
     4e0:	930c      	str	r3, [sp, #48]	; 0x30
            g = sha->state[6];
     4e2:	465b      	mov	r3, fp
     4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
            f = sha->state[5];
     4e6:	46a2      	mov	sl, r4
            g = sha->state[6];
     4e8:	001f      	movs	r7, r3
     4ea:	930d      	str	r3, [sp, #52]	; 0x34
            h = sha->state[7];
     4ec:	465b      	mov	r3, fp
     4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            d = sha->state[3];
     4f0:	0004      	movs	r4, r0
            h = sha->state[7];
     4f2:	930e      	str	r3, [sp, #56]	; 0x38
     4f4:	469c      	mov	ip, r3
     4f6:	465b      	mov	r3, fp
            g = sha->state[6];
     4f8:	46b9      	mov	r9, r7
     4fa:	930f      	str	r3, [sp, #60]	; 0x3c
            h = sha->state[7];
     4fc:	2700      	movs	r7, #0
     4fe:	0010      	movs	r0, r2
     500:	46a0      	mov	r8, r4
     502:	000b      	movs	r3, r1
     504:	e005      	b.n	512 <//STACK_SIZE+0x112>
     506:	46d1      	mov	r9, sl
     508:	0003      	movs	r3, r0
     50a:	46aa      	mov	sl, r5
     50c:	0030      	movs	r0, r6
                e = d + t1;
     50e:	000d      	movs	r5, r1
                a = t1 + t2;
     510:	0016      	movs	r6, r2
                e0 ^= (a >> 13 | a << 19);
     512:	220d      	movs	r2, #13
     514:	0034      	movs	r4, r6
     516:	2102      	movs	r1, #2
     518:	41d4      	rors	r4, r2
     51a:	0032      	movs	r2, r6
     51c:	41ca      	rors	r2, r1
                e1 ^= (e >> 11 | e << 21);
     51e:	0029      	movs	r1, r5
                e0 ^= (a >> 13 | a << 19);
     520:	4054      	eors	r4, r2
                e1 ^= (e >> 11 | e << 21);
     522:	220b      	movs	r2, #11
                e0 ^= (a >> 13 | a << 19);
     524:	9401      	str	r4, [sp, #4]
                e1 ^= (e >> 11 | e << 21);
     526:	41d1      	rors	r1, r2
     528:	2406      	movs	r4, #6
     52a:	002a      	movs	r2, r5
     52c:	41e2      	rors	r2, r4
     52e:	4051      	eors	r1, r2
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     530:	aa10      	add	r2, sp, #64	; 0x40
     532:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 11 | e << 21);
     534:	9102      	str	r1, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     536:	9203      	str	r2, [sp, #12]
     538:	aa50      	add	r2, sp, #320	; 0x140
     53a:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 25 | e << 7);
     53c:	3413      	adds	r4, #19
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     53e:	9204      	str	r2, [sp, #16]
     540:	9904      	ldr	r1, [sp, #16]
     542:	9a03      	ldr	r2, [sp, #12]
     544:	468b      	mov	fp, r1
                e1 ^= (e >> 25 | e << 7);
     546:	0029      	movs	r1, r5
     548:	41e1      	rors	r1, r4
     54a:	9c02      	ldr	r4, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     54c:	445a      	add	r2, fp
                e1 ^= (e >> 25 | e << 7);
     54e:	4061      	eors	r1, r4
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     550:	1852      	adds	r2, r2, r1
     552:	4651      	mov	r1, sl
     554:	4029      	ands	r1, r5
     556:	468b      	mov	fp, r1
     558:	4649      	mov	r1, r9
     55a:	465c      	mov	r4, fp
     55c:	43a9      	bics	r1, r5
     55e:	4061      	eors	r1, r4
     560:	1852      	adds	r2, r2, r1
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     562:	0019      	movs	r1, r3
     564:	001c      	movs	r4, r3
     566:	4041      	eors	r1, r0
     568:	4004      	ands	r4, r0
     56a:	4031      	ands	r1, r6
     56c:	4061      	eors	r1, r4
     56e:	468b      	mov	fp, r1
                e0 ^= (a >> 22 | a << 10);
     570:	0034      	movs	r4, r6
     572:	2116      	movs	r1, #22
     574:	41cc      	rors	r4, r1
     576:	0021      	movs	r1, r4
     578:	9c01      	ldr	r4, [sp, #4]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     57a:	4462      	add	r2, ip
                e0 ^= (a >> 22 | a << 10);
     57c:	404c      	eors	r4, r1
                e = d + t1;
     57e:	4641      	mov	r1, r8
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     580:	445c      	add	r4, fp
                e = d + t1;
     582:	1851      	adds	r1, r2, r1
                a = t1 + t2;
     584:	1912      	adds	r2, r2, r4
            for (t = 0; t < 64; ++t) {
     586:	f240 1400 	movw	r4, #256	; 0x100
     58a:	3704      	adds	r7, #4
     58c:	4698      	mov	r8, r3
     58e:	46cc      	mov	ip, r9
     590:	42a7      	cmp	r7, r4
     592:	d1b8      	bne.n	506 <//STACK_SIZE+0x106>
     594:	000c      	movs	r4, r1
     596:	0019      	movs	r1, r3
     598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     59a:	4680      	mov	r8, r0
     59c:	469b      	mov	fp, r3
            sha->state[0] = (sha->state[0] + a) & 0xffffffffU;
     59e:	9b07      	ldr	r3, [sp, #28]
     5a0:	0010      	movs	r0, r2
     5a2:	469c      	mov	ip, r3
     5a4:	465b      	mov	r3, fp
     5a6:	4460      	add	r0, ip
     5a8:	6618      	str	r0, [r3, #96]	; 0x60
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     5aa:	9b08      	ldr	r3, [sp, #32]
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     5ac:	465a      	mov	r2, fp
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     5ae:	469c      	mov	ip, r3
     5b0:	465b      	mov	r3, fp
     5b2:	4466      	add	r6, ip
     5b4:	665e      	str	r6, [r3, #100]	; 0x64
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     5b8:	4443      	add	r3, r8
     5ba:	6693      	str	r3, [r2, #104]	; 0x68
            sha->state[3] = (sha->state[3] + d) & 0xffffffffU;
     5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5be:	185b      	adds	r3, r3, r1
     5c0:	66d3      	str	r3, [r2, #108]	; 0x6c
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     5c4:	469c      	mov	ip, r3
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5c8:	4464      	add	r4, ip
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5ca:	469c      	mov	ip, r3
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5ce:	4465      	add	r5, ip
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     5d0:	4453      	add	r3, sl
     5d2:	6793      	str	r3, [r2, #120]	; 0x78
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5d6:	6714      	str	r4, [r2, #112]	; 0x70
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     5d8:	444b      	add	r3, r9
     5da:	67d3      	str	r3, [r2, #124]	; 0x7c
    while (length > 0) {
     5dc:	9b06      	ldr	r3, [sp, #24]
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5de:	6755      	str	r5, [r2, #116]	; 0x74
    while (length > 0) {
     5e0:	2b00      	cmp	r3, #0
     5e2:	d000      	beq.n	5e6 <//STACK_SIZE+0x1e6>
     5e4:	e65d      	b.n	2a2 <sha256_update+0x66>
     5e6:	e69d      	b.n	324 <sha256_update+0xe8>
     5e8:	2300      	movs	r3, #0
     5ea:	9306      	str	r3, [sp, #24]
     5ec:	e6a6      	b.n	33c <sha256_update+0x100>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	fffffdbc 	.word	0xfffffdbc
			bits = length << 3;
     5f4:	4660      	mov	r0, ip
        if (sha->length[i] + bits > 0xff) {
     5f6:	79da      	ldrb	r2, [r3, #7]
     5f8:	9903      	ldr	r1, [sp, #12]
			bits = length << 3;
     5fa:	9002      	str	r0, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     5fc:	1851      	adds	r1, r2, r1
     5fe:	29ff      	cmp	r1, #255	; 0xff
     600:	dd33      	ble.n	66a <//STACK_SIZE+0x26a>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     602:	9a01      	ldr	r2, [sp, #4]
     604:	1952      	adds	r2, r2, r5
     606:	3280      	adds	r2, #128	; 0x80
     608:	7811      	ldrb	r1, [r2, #0]
     60a:	1c48      	adds	r0, r1, #1
     60c:	7010      	strb	r0, [r2, #0]
     60e:	29ff      	cmp	r1, #255	; 0xff
     610:	d127      	bne.n	662 <//STACK_SIZE+0x262>
     612:	2c02      	cmp	r4, #2
     614:	d425      	bmi.n	662 <//STACK_SIZE+0x262>
     616:	795a      	ldrb	r2, [r3, #5]
     618:	1c51      	adds	r1, r2, #1
     61a:	7159      	strb	r1, [r3, #5]
     61c:	2aff      	cmp	r2, #255	; 0xff
     61e:	d120      	bne.n	662 <//STACK_SIZE+0x262>
     620:	2c03      	cmp	r4, #3
     622:	d41e      	bmi.n	662 <//STACK_SIZE+0x262>
     624:	791a      	ldrb	r2, [r3, #4]
     626:	1c51      	adds	r1, r2, #1
     628:	7119      	strb	r1, [r3, #4]
     62a:	2aff      	cmp	r2, #255	; 0xff
     62c:	d119      	bne.n	662 <//STACK_SIZE+0x262>
     62e:	2c04      	cmp	r4, #4
     630:	d417      	bmi.n	662 <//STACK_SIZE+0x262>
     632:	78da      	ldrb	r2, [r3, #3]
     634:	1c51      	adds	r1, r2, #1
     636:	70d9      	strb	r1, [r3, #3]
     638:	2aff      	cmp	r2, #255	; 0xff
     63a:	d112      	bne.n	662 <//STACK_SIZE+0x262>
     63c:	1c7a      	adds	r2, r7, #1
     63e:	d010      	beq.n	662 <//STACK_SIZE+0x262>
     640:	789a      	ldrb	r2, [r3, #2]
     642:	1c51      	adds	r1, r2, #1
     644:	7099      	strb	r1, [r3, #2]
     646:	2aff      	cmp	r2, #255	; 0xff
     648:	d10b      	bne.n	662 <//STACK_SIZE+0x262>
     64a:	2c06      	cmp	r4, #6
     64c:	d409      	bmi.n	662 <//STACK_SIZE+0x262>
     64e:	785a      	ldrb	r2, [r3, #1]
     650:	1c51      	adds	r1, r2, #1
     652:	7059      	strb	r1, [r3, #1]
     654:	2aff      	cmp	r2, #255	; 0xff
     656:	d104      	bne.n	662 <//STACK_SIZE+0x262>
     658:	1c72      	adds	r2, r6, #1
     65a:	d002      	beq.n	662 <//STACK_SIZE+0x262>
     65c:	781a      	ldrb	r2, [r3, #0]
     65e:	1c51      	adds	r1, r2, #1
     660:	7019      	strb	r1, [r3, #0]
     662:	4669      	mov	r1, sp
     664:	79da      	ldrb	r2, [r3, #7]
     666:	7a09      	ldrb	r1, [r1, #8]
     668:	e60e      	b.n	288 <sha256_update+0x4c>
        if (sha->length[i] + bits > 0xff) {
     66a:	4651      	mov	r1, sl
     66c:	e60c      	b.n	288 <sha256_update+0x4c>
			bits = length >> (53 - 8 * i);
     66e:	00e2      	lsls	r2, r4, #3
     670:	4252      	negs	r2, r2
     672:	9906      	ldr	r1, [sp, #24]
     674:	3235      	adds	r2, #53	; 0x35
     676:	40d1      	lsrs	r1, r2
		bits &= 0xff;
     678:	4648      	mov	r0, r9
     67a:	4008      	ands	r0, r1
     67c:	4683      	mov	fp, r0
        if (sha->length[i] + bits > 0xff) {
     67e:	79da      	ldrb	r2, [r3, #7]
			bits = length >> (53 - 8 * i);
     680:	9102      	str	r1, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     682:	4493      	add	fp, r2
     684:	4658      	mov	r0, fp
     686:	28ff      	cmp	r0, #255	; 0xff
     688:	dd01      	ble.n	68e <//STACK_SIZE+0x28e>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     68a:	1c68      	adds	r0, r5, #1
     68c:	d1b9      	bne.n	602 <//STACK_SIZE+0x202>
     68e:	b2c9      	uxtb	r1, r1
     690:	e5fa      	b.n	288 <sha256_update+0x4c>
     692:	46c0      	nop			; (mov r8, r8)

00000694 <sha256_finalize>:
    uint8_t terminator[64 + 8] = { 0x80 };
     694:	f241 03f5 	movw	r3, #4341	; 0x10f5
                     uint32_t length) {
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	b092      	sub	sp, #72	; 0x48
    uint8_t terminator[64 + 8] = { 0x80 };
     69c:	f2c0 0300 	movt	r3, #0
                     uint32_t length) {
     6a0:	0004      	movs	r4, r0
     6a2:	000e      	movs	r6, r1
     6a4:	0015      	movs	r5, r2
    uint8_t terminator[64 + 8] = { 0x80 };
     6a6:	2100      	movs	r1, #0
     6a8:	2248      	movs	r2, #72	; 0x48
     6aa:	4668      	mov	r0, sp
     6ac:	4798      	blx	r3
     6ae:	2380      	movs	r3, #128	; 0x80
     6b0:	466a      	mov	r2, sp
     6b2:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     6b4:	2d00      	cmp	r5, #0
     6b6:	d130      	bne.n	71a <sha256_finalize+0x86>
     6b8:	f240 263d 	movw	r6, #573	; 0x23d
     6bc:	f2c0 0600 	movt	r6, #0
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     6c0:	2386      	movs	r3, #134	; 0x86
     6c2:	5ce5      	ldrb	r5, [r4, r3]
     6c4:	3b85      	subs	r3, #133	; 0x85
     6c6:	402b      	ands	r3, r5
     6c8:	2287      	movs	r2, #135	; 0x87
     6ca:	2502      	movs	r5, #2
     6cc:	1aeb      	subs	r3, r5, r3
     6ce:	5ca5      	ldrb	r5, [r4, r2]
     6d0:	015b      	lsls	r3, r3, #5
     6d2:	08ed      	lsrs	r5, r5, #3
     6d4:	1b5d      	subs	r5, r3, r5
    if (length < 9) length += 64;
     6d6:	2d08      	cmp	r5, #8
     6d8:	dc00      	bgt.n	6dc <sha256_finalize+0x48>
     6da:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     6dc:	0028      	movs	r0, r5
     6de:	0021      	movs	r1, r4
     6e0:	f241 03e3 	movw	r3, #4323	; 0x10e3
     6e4:	3808      	subs	r0, #8
     6e6:	f2c0 0300 	movt	r3, #0
     6ea:	2208      	movs	r2, #8
     6ec:	3180      	adds	r1, #128	; 0x80
     6ee:	4468      	add	r0, sp
     6f0:	4798      	blx	r3
    sha256_update(sha, terminator, length);
     6f2:	0020      	movs	r0, r4
     6f4:	002a      	movs	r2, r5
     6f6:	4669      	mov	r1, sp
     6f8:	47b0      	blx	r6
    for (i = 0; i < 32; ++i) {
     6fa:	2300      	movs	r3, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     6fc:	2003      	movs	r0, #3
     6fe:	0001      	movs	r1, r0
     700:	109a      	asrs	r2, r3, #2
     702:	3218      	adds	r2, #24
     704:	0092      	lsls	r2, r2, #2
     706:	4399      	bics	r1, r3
     708:	5912      	ldr	r2, [r2, r4]
     70a:	00c9      	lsls	r1, r1, #3
     70c:	40ca      	lsrs	r2, r1
     70e:	54e2      	strb	r2, [r4, r3]
    for (i = 0; i < 32; ++i) {
     710:	3301      	adds	r3, #1
     712:	2b20      	cmp	r3, #32
     714:	d1f3      	bne.n	6fe <sha256_finalize+0x6a>
}
     716:	b012      	add	sp, #72	; 0x48
     718:	bd70      	pop	{r4, r5, r6, pc}
    if (length > 0) sha256_update(sha, message, length);
     71a:	0031      	movs	r1, r6
     71c:	f240 263d 	movw	r6, #573	; 0x23d
     720:	002a      	movs	r2, r5
     722:	0020      	movs	r0, r4
     724:	f2c0 0600 	movt	r6, #0
     728:	47b0      	blx	r6
     72a:	e7c9      	b.n	6c0 <sha256_finalize+0x2c>

0000072c <hmac_sha256_initialize>:
                            const uint8_t *key, int length) {
     72c:	b5f0      	push	{r4, r5, r6, r7, lr}
     72e:	4657      	mov	r7, sl
     730:	464e      	mov	r6, r9
     732:	46de      	mov	lr, fp
     734:	4645      	mov	r5, r8
     736:	b5e0      	push	{r5, r6, r7, lr}
     738:	0004      	movs	r4, r0
     73a:	b093      	sub	sp, #76	; 0x4c
     73c:	000f      	movs	r7, r1
     73e:	0016      	movs	r6, r2
    if (length <= 64) {
     740:	2a40      	cmp	r2, #64	; 0x40
     742:	dd00      	ble.n	746 <hmac_sha256_initialize+0x1a>
     744:	e0ad      	b.n	8a2 <hmac_sha256_initialize+0x176>
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
     746:	2a00      	cmp	r2, #0
     748:	dc00      	bgt.n	74c <hmac_sha256_initialize+0x20>
     74a:	e1a6      	b.n	a9a <hmac_sha256_initialize+0x36e>
     74c:	f240 0a20 	movw	sl, #32
     750:	2300      	movs	r3, #0
     752:	4482      	add	sl, r0
     754:	1d0a      	adds	r2, r1, #4
     756:	4650      	mov	r0, sl
     758:	0019      	movs	r1, r3
     75a:	4290      	cmp	r0, r2
     75c:	4159      	adcs	r1, r3
     75e:	000a      	movs	r2, r1
     760:	0021      	movs	r1, r4
     762:	3124      	adds	r1, #36	; 0x24
     764:	428f      	cmp	r7, r1
     766:	415b      	adcs	r3, r3
     768:	4313      	orrs	r3, r2
     76a:	2203      	movs	r2, #3
     76c:	403a      	ands	r2, r7
     76e:	0011      	movs	r1, r2
     770:	424a      	negs	r2, r1
     772:	414a      	adcs	r2, r1
     774:	421a      	tst	r2, r3
     776:	d100      	bne.n	77a <hmac_sha256_initialize+0x4e>
     778:	e182      	b.n	a80 <hmac_sha256_initialize+0x354>
     77a:	2e06      	cmp	r6, #6
     77c:	d800      	bhi.n	780 <hmac_sha256_initialize+0x54>
     77e:	e17f      	b.n	a80 <hmac_sha256_initialize+0x354>
     780:	f243 6236 	movw	r2, #13878	; 0x3636
     784:	6839      	ldr	r1, [r7, #0]
     786:	1f33      	subs	r3, r6, #4
     788:	089b      	lsrs	r3, r3, #2
     78a:	f2c3 6236 	movt	r2, #13878	; 0x3636
     78e:	3301      	adds	r3, #1
     790:	4051      	eors	r1, r2
     792:	0098      	lsls	r0, r3, #2
     794:	6221      	str	r1, [r4, #32]
     796:	2b01      	cmp	r3, #1
     798:	d04c      	beq.n	834 <hmac_sha256_initialize+0x108>
     79a:	6879      	ldr	r1, [r7, #4]
     79c:	4051      	eors	r1, r2
     79e:	6261      	str	r1, [r4, #36]	; 0x24
     7a0:	2b02      	cmp	r3, #2
     7a2:	d047      	beq.n	834 <hmac_sha256_initialize+0x108>
     7a4:	68b9      	ldr	r1, [r7, #8]
     7a6:	4051      	eors	r1, r2
     7a8:	62a1      	str	r1, [r4, #40]	; 0x28
     7aa:	2b03      	cmp	r3, #3
     7ac:	d042      	beq.n	834 <hmac_sha256_initialize+0x108>
     7ae:	68f9      	ldr	r1, [r7, #12]
     7b0:	4051      	eors	r1, r2
     7b2:	62e1      	str	r1, [r4, #44]	; 0x2c
     7b4:	2b04      	cmp	r3, #4
     7b6:	d03d      	beq.n	834 <hmac_sha256_initialize+0x108>
     7b8:	6939      	ldr	r1, [r7, #16]
     7ba:	4051      	eors	r1, r2
     7bc:	6321      	str	r1, [r4, #48]	; 0x30
     7be:	2b05      	cmp	r3, #5
     7c0:	d038      	beq.n	834 <hmac_sha256_initialize+0x108>
     7c2:	6979      	ldr	r1, [r7, #20]
     7c4:	404a      	eors	r2, r1
     7c6:	6362      	str	r2, [r4, #52]	; 0x34
     7c8:	2b06      	cmp	r3, #6
     7ca:	d033      	beq.n	834 <hmac_sha256_initialize+0x108>
     7cc:	f243 6236 	movw	r2, #13878	; 0x3636
     7d0:	69b9      	ldr	r1, [r7, #24]
     7d2:	f2c3 6236 	movt	r2, #13878	; 0x3636
     7d6:	4051      	eors	r1, r2
     7d8:	63a1      	str	r1, [r4, #56]	; 0x38
     7da:	2b07      	cmp	r3, #7
     7dc:	d02a      	beq.n	834 <hmac_sha256_initialize+0x108>
     7de:	69f9      	ldr	r1, [r7, #28]
     7e0:	4051      	eors	r1, r2
     7e2:	63e1      	str	r1, [r4, #60]	; 0x3c
     7e4:	2b08      	cmp	r3, #8
     7e6:	d025      	beq.n	834 <hmac_sha256_initialize+0x108>
     7e8:	6a39      	ldr	r1, [r7, #32]
     7ea:	4051      	eors	r1, r2
     7ec:	6421      	str	r1, [r4, #64]	; 0x40
     7ee:	2b09      	cmp	r3, #9
     7f0:	d020      	beq.n	834 <hmac_sha256_initialize+0x108>
     7f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
     7f4:	4051      	eors	r1, r2
     7f6:	6461      	str	r1, [r4, #68]	; 0x44
     7f8:	2b0a      	cmp	r3, #10
     7fa:	d01b      	beq.n	834 <hmac_sha256_initialize+0x108>
     7fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     7fe:	4051      	eors	r1, r2
     800:	64a1      	str	r1, [r4, #72]	; 0x48
     802:	2b0b      	cmp	r3, #11
     804:	d016      	beq.n	834 <hmac_sha256_initialize+0x108>
     806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
     808:	4051      	eors	r1, r2
     80a:	64e1      	str	r1, [r4, #76]	; 0x4c
     80c:	2b0c      	cmp	r3, #12
     80e:	d011      	beq.n	834 <hmac_sha256_initialize+0x108>
     810:	6b39      	ldr	r1, [r7, #48]	; 0x30
     812:	4051      	eors	r1, r2
     814:	6521      	str	r1, [r4, #80]	; 0x50
     816:	2b0d      	cmp	r3, #13
     818:	d00c      	beq.n	834 <hmac_sha256_initialize+0x108>
     81a:	6b79      	ldr	r1, [r7, #52]	; 0x34
     81c:	4051      	eors	r1, r2
     81e:	6561      	str	r1, [r4, #84]	; 0x54
     820:	2b0e      	cmp	r3, #14
     822:	d007      	beq.n	834 <hmac_sha256_initialize+0x108>
     824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
     826:	4051      	eors	r1, r2
     828:	65a1      	str	r1, [r4, #88]	; 0x58
     82a:	2b10      	cmp	r3, #16
     82c:	d102      	bne.n	834 <hmac_sha256_initialize+0x108>
     82e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     830:	405a      	eors	r2, r3
     832:	65e2      	str	r2, [r4, #92]	; 0x5c
     834:	42b0      	cmp	r0, r6
     836:	d015      	beq.n	864 <hmac_sha256_initialize+0x138>
     838:	2136      	movs	r1, #54	; 0x36
     83a:	5c3a      	ldrb	r2, [r7, r0]
     83c:	1823      	adds	r3, r4, r0
     83e:	404a      	eors	r2, r1
     840:	3320      	adds	r3, #32
     842:	701a      	strb	r2, [r3, #0]
     844:	1c42      	adds	r2, r0, #1
     846:	4296      	cmp	r6, r2
     848:	dd0c      	ble.n	864 <hmac_sha256_initialize+0x138>
     84a:	18a3      	adds	r3, r4, r2
     84c:	5cba      	ldrb	r2, [r7, r2]
     84e:	3320      	adds	r3, #32
     850:	404a      	eors	r2, r1
     852:	3002      	adds	r0, #2
     854:	701a      	strb	r2, [r3, #0]
     856:	4286      	cmp	r6, r0
     858:	dd04      	ble.n	864 <hmac_sha256_initialize+0x138>
     85a:	5c3b      	ldrb	r3, [r7, r0]
     85c:	1822      	adds	r2, r4, r0
     85e:	3220      	adds	r2, #32
     860:	4059      	eors	r1, r3
     862:	7011      	strb	r1, [r2, #0]
        for (; i < 64; ++i) hmac->key[i] = 0x36;
     864:	2e40      	cmp	r6, #64	; 0x40
     866:	d100      	bne.n	86a <hmac_sha256_initialize+0x13e>
     868:	e11c      	b.n	aa4 <hmac_sha256_initialize+0x378>
     86a:	2201      	movs	r2, #1
     86c:	2e3f      	cmp	r6, #63	; 0x3f
     86e:	dc01      	bgt.n	874 <hmac_sha256_initialize+0x148>
     870:	2240      	movs	r2, #64	; 0x40
     872:	1b92      	subs	r2, r2, r6
     874:	0030      	movs	r0, r6
     876:	f241 05f5 	movw	r5, #4341	; 0x10f5
     87a:	3020      	adds	r0, #32
     87c:	1820      	adds	r0, r4, r0
     87e:	2136      	movs	r1, #54	; 0x36
     880:	f2c0 0500 	movt	r5, #0
     884:	47a8      	blx	r5
     886:	f240 0b60 	movw	fp, #96	; 0x60
     88a:	f240 0980 	movw	r9, #128	; 0x80
     88e:	f240 08e0 	movw	r8, #224	; 0xe0
     892:	f240 263d 	movw	r6, #573	; 0x23d
     896:	44a3      	add	fp, r4
     898:	44a1      	add	r9, r4
     89a:	44a0      	add	r8, r4
     89c:	f2c0 0600 	movt	r6, #0
     8a0:	e0a7      	b.n	9f2 <hmac_sha256_initialize+0x2c6>
    for (i = 0; i < 17; ++i) sha->buffer[i] = 0;
     8a2:	f240 0980 	movw	r9, #128	; 0x80
        sha256_initialize(&(hmac->sha));
     8a6:	f240 0b60 	movw	fp, #96	; 0x60
     8aa:	f241 05f5 	movw	r5, #4341	; 0x10f5
    for (i = 0; i < 17; ++i) sha->buffer[i] = 0;
     8ae:	4481      	add	r9, r0
     8b0:	f2c0 0500 	movt	r5, #0
        sha256_initialize(&(hmac->sha));
     8b4:	4483      	add	fp, r0
     8b6:	2244      	movs	r2, #68	; 0x44
     8b8:	2100      	movs	r1, #0
     8ba:	4648      	mov	r0, r9
     8bc:	47a8      	blx	r5
    sha->state[0] = 0x6a09e667;
     8be:	f24e 6367 	movw	r3, #58983	; 0xe667
     8c2:	22c0      	movs	r2, #192	; 0xc0
     8c4:	f6c6 2309 	movt	r3, #27145	; 0x6a09
     8c8:	50a3      	str	r3, [r4, r2]
    sha->state[1] = 0xbb67ae85;
     8ca:	f64a 6385 	movw	r3, #44677	; 0xae85
     8ce:	3204      	adds	r2, #4
     8d0:	f6cb 3367 	movt	r3, #47975	; 0xbb67
     8d4:	50a3      	str	r3, [r4, r2]
    sha->state[2] = 0x3c6ef372;
     8d6:	f24f 3372 	movw	r3, #62322	; 0xf372
     8da:	3204      	adds	r2, #4
     8dc:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
     8e0:	50a3      	str	r3, [r4, r2]
    sha->state[3] = 0xa54ff53a;
     8e2:	f24f 533a 	movw	r3, #62778	; 0xf53a
     8e6:	3204      	adds	r2, #4
     8e8:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     8ec:	50a3      	str	r3, [r4, r2]
    sha->state[4] = 0x510e527f;
     8ee:	f245 237f 	movw	r3, #21119	; 0x527f
     8f2:	3204      	adds	r2, #4
     8f4:	f2c5 130e 	movt	r3, #20750	; 0x510e
     8f8:	50a3      	str	r3, [r4, r2]
    sha->state[5] = 0x9b05688c;
     8fa:	f646 038c 	movw	r3, #26764	; 0x688c
     8fe:	3204      	adds	r2, #4
     900:	f6c9 3305 	movt	r3, #39685	; 0x9b05
     904:	50a3      	str	r3, [r4, r2]
    sha->state[6] = 0x1f83d9ab;
     906:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
     90a:	3204      	adds	r2, #4
     90c:	f6c1 7383 	movt	r3, #8067	; 0x1f83
     910:	50a3      	str	r3, [r4, r2]
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     912:	f240 08e0 	movw	r8, #224	; 0xe0
    sha->state[7] = 0x5be0cd19;
     916:	f64c 5319 	movw	r3, #52505	; 0xcd19
     91a:	3204      	adds	r2, #4
     91c:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     920:	44a0      	add	r8, r4
    sha->state[7] = 0x5be0cd19;
     922:	50a3      	str	r3, [r4, r2]
     924:	2100      	movs	r1, #0
     926:	3ad4      	subs	r2, #212	; 0xd4
     928:	4640      	mov	r0, r8
     92a:	47a8      	blx	r5
    uint8_t terminator[64 + 8] = { 0x80 };
     92c:	2248      	movs	r2, #72	; 0x48
     92e:	2100      	movs	r1, #0
     930:	4668      	mov	r0, sp
     932:	47a8      	blx	r5
     934:	2380      	movs	r3, #128	; 0x80
     936:	466a      	mov	r2, sp
     938:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     93a:	0032      	movs	r2, r6
     93c:	f240 263d 	movw	r6, #573	; 0x23d
     940:	0039      	movs	r1, r7
     942:	4658      	mov	r0, fp
     944:	f2c0 0600 	movt	r6, #0
     948:	47b0      	blx	r6
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     94a:	0023      	movs	r3, r4
     94c:	33e6      	adds	r3, #230	; 0xe6
     94e:	781a      	ldrb	r2, [r3, #0]
     950:	2301      	movs	r3, #1
     952:	401a      	ands	r2, r3
     954:	3301      	adds	r3, #1
     956:	1a9b      	subs	r3, r3, r2
     958:	0022      	movs	r2, r4
     95a:	32e7      	adds	r2, #231	; 0xe7
     95c:	7812      	ldrb	r2, [r2, #0]
     95e:	015b      	lsls	r3, r3, #5
     960:	08d2      	lsrs	r2, r2, #3
     962:	1a9b      	subs	r3, r3, r2
     964:	469a      	mov	sl, r3
    if (length < 9) length += 64;
     966:	2b08      	cmp	r3, #8
     968:	dc00      	bgt.n	96c <hmac_sha256_initialize+0x240>
     96a:	e085      	b.n	a78 <hmac_sha256_initialize+0x34c>
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     96c:	4650      	mov	r0, sl
     96e:	f241 03e3 	movw	r3, #4323	; 0x10e3
     972:	3808      	subs	r0, #8
     974:	2208      	movs	r2, #8
     976:	4641      	mov	r1, r8
     978:	f2c0 0300 	movt	r3, #0
     97c:	4468      	add	r0, sp
     97e:	4798      	blx	r3
    sha256_update(sha, terminator, length);
     980:	4652      	mov	r2, sl
     982:	4658      	mov	r0, fp
     984:	4669      	mov	r1, sp
     986:	47b0      	blx	r6
    for (i = 0; i < 32; ++i) {
     988:	2200      	movs	r2, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     98a:	2003      	movs	r0, #3
     98c:	0007      	movs	r7, r0
     98e:	1093      	asrs	r3, r2, #2
     990:	3318      	adds	r3, #24
     992:	009b      	lsls	r3, r3, #2
     994:	18e3      	adds	r3, r4, r3
     996:	4397      	bics	r7, r2
     998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     99a:	0011      	movs	r1, r2
     99c:	00ff      	lsls	r7, r7, #3
     99e:	40fb      	lsrs	r3, r7
     9a0:	3160      	adds	r1, #96	; 0x60
    for (i = 0; i < 32; ++i) {
     9a2:	3201      	adds	r2, #1
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     9a4:	5463      	strb	r3, [r4, r1]
    for (i = 0; i < 32; ++i) {
     9a6:	2a20      	cmp	r2, #32
     9a8:	d1f0      	bne.n	98c <hmac_sha256_initialize+0x260>
        for (i = 0; i < 32; ++i) hmac->key[i] = hmac->sha.hash[i] ^ 0x36;
     9aa:	f243 6336 	movw	r3, #13878	; 0x3636
     9ae:	0020      	movs	r0, r4
     9b0:	6e22      	ldr	r2, [r4, #96]	; 0x60
     9b2:	f2c3 6336 	movt	r3, #13878	; 0x3636
     9b6:	405a      	eors	r2, r3
     9b8:	6222      	str	r2, [r4, #32]
     9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
     9bc:	2136      	movs	r1, #54	; 0x36
     9be:	405a      	eors	r2, r3
     9c0:	6262      	str	r2, [r4, #36]	; 0x24
     9c2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
     9c4:	3040      	adds	r0, #64	; 0x40
     9c6:	405a      	eors	r2, r3
     9c8:	62a2      	str	r2, [r4, #40]	; 0x28
     9ca:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
     9cc:	f240 0a20 	movw	sl, #32
     9d0:	405a      	eors	r2, r3
     9d2:	62e2      	str	r2, [r4, #44]	; 0x2c
     9d4:	6f22      	ldr	r2, [r4, #112]	; 0x70
     9d6:	44a2      	add	sl, r4
     9d8:	405a      	eors	r2, r3
     9da:	6322      	str	r2, [r4, #48]	; 0x30
     9dc:	6f62      	ldr	r2, [r4, #116]	; 0x74
     9de:	405a      	eors	r2, r3
     9e0:	6362      	str	r2, [r4, #52]	; 0x34
     9e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
     9e4:	405a      	eors	r2, r3
     9e6:	63a2      	str	r2, [r4, #56]	; 0x38
     9e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
     9ea:	4053      	eors	r3, r2
     9ec:	63e3      	str	r3, [r4, #60]	; 0x3c
     9ee:	2220      	movs	r2, #32
     9f0:	47a8      	blx	r5
     9f2:	2244      	movs	r2, #68	; 0x44
     9f4:	2100      	movs	r1, #0
     9f6:	4648      	mov	r0, r9
     9f8:	47a8      	blx	r5
    sha->state[0] = 0x6a09e667;
     9fa:	f24e 6367 	movw	r3, #58983	; 0xe667
     9fe:	22c0      	movs	r2, #192	; 0xc0
     a00:	f6c6 2309 	movt	r3, #27145	; 0x6a09
     a04:	50a3      	str	r3, [r4, r2]
    sha->state[1] = 0xbb67ae85;
     a06:	f64a 6385 	movw	r3, #44677	; 0xae85
     a0a:	3204      	adds	r2, #4
     a0c:	f6cb 3367 	movt	r3, #47975	; 0xbb67
     a10:	50a3      	str	r3, [r4, r2]
    sha->state[2] = 0x3c6ef372;
     a12:	f24f 3372 	movw	r3, #62322	; 0xf372
     a16:	3204      	adds	r2, #4
     a18:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
     a1c:	50a3      	str	r3, [r4, r2]
    sha->state[3] = 0xa54ff53a;
     a1e:	f24f 533a 	movw	r3, #62778	; 0xf53a
     a22:	3204      	adds	r2, #4
     a24:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     a28:	50a3      	str	r3, [r4, r2]
    sha->state[4] = 0x510e527f;
     a2a:	f245 237f 	movw	r3, #21119	; 0x527f
     a2e:	3204      	adds	r2, #4
     a30:	f2c5 130e 	movt	r3, #20750	; 0x510e
     a34:	50a3      	str	r3, [r4, r2]
    sha->state[5] = 0x9b05688c;
     a36:	f646 038c 	movw	r3, #26764	; 0x688c
     a3a:	3204      	adds	r2, #4
     a3c:	f6c9 3305 	movt	r3, #39685	; 0x9b05
     a40:	50a3      	str	r3, [r4, r2]
    sha->state[6] = 0x1f83d9ab;
     a42:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
     a46:	3204      	adds	r2, #4
     a48:	f6c1 7383 	movt	r3, #8067	; 0x1f83
     a4c:	50a3      	str	r3, [r4, r2]
    sha->state[7] = 0x5be0cd19;
     a4e:	f64c 5319 	movw	r3, #52505	; 0xcd19
     a52:	3204      	adds	r2, #4
     a54:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
     a58:	50a3      	str	r3, [r4, r2]
     a5a:	2100      	movs	r1, #0
     a5c:	3ad4      	subs	r2, #212	; 0xd4
     a5e:	4640      	mov	r0, r8
     a60:	47a8      	blx	r5
    sha256_update(&(hmac->sha), hmac->key, 64);
     a62:	2240      	movs	r2, #64	; 0x40
     a64:	4651      	mov	r1, sl
     a66:	4658      	mov	r0, fp
     a68:	47b0      	blx	r6
}
     a6a:	b013      	add	sp, #76	; 0x4c
     a6c:	bc3c      	pop	{r2, r3, r4, r5}
     a6e:	4690      	mov	r8, r2
     a70:	4699      	mov	r9, r3
     a72:	46a2      	mov	sl, r4
     a74:	46ab      	mov	fp, r5
     a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (length < 9) length += 64;
     a78:	f240 0c40 	movw	ip, #64	; 0x40
     a7c:	44e2      	add	sl, ip
     a7e:	e775      	b.n	96c <hmac_sha256_initialize+0x240>
     a80:	0030      	movs	r0, r6
     a82:	4653      	mov	r3, sl
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
     a84:	2536      	movs	r5, #54	; 0x36
     a86:	3020      	adds	r0, #32
     a88:	1820      	adds	r0, r4, r0
     a8a:	783a      	ldrb	r2, [r7, #0]
     a8c:	3701      	adds	r7, #1
     a8e:	406a      	eors	r2, r5
     a90:	701a      	strb	r2, [r3, #0]
     a92:	3301      	adds	r3, #1
     a94:	4298      	cmp	r0, r3
     a96:	d1f8      	bne.n	a8a <hmac_sha256_initialize+0x35e>
     a98:	e6e4      	b.n	864 <hmac_sha256_initialize+0x138>
     a9a:	f240 0a20 	movw	sl, #32
     a9e:	2600      	movs	r6, #0
     aa0:	4482      	add	sl, r0
     aa2:	e6e5      	b.n	870 <hmac_sha256_initialize+0x144>
     aa4:	f241 05f5 	movw	r5, #4341	; 0x10f5
     aa8:	f2c0 0500 	movt	r5, #0
     aac:	e6eb      	b.n	886 <hmac_sha256_initialize+0x15a>
     aae:	46c0      	nop			; (mov r8, r8)

00000ab0 <hmac_sha256_finalize>:
                          const uint8_t *message, int length) {
     ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ab2:	4645      	mov	r5, r8
     ab4:	46de      	mov	lr, fp
     ab6:	4657      	mov	r7, sl
     ab8:	464e      	mov	r6, r9
    sha256_finalize(&(hmac->sha), message, length);
     aba:	f240 0860 	movw	r8, #96	; 0x60
                          const uint8_t *message, int length) {
     abe:	b5e0      	push	{r5, r6, r7, lr}
    uint8_t terminator[64 + 8] = { 0x80 };
     ac0:	f241 07f5 	movw	r7, #4341	; 0x10f5
                          const uint8_t *message, int length) {
     ac4:	b095      	sub	sp, #84	; 0x54
     ac6:	0004      	movs	r4, r0
     ac8:	000e      	movs	r6, r1
     aca:	0015      	movs	r5, r2
    sha256_finalize(&(hmac->sha), message, length);
     acc:	4480      	add	r8, r0
    uint8_t terminator[64 + 8] = { 0x80 };
     ace:	2248      	movs	r2, #72	; 0x48
     ad0:	2100      	movs	r1, #0
     ad2:	a802      	add	r0, sp, #8
     ad4:	f2c0 0700 	movt	r7, #0
     ad8:	47b8      	blx	r7
     ada:	2380      	movs	r3, #128	; 0x80
     adc:	aa02      	add	r2, sp, #8
     ade:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     ae0:	2d00      	cmp	r5, #0
     ae2:	d000      	beq.n	ae6 <hmac_sha256_finalize+0x36>
     ae4:	e10b      	b.n	cfe <hmac_sha256_finalize+0x24e>
     ae6:	f240 263d 	movw	r6, #573	; 0x23d
     aea:	f2c0 0600 	movt	r6, #0
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     aee:	f240 0be6 	movw	fp, #230	; 0xe6
     af2:	44a3      	add	fp, r4
     af4:	465b      	mov	r3, fp
     af6:	f240 0ce7 	movw	ip, #231	; 0xe7
     afa:	781d      	ldrb	r5, [r3, #0]
     afc:	2301      	movs	r3, #1
     afe:	44a4      	add	ip, r4
     b00:	4662      	mov	r2, ip
     b02:	402b      	ands	r3, r5
     b04:	2502      	movs	r5, #2
     b06:	9201      	str	r2, [sp, #4]
     b08:	1aeb      	subs	r3, r5, r3
     b0a:	7815      	ldrb	r5, [r2, #0]
     b0c:	015b      	lsls	r3, r3, #5
     b0e:	08ed      	lsrs	r5, r5, #3
     b10:	1b5d      	subs	r5, r3, r5
    if (length < 9) length += 64;
     b12:	2d08      	cmp	r5, #8
     b14:	dc00      	bgt.n	b18 <hmac_sha256_finalize+0x68>
     b16:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     b18:	ab02      	add	r3, sp, #8
     b1a:	f240 0ae0 	movw	sl, #224	; 0xe0
     b1e:	0028      	movs	r0, r5
     b20:	469c      	mov	ip, r3
     b22:	f241 09e3 	movw	r9, #4323	; 0x10e3
     b26:	44a2      	add	sl, r4
     b28:	3808      	subs	r0, #8
     b2a:	4460      	add	r0, ip
     b2c:	2208      	movs	r2, #8
     b2e:	4651      	mov	r1, sl
     b30:	f2c0 0900 	movt	r9, #0
     b34:	47c8      	blx	r9
    sha256_update(sha, terminator, length);
     b36:	002a      	movs	r2, r5
     b38:	4640      	mov	r0, r8
     b3a:	a902      	add	r1, sp, #8
     b3c:	47b0      	blx	r6
    for (i = 0; i < 32; ++i) {
     b3e:	2200      	movs	r2, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     b40:	2003      	movs	r0, #3
     b42:	0005      	movs	r5, r0
     b44:	1093      	asrs	r3, r2, #2
     b46:	3318      	adds	r3, #24
     b48:	009b      	lsls	r3, r3, #2
     b4a:	18e3      	adds	r3, r4, r3
     b4c:	4395      	bics	r5, r2
     b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     b50:	0011      	movs	r1, r2
     b52:	00ed      	lsls	r5, r5, #3
     b54:	40eb      	lsrs	r3, r5
     b56:	3160      	adds	r1, #96	; 0x60
    for (i = 0; i < 32; ++i) {
     b58:	3201      	adds	r2, #1
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     b5a:	5463      	strb	r3, [r4, r1]
    for (i = 0; i < 32; ++i) {
     b5c:	2a20      	cmp	r2, #32
     b5e:	d1f0      	bne.n	b42 <hmac_sha256_finalize+0x92>
    for (i = 0; i < 32; ++i) hmac->digest[i] = hmac->sha.hash[i];
     b60:	6e23      	ldr	r3, [r4, #96]	; 0x60
    for (i = 0; i < 64; ++i) hmac->key[i] ^= (0x36 ^ 0x5c);
     b62:	6a22      	ldr	r2, [r4, #32]
    for (i = 0; i < 32; ++i) hmac->digest[i] = hmac->sha.hash[i];
     b64:	6023      	str	r3, [r4, #0]
     b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
     b68:	0020      	movs	r0, r4
     b6a:	6063      	str	r3, [r4, #4]
     b6c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     b6e:	2100      	movs	r1, #0
     b70:	60a3      	str	r3, [r4, #8]
     b72:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     b74:	3080      	adds	r0, #128	; 0x80
     b76:	60e3      	str	r3, [r4, #12]
     b78:	6f23      	ldr	r3, [r4, #112]	; 0x70
     b7a:	6123      	str	r3, [r4, #16]
     b7c:	6f63      	ldr	r3, [r4, #116]	; 0x74
     b7e:	6163      	str	r3, [r4, #20]
     b80:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     b82:	61a3      	str	r3, [r4, #24]
     b84:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     b86:	61e3      	str	r3, [r4, #28]
    for (i = 0; i < 64; ++i) hmac->key[i] ^= (0x36 ^ 0x5c);
     b88:	f646 236a 	movw	r3, #27242	; 0x6a6a
     b8c:	f6c6 236a 	movt	r3, #27242	; 0x6a6a
     b90:	405a      	eors	r2, r3
     b92:	6222      	str	r2, [r4, #32]
     b94:	6a62      	ldr	r2, [r4, #36]	; 0x24
     b96:	405a      	eors	r2, r3
     b98:	6262      	str	r2, [r4, #36]	; 0x24
     b9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
     b9c:	405a      	eors	r2, r3
     b9e:	62a2      	str	r2, [r4, #40]	; 0x28
     ba0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     ba2:	405a      	eors	r2, r3
     ba4:	62e2      	str	r2, [r4, #44]	; 0x2c
     ba6:	6b22      	ldr	r2, [r4, #48]	; 0x30
     ba8:	405a      	eors	r2, r3
     baa:	6322      	str	r2, [r4, #48]	; 0x30
     bac:	6b62      	ldr	r2, [r4, #52]	; 0x34
     bae:	405a      	eors	r2, r3
     bb0:	6362      	str	r2, [r4, #52]	; 0x34
     bb2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
     bb4:	405a      	eors	r2, r3
     bb6:	63a2      	str	r2, [r4, #56]	; 0x38
     bb8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
     bba:	405a      	eors	r2, r3
     bbc:	63e2      	str	r2, [r4, #60]	; 0x3c
     bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
     bc0:	405a      	eors	r2, r3
     bc2:	6422      	str	r2, [r4, #64]	; 0x40
     bc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
     bc6:	405a      	eors	r2, r3
     bc8:	6462      	str	r2, [r4, #68]	; 0x44
     bca:	6ca2      	ldr	r2, [r4, #72]	; 0x48
     bcc:	405a      	eors	r2, r3
     bce:	64a2      	str	r2, [r4, #72]	; 0x48
     bd0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
     bd2:	405a      	eors	r2, r3
     bd4:	64e2      	str	r2, [r4, #76]	; 0x4c
     bd6:	6d22      	ldr	r2, [r4, #80]	; 0x50
     bd8:	405a      	eors	r2, r3
     bda:	6522      	str	r2, [r4, #80]	; 0x50
     bdc:	6d62      	ldr	r2, [r4, #84]	; 0x54
     bde:	405a      	eors	r2, r3
     be0:	6562      	str	r2, [r4, #84]	; 0x54
     be2:	6da2      	ldr	r2, [r4, #88]	; 0x58
     be4:	405a      	eors	r2, r3
     be6:	65a2      	str	r2, [r4, #88]	; 0x58
     be8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
     bea:	4053      	eors	r3, r2
     bec:	65e3      	str	r3, [r4, #92]	; 0x5c
     bee:	2244      	movs	r2, #68	; 0x44
     bf0:	47b8      	blx	r7
    sha->state[0] = 0x6a09e667;
     bf2:	f24e 6367 	movw	r3, #58983	; 0xe667
     bf6:	22c0      	movs	r2, #192	; 0xc0
     bf8:	f6c6 2309 	movt	r3, #27145	; 0x6a09
     bfc:	50a3      	str	r3, [r4, r2]
    sha->state[1] = 0xbb67ae85;
     bfe:	f64a 6385 	movw	r3, #44677	; 0xae85
     c02:	3204      	adds	r2, #4
     c04:	f6cb 3367 	movt	r3, #47975	; 0xbb67
     c08:	50a3      	str	r3, [r4, r2]
    sha->state[2] = 0x3c6ef372;
     c0a:	f24f 3372 	movw	r3, #62322	; 0xf372
     c0e:	3204      	adds	r2, #4
     c10:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
     c14:	50a3      	str	r3, [r4, r2]
    sha->state[3] = 0xa54ff53a;
     c16:	f24f 533a 	movw	r3, #62778	; 0xf53a
     c1a:	3204      	adds	r2, #4
     c1c:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     c20:	50a3      	str	r3, [r4, r2]
    sha->state[4] = 0x510e527f;
     c22:	f245 237f 	movw	r3, #21119	; 0x527f
     c26:	3204      	adds	r2, #4
     c28:	f2c5 130e 	movt	r3, #20750	; 0x510e
     c2c:	50a3      	str	r3, [r4, r2]
    sha->state[5] = 0x9b05688c;
     c2e:	f646 038c 	movw	r3, #26764	; 0x688c
     c32:	3204      	adds	r2, #4
     c34:	f6c9 3305 	movt	r3, #39685	; 0x9b05
     c38:	50a3      	str	r3, [r4, r2]
    sha->state[6] = 0x1f83d9ab;
     c3a:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
     c3e:	3204      	adds	r2, #4
     c40:	f6c1 7383 	movt	r3, #8067	; 0x1f83
     c44:	50a3      	str	r3, [r4, r2]
    sha->state[7] = 0x5be0cd19;
     c46:	f64c 5319 	movw	r3, #52505	; 0xcd19
     c4a:	3204      	adds	r2, #4
     c4c:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
     c50:	50a3      	str	r3, [r4, r2]
     c52:	2100      	movs	r1, #0
     c54:	3ad4      	subs	r2, #212	; 0xd4
     c56:	4650      	mov	r0, sl
     c58:	47b8      	blx	r7
    sha256_update(&(hmac->sha), hmac->key, 64);
     c5a:	0021      	movs	r1, r4
     c5c:	2240      	movs	r2, #64	; 0x40
     c5e:	3120      	adds	r1, #32
     c60:	4640      	mov	r0, r8
     c62:	47b0      	blx	r6
    uint8_t terminator[64 + 8] = { 0x80 };
     c64:	2248      	movs	r2, #72	; 0x48
     c66:	2100      	movs	r1, #0
     c68:	a802      	add	r0, sp, #8
     c6a:	47b8      	blx	r7
     c6c:	2380      	movs	r3, #128	; 0x80
     c6e:	aa02      	add	r2, sp, #8
     c70:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     c72:	0021      	movs	r1, r4
     c74:	2220      	movs	r2, #32
     c76:	4640      	mov	r0, r8
     c78:	47b0      	blx	r6
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     c7a:	465b      	mov	r3, fp
     c7c:	781d      	ldrb	r5, [r3, #0]
     c7e:	2301      	movs	r3, #1
     c80:	402b      	ands	r3, r5
     c82:	2502      	movs	r5, #2
     c84:	9a01      	ldr	r2, [sp, #4]
     c86:	1aeb      	subs	r3, r5, r3
     c88:	7815      	ldrb	r5, [r2, #0]
     c8a:	015b      	lsls	r3, r3, #5
     c8c:	08ed      	lsrs	r5, r5, #3
     c8e:	1b5d      	subs	r5, r3, r5
    if (length < 9) length += 64;
     c90:	2d08      	cmp	r5, #8
     c92:	dc00      	bgt.n	c96 <hmac_sha256_finalize+0x1e6>
     c94:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     c96:	ab02      	add	r3, sp, #8
     c98:	0028      	movs	r0, r5
     c9a:	469c      	mov	ip, r3
     c9c:	3808      	subs	r0, #8
     c9e:	4460      	add	r0, ip
     ca0:	2208      	movs	r2, #8
     ca2:	4651      	mov	r1, sl
     ca4:	47c8      	blx	r9
    sha256_update(sha, terminator, length);
     ca6:	002a      	movs	r2, r5
     ca8:	a902      	add	r1, sp, #8
     caa:	4640      	mov	r0, r8
     cac:	47b0      	blx	r6
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     cae:	2503      	movs	r5, #3
    for (i = 0; i < 32; ++i) {
     cb0:	2200      	movs	r2, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     cb2:	0029      	movs	r1, r5
     cb4:	1093      	asrs	r3, r2, #2
     cb6:	3318      	adds	r3, #24
     cb8:	009b      	lsls	r3, r3, #2
     cba:	18e3      	adds	r3, r4, r3
     cbc:	4391      	bics	r1, r2
     cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     cc0:	0010      	movs	r0, r2
     cc2:	00c9      	lsls	r1, r1, #3
     cc4:	40cb      	lsrs	r3, r1
     cc6:	3060      	adds	r0, #96	; 0x60
    for (i = 0; i < 32; ++i) {
     cc8:	3201      	adds	r2, #1
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     cca:	5423      	strb	r3, [r4, r0]
    for (i = 0; i < 32; ++i) {
     ccc:	2a20      	cmp	r2, #32
     cce:	d1f0      	bne.n	cb2 <hmac_sha256_finalize+0x202>
    for (i = 0; i < 32; ++i) hmac->digest[i] = hmac->sha.hash[i];
     cd0:	6e23      	ldr	r3, [r4, #96]	; 0x60
     cd2:	6023      	str	r3, [r4, #0]
     cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
     cd6:	6063      	str	r3, [r4, #4]
     cd8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
     cda:	60a3      	str	r3, [r4, #8]
     cdc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
     cde:	60e3      	str	r3, [r4, #12]
     ce0:	6f23      	ldr	r3, [r4, #112]	; 0x70
     ce2:	6123      	str	r3, [r4, #16]
     ce4:	6f63      	ldr	r3, [r4, #116]	; 0x74
     ce6:	6163      	str	r3, [r4, #20]
     ce8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
     cea:	61a3      	str	r3, [r4, #24]
     cec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     cee:	61e3      	str	r3, [r4, #28]
}
     cf0:	b015      	add	sp, #84	; 0x54
     cf2:	bc3c      	pop	{r2, r3, r4, r5}
     cf4:	4690      	mov	r8, r2
     cf6:	4699      	mov	r9, r3
     cf8:	46a2      	mov	sl, r4
     cfa:	46ab      	mov	fp, r5
     cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (length > 0) sha256_update(sha, message, length);
     cfe:	0031      	movs	r1, r6
     d00:	f240 263d 	movw	r6, #573	; 0x23d
     d04:	002a      	movs	r2, r5
     d06:	4640      	mov	r0, r8
     d08:	f2c0 0600 	movt	r6, #0
     d0c:	47b0      	blx	r6
     d0e:	e6ee      	b.n	aee <hmac_sha256_finalize+0x3e>

00000d10 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     d10:	e7fe      	b.n	d10 <Dummy_Handler>
     d12:	46c0      	nop			; (mov r8, r8)

00000d14 <Oak_Handler>:
        while (1) {
        }
}

void Oak_Handler(void)
{
     d14:	e7fe      	b.n	d14 <Oak_Handler>
     d16:	46c0      	nop			; (mov r8, r8)

00000d18 <Reset_Handler>:
        if (pSrc != pDest) {
     d18:	f241 2124 	movw	r1, #4644	; 0x1224
     d1c:	f240 0000 	movw	r0, #0
     d20:	f2c0 0100 	movt	r1, #0
     d24:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
     d28:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     d2a:	4281      	cmp	r1, r0
     d2c:	d00f      	beq.n	d4e <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
     d2e:	f240 0324 	movw	r3, #36	; 0x24
     d32:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d36:	4298      	cmp	r0, r3
     d38:	d209      	bcs.n	d4e <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
     d3a:	43c2      	mvns	r2, r0
     d3c:	18d2      	adds	r2, r2, r3
     d3e:	f241 03e3 	movw	r3, #4323	; 0x10e3
     d42:	0892      	lsrs	r2, r2, #2
     d44:	3201      	adds	r2, #1
     d46:	0092      	lsls	r2, r2, #2
     d48:	f2c0 0300 	movt	r3, #0
     d4c:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
     d4e:	f240 0024 	movw	r0, #36	; 0x24
     d52:	f240 0358 	movw	r3, #88	; 0x58
     d56:	f2c2 0000 	movt	r0, #8192	; 0x2000
     d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d5e:	4298      	cmp	r0, r3
     d60:	d20a      	bcs.n	d78 <Reset_Handler+0x60>
                *pDest++ = 0;
     d62:	43c2      	mvns	r2, r0
     d64:	18d2      	adds	r2, r2, r3
     d66:	f241 03f5 	movw	r3, #4341	; 0x10f5
     d6a:	0892      	lsrs	r2, r2, #2
     d6c:	3201      	adds	r2, #1
     d6e:	0092      	lsls	r2, r2, #2
     d70:	2100      	movs	r1, #0
     d72:	f2c0 0300 	movt	r3, #0
     d76:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     d78:	f240 0300 	movw	r3, #0
     d7c:	227f      	movs	r2, #127	; 0x7f
     d7e:	f2c0 0300 	movt	r3, #0
     d82:	4393      	bics	r3, r2
     d84:	f64e 5200 	movw	r2, #60672	; 0xed00
     d88:	f2ce 0200 	movt	r2, #57344	; 0xe000
     d8c:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     d8e:	f241 0375 	movw	r3, #4213	; 0x1075
     d92:	f2c0 0300 	movt	r3, #0
     d96:	4798      	blx	r3
        main();
     d98:	f640 53b9 	movw	r3, #3513	; 0xdb9
     d9c:	f2c0 0300 	movt	r3, #0
     da0:	4798      	blx	r3
     da2:	e7fe      	b.n	da2 <Reset_Handler+0x8a>

00000da4 <SystemInit>:
     da4:	f240 0300 	movw	r3, #0
     da8:	f640 1200 	movw	r2, #2304	; 0x900
     dac:	f2c2 0300 	movt	r3, #8192	; 0x2000
     db0:	f2c0 023d 	movt	r2, #61	; 0x3d
     db4:	601a      	str	r2, [r3, #0]
     db6:	4770      	bx	lr

00000db8 <main>:
int main(void)
{
	funcptr_void NonSecure_ResetHandler;
  	
	/* Initialize the SAM system */
    SystemInit();
     db8:	f640 53a5 	movw	r3, #3493	; 0xda5
{
     dbc:	b510      	push	{r4, lr}
    SystemInit();
     dbe:	f2c0 0300 	movt	r3, #0
     dc2:	4798      	blx	r3
	
	// Switch to 16MHz clock (disable prescaler)
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL_OSC16MCTRL_ENABLE | OSCCTRL_OSC16MCTRL_FSEL_16;
     dc4:	f241 0300 	movw	r3, #4096	; 0x1000
     dc8:	220e      	movs	r2, #14
     dca:	f2c4 0300 	movt	r3, #16384	; 0x4000
     dce:	761a      	strb	r2, [r3, #24]
	
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
     dd0:	f243 2300 	movw	r3, #12800	; 0x3200
     dd4:	f240 32a0 	movw	r2, #928	; 0x3a0
     dd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
     ddc:	f2c0 3243 	movt	r2, #835	; 0x343
     de0:	66da      	str	r2, [r3, #108]	; 0x6c
	NVMCTRL_SEC->NONSEC.bit.WRITE = 1;
     de2:	f245 0300 	movw	r3, #20480	; 0x5000
     de6:	2101      	movs	r1, #1
     de8:	f2c4 1300 	movt	r3, #16640	; 0x4100
     dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
     dee:	430a      	orrs	r2, r1
     df0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
     df2:	f24e 1300 	movw	r3, #57600	; 0xe100
     df6:	f240 2280 	movw	r2, #640	; 0x280
     dfa:	f2ce 0300 	movt	r3, #57344	; 0xe000
     dfe:	3103      	adds	r1, #3
     e00:	5099      	str	r1, [r3, r2]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
     e02:	3104      	adds	r1, #4
     e04:	3204      	adds	r2, #4
     e06:	5099      	str	r1, [r3, r2]

	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(TZ_START_NS)));
     e08:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
     e0c:	681b      	ldr	r3, [r3, #0]
     e0e:	f383 8888 	msr	MSP_NS, r3
  
	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((TZ_START_NS) + 4U)));
     e12:	f248 0304 	movw	r3, #32772	; 0x8004
  
	/* Start non-secure state software application */
	NonSecure_ResetHandler();
     e16:	681c      	ldr	r4, [r3, #0]
     e18:	0864      	lsrs	r4, r4, #1
     e1a:	0064      	lsls	r4, r4, #1
     e1c:	0020      	movs	r0, r4
     e1e:	0021      	movs	r1, r4
     e20:	0022      	movs	r2, r4
     e22:	0023      	movs	r3, r4
     e24:	f000 f90c 	bl	1040 <__gnu_cmse_nonsecure_call>
    while (1) 
    {
		edsign_sign(nsig, pk, sk, m, 10);
		__NOP();
    }*/
}
     e28:	2000      	movs	r0, #0
     e2a:	bd10      	pop	{r4, pc}

00000e2c <setState>:
uint8_t secure_state[32] = {0x8b, 0x38, 0x27, 0xb7, 0xba, 0xe2, 0x2f, 0x97, 0x6e, 0x2a, 0x59, 0xe9, 0x95, 0x7b, 
	0xa8, 0xb3, 0xb9, 0xce, 0xe5, 0x7a, 0x4c, 0xf9, 0x23, 0xa4, 0xda, 0x97, 0x0a, 0x8f, 0x3c, 0x1e, 0x79, 0xc5};
uint8_t exec = 0, stateUsed = 0, stateChecked = 0;

int setState(uint8_t *state, int state_size) {
	if(stateChecked != 1 || exec != 1) return 0;
     e2c:	f240 0340 	movw	r3, #64	; 0x40
int setState(uint8_t *state, int state_size) {
     e30:	b570      	push	{r4, r5, r6, lr}
	if(stateChecked != 1 || exec != 1) return 0;
     e32:	f2c2 0300 	movt	r3, #8192	; 0x2000
     e36:	7c1a      	ldrb	r2, [r3, #16]
int setState(uint8_t *state, int state_size) {
     e38:	0005      	movs	r5, r0
     e3a:	b0a2      	sub	sp, #136	; 0x88
     e3c:	000e      	movs	r6, r1
	if(stateChecked != 1 || exec != 1) return 0;
     e3e:	2000      	movs	r0, #0
     e40:	2a01      	cmp	r2, #1
     e42:	d001      	beq.n	e48 <setState+0x1c>
	sha256 hash;
	sha256_initialize(&hash);
	sha256_finalize(&hash, state, state_size);
	memcpy(secure_state, hash.hash, 32);
	return 1;
}
     e44:	b022      	add	sp, #136	; 0x88
     e46:	bd70      	pop	{r4, r5, r6, pc}
	if(stateChecked != 1 || exec != 1) return 0;
     e48:	7c5b      	ldrb	r3, [r3, #17]
     e4a:	2b01      	cmp	r3, #1
     e4c:	d1fa      	bne.n	e44 <setState+0x18>
	sha256_initialize(&hash);
     e4e:	f240 13cd 	movw	r3, #461	; 0x1cd
     e52:	4668      	mov	r0, sp
     e54:	f2c0 0300 	movt	r3, #0
     e58:	4798      	blx	r3
	sha256_finalize(&hash, state, state_size);
     e5a:	f240 6395 	movw	r3, #1685	; 0x695
     e5e:	0029      	movs	r1, r5
     e60:	4668      	mov	r0, sp
     e62:	0032      	movs	r2, r6
     e64:	f2c0 0300 	movt	r3, #0
     e68:	4798      	blx	r3
	memcpy(secure_state, hash.hash, 32);
     e6a:	f240 0204 	movw	r2, #4
     e6e:	f2c2 0200 	movt	r2, #8192	; 0x2000
     e72:	0013      	movs	r3, r2
	sha256_initialize(&hash);
     e74:	466c      	mov	r4, sp
	memcpy(secure_state, hash.hash, 32);
     e76:	cc07      	ldmia	r4!, {r0, r1, r2}
     e78:	c307      	stmia	r3!, {r0, r1, r2}
     e7a:	cc07      	ldmia	r4!, {r0, r1, r2}
     e7c:	c307      	stmia	r3!, {r0, r1, r2}
	return 1;
     e7e:	2001      	movs	r0, #1
	memcpy(secure_state, hash.hash, 32);
     e80:	cc06      	ldmia	r4!, {r1, r2}
     e82:	c306      	stmia	r3!, {r1, r2}
	return 1;
     e84:	e7de      	b.n	e44 <setState+0x18>
     e86:	46c0      	nop			; (mov r8, r8)

00000e88 <checkState>:

int checkState(uint8_t *state, int state_size) {
	sha256 hash;
	sha256_initialize(&hash);
     e88:	f240 13cd 	movw	r3, #461	; 0x1cd
int checkState(uint8_t *state, int state_size) {
     e8c:	b530      	push	{r4, r5, lr}
     e8e:	b0a3      	sub	sp, #140	; 0x8c
     e90:	0004      	movs	r4, r0
	sha256_initialize(&hash);
     e92:	f2c0 0300 	movt	r3, #0
     e96:	4668      	mov	r0, sp
int checkState(uint8_t *state, int state_size) {
     e98:	000d      	movs	r5, r1
	sha256_initialize(&hash);
     e9a:	4798      	blx	r3
	sha256_finalize(&hash, state, state_size);
     e9c:	f240 6395 	movw	r3, #1685	; 0x695
     ea0:	002a      	movs	r2, r5
     ea2:	0021      	movs	r1, r4
     ea4:	4668      	mov	r0, sp
     ea6:	f2c0 0300 	movt	r3, #0
     eaa:	4798      	blx	r3
	uint8_t cmp = (uint8_t) memcmp(secure_state, hash.hash, 32);
     eac:	f240 0004 	movw	r0, #4
     eb0:	f241 03c5 	movw	r3, #4293	; 0x10c5
     eb4:	2220      	movs	r2, #32
     eb6:	4669      	mov	r1, sp
     eb8:	f2c0 0300 	movt	r3, #0
     ebc:	f2c2 0000 	movt	r0, #8192	; 0x2000
     ec0:	4798      	blx	r3
	stateChecked = (cmp == 0);
     ec2:	f240 0340 	movw	r3, #64	; 0x40
     ec6:	b2c0      	uxtb	r0, r0
     ec8:	4242      	negs	r2, r0
     eca:	4150      	adcs	r0, r2
	stateUsed = 1;
     ecc:	2201      	movs	r2, #1
	stateChecked = (cmp == 0);
     ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ed2:	7418      	strb	r0, [r3, #16]
	stateUsed = 1;
     ed4:	749a      	strb	r2, [r3, #18]
}
     ed6:	b023      	add	sp, #140	; 0x8c
     ed8:	bd30      	pop	{r4, r5, pc}
     eda:	46c0      	nop			; (mov r8, r8)

00000edc <pox>:

void reset_flags() {
	exec = 0; stateUsed = 0; stateChecked = 0;
}
	
void pox(pox_call_t *pox_fn, uint8_t *pox_token) {
     edc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ede:	4645      	mov	r5, r8
     ee0:	464e      	mov	r6, r9
     ee2:	46de      	mov	lr, fp
     ee4:	4657      	mov	r7, sl
     ee6:	b5e0      	push	{r5, r6, r7, lr}
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
     ee8:	f240 0540 	movw	r5, #64	; 0x40
     eec:	f2c2 0500 	movt	r5, #8192	; 0x2000
     ef0:	6943      	ldr	r3, [r0, #20]
     ef2:	696a      	ldr	r2, [r5, #20]
void pox(pox_call_t *pox_fn, uint8_t *pox_token) {
     ef4:	b0df      	sub	sp, #380	; 0x17c
     ef6:	0006      	movs	r6, r0
     ef8:	4688      	mov	r8, r1
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
     efa:	4293      	cmp	r3, r2
     efc:	d944      	bls.n	f88 <pox+0xac>
	sha256_initialize(&hash);
     efe:	f240 1bcd 	movw	fp, #461	; 0x1cd
	sha256_update(&hash, pox_fn->command, pox_fn->command_size);
     f02:	f240 243d 	movw	r4, #573	; 0x23d
	sha256_initialize(&hash);
     f06:	a802      	add	r0, sp, #8
     f08:	f2c0 0b00 	movt	fp, #0
     f0c:	47d8      	blx	fp
	sha256_update(&hash, pox_fn->command, pox_fn->command_size);
     f0e:	f2c0 0400 	movt	r4, #0
     f12:	7f32      	ldrb	r2, [r6, #28]
     f14:	69b1      	ldr	r1, [r6, #24]
     f16:	a802      	add	r0, sp, #8
     f18:	47a0      	blx	r4
	sha256_update(&hash, &(pox_fn->counter), 4);
     f1a:	f240 0c14 	movw	ip, #20
     f1e:	44b4      	add	ip, r6
     f20:	4663      	mov	r3, ip
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
     f22:	f240 6a95 	movw	sl, #1685	; 0x695
	hmac_sha256_initialize(&hmac, key, 16);
     f26:	f240 792d 	movw	r9, #1837	; 0x72d
	sha256_update(&hash, &(pox_fn->counter), 4);
     f2a:	4661      	mov	r1, ip
     f2c:	2204      	movs	r2, #4
     f2e:	a802      	add	r0, sp, #8
     f30:	9300      	str	r3, [sp, #0]
     f32:	47a0      	blx	r4
	sha256_update(&hash, &(pox_fn->addr), 4);
     f34:	2204      	movs	r2, #4
     f36:	0031      	movs	r1, r6
     f38:	a802      	add	r0, sp, #8
     f3a:	47a0      	blx	r4
	hmac_sha256_initialize(&hmac, key, 16);
     f3c:	af24      	add	r7, sp, #144	; 0x90
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
     f3e:	68b2      	ldr	r2, [r6, #8]
     f40:	6871      	ldr	r1, [r6, #4]
     f42:	a802      	add	r0, sp, #8
     f44:	f2c0 0a00 	movt	sl, #0
     f48:	47d0      	blx	sl
	hmac_sha256_initialize(&hmac, key, 16);
     f4a:	f2c0 0900 	movt	r9, #0
     f4e:	2210      	movs	r2, #16
     f50:	0029      	movs	r1, r5
     f52:	0038      	movs	r0, r7
     f54:	47c8      	blx	r9
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
     f56:	f640 23b1 	movw	r3, #2737	; 0xab1
     f5a:	2220      	movs	r2, #32
     f5c:	f2c0 0300 	movt	r3, #0
     f60:	a902      	add	r1, sp, #8
     f62:	0038      	movs	r0, r7
     f64:	9301      	str	r3, [sp, #4]
     f66:	4798      	blx	r3
	for (int i = 0; i < SHA256_DIGEST_SIZE; ++i) 
     f68:	2300      	movs	r3, #0
     f6a:	4640      	mov	r0, r8
		if(pox_token[i] != hmac.digest[i]){
     f6c:	5cfa      	ldrb	r2, [r7, r3]
     f6e:	5cc1      	ldrb	r1, [r0, r3]
     f70:	4291      	cmp	r1, r2
     f72:	d106      	bne.n	f82 <pox+0xa6>
	for (int i = 0; i < SHA256_DIGEST_SIZE; ++i) 
     f74:	3301      	adds	r3, #1
     f76:	2b20      	cmp	r3, #32
     f78:	d00d      	beq.n	f96 <pox+0xba>
		if(pox_token[i] != hmac.digest[i]){
     f7a:	5cc1      	ldrb	r1, [r0, r3]
     f7c:	5cfa      	ldrb	r2, [r7, r3]
     f7e:	4291      	cmp	r1, r2
     f80:	d0f8      	beq.n	f74 <pox+0x98>
			pox_fn->output[0] = 0xff;
     f82:	22ff      	movs	r2, #255	; 0xff
     f84:	68f3      	ldr	r3, [r6, #12]
     f86:	701a      	strb	r2, [r3, #0]
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
	memcpy(pox_token, hmac.digest, SHA256_DIGEST_SIZE);
	
	reset_flags();
	__enable_irq();
}
     f88:	b05f      	add	sp, #380	; 0x17c
     f8a:	bc3c      	pop	{r2, r3, r4, r5}
     f8c:	4690      	mov	r8, r2
     f8e:	4699      	mov	r9, r3
     f90:	46a2      	mov	sl, r4
     f92:	46ab      	mov	fp, r5
     f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pox_fn->output[0] = 0xaa;
     f96:	68f2      	ldr	r2, [r6, #12]
     f98:	338a      	adds	r3, #138	; 0x8a
     f9a:	7013      	strb	r3, [r2, #0]
	my_counter = pox_fn->counter;
     f9c:	6973      	ldr	r3, [r6, #20]
     f9e:	4680      	mov	r8, r0
     fa0:	616b      	str	r3, [r5, #20]
	exec = 1; stateUsed = 0; stateChecked = 0;
     fa2:	2301      	movs	r3, #1
     fa4:	746b      	strb	r3, [r5, #17]
     fa6:	2300      	movs	r3, #0
	sha256_initialize(&hash);
     fa8:	a802      	add	r0, sp, #8
	exec = 1; stateUsed = 0; stateChecked = 0;
     faa:	74ab      	strb	r3, [r5, #18]
     fac:	742b      	strb	r3, [r5, #16]
	sha256_initialize(&hash);
     fae:	47d8      	blx	fp
	sha256_update(&hash, &(pox_fn->counter), 4);
     fb0:	9900      	ldr	r1, [sp, #0]
     fb2:	a802      	add	r0, sp, #8
     fb4:	2204      	movs	r2, #4
     fb6:	47a0      	blx	r4
	sha256_update(&hash, &(pox_fn->addr), 4);
     fb8:	0031      	movs	r1, r6
     fba:	a802      	add	r0, sp, #8
     fbc:	2204      	movs	r2, #4
     fbe:	47a0      	blx	r4
	sha256_update(&hash, pox_fn->input, pox_fn->input_size);
     fc0:	68b2      	ldr	r2, [r6, #8]
     fc2:	6871      	ldr	r1, [r6, #4]
     fc4:	a802      	add	r0, sp, #8
     fc6:	47a0      	blx	r4
	sha256_update(&hash, mem, mem_len);
     fc8:	f641 7204 	movw	r2, #7940	; 0x1f04
     fcc:	f248 0100 	movw	r1, #32768	; 0x8000
     fd0:	a802      	add	r0, sp, #8
     fd2:	47a0      	blx	r4
  __ASM volatile ("cpsid i" : : : "memory");
     fd4:	b672      	cpsid	i
	fn();
     fd6:	6834      	ldr	r4, [r6, #0]
     fd8:	0864      	lsrs	r4, r4, #1
     fda:	0064      	lsls	r4, r4, #1
     fdc:	0020      	movs	r0, r4
     fde:	0021      	movs	r1, r4
     fe0:	0022      	movs	r2, r4
     fe2:	0023      	movs	r3, r4
     fe4:	f000 f82c 	bl	1040 <__gnu_cmse_nonsecure_call>
	if(exec && stateUsed && !stateChecked) {
     fe8:	7c6b      	ldrb	r3, [r5, #17]
     fea:	b15b      	cbz	r3, 1004 <STACK_SIZE+0x4>
     fec:	7cab      	ldrb	r3, [r5, #18]
     fee:	b14b      	cbz	r3, 1004 <STACK_SIZE+0x4>
     ff0:	7c2b      	ldrb	r3, [r5, #16]
     ff2:	b93b      	cbnz	r3, 1004 <STACK_SIZE+0x4>
		pox_fn->output[0] = 0xab;
     ff4:	21ab      	movs	r1, #171	; 0xab
     ff6:	68f2      	ldr	r2, [r6, #12]
     ff8:	7011      	strb	r1, [r2, #0]
	exec = 0; stateUsed = 0; stateChecked = 0;
     ffa:	746b      	strb	r3, [r5, #17]
     ffc:	74ab      	strb	r3, [r5, #18]
     ffe:	742b      	strb	r3, [r5, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    1000:	b662      	cpsie	i
    1002:	e7c1      	b.n	f88 <pox+0xac>
	sha256_finalize(&hash, pox_fn->output, pox_fn->output_size);
    1004:	6932      	ldr	r2, [r6, #16]
    1006:	68f1      	ldr	r1, [r6, #12]
    1008:	a802      	add	r0, sp, #8
    100a:	47d0      	blx	sl
	hmac_sha256_initialize(&hmac, key, SYM_KEY_SIZE);
    100c:	f240 0140 	movw	r1, #64	; 0x40
    1010:	0038      	movs	r0, r7
    1012:	2210      	movs	r2, #16
    1014:	f2c2 0100 	movt	r1, #8192	; 0x2000
    1018:	47c8      	blx	r9
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
    101a:	a902      	add	r1, sp, #8
    101c:	0038      	movs	r0, r7
    101e:	9b01      	ldr	r3, [sp, #4]
    1020:	2220      	movs	r2, #32
    1022:	4798      	blx	r3
	memcpy(pox_token, hmac.digest, SHA256_DIGEST_SIZE);
    1024:	f241 03e3 	movw	r3, #4323	; 0x10e3
    1028:	2220      	movs	r2, #32
    102a:	0039      	movs	r1, r7
    102c:	4640      	mov	r0, r8
    102e:	f2c0 0300 	movt	r3, #0
    1032:	4798      	blx	r3
	exec = 0; stateUsed = 0; stateChecked = 0;
    1034:	2300      	movs	r3, #0
    1036:	746b      	strb	r3, [r5, #17]
    1038:	74ab      	strb	r3, [r5, #18]
    103a:	742b      	strb	r3, [r5, #16]
    103c:	b662      	cpsie	i
    103e:	e7a3      	b.n	f88 <pox+0xac>

00001040 <__gnu_cmse_nonsecure_call>:
    1040:	b5e0      	push	{r5, r6, r7, lr}
    1042:	4645      	mov	r5, r8
    1044:	464e      	mov	r6, r9
    1046:	4657      	mov	r7, sl
    1048:	b4e0      	push	{r5, r6, r7}
    104a:	465d      	mov	r5, fp
    104c:	b420      	push	{r5}
    104e:	4625      	mov	r5, r4
    1050:	4626      	mov	r6, r4
    1052:	4627      	mov	r7, r4
    1054:	46a0      	mov	r8, r4
    1056:	46a1      	mov	r9, r4
    1058:	46a2      	mov	sl, r4
    105a:	46a3      	mov	fp, r4
    105c:	46a4      	mov	ip, r4
    105e:	f384 8800 	msr	CPSR_f, r4
    1062:	47a4      	blxns	r4
    1064:	bc20      	pop	{r5}
    1066:	46ab      	mov	fp, r5
    1068:	bce0      	pop	{r5, r6, r7}
    106a:	46ba      	mov	sl, r7
    106c:	46b1      	mov	r9, r6
    106e:	46a8      	mov	r8, r5
    1070:	bde0      	pop	{r5, r6, r7, pc}
	...

00001074 <__libc_init_array>:
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	2500      	movs	r5, #0
    1078:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <__libc_init_array+0x40>)
    107a:	4c0f      	ldr	r4, [pc, #60]	; (10b8 <__libc_init_array+0x44>)
    107c:	1ae4      	subs	r4, r4, r3
    107e:	10a4      	asrs	r4, r4, #2
    1080:	42a5      	cmp	r5, r4
    1082:	d109      	bne.n	1098 <__libc_init_array+0x24>
    1084:	2500      	movs	r5, #0
    1086:	f000 f8bd 	bl	1204 <_init>
    108a:	4c0c      	ldr	r4, [pc, #48]	; (10bc <__libc_init_array+0x48>)
    108c:	4b0c      	ldr	r3, [pc, #48]	; (10c0 <__libc_init_array+0x4c>)
    108e:	1ae4      	subs	r4, r4, r3
    1090:	10a4      	asrs	r4, r4, #2
    1092:	42a5      	cmp	r5, r4
    1094:	d107      	bne.n	10a6 <__libc_init_array+0x32>
    1096:	bd70      	pop	{r4, r5, r6, pc}
    1098:	4a06      	ldr	r2, [pc, #24]	; (10b4 <__libc_init_array+0x40>)
    109a:	00ab      	lsls	r3, r5, #2
    109c:	189b      	adds	r3, r3, r2
    109e:	681b      	ldr	r3, [r3, #0]
    10a0:	4798      	blx	r3
    10a2:	3501      	adds	r5, #1
    10a4:	e7ec      	b.n	1080 <__libc_init_array+0xc>
    10a6:	4a06      	ldr	r2, [pc, #24]	; (10c0 <__libc_init_array+0x4c>)
    10a8:	00ab      	lsls	r3, r5, #2
    10aa:	189b      	adds	r3, r3, r2
    10ac:	681b      	ldr	r3, [r3, #0]
    10ae:	4798      	blx	r3
    10b0:	3501      	adds	r5, #1
    10b2:	e7ee      	b.n	1092 <__libc_init_array+0x1e>
    10b4:	00001210 	.word	0x00001210
    10b8:	00001210 	.word	0x00001210
    10bc:	00001214 	.word	0x00001214
    10c0:	00001210 	.word	0x00001210

000010c4 <memcmp>:
    10c4:	b530      	push	{r4, r5, lr}
    10c6:	2400      	movs	r4, #0
    10c8:	42a2      	cmp	r2, r4
    10ca:	d101      	bne.n	10d0 <memcmp+0xc>
    10cc:	2000      	movs	r0, #0
    10ce:	e005      	b.n	10dc <memcmp+0x18>
    10d0:	5d03      	ldrb	r3, [r0, r4]
    10d2:	1c65      	adds	r5, r4, #1
    10d4:	5d0c      	ldrb	r4, [r1, r4]
    10d6:	42a3      	cmp	r3, r4
    10d8:	d001      	beq.n	10de <memcmp+0x1a>
    10da:	1b18      	subs	r0, r3, r4
    10dc:	bd30      	pop	{r4, r5, pc}
    10de:	002c      	movs	r4, r5
    10e0:	e7f2      	b.n	10c8 <memcmp+0x4>

000010e2 <memcpy>:
    10e2:	2300      	movs	r3, #0
    10e4:	b510      	push	{r4, lr}
    10e6:	429a      	cmp	r2, r3
    10e8:	d100      	bne.n	10ec <memcpy+0xa>
    10ea:	bd10      	pop	{r4, pc}
    10ec:	5ccc      	ldrb	r4, [r1, r3]
    10ee:	54c4      	strb	r4, [r0, r3]
    10f0:	3301      	adds	r3, #1
    10f2:	e7f8      	b.n	10e6 <memcpy+0x4>

000010f4 <memset>:
    10f4:	0003      	movs	r3, r0
    10f6:	1882      	adds	r2, r0, r2
    10f8:	4293      	cmp	r3, r2
    10fa:	d100      	bne.n	10fe <memset+0xa>
    10fc:	4770      	bx	lr
    10fe:	7019      	strb	r1, [r3, #0]
    1100:	3301      	adds	r3, #1
    1102:	e7f9      	b.n	10f8 <memset+0x4>
    1104:	428a2f98 	.word	0x428a2f98
    1108:	71374491 	.word	0x71374491
    110c:	b5c0fbcf 	.word	0xb5c0fbcf
    1110:	e9b5dba5 	.word	0xe9b5dba5
    1114:	3956c25b 	.word	0x3956c25b
    1118:	59f111f1 	.word	0x59f111f1
    111c:	923f82a4 	.word	0x923f82a4
    1120:	ab1c5ed5 	.word	0xab1c5ed5
    1124:	d807aa98 	.word	0xd807aa98
    1128:	12835b01 	.word	0x12835b01
    112c:	243185be 	.word	0x243185be
    1130:	550c7dc3 	.word	0x550c7dc3
    1134:	72be5d74 	.word	0x72be5d74
    1138:	80deb1fe 	.word	0x80deb1fe
    113c:	9bdc06a7 	.word	0x9bdc06a7
    1140:	c19bf174 	.word	0xc19bf174
    1144:	e49b69c1 	.word	0xe49b69c1
    1148:	efbe4786 	.word	0xefbe4786
    114c:	0fc19dc6 	.word	0x0fc19dc6
    1150:	240ca1cc 	.word	0x240ca1cc
    1154:	2de92c6f 	.word	0x2de92c6f
    1158:	4a7484aa 	.word	0x4a7484aa
    115c:	5cb0a9dc 	.word	0x5cb0a9dc
    1160:	76f988da 	.word	0x76f988da
    1164:	983e5152 	.word	0x983e5152
    1168:	a831c66d 	.word	0xa831c66d
    116c:	b00327c8 	.word	0xb00327c8
    1170:	bf597fc7 	.word	0xbf597fc7
    1174:	c6e00bf3 	.word	0xc6e00bf3
    1178:	d5a79147 	.word	0xd5a79147
    117c:	06ca6351 	.word	0x06ca6351
    1180:	14292967 	.word	0x14292967
    1184:	27b70a85 	.word	0x27b70a85
    1188:	2e1b2138 	.word	0x2e1b2138
    118c:	4d2c6dfc 	.word	0x4d2c6dfc
    1190:	53380d13 	.word	0x53380d13
    1194:	650a7354 	.word	0x650a7354
    1198:	766a0abb 	.word	0x766a0abb
    119c:	81c2c92e 	.word	0x81c2c92e
    11a0:	92722c85 	.word	0x92722c85
    11a4:	a2bfe8a1 	.word	0xa2bfe8a1
    11a8:	a81a664b 	.word	0xa81a664b
    11ac:	c24b8b70 	.word	0xc24b8b70
    11b0:	c76c51a3 	.word	0xc76c51a3
    11b4:	d192e819 	.word	0xd192e819
    11b8:	d6990624 	.word	0xd6990624
    11bc:	f40e3585 	.word	0xf40e3585
    11c0:	106aa070 	.word	0x106aa070
    11c4:	19a4c116 	.word	0x19a4c116
    11c8:	1e376c08 	.word	0x1e376c08
    11cc:	2748774c 	.word	0x2748774c
    11d0:	34b0bcb5 	.word	0x34b0bcb5
    11d4:	391c0cb3 	.word	0x391c0cb3
    11d8:	4ed8aa4a 	.word	0x4ed8aa4a
    11dc:	5b9cca4f 	.word	0x5b9cca4f
    11e0:	682e6ff3 	.word	0x682e6ff3
    11e4:	748f82ee 	.word	0x748f82ee
    11e8:	78a5636f 	.word	0x78a5636f
    11ec:	84c87814 	.word	0x84c87814
    11f0:	8cc70208 	.word	0x8cc70208
    11f4:	90befffa 	.word	0x90befffa
    11f8:	a4506ceb 	.word	0xa4506ceb
    11fc:	bef9a3f7 	.word	0xbef9a3f7
    1200:	c67178f2 	.word	0xc67178f2

00001204 <_init>:
    1204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	bcf8      	pop	{r3, r4, r5, r6, r7}
    120a:	bc08      	pop	{r3}
    120c:	469e      	mov	lr, r3
    120e:	4770      	bx	lr

00001210 <__init_array_start>:
    1210:	0000018d 	.word	0x0000018d

00001214 <_fini>:
    1214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	bcf8      	pop	{r3, r4, r5, r6, r7}
    121a:	bc08      	pop	{r3}
    121c:	469e      	mov	lr, r3
    121e:	4770      	bx	lr

00001220 <__fini_array_start>:
    1220:	00000161 	.word	0x00000161

Disassembly of section .gnu.sgstubs:

00007c00 <secure_pox>:
    7c00:	e97f e97f 	sg
    7c04:	f7f8 ba9a 	b.w	13c <__acle_se_secure_pox>

00007c08 <secure_checkState>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 ba72 	b.w	f4 <__acle_se_secure_checkState>

00007c10 <secure_setState>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 ba80 	b.w	118 <__acle_se_secure_setState>
	...
