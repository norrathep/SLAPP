
SecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d7c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     000000ec  20000000  00006d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000034  200000ec  00006e68  000200ec  2**2
                  ALLOC
  4 .heap         00000200  20000120  00006e9c  000200ec  2**0
                  ALLOC
  5 .stack        00001000  20000320  0000709c  000200ec  2**0
                  ALLOC
  6 .userRowBlock 0000003c  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .bocorBlock   00000008  0080c000  0080c000  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .bocorcekeyBlock 00000030  0080c010  0080c010  0003c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .bocorbootkeyBlock 00000020  0080c050  0080c050  0003c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .ARM.attributes 0000002c  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY
 11 .comment      00000059  00000000  00000000  0003c09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bf9  00000000  00000000  0003c0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001315  00000000  00000000  0004fcee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011246  00000000  00000000  00051003  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000300  00000000  00000000  00062249  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e70  00000000  00000000  00062549  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015221  00000000  00000000  000643b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000053b7  00000000  00000000  000795da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000889ea  00000000  00000000  0007e991  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000c34  00000000  00000000  0010737c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
    // Not implemented
    SystemCoreClock = __SYSTEM_CLOCK;
       0:	20 13 00 20 15 63 00 00 0d 63 00 00 11 63 00 00      .. .c...c...c..
	...
      2c:	0d 63 00 00 00 00 00 00 00 00 00 00 0d 63 00 00     .c...........c..
      3c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      4c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      5c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      6c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      7c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      8c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      9c:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      ac:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      bc:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      cc:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      dc:	0d 63 00 00 0d 63 00 00 0d 63 00 00 0d 63 00 00     .c...c...c...c..
      ec:	0d 63 00 00 0d 63 00 00                             .c...c..

000000f4 <__acle_se_secure_checkState>:
#include "secure.h"    /* Header file with secure interface API */


void __attribute__((cmse_nonsecure_entry)) secure_checkState(uint8_t *state, int state_size)
{
	return checkState(state, state_size);
      f4:	f246 43a5 	movw	r3, #25765	; 0x64a5
{
      f8:	b510      	push	{r4, lr}
	return checkState(state, state_size);
      fa:	f2c0 0300 	movt	r3, #0
      fe:	4798      	blx	r3
}
     100:	2000      	movs	r0, #0
     102:	0001      	movs	r1, r0
     104:	0002      	movs	r2, r0
     106:	0003      	movs	r3, r0
     108:	4684      	mov	ip, r0
     10a:	bc10      	pop	{r4}
     10c:	bc01      	pop	{r0}
     10e:	4686      	mov	lr, r0
     110:	f380 8800 	msr	CPSR_f, r0
     114:	4704      	bxns	r0
     116:	46c0      	nop			; (mov r8, r8)

00000118 <__acle_se_secure_setState>:

void __attribute__((cmse_nonsecure_entry)) secure_setState(uint8_t *state, int state_size)
{
	return setState(state, state_size);
     118:	f246 4349 	movw	r3, #25673	; 0x6449
{
     11c:	b510      	push	{r4, lr}
	return setState(state, state_size);
     11e:	f2c0 0300 	movt	r3, #0
     122:	4798      	blx	r3
}
     124:	2000      	movs	r0, #0
     126:	0001      	movs	r1, r0
     128:	0002      	movs	r2, r0
     12a:	0003      	movs	r3, r0
     12c:	4684      	mov	ip, r0
     12e:	bc10      	pop	{r4}
     130:	bc01      	pop	{r0}
     132:	4686      	mov	lr, r0
     134:	f380 8800 	msr	CPSR_f, r0
     138:	4704      	bxns	r0
     13a:	46c0      	nop			; (mov r8, r8)

0000013c <__acle_se_secure_pox>:

void __attribute__((cmse_nonsecure_entry)) secure_pox(pox_call_t *pox_fn, uint8_t *pox_token)
{
	return pox(pox_fn, pox_token);
     13c:	f246 43f9 	movw	r3, #25849	; 0x64f9
{
     140:	b510      	push	{r4, lr}
	return pox(pox_fn, pox_token);
     142:	f2c0 0300 	movt	r3, #0
     146:	4798      	blx	r3
}
     148:	2000      	movs	r0, #0
     14a:	0001      	movs	r1, r0
     14c:	0002      	movs	r2, r0
     14e:	0003      	movs	r3, r0
     150:	4684      	mov	ip, r0
     152:	bc10      	pop	{r4}
     154:	bc01      	pop	{r0}
     156:	4686      	mov	lr, r0
     158:	f380 8800 	msr	CPSR_f, r0
     15c:	4704      	bxns	r0
     15e:	46c0      	nop			; (mov r8, r8)

00000160 <__do_global_dtors_aux>:
     160:	b510      	push	{r4, lr}
     162:	f240 04ec 	movw	r4, #236	; 0xec
     166:	f2c2 0400 	movt	r4, #8192	; 0x2000
     16a:	7823      	ldrb	r3, [r4, #0]
     16c:	b963      	cbnz	r3, 188 <__do_global_dtors_aux+0x28>
     16e:	f240 0300 	movw	r3, #0
     172:	f2c0 0300 	movt	r3, #0
     176:	b12b      	cbz	r3, 184 <__do_global_dtors_aux+0x24>
     178:	f24c 0070 	movw	r0, #49264	; 0xc070
     17c:	f2c0 0080 	movt	r0, #128	; 0x80
     180:	e000      	b.n	184 <__do_global_dtors_aux+0x24>
     182:	bf00      	nop
     184:	2301      	movs	r3, #1
     186:	7023      	strb	r3, [r4, #0]
     188:	bd10      	pop	{r4, pc}
     18a:	46c0      	nop			; (mov r8, r8)

0000018c <frame_dummy>:
     18c:	f240 0300 	movw	r3, #0
     190:	f2c0 0300 	movt	r3, #0
     194:	b510      	push	{r4, lr}
     196:	b14b      	cbz	r3, 1ac <frame_dummy+0x20>
     198:	f240 01f0 	movw	r1, #240	; 0xf0
     19c:	f24c 0070 	movw	r0, #49264	; 0xc070
     1a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
     1a4:	f2c0 0080 	movt	r0, #128	; 0x80
     1a8:	e000      	b.n	1ac <frame_dummy+0x20>
     1aa:	bf00      	nop
     1ac:	f24c 0070 	movw	r0, #49264	; 0xc070
     1b0:	f2c0 0080 	movt	r0, #128	; 0x80
     1b4:	6803      	ldr	r3, [r0, #0]
     1b6:	b903      	cbnz	r3, 1ba <frame_dummy+0x2e>
     1b8:	bd10      	pop	{r4, pc}
     1ba:	f240 0300 	movw	r3, #0
     1be:	f2c0 0300 	movt	r3, #0
     1c2:	2b00      	cmp	r3, #0
     1c4:	d0f8      	beq.n	1b8 <frame_dummy+0x2c>
     1c6:	4798      	blx	r3
     1c8:	e7f6      	b.n	1b8 <frame_dummy+0x2c>
     1ca:	46c0      	nop			; (mov r8, r8)

000001cc <sha256_initialize>:
    for (i = 0; i < 17; ++i) sha->buffer[i] = 0;
    sha->state[0] = 0x6a09e667;
    sha->state[1] = 0xbb67ae85;
    sha->state[2] = 0x3c6ef372;
    sha->state[3] = 0xa54ff53a;
    sha->state[4] = 0x510e527f;
     1cc:	b570      	push	{r4, r5, r6, lr}
    sha->state[5] = 0x9b05688c;
     1ce:	f246 7575 	movw	r5, #26485	; 0x6775
     1d2:	0004      	movs	r4, r0
     1d4:	f2c0 0500 	movt	r5, #0
     1d8:	2244      	movs	r2, #68	; 0x44
    sha->state[6] = 0x1f83d9ab;
     1da:	2100      	movs	r1, #0
     1dc:	3020      	adds	r0, #32
     1de:	47a8      	blx	r5
     1e0:	f24e 6367 	movw	r3, #58983	; 0xe667
     1e4:	f6c6 2309 	movt	r3, #27145	; 0x6a09
    sha->state[7] = 0x5be0cd19;
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     1e8:	6623      	str	r3, [r4, #96]	; 0x60
    sha->state[7] = 0x5be0cd19;
     1ea:	f64a 6385 	movw	r3, #44677	; 0xae85
     1ee:	f6cb 3367 	movt	r3, #47975	; 0xbb67
     1f2:	6663      	str	r3, [r4, #100]	; 0x64
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     1f4:	f24f 3372 	movw	r3, #62322	; 0xf372
    sha->state[7] = 0x5be0cd19;
     1f8:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
     1fc:	66a3      	str	r3, [r4, #104]	; 0x68
     1fe:	f24f 533a 	movw	r3, #62778	; 0xf53a
void sha256_finalize(sha256 *sha,
                     const uint8_t *message,
                     uint32_t length) {
    int i;
	// Changed by RKW, unsigned char becomes uint8_t
    uint8_t terminator[64 + 8] = { 0x80 };
     202:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     206:	66e3      	str	r3, [r4, #108]	; 0x6c
     208:	f245 237f 	movw	r3, #21119	; 0x527f
     20c:	f2c5 130e 	movt	r3, #20750	; 0x510e
    /* Hash the final message bytes if necessary. */
    if (length > 0) sha256_update(sha, message, length);
     210:	6723      	str	r3, [r4, #112]	; 0x70
     212:	f646 038c 	movw	r3, #26764	; 0x688c
     216:	f6c9 3305 	movt	r3, #39685	; 0x9b05
     21a:	6763      	str	r3, [r4, #116]	; 0x74
     21c:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
    /* Create a terminator that includes a stop bit, padding, and
     * the the total message length. See FIPS 180-2 for details. */
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     220:	f6c1 7383 	movt	r3, #8067	; 0x1f83
     224:	67a3      	str	r3, [r4, #120]	; 0x78
     226:	f64c 5319 	movw	r3, #52505	; 0xcd19
     22a:	0020      	movs	r0, r4
     22c:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
     230:	67e3      	str	r3, [r4, #124]	; 0x7c
     232:	2208      	movs	r2, #8
     234:	2100      	movs	r1, #0
     236:	3080      	adds	r0, #128	; 0x80
     238:	47a8      	blx	r5
    if (length < 9) length += 64;
     23a:	bd70      	pop	{r4, r5, r6, pc}

0000023c <sha256_update>:
     23c:	b5f0      	push	{r4, r5, r6, r7, lr}
     23e:	4657      	mov	r7, sl
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     240:	464e      	mov	r6, r9
     242:	4645      	mov	r5, r8
     244:	46de      	mov	lr, fp
     246:	00d3      	lsls	r3, r2, #3
     248:	469c      	mov	ip, r3
     24a:	b5e0      	push	{r5, r6, r7, lr}
     24c:	4ce8      	ldr	r4, [pc, #928]	; (5f0 <//STACK_SIZE+0x1f0>)
     24e:	23ff      	movs	r3, #255	; 0xff
     250:	44a5      	add	sp, r4
     252:	9206      	str	r2, [sp, #24]
    /* Hash the terminator to finalize the message digest. */
    sha256_update(sha, terminator, length);
     254:	4662      	mov	r2, ip
     256:	401a      	ands	r2, r3
     258:	9203      	str	r2, [sp, #12]
     25a:	4663      	mov	r3, ip
    /* Extract the message digest. */
    for (i = 0; i < 32; ++i) {
     25c:	466a      	mov	r2, sp
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     25e:	7113      	strb	r3, [r2, #4]
     260:	7913      	ldrb	r3, [r2, #4]
     262:	2702      	movs	r7, #2
     264:	469a      	mov	sl, r3
     266:	0003      	movs	r3, r0
     268:	2506      	movs	r5, #6
     26a:	2600      	movs	r6, #0
     26c:	2407      	movs	r4, #7
     26e:	f240 09ff 	movw	r9, #255	; 0xff
     272:	9105      	str	r1, [sp, #20]
     274:	3380      	adds	r3, #128	; 0x80
    for (i = 0; i < 32; ++i) {
     276:	9001      	str	r0, [sp, #4]
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     278:	2c07      	cmp	r4, #7
    for (i = 0; i < 32; ++i) {
     27a:	d100      	bne.n	27e <sha256_update+0x42>
     27c:	e1ba      	b.n	5f4 <//STACK_SIZE+0x1f4>
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
        for (; i < 64; ++i) hmac->key[i] = 0x36;
    } else {
        sha256_initialize(&(hmac->sha));
        sha256_finalize(&(hmac->sha), key, length);
        for (i = 0; i < 32; ++i) hmac->key[i] = hmac->sha.hash[i] ^ 0x36;
     27e:	2c02      	cmp	r4, #2
     280:	dd00      	ble.n	284 <sha256_update+0x48>
     282:	e1f4      	b.n	66e <//STACK_SIZE+0x26e>
     284:	2100      	movs	r1, #0
     286:	79da      	ldrb	r2, [r3, #7]
     288:	1852      	adds	r2, r2, r1
     28a:	71da      	strb	r2, [r3, #7]
     28c:	3e01      	subs	r6, #1
     28e:	3d01      	subs	r5, #1
     290:	3b01      	subs	r3, #1
     292:	3f01      	subs	r7, #1
     294:	3c01      	subs	r4, #1
     296:	d2ef      	bcs.n	278 <sha256_update+0x3c>
     298:	9b01      	ldr	r3, [sp, #4]
     29a:	469b      	mov	fp, r3
     29c:	9b06      	ldr	r3, [sp, #24]
     29e:	2b00      	cmp	r3, #0
     2a0:	d040      	beq.n	324 <sha256_update+0xe8>
     2a2:	2386      	movs	r3, #134	; 0x86
     2a4:	465a      	mov	r2, fp
     2a6:	5cd2      	ldrb	r2, [r2, r3]
     2a8:	3b85      	subs	r3, #133	; 0x85
     2aa:	4013      	ands	r3, r2
     2ac:	4659      	mov	r1, fp
     2ae:	2287      	movs	r2, #135	; 0x87
     2b0:	2603      	movs	r6, #3
     2b2:	253f      	movs	r5, #63	; 0x3f
     2b4:	5c8a      	ldrb	r2, [r1, r2]
     2b6:	9806      	ldr	r0, [sp, #24]
     2b8:	08d2      	lsrs	r2, r2, #3
     2ba:	015b      	lsls	r3, r3, #5
     2bc:	9c05      	ldr	r4, [sp, #20]
     2be:	189b      	adds	r3, r3, r2
     2c0:	1a1b      	subs	r3, r3, r0
     2c2:	7821      	ldrb	r1, [r4, #0]
     2c4:	439e      	bics	r6, r3
     2c6:	401d      	ands	r5, r3
     2c8:	00f3      	lsls	r3, r6, #3
     2ca:	4099      	lsls	r1, r3
     2cc:	000b      	movs	r3, r1
    sha->state[0] = 0x6a09e667;
     2ce:	10aa      	asrs	r2, r5, #2
     2d0:	0092      	lsls	r2, r2, #2
     2d2:	445a      	add	r2, fp
     2d4:	6a11      	ldr	r1, [r2, #32]
     2d6:	430b      	orrs	r3, r1
     2d8:	6213      	str	r3, [r2, #32]
    sha->state[1] = 0xbb67ae85;
     2da:	0002      	movs	r2, r0
     2dc:	1c63      	adds	r3, r4, #1
     2de:	9305      	str	r3, [sp, #20]
     2e0:	43d3      	mvns	r3, r2
     2e2:	3801      	subs	r0, #1
     2e4:	1c6c      	adds	r4, r5, #1
    sha->state[2] = 0x3c6ef372;
     2e6:	1b5d      	subs	r5, r3, r5
     2e8:	b1c8      	cbz	r0, 31e <sha256_update+0xe2>
     2ea:	465e      	mov	r6, fp
     2ec:	46ac      	mov	ip, r5
     2ee:	9905      	ldr	r1, [sp, #20]
     2f0:	2c40      	cmp	r4, #64	; 0x40
    sha->state[3] = 0xa54ff53a;
     2f2:	d020      	beq.n	336 <sha256_update+0xfa>
     2f4:	4662      	mov	r2, ip
     2f6:	2503      	movs	r5, #3
     2f8:	1812      	adds	r2, r2, r0
     2fa:	780f      	ldrb	r7, [r1, #0]
     2fc:	402a      	ands	r2, r5
    sha->state[4] = 0x510e527f;
     2fe:	00d2      	lsls	r2, r2, #3
     300:	4097      	lsls	r7, r2
     302:	003a      	movs	r2, r7
     304:	10a3      	asrs	r3, r4, #2
     306:	009b      	lsls	r3, r3, #2
     308:	18f3      	adds	r3, r6, r3
    sha->state[5] = 0x9b05688c;
     30a:	6a1d      	ldr	r5, [r3, #32]
     30c:	3801      	subs	r0, #1
     30e:	432a      	orrs	r2, r5
     310:	621a      	str	r2, [r3, #32]
     312:	3101      	adds	r1, #1
     314:	3401      	adds	r4, #1
    sha->state[6] = 0x1f83d9ab;
     316:	2800      	cmp	r0, #0
     318:	d1ea      	bne.n	2f0 <sha256_update+0xb4>
     31a:	46b3      	mov	fp, r6
     31c:	9105      	str	r1, [sp, #20]
     31e:	2c40      	cmp	r4, #64	; 0x40
     320:	d100      	bne.n	324 <sha256_update+0xe8>
    sha->state[7] = 0x5be0cd19;
     322:	e161      	b.n	5e8 <//STACK_SIZE+0x1e8>
     324:	f240 2344 	movw	r3, #580	; 0x244
     328:	449d      	add	sp, r3
     32a:	bc3c      	pop	{r2, r3, r4, r5}
     32c:	4690      	mov	r8, r2
     32e:	4699      	mov	r9, r3
     330:	46a2      	mov	sl, r4
     332:	46ab      	mov	fp, r5
     334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (; i < 64; ++i) hmac->key[i] = 0x36;
    }
    /* Initialize the inner hash with the key block. */
    sha256_initialize(&(hmac->sha));
    sha256_update(&(hmac->sha), hmac->key, 64);
     336:	46b3      	mov	fp, r6
     338:	9105      	str	r1, [sp, #20]
     33a:	9006      	str	r0, [sp, #24]
     33c:	f646 01d8 	movw	r1, #26840	; 0x68d8
}
     340:	f246 733f 	movw	r3, #26431	; 0x673f
     344:	f240 1200 	movw	r2, #256	; 0x100
     348:	f2c0 0100 	movt	r1, #0
    if (length < 9) length += 64;
     34c:	f2c0 0300 	movt	r3, #0
     350:	a810      	add	r0, sp, #64	; 0x40
     352:	4798      	blx	r3
     354:	2200      	movs	r2, #0
     356:	465b      	mov	r3, fp
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
     358:	6a1e      	ldr	r6, [r3, #32]
     35a:	621a      	str	r2, [r3, #32]
     35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     35e:	9650      	str	r6, [sp, #320]	; 0x140
     360:	9351      	str	r3, [sp, #324]	; 0x144
     362:	465b      	mov	r3, fp
     364:	625a      	str	r2, [r3, #36]	; 0x24
     366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     368:	4659      	mov	r1, fp
     36a:	9352      	str	r3, [sp, #328]	; 0x148
     36c:	465b      	mov	r3, fp
     36e:	629a      	str	r2, [r3, #40]	; 0x28
     370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     372:	2710      	movs	r7, #16
     374:	9353      	str	r3, [sp, #332]	; 0x14c
     376:	465b      	mov	r3, fp
     378:	62da      	str	r2, [r3, #44]	; 0x2c
     37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     37c:	f240 0807 	movw	r8, #7
     380:	9354      	str	r3, [sp, #336]	; 0x150
                sha->buffer[t] = 0;
     382:	465b      	mov	r3, fp
     384:	631a      	str	r2, [r3, #48]	; 0x30
                w[t] = sha->buffer[t];
     386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     388:	f240 0c12 	movw	ip, #18
                w[t] = sha->buffer[t];
     38c:	9355      	str	r3, [sp, #340]	; 0x154
                sha->buffer[t] = 0;
     38e:	465b      	mov	r3, fp
     390:	635a      	str	r2, [r3, #52]	; 0x34
                w[t] = sha->buffer[t];
     392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     394:	f240 0a11 	movw	sl, #17
                w[t] = sha->buffer[t];
     398:	9356      	str	r3, [sp, #344]	; 0x158
                sha->buffer[t] = 0;
     39a:	465b      	mov	r3, fp
     39c:	639a      	str	r2, [r3, #56]	; 0x38
                w[t] = sha->buffer[t];
     39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
     3a0:	ad51      	add	r5, sp, #324	; 0x144
     3a2:	9357      	str	r3, [sp, #348]	; 0x15c
                sha->buffer[t] = 0;
     3a4:	465b      	mov	r3, fp
     3a6:	63da      	str	r2, [r3, #60]	; 0x3c
                w[t] = sha->buffer[t];
     3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     3aa:	9358      	str	r3, [sp, #352]	; 0x160
                sha->buffer[t] = 0;
     3ac:	465b      	mov	r3, fp
     3ae:	641a      	str	r2, [r3, #64]	; 0x40
                w[t] = sha->buffer[t];
     3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     3b2:	9359      	str	r3, [sp, #356]	; 0x164
                sha->buffer[t] = 0;
     3b4:	465b      	mov	r3, fp
     3b6:	645a      	str	r2, [r3, #68]	; 0x44
                w[t] = sha->buffer[t];
     3b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     3ba:	935a      	str	r3, [sp, #360]	; 0x168
                sha->buffer[t] = 0;
     3bc:	465b      	mov	r3, fp
     3be:	649a      	str	r2, [r3, #72]	; 0x48
                w[t] = sha->buffer[t];
     3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3c2:	9701      	str	r7, [sp, #4]
                w[t] = sha->buffer[t];
     3c4:	935b      	str	r3, [sp, #364]	; 0x16c
                sha->buffer[t] = 0;
     3c6:	465b      	mov	r3, fp
     3c8:	64da      	str	r2, [r3, #76]	; 0x4c
                w[t] = sha->buffer[t];
     3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     3cc:	935c      	str	r3, [sp, #368]	; 0x170
                sha->buffer[t] = 0;
     3ce:	465b      	mov	r3, fp
     3d0:	651a      	str	r2, [r3, #80]	; 0x50
                w[t] = sha->buffer[t];
     3d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     3d4:	935d      	str	r3, [sp, #372]	; 0x174
                sha->buffer[t] = 0;
     3d6:	465b      	mov	r3, fp
                w[t] = sha->buffer[t];
     3d8:	6d9c      	ldr	r4, [r3, #88]	; 0x58
                sha->buffer[t] = 0;
     3da:	655a      	str	r2, [r3, #84]	; 0x54
     3dc:	659a      	str	r2, [r3, #88]	; 0x58
                w[t] = sha->buffer[t];
     3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     3e0:	945e      	str	r4, [sp, #376]	; 0x178
     3e2:	935f      	str	r3, [sp, #380]	; 0x17c
                sha->buffer[t] = 0;
     3e4:	65ca      	str	r2, [r1, #92]	; 0x5c
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3e6:	682a      	ldr	r2, [r5, #0]
     3e8:	4640      	mov	r0, r8
     3ea:	0011      	movs	r1, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3ec:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3ee:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3f0:	0010      	movs	r0, r2
     3f2:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3f4:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3f6:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3f8:	0020      	movs	r0, r4
     3fa:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3fc:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3fe:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     400:	0020      	movs	r0, r4
     402:	41f8      	rors	r0, r7
     404:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     406:	0aa4      	lsrs	r4, r4, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     408:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     40a:	4044      	eors	r4, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     40c:	6a28      	ldr	r0, [r5, #32]
     40e:	19a4      	adds	r4, r4, r6
     410:	4681      	mov	r9, r0
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     412:	686e      	ldr	r6, [r5, #4]
                s0 ^= (w[t - 15] >> 3);
     414:	08d0      	lsrs	r0, r2, #3
     416:	4041      	eors	r1, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     418:	444c      	add	r4, r9
     41a:	1864      	adds	r4, r4, r1
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     41c:	4640      	mov	r0, r8
     41e:	0031      	movs	r1, r6
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     420:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     422:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     424:	0030      	movs	r0, r6
     426:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     428:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     42a:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     42c:	0018      	movs	r0, r3
     42e:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     430:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     432:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     434:	0018      	movs	r0, r3
     436:	41f8      	rors	r0, r7
     438:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     43a:	0a9b      	lsrs	r3, r3, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     43c:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     43e:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     440:	6a68      	ldr	r0, [r5, #36]	; 0x24
     442:	63ec      	str	r4, [r5, #60]	; 0x3c
     444:	4681      	mov	r9, r0
     446:	444b      	add	r3, r9
     448:	189b      	adds	r3, r3, r2
                s0 ^= (w[t - 15] >> 3);
     44a:	08f2      	lsrs	r2, r6, #3
     44c:	4051      	eors	r1, r2
     44e:	9a01      	ldr	r2, [sp, #4]
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     450:	185b      	adds	r3, r3, r1
     452:	3202      	adds	r2, #2
     454:	642b      	str	r3, [r5, #64]	; 0x40
     456:	9201      	str	r2, [sp, #4]
     458:	3508      	adds	r5, #8
     45a:	2a3e      	cmp	r2, #62	; 0x3e
     45c:	d1c3      	bne.n	3e6 <sha256_update+0x1aa>
     45e:	ab80      	add	r3, sp, #512	; 0x200
     460:	4699      	mov	r9, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     462:	465b      	mov	r3, fp
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     464:	f240 0807 	movw	r8, #7
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     468:	f240 0c12 	movw	ip, #18
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     46c:	2711      	movs	r7, #17
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     46e:	2613      	movs	r6, #19
     470:	ad7e      	add	r5, sp, #504	; 0x1f8
     472:	9301      	str	r3, [sp, #4]
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     474:	686a      	ldr	r2, [r5, #4]
     476:	4641      	mov	r1, r8
     478:	0013      	movs	r3, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     47a:	0014      	movs	r4, r2
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     47c:	41cb      	rors	r3, r1
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     47e:	4661      	mov	r1, ip
     480:	41cc      	rors	r4, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     482:	6ba9      	ldr	r1, [r5, #56]	; 0x38
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     484:	405c      	eors	r4, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     486:	0008      	movs	r0, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     488:	000b      	movs	r3, r1
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     48a:	41f0      	rors	r0, r6
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     48c:	41fb      	rors	r3, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     48e:	4058      	eors	r0, r3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     490:	682b      	ldr	r3, [r5, #0]
                s0 ^= (w[t - 15] >> 3);
     492:	08d2      	lsrs	r2, r2, #3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     494:	469b      	mov	fp, r3
     496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                s0 ^= (w[t - 15] >> 3);
     498:	4062      	eors	r2, r4
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     49a:	469a      	mov	sl, r3
     49c:	44d3      	add	fp, sl
     49e:	465b      	mov	r3, fp
     4a0:	189a      	adds	r2, r3, r2
                s1 ^= (w[t - 2] >> 10);
     4a2:	0a8b      	lsrs	r3, r1, #10
     4a4:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     4a6:	18d3      	adds	r3, r2, r3
     4a8:	642b      	str	r3, [r5, #64]	; 0x40
     4aa:	3504      	adds	r5, #4
            for (t = 16; t < 64; ++t) {
     4ac:	45a9      	cmp	r9, r5
     4ae:	d1e1      	bne.n	474 <//STACK_SIZE+0x74>
     4b0:	9b01      	ldr	r3, [sp, #4]
     4b2:	469b      	mov	fp, r3
            a = sha->state[0];
     4b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     4b6:	001e      	movs	r6, r3
     4b8:	9307      	str	r3, [sp, #28]
            b = sha->state[1];
     4ba:	465b      	mov	r3, fp
     4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     4be:	001a      	movs	r2, r3
     4c0:	9308      	str	r3, [sp, #32]
            c = sha->state[2];
     4c2:	465b      	mov	r3, fp
     4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     4c6:	0019      	movs	r1, r3
     4c8:	9309      	str	r3, [sp, #36]	; 0x24
            d = sha->state[3];
     4ca:	465b      	mov	r3, fp
     4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     4ce:	0018      	movs	r0, r3
     4d0:	930a      	str	r3, [sp, #40]	; 0x28
            e = sha->state[4];
     4d2:	465b      	mov	r3, fp
     4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     4d6:	001d      	movs	r5, r3
     4d8:	930b      	str	r3, [sp, #44]	; 0x2c
            f = sha->state[5];
     4da:	465b      	mov	r3, fp
     4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     4de:	001c      	movs	r4, r3
     4e0:	930c      	str	r3, [sp, #48]	; 0x30
            g = sha->state[6];
     4e2:	465b      	mov	r3, fp
     4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
            f = sha->state[5];
     4e6:	46a2      	mov	sl, r4
            g = sha->state[6];
     4e8:	001f      	movs	r7, r3
     4ea:	930d      	str	r3, [sp, #52]	; 0x34
            h = sha->state[7];
     4ec:	465b      	mov	r3, fp
     4ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            d = sha->state[3];
     4f0:	0004      	movs	r4, r0
            h = sha->state[7];
     4f2:	930e      	str	r3, [sp, #56]	; 0x38
     4f4:	469c      	mov	ip, r3
     4f6:	465b      	mov	r3, fp
            g = sha->state[6];
     4f8:	46b9      	mov	r9, r7
     4fa:	930f      	str	r3, [sp, #60]	; 0x3c
            h = sha->state[7];
     4fc:	2700      	movs	r7, #0
     4fe:	0010      	movs	r0, r2
     500:	46a0      	mov	r8, r4
     502:	000b      	movs	r3, r1
     504:	e005      	b.n	512 <//STACK_SIZE+0x112>
     506:	46d1      	mov	r9, sl
     508:	0003      	movs	r3, r0
     50a:	46aa      	mov	sl, r5
     50c:	0030      	movs	r0, r6
                e = d + t1;
     50e:	000d      	movs	r5, r1
                a = t1 + t2;
     510:	0016      	movs	r6, r2
                e0 ^= (a >> 13 | a << 19);
     512:	220d      	movs	r2, #13
     514:	0034      	movs	r4, r6
     516:	2102      	movs	r1, #2
     518:	41d4      	rors	r4, r2
     51a:	0032      	movs	r2, r6
     51c:	41ca      	rors	r2, r1
                e1 ^= (e >> 11 | e << 21);
     51e:	0029      	movs	r1, r5
                e0 ^= (a >> 13 | a << 19);
     520:	4054      	eors	r4, r2
                e1 ^= (e >> 11 | e << 21);
     522:	220b      	movs	r2, #11
                e0 ^= (a >> 13 | a << 19);
     524:	9401      	str	r4, [sp, #4]
                e1 ^= (e >> 11 | e << 21);
     526:	41d1      	rors	r1, r2
     528:	2406      	movs	r4, #6
     52a:	002a      	movs	r2, r5
     52c:	41e2      	rors	r2, r4
     52e:	4051      	eors	r1, r2
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     530:	aa10      	add	r2, sp, #64	; 0x40
     532:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 11 | e << 21);
     534:	9102      	str	r1, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     536:	9203      	str	r2, [sp, #12]
     538:	aa50      	add	r2, sp, #320	; 0x140
     53a:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 25 | e << 7);
     53c:	3413      	adds	r4, #19
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     53e:	9204      	str	r2, [sp, #16]
     540:	9904      	ldr	r1, [sp, #16]
     542:	9a03      	ldr	r2, [sp, #12]
     544:	468b      	mov	fp, r1
                e1 ^= (e >> 25 | e << 7);
     546:	0029      	movs	r1, r5
     548:	41e1      	rors	r1, r4
     54a:	9c02      	ldr	r4, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     54c:	445a      	add	r2, fp
                e1 ^= (e >> 25 | e << 7);
     54e:	4061      	eors	r1, r4
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     550:	1852      	adds	r2, r2, r1
     552:	4651      	mov	r1, sl
     554:	4029      	ands	r1, r5
     556:	468b      	mov	fp, r1
     558:	4649      	mov	r1, r9
     55a:	465c      	mov	r4, fp
     55c:	43a9      	bics	r1, r5
     55e:	4061      	eors	r1, r4
     560:	1852      	adds	r2, r2, r1
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     562:	0019      	movs	r1, r3
     564:	001c      	movs	r4, r3
     566:	4041      	eors	r1, r0
     568:	4004      	ands	r4, r0
     56a:	4031      	ands	r1, r6
     56c:	4061      	eors	r1, r4
     56e:	468b      	mov	fp, r1
                e0 ^= (a >> 22 | a << 10);
     570:	0034      	movs	r4, r6
     572:	2116      	movs	r1, #22
     574:	41cc      	rors	r4, r1
     576:	0021      	movs	r1, r4
     578:	9c01      	ldr	r4, [sp, #4]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     57a:	4462      	add	r2, ip
                e0 ^= (a >> 22 | a << 10);
     57c:	404c      	eors	r4, r1
                e = d + t1;
     57e:	4641      	mov	r1, r8
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     580:	445c      	add	r4, fp
                e = d + t1;
     582:	1851      	adds	r1, r2, r1
                a = t1 + t2;
     584:	1912      	adds	r2, r2, r4
            for (t = 0; t < 64; ++t) {
     586:	f240 1400 	movw	r4, #256	; 0x100
     58a:	3704      	adds	r7, #4
     58c:	4698      	mov	r8, r3
     58e:	46cc      	mov	ip, r9
     590:	42a7      	cmp	r7, r4
     592:	d1b8      	bne.n	506 <//STACK_SIZE+0x106>
     594:	000c      	movs	r4, r1
     596:	0019      	movs	r1, r3
     598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     59a:	4680      	mov	r8, r0
     59c:	469b      	mov	fp, r3
            sha->state[0] = (sha->state[0] + a) & 0xffffffffU;
     59e:	9b07      	ldr	r3, [sp, #28]
     5a0:	0010      	movs	r0, r2
     5a2:	469c      	mov	ip, r3
     5a4:	465b      	mov	r3, fp
     5a6:	4460      	add	r0, ip
     5a8:	6618      	str	r0, [r3, #96]	; 0x60
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     5aa:	9b08      	ldr	r3, [sp, #32]
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     5ac:	465a      	mov	r2, fp
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     5ae:	469c      	mov	ip, r3
     5b0:	465b      	mov	r3, fp
     5b2:	4466      	add	r6, ip
     5b4:	665e      	str	r6, [r3, #100]	; 0x64
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
     5b8:	4443      	add	r3, r8
     5ba:	6693      	str	r3, [r2, #104]	; 0x68
            sha->state[3] = (sha->state[3] + d) & 0xffffffffU;
     5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     5be:	185b      	adds	r3, r3, r1
     5c0:	66d3      	str	r3, [r2, #108]	; 0x6c
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     5c4:	469c      	mov	ip, r3
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5c8:	4464      	add	r4, ip
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5ca:	469c      	mov	ip, r3
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5ce:	4465      	add	r5, ip
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     5d0:	4453      	add	r3, sl
     5d2:	6793      	str	r3, [r2, #120]	; 0x78
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     5d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     5d6:	6714      	str	r4, [r2, #112]	; 0x70
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     5d8:	444b      	add	r3, r9
     5da:	67d3      	str	r3, [r2, #124]	; 0x7c
    while (length > 0) {
     5dc:	9b06      	ldr	r3, [sp, #24]
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     5de:	6755      	str	r5, [r2, #116]	; 0x74
    while (length > 0) {
     5e0:	2b00      	cmp	r3, #0
     5e2:	d000      	beq.n	5e6 <//STACK_SIZE+0x1e6>
     5e4:	e65d      	b.n	2a2 <sha256_update+0x66>
     5e6:	e69d      	b.n	324 <sha256_update+0xe8>
     5e8:	2300      	movs	r3, #0
     5ea:	9306      	str	r3, [sp, #24]
     5ec:	e6a6      	b.n	33c <sha256_update+0x100>
     5ee:	46c0      	nop			; (mov r8, r8)
     5f0:	fffffdbc 	.word	0xfffffdbc
			bits = length << 3;
     5f4:	4660      	mov	r0, ip
        if (sha->length[i] + bits > 0xff) {
     5f6:	79da      	ldrb	r2, [r3, #7]
     5f8:	9903      	ldr	r1, [sp, #12]
			bits = length << 3;
     5fa:	9002      	str	r0, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     5fc:	1851      	adds	r1, r2, r1
     5fe:	29ff      	cmp	r1, #255	; 0xff
     600:	dd33      	ble.n	66a <//STACK_SIZE+0x26a>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     602:	9a01      	ldr	r2, [sp, #4]
     604:	1952      	adds	r2, r2, r5
     606:	3280      	adds	r2, #128	; 0x80
     608:	7811      	ldrb	r1, [r2, #0]
     60a:	1c48      	adds	r0, r1, #1
     60c:	7010      	strb	r0, [r2, #0]
     60e:	29ff      	cmp	r1, #255	; 0xff
     610:	d127      	bne.n	662 <//STACK_SIZE+0x262>
     612:	2c02      	cmp	r4, #2
     614:	d425      	bmi.n	662 <//STACK_SIZE+0x262>
     616:	795a      	ldrb	r2, [r3, #5]
     618:	1c51      	adds	r1, r2, #1
     61a:	7159      	strb	r1, [r3, #5]
     61c:	2aff      	cmp	r2, #255	; 0xff
     61e:	d120      	bne.n	662 <//STACK_SIZE+0x262>
     620:	2c03      	cmp	r4, #3
     622:	d41e      	bmi.n	662 <//STACK_SIZE+0x262>
     624:	791a      	ldrb	r2, [r3, #4]
     626:	1c51      	adds	r1, r2, #1
     628:	7119      	strb	r1, [r3, #4]
     62a:	2aff      	cmp	r2, #255	; 0xff
     62c:	d119      	bne.n	662 <//STACK_SIZE+0x262>
     62e:	2c04      	cmp	r4, #4
     630:	d417      	bmi.n	662 <//STACK_SIZE+0x262>
     632:	78da      	ldrb	r2, [r3, #3]
     634:	1c51      	adds	r1, r2, #1
     636:	70d9      	strb	r1, [r3, #3]
     638:	2aff      	cmp	r2, #255	; 0xff
     63a:	d112      	bne.n	662 <//STACK_SIZE+0x262>
     63c:	1c7a      	adds	r2, r7, #1
     63e:	d010      	beq.n	662 <//STACK_SIZE+0x262>
     640:	789a      	ldrb	r2, [r3, #2]
     642:	1c51      	adds	r1, r2, #1
     644:	7099      	strb	r1, [r3, #2]
     646:	2aff      	cmp	r2, #255	; 0xff
     648:	d10b      	bne.n	662 <//STACK_SIZE+0x262>
     64a:	2c06      	cmp	r4, #6
     64c:	d409      	bmi.n	662 <//STACK_SIZE+0x262>
     64e:	785a      	ldrb	r2, [r3, #1]
     650:	1c51      	adds	r1, r2, #1
     652:	7059      	strb	r1, [r3, #1]
     654:	2aff      	cmp	r2, #255	; 0xff
     656:	d104      	bne.n	662 <//STACK_SIZE+0x262>
     658:	1c72      	adds	r2, r6, #1
     65a:	d002      	beq.n	662 <//STACK_SIZE+0x262>
     65c:	781a      	ldrb	r2, [r3, #0]
     65e:	1c51      	adds	r1, r2, #1
     660:	7019      	strb	r1, [r3, #0]
     662:	4669      	mov	r1, sp
     664:	79da      	ldrb	r2, [r3, #7]
     666:	7a09      	ldrb	r1, [r1, #8]
     668:	e60e      	b.n	288 <sha256_update+0x4c>
        if (sha->length[i] + bits > 0xff) {
     66a:	4651      	mov	r1, sl
     66c:	e60c      	b.n	288 <sha256_update+0x4c>
			bits = length >> (53 - 8 * i);
     66e:	00e2      	lsls	r2, r4, #3
     670:	4252      	negs	r2, r2
     672:	9906      	ldr	r1, [sp, #24]
     674:	3235      	adds	r2, #53	; 0x35
     676:	40d1      	lsrs	r1, r2
		bits &= 0xff;
     678:	4648      	mov	r0, r9
     67a:	4008      	ands	r0, r1
     67c:	4683      	mov	fp, r0
        if (sha->length[i] + bits > 0xff) {
     67e:	79da      	ldrb	r2, [r3, #7]
			bits = length >> (53 - 8 * i);
     680:	9102      	str	r1, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     682:	4493      	add	fp, r2
     684:	4658      	mov	r0, fp
     686:	28ff      	cmp	r0, #255	; 0xff
     688:	dd01      	ble.n	68e <//STACK_SIZE+0x28e>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     68a:	1c68      	adds	r0, r5, #1
     68c:	d1b9      	bne.n	602 <//STACK_SIZE+0x202>
     68e:	b2c9      	uxtb	r1, r1
     690:	e5fa      	b.n	288 <sha256_update+0x4c>
     692:	46c0      	nop			; (mov r8, r8)

00000694 <sha256_finalize>:
    uint8_t terminator[64 + 8] = { 0x80 };
     694:	f246 7375 	movw	r3, #26485	; 0x6775
                     uint32_t length) {
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	b092      	sub	sp, #72	; 0x48
    uint8_t terminator[64 + 8] = { 0x80 };
     69c:	f2c0 0300 	movt	r3, #0
                     uint32_t length) {
     6a0:	0004      	movs	r4, r0
     6a2:	000e      	movs	r6, r1
     6a4:	0015      	movs	r5, r2
    uint8_t terminator[64 + 8] = { 0x80 };
     6a6:	2100      	movs	r1, #0
     6a8:	2248      	movs	r2, #72	; 0x48
     6aa:	4668      	mov	r0, sp
     6ac:	4798      	blx	r3
     6ae:	2380      	movs	r3, #128	; 0x80
     6b0:	466a      	mov	r2, sp
     6b2:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     6b4:	2d00      	cmp	r5, #0
     6b6:	d130      	bne.n	71a <sha256_finalize+0x86>
     6b8:	f240 263d 	movw	r6, #573	; 0x23d
     6bc:	f2c0 0600 	movt	r6, #0
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     6c0:	2386      	movs	r3, #134	; 0x86
     6c2:	5ce5      	ldrb	r5, [r4, r3]
     6c4:	3b85      	subs	r3, #133	; 0x85
     6c6:	402b      	ands	r3, r5
     6c8:	2287      	movs	r2, #135	; 0x87
     6ca:	2502      	movs	r5, #2
     6cc:	1aeb      	subs	r3, r5, r3
     6ce:	5ca5      	ldrb	r5, [r4, r2]
     6d0:	015b      	lsls	r3, r3, #5
     6d2:	08ed      	lsrs	r5, r5, #3
     6d4:	1b5d      	subs	r5, r3, r5
    if (length < 9) length += 64;
     6d6:	2d08      	cmp	r5, #8
     6d8:	dc00      	bgt.n	6dc <sha256_finalize+0x48>
     6da:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     6dc:	0028      	movs	r0, r5
     6de:	0021      	movs	r1, r4
     6e0:	f246 733f 	movw	r3, #26431	; 0x673f
     6e4:	3808      	subs	r0, #8
     6e6:	f2c0 0300 	movt	r3, #0
     6ea:	2208      	movs	r2, #8
     6ec:	3180      	adds	r1, #128	; 0x80
     6ee:	4468      	add	r0, sp
     6f0:	4798      	blx	r3
    sha256_update(sha, terminator, length);
     6f2:	0020      	movs	r0, r4
     6f4:	002a      	movs	r2, r5
     6f6:	4669      	mov	r1, sp
     6f8:	47b0      	blx	r6
    for (i = 0; i < 32; ++i) {
     6fa:	2300      	movs	r3, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     6fc:	2003      	movs	r0, #3
     6fe:	0001      	movs	r1, r0
     700:	109a      	asrs	r2, r3, #2
     702:	3218      	adds	r2, #24
     704:	0092      	lsls	r2, r2, #2
     706:	4399      	bics	r1, r3
     708:	5912      	ldr	r2, [r2, r4]
     70a:	00c9      	lsls	r1, r1, #3
     70c:	40ca      	lsrs	r2, r1
     70e:	54e2      	strb	r2, [r4, r3]
    for (i = 0; i < 32; ++i) {
     710:	3301      	adds	r3, #1
     712:	2b20      	cmp	r3, #32
     714:	d1f3      	bne.n	6fe <sha256_finalize+0x6a>
}
     716:	b012      	add	sp, #72	; 0x48
     718:	bd70      	pop	{r4, r5, r6, pc}
    if (length > 0) sha256_update(sha, message, length);
     71a:	0031      	movs	r1, r6
     71c:	f240 263d 	movw	r6, #573	; 0x23d
     720:	002a      	movs	r2, r5
     722:	0020      	movs	r0, r4
     724:	f2c0 0600 	movt	r6, #0
     728:	47b0      	blx	r6
     72a:	e7c9      	b.n	6c0 <sha256_finalize+0x2c>
     72c:	0000      	movs	r0, r0
	...

00000730 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
     730:	b570      	push	{r4, r5, r6, lr}
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
     732:	2408      	movs	r4, #8
     734:	1ae3      	subs	r3, r4, r3
     736:	00db      	lsls	r3, r3, #3
     738:	3301      	adds	r3, #1
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
     73a:	0004      	movs	r4, r0
     73c:	2000      	movs	r0, #0
     73e:	a503      	add	r5, pc, #12	; (adr r5, 74c <uECC_vli_add+0x1c>)
     740:	195b      	adds	r3, r3, r5
     742:	c920      	ldmia	r1!, {r5}
     744:	ca40      	ldmia	r2!, {r6}
     746:	19ad      	adds	r5, r5, r6
     748:	c420      	stmia	r4!, {r5}
     74a:	4718      	bx	r3
     74c:	c920      	ldmia	r1!, {r5}
     74e:	ca40      	ldmia	r2!, {r6}
     750:	4175      	adcs	r5, r6
     752:	c420      	stmia	r4!, {r5}
     754:	c920      	ldmia	r1!, {r5}
     756:	ca40      	ldmia	r2!, {r6}
     758:	4175      	adcs	r5, r6
     75a:	c420      	stmia	r4!, {r5}
     75c:	c920      	ldmia	r1!, {r5}
     75e:	ca40      	ldmia	r2!, {r6}
     760:	4175      	adcs	r5, r6
     762:	c420      	stmia	r4!, {r5}
     764:	c920      	ldmia	r1!, {r5}
     766:	ca40      	ldmia	r2!, {r6}
     768:	4175      	adcs	r5, r6
     76a:	c420      	stmia	r4!, {r5}
     76c:	c920      	ldmia	r1!, {r5}
     76e:	ca40      	ldmia	r2!, {r6}
     770:	4175      	adcs	r5, r6
     772:	c420      	stmia	r4!, {r5}
     774:	c920      	ldmia	r1!, {r5}
     776:	ca40      	ldmia	r2!, {r6}
     778:	4175      	adcs	r5, r6
     77a:	c420      	stmia	r4!, {r5}
     77c:	c920      	ldmia	r1!, {r5}
     77e:	ca40      	ldmia	r2!, {r6}
     780:	4175      	adcs	r5, r6
     782:	c420      	stmia	r4!, {r5}
     784:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
     786:	bd70      	pop	{r4, r5, r6, pc}
	...

00000790 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
     790:	b570      	push	{r4, r5, r6, lr}
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
     792:	2408      	movs	r4, #8
     794:	1ae3      	subs	r3, r4, r3
     796:	00db      	lsls	r3, r3, #3
     798:	3301      	adds	r3, #1
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
     79a:	2400      	movs	r4, #0
     79c:	a503      	add	r5, pc, #12	; (adr r5, 7ac <uECC_vli_sub+0x1c>)
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	195b      	adds	r3, r3, r5
     7a2:	c920      	ldmia	r1!, {r5}
     7a4:	ca40      	ldmia	r2!, {r6}
     7a6:	1bad      	subs	r5, r5, r6
     7a8:	c020      	stmia	r0!, {r5}
     7aa:	4718      	bx	r3
     7ac:	c920      	ldmia	r1!, {r5}
     7ae:	ca40      	ldmia	r2!, {r6}
     7b0:	41b5      	sbcs	r5, r6
     7b2:	c020      	stmia	r0!, {r5}
     7b4:	c920      	ldmia	r1!, {r5}
     7b6:	ca40      	ldmia	r2!, {r6}
     7b8:	41b5      	sbcs	r5, r6
     7ba:	c020      	stmia	r0!, {r5}
     7bc:	c920      	ldmia	r1!, {r5}
     7be:	ca40      	ldmia	r2!, {r6}
     7c0:	41b5      	sbcs	r5, r6
     7c2:	c020      	stmia	r0!, {r5}
     7c4:	c920      	ldmia	r1!, {r5}
     7c6:	ca40      	ldmia	r2!, {r6}
     7c8:	41b5      	sbcs	r5, r6
     7ca:	c020      	stmia	r0!, {r5}
     7cc:	c920      	ldmia	r1!, {r5}
     7ce:	ca40      	ldmia	r2!, {r6}
     7d0:	41b5      	sbcs	r5, r6
     7d2:	c020      	stmia	r0!, {r5}
     7d4:	c920      	ldmia	r1!, {r5}
     7d6:	ca40      	ldmia	r2!, {r6}
     7d8:	41b5      	sbcs	r5, r6
     7da:	c020      	stmia	r0!, {r5}
     7dc:	c920      	ldmia	r1!, {r5}
     7de:	ca40      	ldmia	r2!, {r6}
     7e0:	41b5      	sbcs	r5, r6
     7e2:	c020      	stmia	r0!, {r5}
     7e4:	4164      	adcs	r4, r4
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
     7e6:	4260      	negs	r0, r4
     7e8:	4160      	adcs	r0, r4
                      (for some reason...) */
}
     7ea:	bd70      	pop	{r4, r5, r6, pc}

000007ec <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
     7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ee:	46de      	mov	lr, fp
     7f0:	4657      	mov	r7, sl
     7f2:	464e      	mov	r6, r9
     7f4:	4645      	mov	r5, r8
     7f6:	b5e0      	push	{r5, r6, r7, lr}
    );
    
#else /* Thumb-1 */
    uint32_t r4, r5, r6, r7;

    __asm__ volatile (
     7f8:	3b01      	subs	r3, #1
     7fa:	009b      	lsls	r3, r3, #2
     7fc:	4698      	mov	r8, r3
     7fe:	005b      	lsls	r3, r3, #1
     800:	4699      	mov	r9, r3
     802:	2300      	movs	r3, #0
     804:	2400      	movs	r4, #0
     806:	2500      	movs	r5, #0
     808:	2600      	movs	r6, #0
     80a:	b401      	push	{r0}
     80c:	2700      	movs	r7, #0
     80e:	e002      	b.n	816 <uECC_vli_mult+0x2a>
     810:	0037      	movs	r7, r6
     812:	4640      	mov	r0, r8
     814:	1a3f      	subs	r7, r7, r0
     816:	469a      	mov	sl, r3
     818:	46a3      	mov	fp, r4
     81a:	46ac      	mov	ip, r5
     81c:	46b6      	mov	lr, r6
     81e:	1bf0      	subs	r0, r6, r7
     820:	5814      	ldr	r4, [r2, r0]
     822:	59c8      	ldr	r0, [r1, r7]
     824:	0c03      	lsrs	r3, r0, #16
     826:	b280      	uxth	r0, r0
     828:	0c25      	lsrs	r5, r4, #16
     82a:	b2a4      	uxth	r4, r4
     82c:	001e      	movs	r6, r3
     82e:	436e      	muls	r6, r5
     830:	4363      	muls	r3, r4
     832:	4345      	muls	r5, r0
     834:	4360      	muls	r0, r4
     836:	041c      	lsls	r4, r3, #16
     838:	0c1b      	lsrs	r3, r3, #16
     83a:	1900      	adds	r0, r0, r4
     83c:	415e      	adcs	r6, r3
     83e:	042c      	lsls	r4, r5, #16
     840:	0c2d      	lsrs	r5, r5, #16
     842:	1900      	adds	r0, r0, r4
     844:	416e      	adcs	r6, r5
     846:	4653      	mov	r3, sl
     848:	465c      	mov	r4, fp
     84a:	4665      	mov	r5, ip
     84c:	181b      	adds	r3, r3, r0
     84e:	4174      	adcs	r4, r6
     850:	2000      	movs	r0, #0
     852:	4145      	adcs	r5, r0
     854:	4676      	mov	r6, lr
     856:	3704      	adds	r7, #4
     858:	4547      	cmp	r7, r8
     85a:	dc01      	bgt.n	860 <uECC_vli_mult+0x74>
     85c:	42b7      	cmp	r7, r6
     85e:	ddda      	ble.n	816 <uECC_vli_mult+0x2a>
     860:	9800      	ldr	r0, [sp, #0]
     862:	5183      	str	r3, [r0, r6]
     864:	4623      	mov	r3, r4
     866:	462c      	mov	r4, r5
     868:	2500      	movs	r5, #0
     86a:	3604      	adds	r6, #4
     86c:	4546      	cmp	r6, r8
     86e:	ddcd      	ble.n	80c <uECC_vli_mult+0x20>
     870:	454e      	cmp	r6, r9
     872:	ddcd      	ble.n	810 <uECC_vli_mult+0x24>
     874:	5183      	str	r3, [r0, r6]
     876:	bc01      	pop	{r0}
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
     878:	bc3c      	pop	{r2, r3, r4, r5}
     87a:	4690      	mov	r8, r2
     87c:	4699      	mov	r9, r3
     87e:	46a2      	mov	sl, r4
     880:	46ab      	mov	fp, r5
     882:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000884 <default_RNG>:

#include <stdlib.h>
#include <time.h>

static int default_RNG(uint8_t *dest, unsigned size)
{
     884:	b570      	push	{r4, r5, r6, lr}
	unsigned int i;
	for(i=0; i<size; i++){
     886:	b151      	cbz	r1, 89e <default_RNG+0x1a>
     888:	f646 0641 	movw	r6, #26689	; 0x6841
     88c:	0004      	movs	r4, r0
     88e:	1845      	adds	r5, r0, r1
     890:	f2c0 0600 	movt	r6, #0
		dest[i] = (uint8_t)(rand());
     894:	47b0      	blx	r6
     896:	7020      	strb	r0, [r4, #0]
     898:	3401      	adds	r4, #1
	for(i=0; i<size; i++){
     89a:	42ac      	cmp	r4, r5
     89c:	d1fa      	bne.n	894 <default_RNG+0x10>
	}
	return 1;
}
     89e:	2001      	movs	r0, #1
     8a0:	bd70      	pop	{r4, r5, r6, pc}
     8a2:	46c0      	nop			; (mov r8, r8)

000008a4 <uECC_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,
                                          const uECC_word_t *top,
                                          wordcount_t num_words) {
     8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8a6:	4657      	mov	r7, sl
     8a8:	464e      	mov	r6, r9
     8aa:	4645      	mov	r5, r8
     8ac:	46de      	mov	lr, fp
     8ae:	b5e0      	push	{r5, r6, r7, lr}
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     8b0:	1e55      	subs	r5, r2, #1
     8b2:	b2ed      	uxtb	r5, r5
                                          wordcount_t num_words) {
     8b4:	b08d      	sub	sp, #52	; 0x34
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     8b6:	b26b      	sxtb	r3, r5
                                          wordcount_t num_words) {
     8b8:	0007      	movs	r7, r0
     8ba:	9102      	str	r1, [sp, #8]
     8bc:	4691      	mov	r9, r2
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     8be:	2b00      	cmp	r3, #0
     8c0:	da05      	bge.n	8ce <uECC_generate_random_int+0x2a>
     8c2:	e008      	b.n	8d6 <uECC_generate_random_int+0x32>
     8c4:	3b01      	subs	r3, #1
     8c6:	b25b      	sxtb	r3, r3
     8c8:	1c5a      	adds	r2, r3, #1
     8ca:	d100      	bne.n	8ce <uECC_generate_random_int+0x2a>
     8cc:	e079      	b.n	9c2 <uECC_generate_random_int+0x11e>
     8ce:	009a      	lsls	r2, r3, #2
     8d0:	5852      	ldr	r2, [r2, r1]
     8d2:	2a00      	cmp	r2, #0
     8d4:	d0f6      	beq.n	8c4 <uECC_generate_random_int+0x20>
    return (i + 1);
     8d6:	3301      	adds	r3, #1
     8d8:	b25b      	sxtb	r3, r3
        return 0;
     8da:	2100      	movs	r1, #0
    if (num_digits == 0) {
     8dc:	b17b      	cbz	r3, 8fe <uECC_generate_random_int+0x5a>
    digit = vli[num_digits - 1];
     8de:	4a3a      	ldr	r2, [pc, #232]	; (9c8 <uECC_generate_random_int+0x124>)
     8e0:	9902      	ldr	r1, [sp, #8]
     8e2:	189a      	adds	r2, r3, r2
     8e4:	0092      	lsls	r2, r2, #2
     8e6:	5852      	ldr	r2, [r2, r1]
    for (i = 0; digit; ++i) {
     8e8:	2100      	movs	r1, #0
     8ea:	b122      	cbz	r2, 8f6 <uECC_generate_random_int+0x52>
        digit >>= 1;
     8ec:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
     8ee:	3101      	adds	r1, #1
     8f0:	2a00      	cmp	r2, #0
     8f2:	d1fb      	bne.n	8ec <uECC_generate_random_int+0x48>
     8f4:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
     8f6:	3b01      	subs	r3, #1
     8f8:	015b      	lsls	r3, r3, #5
     8fa:	18c9      	adds	r1, r1, r3
     8fc:	b209      	sxth	r1, r1
    uECC_word_t mask = (uECC_word_t)-1;
    uECC_word_t tries;
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);

    if (!g_rng_function) {
     8fe:	f240 0a00 	movw	sl, #0
     902:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     906:	4653      	mov	r3, sl
     908:	681a      	ldr	r2, [r3, #0]
     90a:	b3b2      	cbz	r2, 97a <uECC_generate_random_int+0xd6>
     90c:	464b      	mov	r3, r9
     90e:	009b      	lsls	r3, r3, #2
     910:	469b      	mov	fp, r3

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
            return 0;
        }
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     912:	3b04      	subs	r3, #4
     914:	4698      	mov	r8, r3
     916:	464b      	mov	r3, r9
     918:	015b      	lsls	r3, r3, #5
     91a:	1a59      	subs	r1, r3, r1
     91c:	2301      	movs	r3, #1
     91e:	b209      	sxth	r1, r1
     920:	425b      	negs	r3, r3
     922:	40cb      	lsrs	r3, r1
     924:	9301      	str	r3, [sp, #4]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     926:	f240 7391 	movw	r3, #1937	; 0x791
     92a:	3501      	adds	r5, #1
     92c:	00ad      	lsls	r5, r5, #2
     92e:	197c      	adds	r4, r7, r5
     930:	f2c0 0300 	movt	r3, #0
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     934:	4659      	mov	r1, fp
     936:	0038      	movs	r0, r7
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     938:	44b8      	add	r8, r7
     93a:	2640      	movs	r6, #64	; 0x40
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     93c:	9303      	str	r3, [sp, #12]
     93e:	9400      	str	r4, [sp, #0]
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     940:	4790      	blx	r2
     942:	b1d0      	cbz	r0, 97a <uECC_generate_random_int+0xd6>
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     944:	4642      	mov	r2, r8
     946:	9b01      	ldr	r3, [sp, #4]
     948:	6812      	ldr	r2, [r2, #0]
    for (i = 0; i < num_words; ++i) {
     94a:	4649      	mov	r1, r9
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     94c:	4013      	ands	r3, r2
     94e:	4642      	mov	r2, r8
     950:	6013      	str	r3, [r2, #0]
     952:	003b      	movs	r3, r7
    for (i = 0; i < num_words; ++i) {
     954:	2200      	movs	r2, #0
     956:	2900      	cmp	r1, #0
     958:	dd06      	ble.n	968 <uECC_generate_random_int+0xc4>
     95a:	9c00      	ldr	r4, [sp, #0]
        bits |= vli[i];
     95c:	cb02      	ldmia	r3!, {r1}
     95e:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
     960:	429c      	cmp	r4, r3
     962:	d1fb      	bne.n	95c <uECC_generate_random_int+0xb8>
     964:	9400      	str	r4, [sp, #0]
        if (!uECC_vli_isZero(random, num_words) &&
     966:	b982      	cbnz	r2, 98a <uECC_generate_random_int+0xe6>
     968:	3e01      	subs	r6, #1
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
     96a:	b136      	cbz	r6, 97a <uECC_generate_random_int+0xd6>
     96c:	4653      	mov	r3, sl
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     96e:	4659      	mov	r1, fp
     970:	681a      	ldr	r2, [r3, #0]
     972:	0038      	movs	r0, r7
     974:	4790      	blx	r2
     976:	2800      	cmp	r0, #0
     978:	d1e4      	bne.n	944 <uECC_generate_random_int+0xa0>
        return 0;
     97a:	2000      	movs	r0, #0
                uECC_vli_cmp(top, random, num_words) == 1) {
            return 1;
        }
    }
    return 0;
}
     97c:	b00d      	add	sp, #52	; 0x34
     97e:	bc3c      	pop	{r2, r3, r4, r5}
     980:	4690      	mov	r8, r2
     982:	4699      	mov	r9, r3
     984:	46a2      	mov	sl, r4
     986:	46ab      	mov	fp, r5
     988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     98a:	003a      	movs	r2, r7
     98c:	464b      	mov	r3, r9
     98e:	9c03      	ldr	r4, [sp, #12]
     990:	9902      	ldr	r1, [sp, #8]
     992:	a804      	add	r0, sp, #16
     994:	47a0      	blx	r4
     996:	2300      	movs	r3, #0
     998:	1e42      	subs	r2, r0, #1
     99a:	4190      	sbcs	r0, r2
     99c:	2200      	movs	r2, #0
     99e:	9c00      	ldr	r4, [sp, #0]
        bits |= vli[i];
     9a0:	a904      	add	r1, sp, #16
     9a2:	5889      	ldr	r1, [r1, r2]
     9a4:	3204      	adds	r2, #4
     9a6:	9100      	str	r1, [sp, #0]
     9a8:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
     9aa:	42aa      	cmp	r2, r5
     9ac:	d1f8      	bne.n	9a0 <uECC_generate_random_int+0xfc>
    return (!equal - 2 * neg);
     9ae:	1e5a      	subs	r2, r3, #1
     9b0:	4193      	sbcs	r3, r2
     9b2:	0040      	lsls	r0, r0, #1
     9b4:	1a1b      	subs	r3, r3, r0
        if (!uECC_vli_isZero(random, num_words) &&
     9b6:	b2db      	uxtb	r3, r3
     9b8:	9400      	str	r4, [sp, #0]
     9ba:	2b01      	cmp	r3, #1
     9bc:	d1d4      	bne.n	968 <uECC_generate_random_int+0xc4>
            return 1;
     9be:	2001      	movs	r0, #1
     9c0:	e7dc      	b.n	97c <uECC_generate_random_int+0xd8>
        return 0;
     9c2:	2100      	movs	r1, #0
     9c4:	e79b      	b.n	8fe <uECC_generate_random_int+0x5a>
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	3fffffff 	.word	0x3fffffff

000009cc <uECC_vli_mmod>:
                                wordcount_t num_words) {
     9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     9ce:	4645      	mov	r5, r8
     9d0:	4688      	mov	r8, r1
     9d2:	46de      	mov	lr, fp
     9d4:	464e      	mov	r6, r9
     9d6:	4657      	mov	r7, sl
     9d8:	0019      	movs	r1, r3
     9da:	0014      	movs	r4, r2
    uECC_word_t *v[2] = {tmp, product};
     9dc:	4642      	mov	r2, r8
                                wordcount_t num_words) {
     9de:	b5e0      	push	{r5, r6, r7, lr}
     9e0:	b0ab      	sub	sp, #172	; 0xac
     9e2:	9302      	str	r3, [sp, #8]
    uECC_word_t *v[2] = {tmp, product};
     9e4:	ab1a      	add	r3, sp, #104	; 0x68
     9e6:	9308      	str	r3, [sp, #32]
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     9e8:	000b      	movs	r3, r1
    uECC_word_t *v[2] = {tmp, product};
     9ea:	9209      	str	r2, [sp, #36]	; 0x24
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9ec:	466a      	mov	r2, sp
     9ee:	3b01      	subs	r3, #1
     9f0:	7013      	strb	r3, [r2, #0]
     9f2:	469b      	mov	fp, r3
     9f4:	7813      	ldrb	r3, [r2, #0]
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     9f6:	0189      	lsls	r1, r1, #6
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9f8:	7013      	strb	r3, [r2, #0]
     9fa:	4699      	mov	r9, r3
     9fc:	7813      	ldrb	r3, [r2, #0]
                                wordcount_t num_words) {
     9fe:	9007      	str	r0, [sp, #28]
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     a00:	b25b      	sxtb	r3, r3
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a02:	b289      	uxth	r1, r1
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     a04:	2b00      	cmp	r3, #0
     a06:	da05      	bge.n	a14 <uECC_vli_mmod+0x48>
     a08:	e008      	b.n	a1c <uECC_vli_mmod+0x50>
     a0a:	3b01      	subs	r3, #1
     a0c:	b25b      	sxtb	r3, r3
     a0e:	1c5a      	adds	r2, r3, #1
     a10:	d100      	bne.n	a14 <uECC_vli_mmod+0x48>
     a12:	e192      	b.n	d3a <uECC_vli_mmod+0x36e>
     a14:	009a      	lsls	r2, r3, #2
     a16:	5912      	ldr	r2, [r2, r4]
     a18:	2a00      	cmp	r2, #0
     a1a:	d0f6      	beq.n	a0a <uECC_vli_mmod+0x3e>
    return (i + 1);
     a1c:	3301      	adds	r3, #1
     a1e:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
     a20:	2000      	movs	r0, #0
     a22:	b17b      	cbz	r3, a44 <uECC_vli_mmod+0x78>
    digit = vli[num_digits - 1];
     a24:	4ad4      	ldr	r2, [pc, #848]	; (d78 <uECC_vli_mmod+0x3ac>)
     a26:	189a      	adds	r2, r3, r2
     a28:	0092      	lsls	r2, r2, #2
     a2a:	5912      	ldr	r2, [r2, r4]
    for (i = 0; digit; ++i) {
     a2c:	2a00      	cmp	r2, #0
     a2e:	d100      	bne.n	a32 <uECC_vli_mmod+0x66>
     a30:	e19f      	b.n	d72 <uECC_vli_mmod+0x3a6>
        digit >>= 1;
     a32:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
     a34:	3001      	adds	r0, #1
     a36:	2a00      	cmp	r2, #0
     a38:	d1fb      	bne.n	a32 <uECC_vli_mmod+0x66>
     a3a:	b280      	uxth	r0, r0
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
     a3c:	3b01      	subs	r3, #1
     a3e:	015b      	lsls	r3, r3, #5
     a40:	18c0      	adds	r0, r0, r3
     a42:	b280      	uxth	r0, r0
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a44:	1a09      	subs	r1, r1, r0
     a46:	b20b      	sxth	r3, r1
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a48:	251f      	movs	r5, #31
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a4a:	0018      	movs	r0, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a4c:	002a      	movs	r2, r5
     a4e:	4684      	mov	ip, r0
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a50:	9301      	str	r3, [sp, #4]
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a52:	17db      	asrs	r3, r3, #31
     a54:	401a      	ands	r2, r3
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a56:	0edb      	lsrs	r3, r3, #27
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a58:	4462      	add	r2, ip
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a5a:	18c1      	adds	r1, r0, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a5c:	1152      	asrs	r2, r2, #5
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a5e:	400d      	ands	r5, r1
     a60:	1aed      	subs	r5, r5, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a62:	b256      	sxtb	r6, r2
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a64:	b22d      	sxth	r5, r5
    for (i = 0; i < num_words; ++i) {
     a66:	2e00      	cmp	r6, #0
     a68:	dd0b      	ble.n	a82 <uECC_vli_mmod+0xb6>
     a6a:	f246 7375 	movw	r3, #26485	; 0x6775
        vli[i] = 0;
     a6e:	3a01      	subs	r2, #1
     a70:	b2d2      	uxtb	r2, r2
     a72:	3201      	adds	r2, #1
     a74:	af0a      	add	r7, sp, #40	; 0x28
     a76:	0092      	lsls	r2, r2, #2
     a78:	2100      	movs	r1, #0
     a7a:	0038      	movs	r0, r7
     a7c:	f2c0 0300 	movt	r3, #0
     a80:	4798      	blx	r3
    if (bit_shift > 0) {
     a82:	2d00      	cmp	r5, #0
     a84:	dc00      	bgt.n	a88 <uECC_vli_mmod+0xbc>
     a86:	e15a      	b.n	d3e <uECC_vli_mmod+0x372>
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a88:	9b02      	ldr	r3, [sp, #8]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d100      	bne.n	a90 <uECC_vli_mmod+0xc4>
     a8e:	e16a      	b.n	d66 <uECC_vli_mmod+0x39a>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     a90:	6821      	ldr	r1, [r4, #0]
     a92:	00b2      	lsls	r2, r6, #2
     a94:	0008      	movs	r0, r1
     a96:	40a8      	lsls	r0, r5
     a98:	2320      	movs	r3, #32
     a9a:	af0a      	add	r7, sp, #40	; 0x28
     a9c:	50b8      	str	r0, [r7, r2]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a9e:	000a      	movs	r2, r1
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aa0:	9902      	ldr	r1, [sp, #8]
     aa2:	1b5b      	subs	r3, r3, r5
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     aa4:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aa6:	2901      	cmp	r1, #1
     aa8:	d800      	bhi.n	aac <uECC_vli_mmod+0xe0>
     aaa:	e0a9      	b.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     aac:	6861      	ldr	r1, [r4, #4]
     aae:	1c70      	adds	r0, r6, #1
     ab0:	40a9      	lsls	r1, r5
     ab2:	0080      	lsls	r0, r0, #2
     ab4:	4311      	orrs	r1, r2
     ab6:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ab8:	6862      	ldr	r2, [r4, #4]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aba:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     abc:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     abe:	2902      	cmp	r1, #2
     ac0:	d100      	bne.n	ac4 <uECC_vli_mmod+0xf8>
     ac2:	e09d      	b.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     ac4:	68a1      	ldr	r1, [r4, #8]
     ac6:	1cb0      	adds	r0, r6, #2
     ac8:	40a9      	lsls	r1, r5
     aca:	0080      	lsls	r0, r0, #2
     acc:	4311      	orrs	r1, r2
     ace:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ad0:	68a2      	ldr	r2, [r4, #8]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ad2:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ad4:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ad6:	2903      	cmp	r1, #3
     ad8:	d100      	bne.n	adc <uECC_vli_mmod+0x110>
     ada:	e091      	b.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     adc:	68e1      	ldr	r1, [r4, #12]
     ade:	1cf0      	adds	r0, r6, #3
     ae0:	40a9      	lsls	r1, r5
     ae2:	0080      	lsls	r0, r0, #2
     ae4:	4311      	orrs	r1, r2
     ae6:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ae8:	68e2      	ldr	r2, [r4, #12]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aea:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     aec:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aee:	2904      	cmp	r1, #4
     af0:	d100      	bne.n	af4 <uECC_vli_mmod+0x128>
     af2:	e085      	b.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     af4:	6921      	ldr	r1, [r4, #16]
     af6:	1d30      	adds	r0, r6, #4
     af8:	40a9      	lsls	r1, r5
     afa:	0080      	lsls	r0, r0, #2
     afc:	4311      	orrs	r1, r2
     afe:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b00:	6922      	ldr	r2, [r4, #16]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b02:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b04:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b06:	2905      	cmp	r1, #5
     b08:	d07a      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b0a:	6961      	ldr	r1, [r4, #20]
     b0c:	1d70      	adds	r0, r6, #5
     b0e:	40a9      	lsls	r1, r5
     b10:	0080      	lsls	r0, r0, #2
     b12:	4311      	orrs	r1, r2
     b14:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b16:	6962      	ldr	r2, [r4, #20]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b18:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b1a:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b1c:	2906      	cmp	r1, #6
     b1e:	d06f      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b20:	69a1      	ldr	r1, [r4, #24]
     b22:	1db0      	adds	r0, r6, #6
     b24:	40a9      	lsls	r1, r5
     b26:	0080      	lsls	r0, r0, #2
     b28:	4311      	orrs	r1, r2
     b2a:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b2c:	69a2      	ldr	r2, [r4, #24]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b2e:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b30:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b32:	2907      	cmp	r1, #7
     b34:	d064      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b36:	69e1      	ldr	r1, [r4, #28]
     b38:	1df0      	adds	r0, r6, #7
     b3a:	40a9      	lsls	r1, r5
     b3c:	0080      	lsls	r0, r0, #2
     b3e:	4311      	orrs	r1, r2
     b40:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b42:	69e2      	ldr	r2, [r4, #28]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b44:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b46:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b48:	2908      	cmp	r1, #8
     b4a:	d059      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b4c:	6a21      	ldr	r1, [r4, #32]
     b4e:	0030      	movs	r0, r6
     b50:	40a9      	lsls	r1, r5
     b52:	3008      	adds	r0, #8
     b54:	4311      	orrs	r1, r2
     b56:	0080      	lsls	r0, r0, #2
     b58:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b5a:	6a22      	ldr	r2, [r4, #32]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b5c:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b5e:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b60:	2909      	cmp	r1, #9
     b62:	d04d      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b64:	6a61      	ldr	r1, [r4, #36]	; 0x24
     b66:	0030      	movs	r0, r6
     b68:	40a9      	lsls	r1, r5
     b6a:	3009      	adds	r0, #9
     b6c:	4311      	orrs	r1, r2
     b6e:	0080      	lsls	r0, r0, #2
     b70:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b72:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b74:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b76:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b78:	290a      	cmp	r1, #10
     b7a:	d041      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     b7e:	0030      	movs	r0, r6
     b80:	40a9      	lsls	r1, r5
     b82:	300a      	adds	r0, #10
     b84:	4311      	orrs	r1, r2
     b86:	0080      	lsls	r0, r0, #2
     b88:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b8c:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b8e:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b90:	290b      	cmp	r1, #11
     b92:	d035      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     b96:	0030      	movs	r0, r6
     b98:	40a9      	lsls	r1, r5
     b9a:	300b      	adds	r0, #11
     b9c:	4311      	orrs	r1, r2
     b9e:	0080      	lsls	r0, r0, #2
     ba0:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ba4:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ba6:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ba8:	290c      	cmp	r1, #12
     baa:	d029      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     bac:	6b21      	ldr	r1, [r4, #48]	; 0x30
     bae:	0030      	movs	r0, r6
     bb0:	40a9      	lsls	r1, r5
     bb2:	300c      	adds	r0, #12
     bb4:	4311      	orrs	r1, r2
     bb6:	0080      	lsls	r0, r0, #2
     bb8:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bba:	6b22      	ldr	r2, [r4, #48]	; 0x30
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bbc:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bbe:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bc0:	290d      	cmp	r1, #13
     bc2:	d01d      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
     bc6:	0030      	movs	r0, r6
     bc8:	40a9      	lsls	r1, r5
     bca:	300d      	adds	r0, #13
     bcc:	4311      	orrs	r1, r2
     bce:	0080      	lsls	r0, r0, #2
     bd0:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bd4:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bd6:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bd8:	290e      	cmp	r1, #14
     bda:	d011      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     bdc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     bde:	0030      	movs	r0, r6
     be0:	40a9      	lsls	r1, r5
     be2:	300e      	adds	r0, #14
     be4:	4311      	orrs	r1, r2
     be6:	0080      	lsls	r0, r0, #2
     be8:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bec:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bee:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bf0:	290f      	cmp	r1, #15
     bf2:	d005      	beq.n	c00 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     bf4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     bf6:	360f      	adds	r6, #15
     bf8:	40ab      	lsls	r3, r5
     bfa:	00b6      	lsls	r6, r6, #2
     bfc:	4313      	orrs	r3, r2
     bfe:	51bb      	str	r3, [r7, r6]
    for (index = 1; shift >= 0; --shift) {
     c00:	9b01      	ldr	r3, [sp, #4]
     c02:	2b00      	cmp	r3, #0
     c04:	da00      	bge.n	c08 <uECC_vli_mmod+0x23c>
     c06:	e080      	b.n	d0a <uECC_vli_mmod+0x33e>
     c08:	9802      	ldr	r0, [sp, #8]
    while (vli-- > end) {
     c0a:	f240 0c01 	movw	ip, #1
     c0e:	0083      	lsls	r3, r0, #2
     c10:	001a      	movs	r2, r3
     c12:	9306      	str	r3, [sp, #24]
     c14:	18f9      	adds	r1, r7, r3
     c16:	00c3      	lsls	r3, r0, #3
     c18:	18fc      	adds	r4, r7, r3
     c1a:	3b04      	subs	r3, #4
     c1c:	18fb      	adds	r3, r7, r3
     c1e:	9305      	str	r3, [sp, #20]
     c20:	465b      	mov	r3, fp
     c22:	0040      	lsls	r0, r0, #1
     c24:	009b      	lsls	r3, r3, #2
     c26:	4680      	mov	r8, r0
     c28:	469b      	mov	fp, r3
     c2a:	3a04      	subs	r2, #4
     c2c:	18ba      	adds	r2, r7, r2
     c2e:	9403      	str	r4, [sp, #12]
     c30:	9204      	str	r2, [sp, #16]
        for (i = 0; i < num_words * 2; ++i) {
     c32:	4643      	mov	r3, r8
     c34:	2b00      	cmp	r3, #0
     c36:	dc00      	bgt.n	c3a <uECC_vli_mmod+0x26e>
     c38:	e07d      	b.n	d36 <uECC_vli_mmod+0x36a>
     c3a:	4663      	mov	r3, ip
     c3c:	aa08      	add	r2, sp, #32
     c3e:	009b      	lsls	r3, r3, #2
     c40:	58d5      	ldr	r5, [r2, r3]
     c42:	4662      	mov	r2, ip
     c44:	2301      	movs	r3, #1
     c46:	1a9b      	subs	r3, r3, r2
     c48:	009b      	lsls	r3, r3, #2
     c4a:	aa08      	add	r2, sp, #32
     c4c:	58d3      	ldr	r3, [r2, r3]
     c4e:	2400      	movs	r4, #0
     c50:	4699      	mov	r9, r3
     c52:	2300      	movs	r3, #0
     c54:	4648      	mov	r0, r9
     c56:	001e      	movs	r6, r3
     c58:	4689      	mov	r9, r1
     c5a:	4643      	mov	r3, r8
     c5c:	2200      	movs	r2, #0
     c5e:	46b8      	mov	r8, r7
     c60:	0029      	movs	r1, r5
     c62:	9000      	str	r0, [sp, #0]
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
     c64:	4640      	mov	r0, r8
     c66:	00a5      	lsls	r5, r4, #2
     c68:	0092      	lsls	r2, r2, #2
     c6a:	5882      	ldr	r2, [r0, r2]
     c6c:	5948      	ldr	r0, [r1, r5]
                borrow = (diff > v[index][i]);
     c6e:	4682      	mov	sl, r0
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
     c70:	1a82      	subs	r2, r0, r2
     c72:	1b92      	subs	r2, r2, r6
                borrow = (diff > v[index][i]);
     c74:	4592      	cmp	sl, r2
     c76:	4180      	sbcs	r0, r0
     c78:	4657      	mov	r7, sl
     c7a:	4240      	negs	r0, r0
     c7c:	4297      	cmp	r7, r2
     c7e:	d000      	beq.n	c82 <uECC_vli_mmod+0x2b6>
     c80:	0006      	movs	r6, r0
            v[1 - index][i] = diff;
     c82:	9800      	ldr	r0, [sp, #0]
     c84:	3401      	adds	r4, #1
     c86:	b264      	sxtb	r4, r4
     c88:	5142      	str	r2, [r0, r5]
        for (i = 0; i < num_words * 2; ++i) {
     c8a:	0022      	movs	r2, r4
     c8c:	429c      	cmp	r4, r3
     c8e:	dbe9      	blt.n	c64 <uECC_vli_mmod+0x298>
     c90:	4647      	mov	r7, r8
     c92:	4649      	mov	r1, r9
     c94:	4698      	mov	r8, r3
     c96:	0033      	movs	r3, r6
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
     c98:	4662      	mov	r2, ip
     c9a:	1ad3      	subs	r3, r2, r3
     c9c:	4258      	negs	r0, r3
     c9e:	4158      	adcs	r0, r3
     ca0:	b2c3      	uxtb	r3, r0
     ca2:	469c      	mov	ip, r3
    while (vli-- > end) {
     ca4:	2300      	movs	r3, #0
     ca6:	9804      	ldr	r0, [sp, #16]
     ca8:	001c      	movs	r4, r3
     caa:	42b9      	cmp	r1, r7
     cac:	d801      	bhi.n	cb2 <uECC_vli_mmod+0x2e6>
     cae:	e008      	b.n	cc2 <uECC_vli_mmod+0x2f6>
     cb0:	0018      	movs	r0, r3
        uECC_word_t temp = *vli;
     cb2:	6802      	ldr	r2, [r0, #0]
        *vli = (temp >> 1) | carry;
     cb4:	0853      	lsrs	r3, r2, #1
     cb6:	4323      	orrs	r3, r4
     cb8:	6003      	str	r3, [r0, #0]
        carry = temp << (uECC_WORD_BITS - 1);
     cba:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
     cbc:	1f03      	subs	r3, r0, #4
     cbe:	42b8      	cmp	r0, r7
     cc0:	d8f6      	bhi.n	cb0 <uECC_vli_mmod+0x2e4>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
     cc2:	465a      	mov	r2, fp
     cc4:	9b06      	ldr	r3, [sp, #24]
     cc6:	58ba      	ldr	r2, [r7, r2]
     cc8:	58fb      	ldr	r3, [r7, r3]
    while (vli-- > end) {
     cca:	9805      	ldr	r0, [sp, #20]
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
     ccc:	9300      	str	r3, [sp, #0]
     cce:	07db      	lsls	r3, r3, #31
     cd0:	4313      	orrs	r3, r2
     cd2:	465a      	mov	r2, fp
     cd4:	50bb      	str	r3, [r7, r2]
    while (vli-- > end) {
     cd6:	2300      	movs	r3, #0
     cd8:	9a03      	ldr	r2, [sp, #12]
     cda:	001c      	movs	r4, r3
     cdc:	4291      	cmp	r1, r2
     cde:	d301      	bcc.n	ce4 <uECC_vli_mmod+0x318>
     ce0:	e008      	b.n	cf4 <uECC_vli_mmod+0x328>
     ce2:	0018      	movs	r0, r3
        uECC_word_t temp = *vli;
     ce4:	6802      	ldr	r2, [r0, #0]
        *vli = (temp >> 1) | carry;
     ce6:	0853      	lsrs	r3, r2, #1
     ce8:	4323      	orrs	r3, r4
     cea:	6003      	str	r3, [r0, #0]
        carry = temp << (uECC_WORD_BITS - 1);
     cec:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
     cee:	1f03      	subs	r3, r0, #4
     cf0:	4288      	cmp	r0, r1
     cf2:	d8f6      	bhi.n	ce2 <uECC_vli_mmod+0x316>
     cf4:	9b01      	ldr	r3, [sp, #4]
     cf6:	3b01      	subs	r3, #1
     cf8:	b21b      	sxth	r3, r3
     cfa:	9301      	str	r3, [sp, #4]
    for (index = 1; shift >= 0; --shift) {
     cfc:	2b00      	cmp	r3, #0
     cfe:	da98      	bge.n	c32 <uECC_vli_mmod+0x266>
     d00:	4663      	mov	r3, ip
     d02:	009c      	lsls	r4, r3, #2
     d04:	ab08      	add	r3, sp, #32
     d06:	591b      	ldr	r3, [r3, r4]
     d08:	4698      	mov	r8, r3
    for (i = 0; i < num_words; ++i) {
     d0a:	9b02      	ldr	r3, [sp, #8]
     d0c:	2b00      	cmp	r3, #0
     d0e:	dd0b      	ble.n	d28 <uECC_vli_mmod+0x35c>
    while (vli-- > end) {
     d10:	2200      	movs	r2, #0
     d12:	2300      	movs	r3, #0
     d14:	4640      	mov	r0, r8
     d16:	9907      	ldr	r1, [sp, #28]
     d18:	9c02      	ldr	r4, [sp, #8]
        dest[i] = src[i];
     d1a:	5885      	ldr	r5, [r0, r2]
     d1c:	3301      	adds	r3, #1
     d1e:	b25b      	sxtb	r3, r3
     d20:	508d      	str	r5, [r1, r2]
     d22:	3204      	adds	r2, #4
    for (i = 0; i < num_words; ++i) {
     d24:	429c      	cmp	r4, r3
     d26:	dcf8      	bgt.n	d1a <uECC_vli_mmod+0x34e>
}
     d28:	b02b      	add	sp, #172	; 0xac
     d2a:	bc3c      	pop	{r2, r3, r4, r5}
     d2c:	4690      	mov	r8, r2
     d2e:	4699      	mov	r9, r3
     d30:	46a2      	mov	sl, r4
     d32:	46ab      	mov	fp, r5
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (i = 0; i < num_words * 2; ++i) {
     d36:	2300      	movs	r3, #0
     d38:	e7ae      	b.n	c98 <uECC_vli_mmod+0x2cc>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     d3a:	2000      	movs	r0, #0
     d3c:	e682      	b.n	a44 <uECC_vli_mmod+0x78>
    for (i = 0; i < num_words; ++i) {
     d3e:	9b02      	ldr	r3, [sp, #8]
     d40:	2b00      	cmp	r3, #0
     d42:	dd10      	ble.n	d66 <uECC_vli_mmod+0x39a>
        dest[i] = src[i];
     d44:	464a      	mov	r2, r9
     d46:	f246 733f 	movw	r3, #26431	; 0x673f
     d4a:	af0a      	add	r7, sp, #40	; 0x28
     d4c:	00b0      	lsls	r0, r6, #2
     d4e:	3201      	adds	r2, #1
     d50:	f2c0 0300 	movt	r3, #0
     d54:	1838      	adds	r0, r7, r0
     d56:	0092      	lsls	r2, r2, #2
     d58:	0021      	movs	r1, r4
     d5a:	4798      	blx	r3
    for (index = 1; shift >= 0; --shift) {
     d5c:	9b01      	ldr	r3, [sp, #4]
     d5e:	2b00      	cmp	r3, #0
     d60:	db00      	blt.n	d64 <uECC_vli_mmod+0x398>
     d62:	e751      	b.n	c08 <uECC_vli_mmod+0x23c>
     d64:	e7d4      	b.n	d10 <uECC_vli_mmod+0x344>
     d66:	9b01      	ldr	r3, [sp, #4]
     d68:	af0a      	add	r7, sp, #40	; 0x28
     d6a:	2b00      	cmp	r3, #0
     d6c:	db00      	blt.n	d70 <uECC_vli_mmod+0x3a4>
     d6e:	e74b      	b.n	c08 <uECC_vli_mmod+0x23c>
     d70:	e7da      	b.n	d28 <uECC_vli_mmod+0x35c>
    for (i = 0; digit; ++i) {
     d72:	2000      	movs	r0, #0
     d74:	e662      	b.n	a3c <uECC_vli_mmod+0x70>
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	3fffffff 	.word	0x3fffffff

00000d7c <XYcZ_add>:
                     uECC_Curve curve) {
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	4657      	mov	r7, sl
     d80:	4645      	mov	r5, r8
     d82:	464e      	mov	r6, r9
     d84:	46de      	mov	lr, fp
    wordcount_t num_words = curve->num_words;
     d86:	2400      	movs	r4, #0
                     uECC_Curve curve) {
     d88:	b5e0      	push	{r5, r6, r7, lr}
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     d8a:	f240 7891 	movw	r8, #1937	; 0x791
                     uECC_Curve curve) {
     d8e:	0016      	movs	r6, r2
     d90:	b09b      	sub	sp, #108	; 0x6c
     d92:	9d24      	ldr	r5, [sp, #144]	; 0x90
     d94:	001f      	movs	r7, r3
    wordcount_t num_words = curve->num_words;
     d96:	572c      	ldrsb	r4, [r5, r4]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
     d98:	1d2b      	adds	r3, r5, #4
                     uECC_Curve curve) {
     d9a:	4682      	mov	sl, r0
     d9c:	9100      	str	r1, [sp, #0]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
     d9e:	9301      	str	r3, [sp, #4]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     da0:	0002      	movs	r2, r0
     da2:	0023      	movs	r3, r4
     da4:	0031      	movs	r1, r6
     da6:	a802      	add	r0, sp, #8
     da8:	f2c0 0800 	movt	r8, #0
     dac:	47c0      	blx	r8
    if (l_borrow) {
     dae:	b140      	cbz	r0, dc2 <XYcZ_add+0x46>
        uECC_vli_add(result, result, mod, num_words);
     db0:	f240 7931 	movw	r9, #1841	; 0x731
     db4:	a902      	add	r1, sp, #8
     db6:	0023      	movs	r3, r4
     db8:	1d2a      	adds	r2, r5, #4
     dba:	0008      	movs	r0, r1
     dbc:	f2c0 0900 	movt	r9, #0
     dc0:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
     dc2:	2300      	movs	r3, #0
     dc4:	f240 79ed 	movw	r9, #2029	; 0x7ed
    curve->mmod_fast(result, product);
     dc8:	f240 0bb0 	movw	fp, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
     dcc:	aa02      	add	r2, sp, #8
     dce:	0011      	movs	r1, r2
     dd0:	f2c0 0900 	movt	r9, #0
     dd4:	56eb      	ldrsb	r3, [r5, r3]
     dd6:	a80a      	add	r0, sp, #40	; 0x28
     dd8:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     dda:	465b      	mov	r3, fp
     ddc:	a90a      	add	r1, sp, #40	; 0x28
     dde:	a802      	add	r0, sp, #8
     de0:	58eb      	ldr	r3, [r5, r3]
     de2:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
     de4:	2300      	movs	r3, #0
     de6:	aa02      	add	r2, sp, #8
     de8:	56eb      	ldrsb	r3, [r5, r3]
     dea:	4651      	mov	r1, sl
     dec:	a80a      	add	r0, sp, #40	; 0x28
     dee:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     df0:	465b      	mov	r3, fp
     df2:	a90a      	add	r1, sp, #40	; 0x28
     df4:	4650      	mov	r0, sl
     df6:	58eb      	ldr	r3, [r5, r3]
     df8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
     dfa:	2300      	movs	r3, #0
     dfc:	aa02      	add	r2, sp, #8
     dfe:	56eb      	ldrsb	r3, [r5, r3]
     e00:	0031      	movs	r1, r6
     e02:	a80a      	add	r0, sp, #40	; 0x28
     e04:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     e06:	465b      	mov	r3, fp
     e08:	a90a      	add	r1, sp, #40	; 0x28
     e0a:	58eb      	ldr	r3, [r5, r3]
     e0c:	0030      	movs	r0, r6
     e0e:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e10:	0023      	movs	r3, r4
     e12:	9a00      	ldr	r2, [sp, #0]
     e14:	0039      	movs	r1, r7
     e16:	0038      	movs	r0, r7
     e18:	47c0      	blx	r8
    if (l_borrow) {
     e1a:	b140      	cbz	r0, e2e <XYcZ_add+0xb2>
        uECC_vli_add(result, result, mod, num_words);
     e1c:	f240 7b31 	movw	fp, #1841	; 0x731
     e20:	0023      	movs	r3, r4
     e22:	1d2a      	adds	r2, r5, #4
     e24:	0039      	movs	r1, r7
     e26:	0038      	movs	r0, r7
     e28:	f2c0 0b00 	movt	fp, #0
     e2c:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
     e2e:	2300      	movs	r3, #0
     e30:	003a      	movs	r2, r7
     e32:	56eb      	ldrsb	r3, [r5, r3]
     e34:	0039      	movs	r1, r7
     e36:	a80a      	add	r0, sp, #40	; 0x28
     e38:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     e3a:	23b0      	movs	r3, #176	; 0xb0
     e3c:	a90a      	add	r1, sp, #40	; 0x28
     e3e:	58eb      	ldr	r3, [r5, r3]
     e40:	a802      	add	r0, sp, #8
     e42:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e44:	a902      	add	r1, sp, #8
     e46:	0023      	movs	r3, r4
     e48:	4652      	mov	r2, sl
     e4a:	0008      	movs	r0, r1
     e4c:	47c0      	blx	r8
    if (l_borrow) {
     e4e:	b140      	cbz	r0, e62 <XYcZ_add+0xe6>
        uECC_vli_add(result, result, mod, num_words);
     e50:	f240 7b31 	movw	fp, #1841	; 0x731
     e54:	a902      	add	r1, sp, #8
     e56:	0023      	movs	r3, r4
     e58:	1d2a      	adds	r2, r5, #4
     e5a:	0008      	movs	r0, r1
     e5c:	f2c0 0b00 	movt	fp, #0
     e60:	47d8      	blx	fp
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e62:	a902      	add	r1, sp, #8
     e64:	0023      	movs	r3, r4
     e66:	0032      	movs	r2, r6
     e68:	0008      	movs	r0, r1
     e6a:	47c0      	blx	r8
    if (l_borrow) {
     e6c:	b140      	cbz	r0, e80 <XYcZ_add+0x104>
        uECC_vli_add(result, result, mod, num_words);
     e6e:	f240 7b31 	movw	fp, #1841	; 0x731
     e72:	a902      	add	r1, sp, #8
     e74:	0023      	movs	r3, r4
     e76:	1d2a      	adds	r2, r5, #4
     e78:	0008      	movs	r0, r1
     e7a:	f2c0 0b00 	movt	fp, #0
     e7e:	47d8      	blx	fp
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e80:	0023      	movs	r3, r4
     e82:	4652      	mov	r2, sl
     e84:	0031      	movs	r1, r6
     e86:	0030      	movs	r0, r6
     e88:	47c0      	blx	r8
    if (l_borrow) {
     e8a:	b140      	cbz	r0, e9e <XYcZ_add+0x122>
        uECC_vli_add(result, result, mod, num_words);
     e8c:	f240 7b31 	movw	fp, #1841	; 0x731
     e90:	0023      	movs	r3, r4
     e92:	1d2a      	adds	r2, r5, #4
     e94:	0031      	movs	r1, r6
     e96:	0030      	movs	r0, r6
     e98:	f2c0 0b00 	movt	fp, #0
     e9c:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
     e9e:	2300      	movs	r3, #0
     ea0:	9900      	ldr	r1, [sp, #0]
     ea2:	0032      	movs	r2, r6
     ea4:	56eb      	ldrsb	r3, [r5, r3]
     ea6:	a80a      	add	r0, sp, #40	; 0x28
     ea8:	468b      	mov	fp, r1
     eaa:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     eac:	23b0      	movs	r3, #176	; 0xb0
     eae:	a90a      	add	r1, sp, #40	; 0x28
     eb0:	58eb      	ldr	r3, [r5, r3]
     eb2:	4658      	mov	r0, fp
     eb4:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     eb6:	0023      	movs	r3, r4
     eb8:	aa02      	add	r2, sp, #8
     eba:	4651      	mov	r1, sl
     ebc:	0030      	movs	r0, r6
     ebe:	47c0      	blx	r8
    if (l_borrow) {
     ec0:	b140      	cbz	r0, ed4 <XYcZ_add+0x158>
        uECC_vli_add(result, result, mod, num_words);
     ec2:	f240 7a31 	movw	sl, #1841	; 0x731
     ec6:	0023      	movs	r3, r4
     ec8:	1d2a      	adds	r2, r5, #4
     eca:	0031      	movs	r1, r6
     ecc:	0030      	movs	r0, r6
     ece:	f2c0 0a00 	movt	sl, #0
     ed2:	47d0      	blx	sl
    uECC_vli_mult(product, left, right, curve->num_words);
     ed4:	2300      	movs	r3, #0
     ed6:	0032      	movs	r2, r6
     ed8:	56eb      	ldrsb	r3, [r5, r3]
     eda:	0039      	movs	r1, r7
     edc:	a80a      	add	r0, sp, #40	; 0x28
     ede:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     ee0:	23b0      	movs	r3, #176	; 0xb0
     ee2:	a90a      	add	r1, sp, #40	; 0x28
     ee4:	58eb      	ldr	r3, [r5, r3]
     ee6:	0038      	movs	r0, r7
     ee8:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     eea:	0023      	movs	r3, r4
     eec:	9a00      	ldr	r2, [sp, #0]
     eee:	0039      	movs	r1, r7
     ef0:	0038      	movs	r0, r7
     ef2:	47c0      	blx	r8
    if (l_borrow) {
     ef4:	b140      	cbz	r0, f08 <XYcZ_add+0x18c>
        uECC_vli_add(result, result, mod, num_words);
     ef6:	f240 7531 	movw	r5, #1841	; 0x731
     efa:	0023      	movs	r3, r4
     efc:	9a01      	ldr	r2, [sp, #4]
     efe:	0039      	movs	r1, r7
     f00:	0038      	movs	r0, r7
     f02:	f2c0 0500 	movt	r5, #0
     f06:	47a8      	blx	r5
    for (i = 0; i < num_words; ++i) {
     f08:	2c00      	cmp	r4, #0
     f0a:	dd0a      	ble.n	f22 <XYcZ_add+0x1a6>
     f0c:	f246 733f 	movw	r3, #26431	; 0x673f
        dest[i] = src[i];
     f10:	3c01      	subs	r4, #1
     f12:	b2e2      	uxtb	r2, r4
     f14:	3201      	adds	r2, #1
     f16:	0092      	lsls	r2, r2, #2
     f18:	a902      	add	r1, sp, #8
     f1a:	0030      	movs	r0, r6
     f1c:	f2c0 0300 	movt	r3, #0
     f20:	4798      	blx	r3
}
     f22:	b01b      	add	sp, #108	; 0x6c
     f24:	bc3c      	pop	{r2, r3, r4, r5}
     f26:	4690      	mov	r8, r2
     f28:	4699      	mov	r9, r3
     f2a:	46a2      	mov	sl, r4
     f2c:	46ab      	mov	fp, r5
     f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f30 <vli_mmod_fast_secp224r1>:
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp224r1(uint32_t *result, uint32_t *product)
{
     f30:	b5f0      	push	{r4, r5, r6, r7, lr}
     f32:	4657      	mov	r7, sl

    /* t */
    uECC_vli_set(result, product, num_words_secp224r1);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
     f34:	f240 0a00 	movw	sl, #0
        dest[i] = src[i];
     f38:	680b      	ldr	r3, [r1, #0]
{
     f3a:	46de      	mov	lr, fp
     f3c:	6003      	str	r3, [r0, #0]
     f3e:	684b      	ldr	r3, [r1, #4]
     f40:	464e      	mov	r6, r9
     f42:	6043      	str	r3, [r0, #4]
     f44:	688b      	ldr	r3, [r1, #8]
     f46:	4645      	mov	r5, r8
     f48:	6083      	str	r3, [r0, #8]
     f4a:	68cb      	ldr	r3, [r1, #12]
    __asm__ volatile (
     f4c:	f240 0b09 	movw	fp, #9
     f50:	60c3      	str	r3, [r0, #12]
     f52:	690b      	ldr	r3, [r1, #16]
     f54:	b5e0      	push	{r5, r6, r7, lr}
     f56:	6103      	str	r3, [r0, #16]
     f58:	694b      	ldr	r3, [r1, #20]
     f5a:	b08b      	sub	sp, #44	; 0x2c
     f5c:	6143      	str	r3, [r0, #20]
     f5e:	698b      	ldr	r3, [r1, #24]
     f60:	4689      	mov	r9, r1
     f62:	6183      	str	r3, [r0, #24]
    tmp[0] = tmp[1] = tmp[2] = 0;
     f64:	4653      	mov	r3, sl
     f66:	9305      	str	r3, [sp, #20]
     f68:	9304      	str	r3, [sp, #16]
     f6a:	9303      	str	r3, [sp, #12]
    tmp[3] = product[7];
     f6c:	69cb      	ldr	r3, [r1, #28]
     f6e:	ae03      	add	r6, sp, #12
     f70:	9306      	str	r3, [sp, #24]
    tmp[4] = product[8];
     f72:	6a0b      	ldr	r3, [r1, #32]
     f74:	465f      	mov	r7, fp
     f76:	9307      	str	r3, [sp, #28]
    tmp[5] = product[9];
     f78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
     f7a:	0005      	movs	r5, r0
     f7c:	9308      	str	r3, [sp, #32]
    tmp[6] = product[10];
     f7e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     f80:	9309      	str	r3, [sp, #36]	; 0x24
     f82:	0003      	movs	r3, r0
     f84:	2100      	movs	r1, #0
     f86:	a405      	add	r4, pc, #20	; (adr r4, f9c <vli_mmod_fast_secp224r1+0x6c>)
     f88:	46c0      	nop			; (mov r8, r8)
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	46c0      	nop			; (mov r8, r8)
     f8e:	46c0      	nop			; (mov r8, r8)
     f90:	193f      	adds	r7, r7, r4
     f92:	cd10      	ldmia	r5!, {r4}
     f94:	ce04      	ldmia	r6!, {r2}
     f96:	18a4      	adds	r4, r4, r2
     f98:	c310      	stmia	r3!, {r4}
     f9a:	4738      	bx	r7
     f9c:	cd10      	ldmia	r5!, {r4}
     f9e:	ce04      	ldmia	r6!, {r2}
     fa0:	4154      	adcs	r4, r2
     fa2:	c310      	stmia	r3!, {r4}
     fa4:	cd10      	ldmia	r5!, {r4}
     fa6:	ce04      	ldmia	r6!, {r2}
     fa8:	4154      	adcs	r4, r2
     faa:	c310      	stmia	r3!, {r4}
     fac:	cd10      	ldmia	r5!, {r4}
     fae:	ce04      	ldmia	r6!, {r2}
     fb0:	4154      	adcs	r4, r2
     fb2:	c310      	stmia	r3!, {r4}
     fb4:	cd10      	ldmia	r5!, {r4}
     fb6:	ce04      	ldmia	r6!, {r2}
     fb8:	4154      	adcs	r4, r2
     fba:	c310      	stmia	r3!, {r4}
     fbc:	cd10      	ldmia	r5!, {r4}
     fbe:	ce04      	ldmia	r6!, {r2}
     fc0:	4154      	adcs	r4, r2
     fc2:	c310      	stmia	r3!, {r4}
     fc4:	cd10      	ldmia	r5!, {r4}
     fc6:	ce04      	ldmia	r6!, {r2}
     fc8:	4154      	adcs	r4, r2
     fca:	c310      	stmia	r3!, {r4}
     fcc:	cd10      	ldmia	r5!, {r4}
     fce:	ce04      	ldmia	r6!, {r2}
     fd0:	4154      	adcs	r4, r2
     fd2:	c310      	stmia	r3!, {r4}
     fd4:	4149      	adcs	r1, r1
    carry = uECC_vli_add(result, result, tmp, num_words_secp224r1);

    /* s2 */
    tmp[3] = product[11];
     fd6:	464b      	mov	r3, r9
     fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     fda:	9100      	str	r1, [sp, #0]
     fdc:	9306      	str	r3, [sp, #24]
    tmp[4] = product[12];
     fde:	464b      	mov	r3, r9
     fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     fe2:	ae03      	add	r6, sp, #12
     fe4:	9307      	str	r3, [sp, #28]
    tmp[5] = product[13];
     fe6:	464b      	mov	r3, r9
     fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     fea:	465f      	mov	r7, fp
     fec:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
     fee:	4653      	mov	r3, sl
     ff0:	0005      	movs	r5, r0
     ff2:	9309      	str	r3, [sp, #36]	; 0x24
     ff4:	0003      	movs	r3, r0
     ff6:	2400      	movs	r4, #0
     ff8:	a204      	add	r2, pc, #16	; (adr r2, 100c <STACK_SIZE+0xc>)
     ffa:	46c0      	nop			; (mov r8, r8)
     ffc:	46c0      	nop			; (mov r8, r8)
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	18bf      	adds	r7, r7, r2
    1002:	cd04      	ldmia	r5!, {r2}
    1004:	ce02      	ldmia	r6!, {r1}
    1006:	1852      	adds	r2, r2, r1
    1008:	c304      	stmia	r3!, {r2}
    100a:	4738      	bx	r7
    100c:	cd04      	ldmia	r5!, {r2}
    100e:	ce02      	ldmia	r6!, {r1}
    1010:	414a      	adcs	r2, r1
    1012:	c304      	stmia	r3!, {r2}
    1014:	cd04      	ldmia	r5!, {r2}
    1016:	ce02      	ldmia	r6!, {r1}
    1018:	414a      	adcs	r2, r1
    101a:	c304      	stmia	r3!, {r2}
    101c:	cd04      	ldmia	r5!, {r2}
    101e:	ce02      	ldmia	r6!, {r1}
    1020:	414a      	adcs	r2, r1
    1022:	c304      	stmia	r3!, {r2}
    1024:	cd04      	ldmia	r5!, {r2}
    1026:	ce02      	ldmia	r6!, {r1}
    1028:	414a      	adcs	r2, r1
    102a:	c304      	stmia	r3!, {r2}
    102c:	cd04      	ldmia	r5!, {r2}
    102e:	ce02      	ldmia	r6!, {r1}
    1030:	414a      	adcs	r2, r1
    1032:	c304      	stmia	r3!, {r2}
    1034:	cd04      	ldmia	r5!, {r2}
    1036:	ce02      	ldmia	r6!, {r1}
    1038:	414a      	adcs	r2, r1
    103a:	c304      	stmia	r3!, {r2}
    103c:	cd04      	ldmia	r5!, {r2}
    103e:	ce02      	ldmia	r6!, {r1}
    1040:	414a      	adcs	r2, r1
    1042:	c304      	stmia	r3!, {r2}
    1044:	4164      	adcs	r4, r4
    carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);

    /* d1 */
    tmp[0] = product[7];
    1046:	464b      	mov	r3, r9
    1048:	69db      	ldr	r3, [r3, #28]
    104a:	46a4      	mov	ip, r4
    104c:	9303      	str	r3, [sp, #12]
    tmp[1] = product[8];
    104e:	464b      	mov	r3, r9
    1050:	6a1b      	ldr	r3, [r3, #32]
    __asm__ volatile (
    1052:	ae03      	add	r6, sp, #12
    1054:	9304      	str	r3, [sp, #16]
    tmp[2] = product[9];
    1056:	464b      	mov	r3, r9
    1058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    105a:	465f      	mov	r7, fp
    105c:	9305      	str	r3, [sp, #20]
    tmp[3] = product[10];
    105e:	464b      	mov	r3, r9
    1060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1062:	0004      	movs	r4, r0
    1064:	9306      	str	r3, [sp, #24]
    tmp[4] = product[11];
    1066:	464b      	mov	r3, r9
    1068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    106a:	9307      	str	r3, [sp, #28]
    tmp[5] = product[12];
    106c:	464b      	mov	r3, r9
    106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1070:	9308      	str	r3, [sp, #32]
    tmp[6] = product[13];
    1072:	464b      	mov	r3, r9
    1074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1076:	9309      	str	r3, [sp, #36]	; 0x24
    1078:	0003      	movs	r3, r0
    107a:	2500      	movs	r5, #0
    107c:	a203      	add	r2, pc, #12	; (adr r2, 108c <STACK_SIZE+0x8c>)
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	18bf      	adds	r7, r7, r2
    1082:	cc04      	ldmia	r4!, {r2}
    1084:	ce02      	ldmia	r6!, {r1}
    1086:	1a52      	subs	r2, r2, r1
    1088:	c304      	stmia	r3!, {r2}
    108a:	4738      	bx	r7
    108c:	cc04      	ldmia	r4!, {r2}
    108e:	ce02      	ldmia	r6!, {r1}
    1090:	418a      	sbcs	r2, r1
    1092:	c304      	stmia	r3!, {r2}
    1094:	cc04      	ldmia	r4!, {r2}
    1096:	ce02      	ldmia	r6!, {r1}
    1098:	418a      	sbcs	r2, r1
    109a:	c304      	stmia	r3!, {r2}
    109c:	cc04      	ldmia	r4!, {r2}
    109e:	ce02      	ldmia	r6!, {r1}
    10a0:	418a      	sbcs	r2, r1
    10a2:	c304      	stmia	r3!, {r2}
    10a4:	cc04      	ldmia	r4!, {r2}
    10a6:	ce02      	ldmia	r6!, {r1}
    10a8:	418a      	sbcs	r2, r1
    10aa:	c304      	stmia	r3!, {r2}
    10ac:	cc04      	ldmia	r4!, {r2}
    10ae:	ce02      	ldmia	r6!, {r1}
    10b0:	418a      	sbcs	r2, r1
    10b2:	c304      	stmia	r3!, {r2}
    10b4:	cc04      	ldmia	r4!, {r2}
    10b6:	ce02      	ldmia	r6!, {r1}
    10b8:	418a      	sbcs	r2, r1
    10ba:	c304      	stmia	r3!, {r2}
    10bc:	cc04      	ldmia	r4!, {r2}
    10be:	ce02      	ldmia	r6!, {r1}
    10c0:	418a      	sbcs	r2, r1
    10c2:	c304      	stmia	r3!, {r2}
    10c4:	416d      	adcs	r5, r5
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);

    /* d2 */
    tmp[0] = product[11];
    10c6:	464b      	mov	r3, r9
    10c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    10ca:	46a8      	mov	r8, r5
    10cc:	9303      	str	r3, [sp, #12]
    tmp[1] = product[12];
    10ce:	464b      	mov	r3, r9
    10d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    10d2:	0002      	movs	r2, r0
    10d4:	9304      	str	r3, [sp, #16]
    tmp[2] = product[13];
    10d6:	464b      	mov	r3, r9
    10d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    10da:	4659      	mov	r1, fp
    10dc:	9301      	str	r3, [sp, #4]
    10de:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = tmp[6] = 0;
    10e0:	4653      	mov	r3, sl
    10e2:	0004      	movs	r4, r0
    10e4:	9309      	str	r3, [sp, #36]	; 0x24
    10e6:	9308      	str	r3, [sp, #32]
    10e8:	9307      	str	r3, [sp, #28]
    10ea:	9306      	str	r3, [sp, #24]
    10ec:	ab03      	add	r3, sp, #12
    10ee:	2500      	movs	r5, #0
    10f0:	a706      	add	r7, pc, #24	; (adr r7, 110c <STACK_SIZE+0x10c>)
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	46c0      	nop			; (mov r8, r8)
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	46c0      	nop			; (mov r8, r8)
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	46c0      	nop			; (mov r8, r8)
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	19c9      	adds	r1, r1, r7
    1102:	cc80      	ldmia	r4!, {r7}
    1104:	cb40      	ldmia	r3!, {r6}
    1106:	1bbf      	subs	r7, r7, r6
    1108:	c280      	stmia	r2!, {r7}
    110a:	4708      	bx	r1
    110c:	cc80      	ldmia	r4!, {r7}
    110e:	cb40      	ldmia	r3!, {r6}
    1110:	41b7      	sbcs	r7, r6
    1112:	c280      	stmia	r2!, {r7}
    1114:	cc80      	ldmia	r4!, {r7}
    1116:	cb40      	ldmia	r3!, {r6}
    1118:	41b7      	sbcs	r7, r6
    111a:	c280      	stmia	r2!, {r7}
    111c:	cc80      	ldmia	r4!, {r7}
    111e:	cb40      	ldmia	r3!, {r6}
    1120:	41b7      	sbcs	r7, r6
    1122:	c280      	stmia	r2!, {r7}
    1124:	cc80      	ldmia	r4!, {r7}
    1126:	cb40      	ldmia	r3!, {r6}
    1128:	41b7      	sbcs	r7, r6
    112a:	c280      	stmia	r2!, {r7}
    112c:	cc80      	ldmia	r4!, {r7}
    112e:	cb40      	ldmia	r3!, {r6}
    1130:	41b7      	sbcs	r7, r6
    1132:	c280      	stmia	r2!, {r7}
    1134:	cc80      	ldmia	r4!, {r7}
    1136:	cb40      	ldmia	r3!, {r6}
    1138:	41b7      	sbcs	r7, r6
    113a:	c280      	stmia	r2!, {r7}
    113c:	cc80      	ldmia	r4!, {r7}
    113e:	cb40      	ldmia	r3!, {r6}
    1140:	41b7      	sbcs	r7, r6
    1142:	c280      	stmia	r2!, {r7}
    1144:	416d      	adcs	r5, r5
    carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);
    1146:	9b00      	ldr	r3, [sp, #0]
    1148:	f646 16d8 	movw	r6, #27096	; 0x69d8
    114c:	4463      	add	r3, ip
    114e:	001c      	movs	r4, r3
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    1150:	4643      	mov	r3, r8
    1152:	425a      	negs	r2, r3
    1154:	4153      	adcs	r3, r2
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
    1156:	1ae4      	subs	r4, r4, r3
    1158:	426b      	negs	r3, r5
    115a:	416b      	adcs	r3, r5
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
    115c:	1ae3      	subs	r3, r4, r3
    115e:	469c      	mov	ip, r3
    1160:	f2c0 0600 	movt	r6, #0

    if (carry < 0) {
    1164:	2b00      	cmp	r3, #0
    1166:	da00      	bge.n	116a <STACK_SIZE+0x16a>
    1168:	e04f      	b.n	120a <STACK_SIZE+0x20a>
    __asm__ volatile (
    116a:	1d33      	adds	r3, r6, #4
    116c:	4698      	mov	r8, r3
    116e:	f240 0909 	movw	r9, #9
    1172:	e03d      	b.n	11f0 <STACK_SIZE+0x1f0>
        if (left[i] > right[i]) {
    1174:	6943      	ldr	r3, [r0, #20]
    1176:	3301      	adds	r3, #1
    1178:	d140      	bne.n	11fc <STACK_SIZE+0x1fc>
    117a:	6903      	ldr	r3, [r0, #16]
    117c:	3301      	adds	r3, #1
    117e:	d13d      	bne.n	11fc <STACK_SIZE+0x1fc>
    1180:	68c3      	ldr	r3, [r0, #12]
    1182:	3301      	adds	r3, #1
    1184:	d13a      	bne.n	11fc <STACK_SIZE+0x1fc>
        } else if (left[i] < right[i]) {
    1186:	6883      	ldr	r3, [r0, #8]
    1188:	b923      	cbnz	r3, 1194 <STACK_SIZE+0x194>
    118a:	6843      	ldr	r3, [r0, #4]
    118c:	b913      	cbnz	r3, 1194 <STACK_SIZE+0x194>
        if (left[i] > right[i]) {
    118e:	6803      	ldr	r3, [r0, #0]
    1190:	2b00      	cmp	r3, #0
    1192:	d033      	beq.n	11fc <STACK_SIZE+0x1fc>
    1194:	0003      	movs	r3, r0
    1196:	4642      	mov	r2, r8
    1198:	4649      	mov	r1, r9
    119a:	0006      	movs	r6, r0
    119c:	2500      	movs	r5, #0
    119e:	a703      	add	r7, pc, #12	; (adr r7, 11ac <STACK_SIZE+0x1ac>)
    11a0:	19c9      	adds	r1, r1, r7
    11a2:	ce80      	ldmia	r6!, {r7}
    11a4:	ca10      	ldmia	r2!, {r4}
    11a6:	1b3f      	subs	r7, r7, r4
    11a8:	c380      	stmia	r3!, {r7}
    11aa:	4708      	bx	r1
    11ac:	ce80      	ldmia	r6!, {r7}
    11ae:	ca10      	ldmia	r2!, {r4}
    11b0:	41a7      	sbcs	r7, r4
    11b2:	c380      	stmia	r3!, {r7}
    11b4:	ce80      	ldmia	r6!, {r7}
    11b6:	ca10      	ldmia	r2!, {r4}
    11b8:	41a7      	sbcs	r7, r4
    11ba:	c380      	stmia	r3!, {r7}
    11bc:	ce80      	ldmia	r6!, {r7}
    11be:	ca10      	ldmia	r2!, {r4}
    11c0:	41a7      	sbcs	r7, r4
    11c2:	c380      	stmia	r3!, {r7}
    11c4:	ce80      	ldmia	r6!, {r7}
    11c6:	ca10      	ldmia	r2!, {r4}
    11c8:	41a7      	sbcs	r7, r4
    11ca:	c380      	stmia	r3!, {r7}
    11cc:	ce80      	ldmia	r6!, {r7}
    11ce:	ca10      	ldmia	r2!, {r4}
    11d0:	41a7      	sbcs	r7, r4
    11d2:	c380      	stmia	r3!, {r7}
    11d4:	ce80      	ldmia	r6!, {r7}
    11d6:	ca10      	ldmia	r2!, {r4}
    11d8:	41a7      	sbcs	r7, r4
    11da:	c380      	stmia	r3!, {r7}
    11dc:	ce80      	ldmia	r6!, {r7}
    11de:	ca10      	ldmia	r2!, {r4}
    11e0:	41a7      	sbcs	r7, r4
    11e2:	c380      	stmia	r3!, {r7}
    11e4:	416d      	adcs	r5, r5
        do {
            carry += uECC_vli_add(result, result, curve_secp224r1.p, num_words_secp224r1);
        } while (carry < 0);
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
            carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
    11e6:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    11e8:	426b      	negs	r3, r5
    11ea:	416b      	adcs	r3, r5
    11ec:	1ad3      	subs	r3, r2, r3
    11ee:	469c      	mov	ip, r3
        while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
    11f0:	4663      	mov	r3, ip
    11f2:	2b00      	cmp	r3, #0
    11f4:	d1ce      	bne.n	1194 <STACK_SIZE+0x194>
    11f6:	6983      	ldr	r3, [r0, #24]
    11f8:	3301      	adds	r3, #1
    11fa:	d0bb      	beq.n	1174 <STACK_SIZE+0x174>
        }
    }
}
    11fc:	b00b      	add	sp, #44	; 0x2c
    11fe:	bc3c      	pop	{r2, r3, r4, r5}
    1200:	4690      	mov	r8, r2
    1202:	4699      	mov	r9, r3
    1204:	46a2      	mov	sl, r4
    1206:	46ab      	mov	fp, r5
    1208:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (
    120a:	1d33      	adds	r3, r6, #4
    120c:	4698      	mov	r8, r3
    120e:	f240 0909 	movw	r9, #9
    1212:	0003      	movs	r3, r0
    1214:	4642      	mov	r2, r8
    1216:	4649      	mov	r1, r9
    1218:	0004      	movs	r4, r0
    121a:	2500      	movs	r5, #0
    121c:	a603      	add	r6, pc, #12	; (adr r6, 122c <STACK_SIZE+0x22c>)
    121e:	46c0      	nop			; (mov r8, r8)
    1220:	1989      	adds	r1, r1, r6
    1222:	cc40      	ldmia	r4!, {r6}
    1224:	ca80      	ldmia	r2!, {r7}
    1226:	19f6      	adds	r6, r6, r7
    1228:	c340      	stmia	r3!, {r6}
    122a:	4708      	bx	r1
    122c:	cc40      	ldmia	r4!, {r6}
    122e:	ca80      	ldmia	r2!, {r7}
    1230:	417e      	adcs	r6, r7
    1232:	c340      	stmia	r3!, {r6}
    1234:	cc40      	ldmia	r4!, {r6}
    1236:	ca80      	ldmia	r2!, {r7}
    1238:	417e      	adcs	r6, r7
    123a:	c340      	stmia	r3!, {r6}
    123c:	cc40      	ldmia	r4!, {r6}
    123e:	ca80      	ldmia	r2!, {r7}
    1240:	417e      	adcs	r6, r7
    1242:	c340      	stmia	r3!, {r6}
    1244:	cc40      	ldmia	r4!, {r6}
    1246:	ca80      	ldmia	r2!, {r7}
    1248:	417e      	adcs	r6, r7
    124a:	c340      	stmia	r3!, {r6}
    124c:	cc40      	ldmia	r4!, {r6}
    124e:	ca80      	ldmia	r2!, {r7}
    1250:	417e      	adcs	r6, r7
    1252:	c340      	stmia	r3!, {r6}
    1254:	cc40      	ldmia	r4!, {r6}
    1256:	ca80      	ldmia	r2!, {r7}
    1258:	417e      	adcs	r6, r7
    125a:	c340      	stmia	r3!, {r6}
    125c:	cc40      	ldmia	r4!, {r6}
    125e:	ca80      	ldmia	r2!, {r7}
    1260:	417e      	adcs	r6, r7
    1262:	c340      	stmia	r3!, {r6}
    1264:	416d      	adcs	r5, r5
        } while (carry < 0);
    1266:	4663      	mov	r3, ip
    1268:	195b      	adds	r3, r3, r5
    126a:	469c      	mov	ip, r3
    126c:	d4d1      	bmi.n	1212 <STACK_SIZE+0x212>
    126e:	e7c5      	b.n	11fc <STACK_SIZE+0x1fc>

00001270 <mod_sqrt_secp224r1_rs>:
                                  const uECC_word_t *f0) {
    1270:	b5f0      	push	{r4, r5, r6, r7, lr}
    1272:	46de      	mov	lr, fp
    1274:	4657      	mov	r7, sl
    1276:	464e      	mov	r6, r9
    1278:	4645      	mov	r5, r8
    127a:	4699      	mov	r9, r3
    uECC_vli_mult(product, left, right, curve->num_words);
    127c:	f240 78ed 	movw	r8, #2029	; 0x7ed
    1280:	b5e0      	push	{r5, r6, r7, lr}
    1282:	b09b      	sub	sp, #108	; 0x6c
    1284:	4683      	mov	fp, r0
    1286:	468a      	mov	sl, r1
    1288:	a80a      	add	r0, sp, #40	; 0x28
    128a:	4649      	mov	r1, r9
    128c:	f2c0 0800 	movt	r8, #0
    1290:	0014      	movs	r4, r2
    1292:	2307      	movs	r3, #7
    1294:	464a      	mov	r2, r9
    1296:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    1298:	f640 7331 	movw	r3, #3889	; 0xf31
    129c:	a90a      	add	r1, sp, #40	; 0x28
    129e:	f2c0 0300 	movt	r3, #0
    12a2:	a803      	add	r0, sp, #12
    12a4:	001d      	movs	r5, r3
    12a6:	9301      	str	r3, [sp, #4]
    12a8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    12aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    12ac:	2307      	movs	r3, #7
    12ae:	4649      	mov	r1, r9
    12b0:	a80a      	add	r0, sp, #40	; 0x28
    12b2:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    12b4:	a90a      	add	r1, sp, #40	; 0x28
    12b6:	4650      	mov	r0, sl
    12b8:	47a8      	blx	r5
    12ba:	465b      	mov	r3, fp
    12bc:	aa03      	add	r2, sp, #12
    12be:	9925      	ldr	r1, [sp, #148]	; 0x94
    12c0:	2009      	movs	r0, #9
    12c2:	2700      	movs	r7, #0
    12c4:	a605      	add	r6, pc, #20	; (adr r6, 12dc <mod_sqrt_secp224r1_rs+0x6c>)
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	46c0      	nop			; (mov r8, r8)
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	46c0      	nop			; (mov r8, r8)
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	1980      	adds	r0, r0, r6
    12d2:	ca40      	ldmia	r2!, {r6}
    12d4:	c920      	ldmia	r1!, {r5}
    12d6:	1976      	adds	r6, r6, r5
    12d8:	c340      	stmia	r3!, {r6}
    12da:	4700      	bx	r0
    12dc:	ca40      	ldmia	r2!, {r6}
    12de:	c920      	ldmia	r1!, {r5}
    12e0:	416e      	adcs	r6, r5
    12e2:	c340      	stmia	r3!, {r6}
    12e4:	ca40      	ldmia	r2!, {r6}
    12e6:	c920      	ldmia	r1!, {r5}
    12e8:	416e      	adcs	r6, r5
    12ea:	c340      	stmia	r3!, {r6}
    12ec:	ca40      	ldmia	r2!, {r6}
    12ee:	c920      	ldmia	r1!, {r5}
    12f0:	416e      	adcs	r6, r5
    12f2:	c340      	stmia	r3!, {r6}
    12f4:	ca40      	ldmia	r2!, {r6}
    12f6:	c920      	ldmia	r1!, {r5}
    12f8:	416e      	adcs	r6, r5
    12fa:	c340      	stmia	r3!, {r6}
    12fc:	ca40      	ldmia	r2!, {r6}
    12fe:	c920      	ldmia	r1!, {r5}
    1300:	416e      	adcs	r6, r5
    1302:	c340      	stmia	r3!, {r6}
    1304:	ca40      	ldmia	r2!, {r6}
    1306:	c920      	ldmia	r1!, {r5}
    1308:	416e      	adcs	r6, r5
    130a:	c340      	stmia	r3!, {r6}
    130c:	ca40      	ldmia	r2!, {r6}
    130e:	c920      	ldmia	r1!, {r5}
    1310:	416e      	adcs	r6, r5
    1312:	c340      	stmia	r3!, {r6}
    1314:	417f      	adcs	r7, r7
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1316:	b9cf      	cbnz	r7, 134c <mod_sqrt_secp224r1_rs+0xdc>
        if (left[i] > right[i]) {
    1318:	465b      	mov	r3, fp
    131a:	699b      	ldr	r3, [r3, #24]
    131c:	3301      	adds	r3, #1
    131e:	d142      	bne.n	13a6 <mod_sqrt_secp224r1_rs+0x136>
    1320:	465b      	mov	r3, fp
    1322:	695b      	ldr	r3, [r3, #20]
    1324:	3301      	adds	r3, #1
    1326:	d13e      	bne.n	13a6 <mod_sqrt_secp224r1_rs+0x136>
    1328:	465b      	mov	r3, fp
    132a:	691b      	ldr	r3, [r3, #16]
    132c:	3301      	adds	r3, #1
    132e:	d13a      	bne.n	13a6 <mod_sqrt_secp224r1_rs+0x136>
    1330:	465b      	mov	r3, fp
    1332:	68db      	ldr	r3, [r3, #12]
    1334:	3301      	adds	r3, #1
    1336:	d136      	bne.n	13a6 <mod_sqrt_secp224r1_rs+0x136>
        } else if (left[i] < right[i]) {
    1338:	465b      	mov	r3, fp
    133a:	689b      	ldr	r3, [r3, #8]
    133c:	b933      	cbnz	r3, 134c <mod_sqrt_secp224r1_rs+0xdc>
    133e:	465b      	mov	r3, fp
    1340:	685b      	ldr	r3, [r3, #4]
    1342:	b91b      	cbnz	r3, 134c <mod_sqrt_secp224r1_rs+0xdc>
        if (left[i] > right[i]) {
    1344:	465b      	mov	r3, fp
    1346:	681b      	ldr	r3, [r3, #0]
    1348:	2b00      	cmp	r3, #0
    134a:	d02c      	beq.n	13a6 <mod_sqrt_secp224r1_rs+0x136>
    __asm__ volatile (
    134c:	f646 13d8 	movw	r3, #27096	; 0x69d8
    1350:	f2c0 0300 	movt	r3, #0
    1354:	3304      	adds	r3, #4
    1356:	4658      	mov	r0, fp
    1358:	2209      	movs	r2, #9
    135a:	4659      	mov	r1, fp
    135c:	2600      	movs	r6, #0
    135e:	a503      	add	r5, pc, #12	; (adr r5, 136c <mod_sqrt_secp224r1_rs+0xfc>)
    1360:	1952      	adds	r2, r2, r5
    1362:	c920      	ldmia	r1!, {r5}
    1364:	cb80      	ldmia	r3!, {r7}
    1366:	1bed      	subs	r5, r5, r7
    1368:	c020      	stmia	r0!, {r5}
    136a:	4710      	bx	r2
    136c:	c920      	ldmia	r1!, {r5}
    136e:	cb80      	ldmia	r3!, {r7}
    1370:	41bd      	sbcs	r5, r7
    1372:	c020      	stmia	r0!, {r5}
    1374:	c920      	ldmia	r1!, {r5}
    1376:	cb80      	ldmia	r3!, {r7}
    1378:	41bd      	sbcs	r5, r7
    137a:	c020      	stmia	r0!, {r5}
    137c:	c920      	ldmia	r1!, {r5}
    137e:	cb80      	ldmia	r3!, {r7}
    1380:	41bd      	sbcs	r5, r7
    1382:	c020      	stmia	r0!, {r5}
    1384:	c920      	ldmia	r1!, {r5}
    1386:	cb80      	ldmia	r3!, {r7}
    1388:	41bd      	sbcs	r5, r7
    138a:	c020      	stmia	r0!, {r5}
    138c:	c920      	ldmia	r1!, {r5}
    138e:	cb80      	ldmia	r3!, {r7}
    1390:	41bd      	sbcs	r5, r7
    1392:	c020      	stmia	r0!, {r5}
    1394:	c920      	ldmia	r1!, {r5}
    1396:	cb80      	ldmia	r3!, {r7}
    1398:	41bd      	sbcs	r5, r7
    139a:	c020      	stmia	r0!, {r5}
    139c:	c920      	ldmia	r1!, {r5}
    139e:	cb80      	ldmia	r3!, {r7}
    13a0:	41bd      	sbcs	r5, r7
    13a2:	c020      	stmia	r0!, {r5}
    13a4:	4176      	adcs	r6, r6
    __asm__ volatile (
    13a6:	4653      	mov	r3, sl
    13a8:	2209      	movs	r2, #9
    13aa:	4650      	mov	r0, sl
    13ac:	4656      	mov	r6, sl
    13ae:	2100      	movs	r1, #0
    13b0:	a506      	add	r5, pc, #24	; (adr r5, 13cc <mod_sqrt_secp224r1_rs+0x15c>)
    13b2:	46c0      	nop			; (mov r8, r8)
    13b4:	46c0      	nop			; (mov r8, r8)
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	46c0      	nop			; (mov r8, r8)
    13ba:	46c0      	nop			; (mov r8, r8)
    13bc:	46c0      	nop			; (mov r8, r8)
    13be:	46c0      	nop			; (mov r8, r8)
    13c0:	1952      	adds	r2, r2, r5
    13c2:	c820      	ldmia	r0!, {r5}
    13c4:	ce80      	ldmia	r6!, {r7}
    13c6:	19ed      	adds	r5, r5, r7
    13c8:	c320      	stmia	r3!, {r5}
    13ca:	4710      	bx	r2
    13cc:	c820      	ldmia	r0!, {r5}
    13ce:	ce80      	ldmia	r6!, {r7}
    13d0:	417d      	adcs	r5, r7
    13d2:	c320      	stmia	r3!, {r5}
    13d4:	c820      	ldmia	r0!, {r5}
    13d6:	ce80      	ldmia	r6!, {r7}
    13d8:	417d      	adcs	r5, r7
    13da:	c320      	stmia	r3!, {r5}
    13dc:	c820      	ldmia	r0!, {r5}
    13de:	ce80      	ldmia	r6!, {r7}
    13e0:	417d      	adcs	r5, r7
    13e2:	c320      	stmia	r3!, {r5}
    13e4:	c820      	ldmia	r0!, {r5}
    13e6:	ce80      	ldmia	r6!, {r7}
    13e8:	417d      	adcs	r5, r7
    13ea:	c320      	stmia	r3!, {r5}
    13ec:	c820      	ldmia	r0!, {r5}
    13ee:	ce80      	ldmia	r6!, {r7}
    13f0:	417d      	adcs	r5, r7
    13f2:	c320      	stmia	r3!, {r5}
    13f4:	c820      	ldmia	r0!, {r5}
    13f6:	ce80      	ldmia	r6!, {r7}
    13f8:	417d      	adcs	r5, r7
    13fa:	c320      	stmia	r3!, {r5}
    13fc:	c820      	ldmia	r0!, {r5}
    13fe:	ce80      	ldmia	r6!, {r7}
    1400:	417d      	adcs	r5, r7
    1402:	c320      	stmia	r3!, {r5}
    1404:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1406:	b9c9      	cbnz	r1, 143c <mod_sqrt_secp224r1_rs+0x1cc>
        if (left[i] > right[i]) {
    1408:	4653      	mov	r3, sl
    140a:	699b      	ldr	r3, [r3, #24]
    140c:	3301      	adds	r3, #1
    140e:	d142      	bne.n	1496 <mod_sqrt_secp224r1_rs+0x226>
    1410:	4653      	mov	r3, sl
    1412:	695b      	ldr	r3, [r3, #20]
    1414:	3301      	adds	r3, #1
    1416:	d13e      	bne.n	1496 <mod_sqrt_secp224r1_rs+0x226>
    1418:	4653      	mov	r3, sl
    141a:	691b      	ldr	r3, [r3, #16]
    141c:	3301      	adds	r3, #1
    141e:	d13a      	bne.n	1496 <mod_sqrt_secp224r1_rs+0x226>
    1420:	4653      	mov	r3, sl
    1422:	68db      	ldr	r3, [r3, #12]
    1424:	3301      	adds	r3, #1
    1426:	d136      	bne.n	1496 <mod_sqrt_secp224r1_rs+0x226>
        } else if (left[i] < right[i]) {
    1428:	4653      	mov	r3, sl
    142a:	689b      	ldr	r3, [r3, #8]
    142c:	b933      	cbnz	r3, 143c <mod_sqrt_secp224r1_rs+0x1cc>
    142e:	4653      	mov	r3, sl
    1430:	685b      	ldr	r3, [r3, #4]
    1432:	b91b      	cbnz	r3, 143c <mod_sqrt_secp224r1_rs+0x1cc>
        if (left[i] > right[i]) {
    1434:	4653      	mov	r3, sl
    1436:	681b      	ldr	r3, [r3, #0]
    1438:	2b00      	cmp	r3, #0
    143a:	d02c      	beq.n	1496 <mod_sqrt_secp224r1_rs+0x226>
    __asm__ volatile (
    143c:	f646 13d8 	movw	r3, #27096	; 0x69d8
    1440:	f2c0 0300 	movt	r3, #0
    1444:	3304      	adds	r3, #4
    1446:	4651      	mov	r1, sl
    1448:	2209      	movs	r2, #9
    144a:	4650      	mov	r0, sl
    144c:	2500      	movs	r5, #0
    144e:	a603      	add	r6, pc, #12	; (adr r6, 145c <mod_sqrt_secp224r1_rs+0x1ec>)
    1450:	1992      	adds	r2, r2, r6
    1452:	c840      	ldmia	r0!, {r6}
    1454:	cb80      	ldmia	r3!, {r7}
    1456:	1bf6      	subs	r6, r6, r7
    1458:	c140      	stmia	r1!, {r6}
    145a:	4710      	bx	r2
    145c:	c840      	ldmia	r0!, {r6}
    145e:	cb80      	ldmia	r3!, {r7}
    1460:	41be      	sbcs	r6, r7
    1462:	c140      	stmia	r1!, {r6}
    1464:	c840      	ldmia	r0!, {r6}
    1466:	cb80      	ldmia	r3!, {r7}
    1468:	41be      	sbcs	r6, r7
    146a:	c140      	stmia	r1!, {r6}
    146c:	c840      	ldmia	r0!, {r6}
    146e:	cb80      	ldmia	r3!, {r7}
    1470:	41be      	sbcs	r6, r7
    1472:	c140      	stmia	r1!, {r6}
    1474:	c840      	ldmia	r0!, {r6}
    1476:	cb80      	ldmia	r3!, {r7}
    1478:	41be      	sbcs	r6, r7
    147a:	c140      	stmia	r1!, {r6}
    147c:	c840      	ldmia	r0!, {r6}
    147e:	cb80      	ldmia	r3!, {r7}
    1480:	41be      	sbcs	r6, r7
    1482:	c140      	stmia	r1!, {r6}
    1484:	c840      	ldmia	r0!, {r6}
    1486:	cb80      	ldmia	r3!, {r7}
    1488:	41be      	sbcs	r6, r7
    148a:	c140      	stmia	r1!, {r6}
    148c:	c840      	ldmia	r0!, {r6}
    148e:	cb80      	ldmia	r3!, {r7}
    1490:	41be      	sbcs	r6, r7
    1492:	c140      	stmia	r1!, {r6}
    1494:	416d      	adcs	r5, r5
    uECC_vli_mult(product, left, right, curve->num_words);
    1496:	9a25      	ldr	r2, [sp, #148]	; 0x94
    1498:	a903      	add	r1, sp, #12
    149a:	a80a      	add	r0, sp, #40	; 0x28
    149c:	2307      	movs	r3, #7
    149e:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    14a0:	0020      	movs	r0, r4
    14a2:	9b01      	ldr	r3, [sp, #4]
    14a4:	a90a      	add	r1, sp, #40	; 0x28
    14a6:	4798      	blx	r3
    __asm__ volatile (
    14a8:	0025      	movs	r5, r4
    14aa:	0023      	movs	r3, r4
    14ac:	2209      	movs	r2, #9
    14ae:	0020      	movs	r0, r4
    14b0:	2100      	movs	r1, #0
    14b2:	a606      	add	r6, pc, #24	; (adr r6, 14cc <mod_sqrt_secp224r1_rs+0x25c>)
    14b4:	46c0      	nop			; (mov r8, r8)
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	46c0      	nop			; (mov r8, r8)
    14ba:	46c0      	nop			; (mov r8, r8)
    14bc:	46c0      	nop			; (mov r8, r8)
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	1992      	adds	r2, r2, r6
    14c2:	c840      	ldmia	r0!, {r6}
    14c4:	cd80      	ldmia	r5!, {r7}
    14c6:	19f6      	adds	r6, r6, r7
    14c8:	c340      	stmia	r3!, {r6}
    14ca:	4710      	bx	r2
    14cc:	c840      	ldmia	r0!, {r6}
    14ce:	cd80      	ldmia	r5!, {r7}
    14d0:	417e      	adcs	r6, r7
    14d2:	c340      	stmia	r3!, {r6}
    14d4:	c840      	ldmia	r0!, {r6}
    14d6:	cd80      	ldmia	r5!, {r7}
    14d8:	417e      	adcs	r6, r7
    14da:	c340      	stmia	r3!, {r6}
    14dc:	c840      	ldmia	r0!, {r6}
    14de:	cd80      	ldmia	r5!, {r7}
    14e0:	417e      	adcs	r6, r7
    14e2:	c340      	stmia	r3!, {r6}
    14e4:	c840      	ldmia	r0!, {r6}
    14e6:	cd80      	ldmia	r5!, {r7}
    14e8:	417e      	adcs	r6, r7
    14ea:	c340      	stmia	r3!, {r6}
    14ec:	c840      	ldmia	r0!, {r6}
    14ee:	cd80      	ldmia	r5!, {r7}
    14f0:	417e      	adcs	r6, r7
    14f2:	c340      	stmia	r3!, {r6}
    14f4:	c840      	ldmia	r0!, {r6}
    14f6:	cd80      	ldmia	r5!, {r7}
    14f8:	417e      	adcs	r6, r7
    14fa:	c340      	stmia	r3!, {r6}
    14fc:	c840      	ldmia	r0!, {r6}
    14fe:	cd80      	ldmia	r5!, {r7}
    1500:	417e      	adcs	r6, r7
    1502:	c340      	stmia	r3!, {r6}
    1504:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1506:	b991      	cbnz	r1, 152e <mod_sqrt_secp224r1_rs+0x2be>
        if (left[i] > right[i]) {
    1508:	69a3      	ldr	r3, [r4, #24]
    150a:	3301      	adds	r3, #1
    150c:	d143      	bne.n	1596 <mod_sqrt_secp224r1_rs+0x326>
    150e:	6963      	ldr	r3, [r4, #20]
    1510:	3301      	adds	r3, #1
    1512:	d140      	bne.n	1596 <mod_sqrt_secp224r1_rs+0x326>
    1514:	6923      	ldr	r3, [r4, #16]
    1516:	3301      	adds	r3, #1
    1518:	d13d      	bne.n	1596 <mod_sqrt_secp224r1_rs+0x326>
    151a:	68e3      	ldr	r3, [r4, #12]
    151c:	3301      	adds	r3, #1
    151e:	d13a      	bne.n	1596 <mod_sqrt_secp224r1_rs+0x326>
        } else if (left[i] < right[i]) {
    1520:	68a3      	ldr	r3, [r4, #8]
    1522:	b923      	cbnz	r3, 152e <mod_sqrt_secp224r1_rs+0x2be>
    1524:	6863      	ldr	r3, [r4, #4]
    1526:	b913      	cbnz	r3, 152e <mod_sqrt_secp224r1_rs+0x2be>
        if (left[i] > right[i]) {
    1528:	6823      	ldr	r3, [r4, #0]
    152a:	2b00      	cmp	r3, #0
    152c:	d033      	beq.n	1596 <mod_sqrt_secp224r1_rs+0x326>
    __asm__ volatile (
    152e:	f646 12d8 	movw	r2, #27096	; 0x69d8
    1532:	f2c0 0200 	movt	r2, #0
    1536:	3204      	adds	r2, #4
    1538:	0023      	movs	r3, r4
    153a:	2109      	movs	r1, #9
    153c:	0020      	movs	r0, r4
    153e:	2500      	movs	r5, #0
    1540:	a606      	add	r6, pc, #24	; (adr r6, 155c <mod_sqrt_secp224r1_rs+0x2ec>)
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	46c0      	nop			; (mov r8, r8)
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	46c0      	nop			; (mov r8, r8)
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	46c0      	nop			; (mov r8, r8)
    154e:	46c0      	nop			; (mov r8, r8)
    1550:	1989      	adds	r1, r1, r6
    1552:	c840      	ldmia	r0!, {r6}
    1554:	ca80      	ldmia	r2!, {r7}
    1556:	1bf6      	subs	r6, r6, r7
    1558:	c340      	stmia	r3!, {r6}
    155a:	4708      	bx	r1
    155c:	c840      	ldmia	r0!, {r6}
    155e:	ca80      	ldmia	r2!, {r7}
    1560:	41be      	sbcs	r6, r7
    1562:	c340      	stmia	r3!, {r6}
    1564:	c840      	ldmia	r0!, {r6}
    1566:	ca80      	ldmia	r2!, {r7}
    1568:	41be      	sbcs	r6, r7
    156a:	c340      	stmia	r3!, {r6}
    156c:	c840      	ldmia	r0!, {r6}
    156e:	ca80      	ldmia	r2!, {r7}
    1570:	41be      	sbcs	r6, r7
    1572:	c340      	stmia	r3!, {r6}
    1574:	c840      	ldmia	r0!, {r6}
    1576:	ca80      	ldmia	r2!, {r7}
    1578:	41be      	sbcs	r6, r7
    157a:	c340      	stmia	r3!, {r6}
    157c:	c840      	ldmia	r0!, {r6}
    157e:	ca80      	ldmia	r2!, {r7}
    1580:	41be      	sbcs	r6, r7
    1582:	c340      	stmia	r3!, {r6}
    1584:	c840      	ldmia	r0!, {r6}
    1586:	ca80      	ldmia	r2!, {r7}
    1588:	41be      	sbcs	r6, r7
    158a:	c340      	stmia	r3!, {r6}
    158c:	c840      	ldmia	r0!, {r6}
    158e:	ca80      	ldmia	r2!, {r7}
    1590:	41be      	sbcs	r6, r7
    1592:	c340      	stmia	r3!, {r6}
    1594:	416d      	adcs	r5, r5
    __asm__ volatile (
    1596:	0023      	movs	r3, r4
    1598:	2209      	movs	r2, #9
    159a:	0020      	movs	r0, r4
    159c:	0025      	movs	r5, r4
    159e:	2100      	movs	r1, #0
    15a0:	a606      	add	r6, pc, #24	; (adr r6, 15bc <mod_sqrt_secp224r1_rs+0x34c>)
    15a2:	46c0      	nop			; (mov r8, r8)
    15a4:	46c0      	nop			; (mov r8, r8)
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	46c0      	nop			; (mov r8, r8)
    15aa:	46c0      	nop			; (mov r8, r8)
    15ac:	46c0      	nop			; (mov r8, r8)
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	1992      	adds	r2, r2, r6
    15b2:	c840      	ldmia	r0!, {r6}
    15b4:	cd80      	ldmia	r5!, {r7}
    15b6:	19f6      	adds	r6, r6, r7
    15b8:	c340      	stmia	r3!, {r6}
    15ba:	4710      	bx	r2
    15bc:	c840      	ldmia	r0!, {r6}
    15be:	cd80      	ldmia	r5!, {r7}
    15c0:	417e      	adcs	r6, r7
    15c2:	c340      	stmia	r3!, {r6}
    15c4:	c840      	ldmia	r0!, {r6}
    15c6:	cd80      	ldmia	r5!, {r7}
    15c8:	417e      	adcs	r6, r7
    15ca:	c340      	stmia	r3!, {r6}
    15cc:	c840      	ldmia	r0!, {r6}
    15ce:	cd80      	ldmia	r5!, {r7}
    15d0:	417e      	adcs	r6, r7
    15d2:	c340      	stmia	r3!, {r6}
    15d4:	c840      	ldmia	r0!, {r6}
    15d6:	cd80      	ldmia	r5!, {r7}
    15d8:	417e      	adcs	r6, r7
    15da:	c340      	stmia	r3!, {r6}
    15dc:	c840      	ldmia	r0!, {r6}
    15de:	cd80      	ldmia	r5!, {r7}
    15e0:	417e      	adcs	r6, r7
    15e2:	c340      	stmia	r3!, {r6}
    15e4:	c840      	ldmia	r0!, {r6}
    15e6:	cd80      	ldmia	r5!, {r7}
    15e8:	417e      	adcs	r6, r7
    15ea:	c340      	stmia	r3!, {r6}
    15ec:	c840      	ldmia	r0!, {r6}
    15ee:	cd80      	ldmia	r5!, {r7}
    15f0:	417e      	adcs	r6, r7
    15f2:	c340      	stmia	r3!, {r6}
    15f4:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    15f6:	b991      	cbnz	r1, 161e <mod_sqrt_secp224r1_rs+0x3ae>
        if (left[i] > right[i]) {
    15f8:	69a3      	ldr	r3, [r4, #24]
    15fa:	3301      	adds	r3, #1
    15fc:	d13b      	bne.n	1676 <mod_sqrt_secp224r1_rs+0x406>
    15fe:	6963      	ldr	r3, [r4, #20]
    1600:	3301      	adds	r3, #1
    1602:	d138      	bne.n	1676 <mod_sqrt_secp224r1_rs+0x406>
    1604:	6923      	ldr	r3, [r4, #16]
    1606:	3301      	adds	r3, #1
    1608:	d135      	bne.n	1676 <mod_sqrt_secp224r1_rs+0x406>
    160a:	68e3      	ldr	r3, [r4, #12]
    160c:	3301      	adds	r3, #1
    160e:	d132      	bne.n	1676 <mod_sqrt_secp224r1_rs+0x406>
        } else if (left[i] < right[i]) {
    1610:	68a3      	ldr	r3, [r4, #8]
    1612:	b923      	cbnz	r3, 161e <mod_sqrt_secp224r1_rs+0x3ae>
    1614:	6863      	ldr	r3, [r4, #4]
    1616:	b913      	cbnz	r3, 161e <mod_sqrt_secp224r1_rs+0x3ae>
        if (left[i] > right[i]) {
    1618:	6823      	ldr	r3, [r4, #0]
    161a:	2b00      	cmp	r3, #0
    161c:	d02b      	beq.n	1676 <mod_sqrt_secp224r1_rs+0x406>
    __asm__ volatile (
    161e:	f646 13d8 	movw	r3, #27096	; 0x69d8
    1622:	f2c0 0300 	movt	r3, #0
    1626:	3304      	adds	r3, #4
    1628:	2209      	movs	r2, #9
    162a:	0021      	movs	r1, r4
    162c:	2000      	movs	r0, #0
    162e:	a503      	add	r5, pc, #12	; (adr r5, 163c <mod_sqrt_secp224r1_rs+0x3cc>)
    1630:	1952      	adds	r2, r2, r5
    1632:	c920      	ldmia	r1!, {r5}
    1634:	cb40      	ldmia	r3!, {r6}
    1636:	1bad      	subs	r5, r5, r6
    1638:	c420      	stmia	r4!, {r5}
    163a:	4710      	bx	r2
    163c:	c920      	ldmia	r1!, {r5}
    163e:	cb40      	ldmia	r3!, {r6}
    1640:	41b5      	sbcs	r5, r6
    1642:	c420      	stmia	r4!, {r5}
    1644:	c920      	ldmia	r1!, {r5}
    1646:	cb40      	ldmia	r3!, {r6}
    1648:	41b5      	sbcs	r5, r6
    164a:	c420      	stmia	r4!, {r5}
    164c:	c920      	ldmia	r1!, {r5}
    164e:	cb40      	ldmia	r3!, {r6}
    1650:	41b5      	sbcs	r5, r6
    1652:	c420      	stmia	r4!, {r5}
    1654:	c920      	ldmia	r1!, {r5}
    1656:	cb40      	ldmia	r3!, {r6}
    1658:	41b5      	sbcs	r5, r6
    165a:	c420      	stmia	r4!, {r5}
    165c:	c920      	ldmia	r1!, {r5}
    165e:	cb40      	ldmia	r3!, {r6}
    1660:	41b5      	sbcs	r5, r6
    1662:	c420      	stmia	r4!, {r5}
    1664:	c920      	ldmia	r1!, {r5}
    1666:	cb40      	ldmia	r3!, {r6}
    1668:	41b5      	sbcs	r5, r6
    166a:	c420      	stmia	r4!, {r5}
    166c:	c920      	ldmia	r1!, {r5}
    166e:	cb40      	ldmia	r3!, {r6}
    1670:	41b5      	sbcs	r5, r6
    1672:	c420      	stmia	r4!, {r5}
    1674:	4140      	adcs	r0, r0
}
    1676:	b01b      	add	sp, #108	; 0x6c
    1678:	bc3c      	pop	{r2, r3, r4, r5}
    167a:	4690      	mov	r8, r2
    167c:	4699      	mov	r9, r3
    167e:	46a2      	mov	sl, r4
    1680:	46ab      	mov	fp, r5
    1682:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001684 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	46de      	mov	lr, fp
    1688:	4657      	mov	r7, sl
    168a:	464e      	mov	r6, r9
    168c:	4645      	mov	r5, r8
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    168e:	f246 7475 	movw	r4, #26485	; 0x6775
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1692:	b5e0      	push	{r5, r6, r7, lr}
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    1694:	2701      	movs	r7, #1
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1696:	b0a7      	sub	sp, #156	; 0x9c
    1698:	000e      	movs	r6, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    169a:	f2c0 0400 	movt	r4, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    169e:	9003      	str	r0, [sp, #12]
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    16a0:	2220      	movs	r2, #32
    16a2:	2100      	movs	r1, #0
    16a4:	a806      	add	r0, sp, #24
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    16a6:	ad0e      	add	r5, sp, #56	; 0x38
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    16a8:	47a0      	blx	r4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    16aa:	2220      	movs	r2, #32
    16ac:	2100      	movs	r1, #0
    16ae:	0028      	movs	r0, r5
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    16b0:	9706      	str	r7, [sp, #24]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    16b2:	47a0      	blx	r4
    wordcount_t num_words = curve->num_words;
    16b4:	2300      	movs	r3, #0
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    16b6:	970e      	str	r7, [sp, #56]	; 0x38
    wordcount_t num_words = curve->num_words;
    16b8:	56f3      	ldrsb	r3, [r6, r3]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    16ba:	f240 7431 	movw	r4, #1841	; 0x731
    wordcount_t num_words = curve->num_words;
    16be:	001f      	movs	r7, r3
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    16c0:	aa06      	add	r2, sp, #24
    16c2:	0010      	movs	r0, r2
    16c4:	1d31      	adds	r1, r6, #4
    16c6:	f2c0 0400 	movt	r4, #0
    wordcount_t num_words = curve->num_words;
    16ca:	9304      	str	r3, [sp, #16]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    16cc:	47a0      	blx	r4
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    16ce:	1e7a      	subs	r2, r7, #1
    16d0:	b2d3      	uxtb	r3, r2
    16d2:	9305      	str	r3, [sp, #20]
    16d4:	b25b      	sxtb	r3, r3
    16d6:	2b00      	cmp	r3, #0
    16d8:	da05      	bge.n	16e6 <mod_sqrt_default+0x62>
    16da:	e00c      	b.n	16f6 <mod_sqrt_default+0x72>
    16dc:	3b01      	subs	r3, #1
    16de:	b25b      	sxtb	r3, r3
    16e0:	1c5a      	adds	r2, r3, #1
    16e2:	d100      	bne.n	16e6 <mod_sqrt_default+0x62>
    16e4:	e09b      	b.n	181e <mod_sqrt_default+0x19a>
    16e6:	a926      	add	r1, sp, #152	; 0x98
    16e8:	468c      	mov	ip, r1
    16ea:	009a      	lsls	r2, r3, #2
    16ec:	4462      	add	r2, ip
    16ee:	3a80      	subs	r2, #128	; 0x80
    16f0:	6812      	ldr	r2, [r2, #0]
    16f2:	2a00      	cmp	r2, #0
    16f4:	d0f2      	beq.n	16dc <mod_sqrt_default+0x58>
    return (i + 1);
    16f6:	3301      	adds	r3, #1
    16f8:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
    16fa:	2b00      	cmp	r3, #0
    16fc:	d100      	bne.n	1700 <mod_sqrt_default+0x7c>
    16fe:	e08e      	b.n	181e <mod_sqrt_default+0x19a>
    digit = vli[num_digits - 1];
    1700:	a926      	add	r1, sp, #152	; 0x98
    1702:	468c      	mov	ip, r1
    1704:	4a50      	ldr	r2, [pc, #320]	; (1848 <mod_sqrt_default+0x1c4>)
    for (i = 0; digit; ++i) {
    1706:	2400      	movs	r4, #0
    digit = vli[num_digits - 1];
    1708:	189a      	adds	r2, r3, r2
    170a:	0092      	lsls	r2, r2, #2
    170c:	4462      	add	r2, ip
    170e:	3a80      	subs	r2, #128	; 0x80
    1710:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    1712:	b122      	cbz	r2, 171e <mod_sqrt_default+0x9a>
        digit >>= 1;
    1714:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    1716:	3401      	adds	r4, #1
    1718:	2a00      	cmp	r2, #0
    171a:	d1fb      	bne.n	1714 <mod_sqrt_default+0x90>
    171c:	b2a4      	uxth	r4, r4
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    171e:	015b      	lsls	r3, r3, #5
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
    1720:	3b21      	subs	r3, #33	; 0x21
    1722:	18e4      	adds	r4, r4, r3
    1724:	b224      	sxth	r4, r4
    1726:	2c01      	cmp	r4, #1
    1728:	dc00      	bgt.n	172c <mod_sqrt_default+0xa8>
    172a:	e078      	b.n	181e <mod_sqrt_default+0x19a>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    172c:	9601      	str	r6, [sp, #4]
    172e:	e005      	b.n	173c <mod_sqrt_default+0xb8>
    1730:	3f01      	subs	r7, #1
    1732:	b2bf      	uxth	r7, r7
    1734:	b23c      	sxth	r4, r7
    1736:	2f01      	cmp	r7, #1
    1738:	d100      	bne.n	173c <mod_sqrt_default+0xb8>
    173a:	e070      	b.n	181e <mod_sqrt_default+0x19a>
    __asm__ volatile (
    173c:	9a01      	ldr	r2, [sp, #4]
    173e:	ae16      	add	r6, sp, #88	; 0x58
    1740:	7813      	ldrb	r3, [r2, #0]
    1742:	3b01      	subs	r3, #1
    1744:	009b      	lsls	r3, r3, #2
    1746:	4698      	mov	r8, r3
    1748:	005b      	lsls	r3, r3, #1
    174a:	4699      	mov	r9, r3
    174c:	2300      	movs	r3, #0
    174e:	2200      	movs	r2, #0
    1750:	2100      	movs	r1, #0
    1752:	2000      	movs	r0, #0
    1754:	b440      	push	{r6}
    1756:	2700      	movs	r7, #0
    1758:	e002      	b.n	1760 <mod_sqrt_default+0xdc>
    175a:	0007      	movs	r7, r0
    175c:	4646      	mov	r6, r8
    175e:	1bbf      	subs	r7, r7, r6
    1760:	469a      	mov	sl, r3
    1762:	4693      	mov	fp, r2
    1764:	468c      	mov	ip, r1
    1766:	4686      	mov	lr, r0
    1768:	1bc6      	subs	r6, r0, r7
    176a:	59aa      	ldr	r2, [r5, r6]
    176c:	59ee      	ldr	r6, [r5, r7]
    176e:	0c33      	lsrs	r3, r6, #16
    1770:	b2b6      	uxth	r6, r6
    1772:	0c11      	lsrs	r1, r2, #16
    1774:	b292      	uxth	r2, r2
    1776:	0018      	movs	r0, r3
    1778:	4348      	muls	r0, r1
    177a:	4353      	muls	r3, r2
    177c:	4371      	muls	r1, r6
    177e:	4356      	muls	r6, r2
    1780:	041a      	lsls	r2, r3, #16
    1782:	0c1b      	lsrs	r3, r3, #16
    1784:	18b6      	adds	r6, r6, r2
    1786:	4158      	adcs	r0, r3
    1788:	040a      	lsls	r2, r1, #16
    178a:	0c09      	lsrs	r1, r1, #16
    178c:	18b6      	adds	r6, r6, r2
    178e:	4148      	adcs	r0, r1
    1790:	4653      	mov	r3, sl
    1792:	465a      	mov	r2, fp
    1794:	4661      	mov	r1, ip
    1796:	199b      	adds	r3, r3, r6
    1798:	4142      	adcs	r2, r0
    179a:	2600      	movs	r6, #0
    179c:	4171      	adcs	r1, r6
    179e:	4670      	mov	r0, lr
    17a0:	3704      	adds	r7, #4
    17a2:	4547      	cmp	r7, r8
    17a4:	dc01      	bgt.n	17aa <mod_sqrt_default+0x126>
    17a6:	4287      	cmp	r7, r0
    17a8:	ddda      	ble.n	1760 <mod_sqrt_default+0xdc>
    17aa:	9e00      	ldr	r6, [sp, #0]
    17ac:	5033      	str	r3, [r6, r0]
    17ae:	4613      	mov	r3, r2
    17b0:	460a      	mov	r2, r1
    17b2:	2100      	movs	r1, #0
    17b4:	3004      	adds	r0, #4
    17b6:	4540      	cmp	r0, r8
    17b8:	ddcd      	ble.n	1756 <mod_sqrt_default+0xd2>
    17ba:	4548      	cmp	r0, r9
    17bc:	ddcd      	ble.n	175a <mod_sqrt_default+0xd6>
    17be:	5033      	str	r3, [r6, r0]
    17c0:	bc40      	pop	{r6}
    curve->mmod_fast(result, product);
    17c2:	23b0      	movs	r3, #176	; 0xb0
    17c4:	9a01      	ldr	r2, [sp, #4]
    17c6:	0031      	movs	r1, r6
    17c8:	58d3      	ldr	r3, [r2, r3]
    17ca:	0028      	movs	r0, r5
    17cc:	9302      	str	r3, [sp, #8]
    17ce:	4798      	blx	r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    17d0:	ab26      	add	r3, sp, #152	; 0x98
    17d2:	469c      	mov	ip, r3
    17d4:	231f      	movs	r3, #31
    17d6:	2201      	movs	r2, #1
    17d8:	b2a7      	uxth	r7, r4
    17da:	403b      	ands	r3, r7
    17dc:	409a      	lsls	r2, r3
    17de:	0013      	movs	r3, r2
    17e0:	1164      	asrs	r4, r4, #5
    17e2:	00a4      	lsls	r4, r4, #2
    17e4:	4464      	add	r4, ip
    17e6:	3c80      	subs	r4, #128	; 0x80
    17e8:	6822      	ldr	r2, [r4, #0]
        if (uECC_vli_testBit(p1, i)) {
    17ea:	421a      	tst	r2, r3
    17ec:	d100      	bne.n	17f0 <mod_sqrt_default+0x16c>
    17ee:	e79f      	b.n	1730 <mod_sqrt_default+0xac>
    uECC_vli_mult(product, left, right, curve->num_words);
    17f0:	2300      	movs	r3, #0
    17f2:	f240 74ed 	movw	r4, #2029	; 0x7ed
    17f6:	9e01      	ldr	r6, [sp, #4]
    17f8:	9a03      	ldr	r2, [sp, #12]
    17fa:	56f3      	ldrsb	r3, [r6, r3]
    17fc:	0029      	movs	r1, r5
    17fe:	a816      	add	r0, sp, #88	; 0x58
    1800:	f2c0 0400 	movt	r4, #0
    1804:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    1806:	23b0      	movs	r3, #176	; 0xb0
    1808:	3f01      	subs	r7, #1
    180a:	58f3      	ldr	r3, [r6, r3]
    180c:	a916      	add	r1, sp, #88	; 0x58
    180e:	0028      	movs	r0, r5
    1810:	b2bf      	uxth	r7, r7
    1812:	9302      	str	r3, [sp, #8]
    1814:	b23c      	sxth	r4, r7
    1816:	4798      	blx	r3
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
    1818:	2f01      	cmp	r7, #1
    181a:	d000      	beq.n	181e <mod_sqrt_default+0x19a>
    181c:	e78e      	b.n	173c <mod_sqrt_default+0xb8>
    for (i = 0; i < num_words; ++i) {
    181e:	9b04      	ldr	r3, [sp, #16]
    1820:	2b00      	cmp	r3, #0
    1822:	dd09      	ble.n	1838 <mod_sqrt_default+0x1b4>
    1824:	f246 733f 	movw	r3, #26431	; 0x673f
        dest[i] = src[i];
    1828:	9a05      	ldr	r2, [sp, #20]
    182a:	0029      	movs	r1, r5
    182c:	3201      	adds	r2, #1
    182e:	0092      	lsls	r2, r2, #2
    1830:	9803      	ldr	r0, [sp, #12]
    1832:	f2c0 0300 	movt	r3, #0
    1836:	4798      	blx	r3
}
    1838:	b027      	add	sp, #156	; 0x9c
    183a:	bc3c      	pop	{r2, r3, r4, r5}
    183c:	4690      	mov	r8, r2
    183e:	4699      	mov	r9, r3
    1840:	46a2      	mov	sl, r4
    1842:	46ab      	mov	fp, r5
    1844:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1846:	46c0      	nop			; (mov r8, r8)
    1848:	3fffffff 	.word	0x3fffffff

0000184c <bits2int>:
/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
    184c:	b5f0      	push	{r4, r5, r6, r7, lr}
    184e:	4657      	mov	r7, sl
    1850:	4645      	mov	r5, r8
    1852:	464e      	mov	r6, r9
    1854:	46de      	mov	lr, fp
    1856:	b5e0      	push	{r5, r6, r7, lr}
    1858:	468a      	mov	sl, r1
    185a:	4698      	mov	r8, r3
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    185c:	2102      	movs	r1, #2
    185e:	5e5b      	ldrsh	r3, [r3, r1]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1860:	241f      	movs	r4, #31
    1862:	0019      	movs	r1, r3
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1864:	4699      	mov	r9, r3
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1866:	311f      	adds	r1, #31
    1868:	17cb      	asrs	r3, r1, #31
    186a:	401c      	ands	r4, r3
    186c:	1864      	adds	r4, r4, r1
    186e:	1163      	asrs	r3, r4, #5
                     uECC_Curve curve) {
    1870:	b083      	sub	sp, #12
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1872:	9301      	str	r3, [sp, #4]
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1874:	464b      	mov	r3, r9
    1876:	2707      	movs	r7, #7
    1878:	3307      	adds	r3, #7
    187a:	17d9      	asrs	r1, r3, #31
    187c:	400f      	ands	r7, r1
    187e:	18ff      	adds	r7, r7, r3
                     uECC_Curve curve) {
    1880:	0005      	movs	r5, r0
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1882:	10ff      	asrs	r7, r7, #3
    1884:	4297      	cmp	r7, r2
    1886:	d900      	bls.n	188a <bits2int+0x3e>
    1888:	0017      	movs	r7, r2

    if (bits_size > num_n_bytes) {
        bits_size = num_n_bytes;
    }

    uECC_vli_clear(native, num_n_words);
    188a:	466b      	mov	r3, sp
    188c:	791b      	ldrb	r3, [r3, #4]
    188e:	b25b      	sxtb	r3, r3
    1890:	469b      	mov	fp, r3
    for (i = 0; i < num_words; ++i) {
    1892:	2b00      	cmp	r3, #0
    1894:	dd0b      	ble.n	18ae <bits2int+0x62>
        vli[i] = 0;
    1896:	9b01      	ldr	r3, [sp, #4]
    1898:	2100      	movs	r1, #0
    189a:	1e5a      	subs	r2, r3, #1
    189c:	f246 7375 	movw	r3, #26485	; 0x6775
    18a0:	b2d2      	uxtb	r2, r2
    18a2:	3201      	adds	r2, #1
    18a4:	0092      	lsls	r2, r2, #2
    18a6:	0028      	movs	r0, r5
    18a8:	f2c0 0300 	movt	r3, #0
    18ac:	4798      	blx	r3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    18ae:	2303      	movs	r3, #3
    18b0:	1cfa      	adds	r2, r7, #3
    18b2:	17d1      	asrs	r1, r2, #31
    18b4:	400b      	ands	r3, r1
    18b6:	189b      	adds	r3, r3, r2
    18b8:	109b      	asrs	r3, r3, #2
    for (i = 0; i < num_words; ++i) {
    18ba:	b25a      	sxtb	r2, r3
    18bc:	2a00      	cmp	r2, #0
    18be:	dd0a      	ble.n	18d6 <bits2int+0x8a>
        vli[i] = 0;
    18c0:	3b01      	subs	r3, #1
    18c2:	b2da      	uxtb	r2, r3
    18c4:	f246 7375 	movw	r3, #26485	; 0x6775
    18c8:	3201      	adds	r2, #1
    18ca:	0092      	lsls	r2, r2, #2
    18cc:	2100      	movs	r1, #0
    18ce:	0028      	movs	r0, r5
    18d0:	f2c0 0300 	movt	r3, #0
    18d4:	4798      	blx	r3
    18d6:	1e7b      	subs	r3, r7, #1
    18d8:	4651      	mov	r1, sl
        native[b / uECC_WORD_SIZE] |=
    18da:	2403      	movs	r4, #3
    for (i = 0; i < num_bytes; ++i) {
    18dc:	2f00      	cmp	r7, #0
    18de:	dd0d      	ble.n	18fc <bits2int+0xb0>
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    18e0:	0026      	movs	r6, r4
        native[b / uECC_WORD_SIZE] |=
    18e2:	001a      	movs	r2, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    18e4:	7808      	ldrb	r0, [r1, #0]
    18e6:	401e      	ands	r6, r3
    18e8:	00f6      	lsls	r6, r6, #3
    18ea:	40b0      	lsls	r0, r6
        native[b / uECC_WORD_SIZE] |=
    18ec:	43a2      	bics	r2, r4
    18ee:	18aa      	adds	r2, r5, r2
    18f0:	6816      	ldr	r6, [r2, #0]
    18f2:	3101      	adds	r1, #1
    18f4:	4330      	orrs	r0, r6
    18f6:	6010      	str	r0, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    18f8:	3b01      	subs	r3, #1
    18fa:	d2f1      	bcs.n	18e0 <bits2int+0x94>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) native, bits, bits_size);
#else
    uECC_vli_bytesToNative(native, bits, bits_size);
#endif
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
    18fc:	00ff      	lsls	r7, r7, #3
    18fe:	454f      	cmp	r7, r9
    1900:	d930      	bls.n	1964 <bits2int+0x118>
        return;
    }
    shift = bits_size * 8 - curve->num_n_bits;
    1902:	464b      	mov	r3, r9
    1904:	1aff      	subs	r7, r7, r3
    carry = 0;
    ptr = native + num_n_words;
    1906:	9b01      	ldr	r3, [sp, #4]
    1908:	009a      	lsls	r2, r3, #2
    190a:	18aa      	adds	r2, r5, r2
    while (ptr-- > native) {
    190c:	1f13      	subs	r3, r2, #4
    190e:	4295      	cmp	r5, r2
    1910:	d215      	bcs.n	193e <bits2int+0xf2>
    1912:	2120      	movs	r1, #32
    1914:	1bc9      	subs	r1, r1, r7
    1916:	4689      	mov	r9, r1
    1918:	1b59      	subs	r1, r3, r5
    191a:	3103      	adds	r1, #3
    191c:	0889      	lsrs	r1, r1, #2
    191e:	0089      	lsls	r1, r1, #2
    1920:	1a52      	subs	r2, r2, r1
    1922:	3a08      	subs	r2, #8
    1924:	0016      	movs	r6, r2
    1926:	2000      	movs	r0, #0
        uECC_word_t temp = *ptr;
    1928:	6819      	ldr	r1, [r3, #0]
    while (ptr-- > native) {
    192a:	3b04      	subs	r3, #4
        *ptr = (temp >> shift) | carry;
    192c:	000a      	movs	r2, r1
    192e:	40fa      	lsrs	r2, r7
    1930:	4302      	orrs	r2, r0
    1932:	605a      	str	r2, [r3, #4]
        carry = temp << (uECC_WORD_BITS - shift);
    1934:	464a      	mov	r2, r9
    1936:	4091      	lsls	r1, r2
    1938:	0008      	movs	r0, r1
    while (ptr-- > native) {
    193a:	42b3      	cmp	r3, r6
    193c:	d1f4      	bne.n	1928 <bits2int+0xdc>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
    193e:	4642      	mov	r2, r8
    for (i = num_words - 1; i >= 0; --i) {
    1940:	9c01      	ldr	r4, [sp, #4]
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
    1942:	3224      	adds	r2, #36	; 0x24
    for (i = num_words - 1; i >= 0; --i) {
    1944:	3c01      	subs	r4, #1
    1946:	b261      	sxtb	r1, r4
    1948:	2900      	cmp	r1, #0
    194a:	da06      	bge.n	195a <bits2int+0x10e>
    194c:	e011      	b.n	1972 <bits2int+0x126>
        } else if (left[i] < right[i]) {
    194e:	4298      	cmp	r0, r3
    1950:	d30f      	bcc.n	1972 <bits2int+0x126>
    1952:	3901      	subs	r1, #1
    1954:	b249      	sxtb	r1, r1
    for (i = num_words - 1; i >= 0; --i) {
    1956:	1c4b      	adds	r3, r1, #1
    1958:	d00b      	beq.n	1972 <bits2int+0x126>
        if (left[i] > right[i]) {
    195a:	008b      	lsls	r3, r1, #2
    195c:	58d0      	ldr	r0, [r2, r3]
    195e:	58eb      	ldr	r3, [r5, r3]
    1960:	4298      	cmp	r0, r3
    1962:	d9f4      	bls.n	194e <bits2int+0x102>
        uECC_vli_sub(native, native, curve->n, num_n_words);
    }
}
    1964:	b003      	add	sp, #12
    1966:	bc3c      	pop	{r2, r3, r4, r5}
    1968:	4690      	mov	r8, r2
    196a:	4699      	mov	r9, r3
    196c:	46a2      	mov	sl, r4
    196e:	46ab      	mov	fp, r5
    1970:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_sub(native, native, curve->n, num_n_words);
    1972:	f240 7491 	movw	r4, #1937	; 0x791
    1976:	465b      	mov	r3, fp
    1978:	0029      	movs	r1, r5
    197a:	0028      	movs	r0, r5
    197c:	f2c0 0400 	movt	r4, #0
    1980:	47a0      	blx	r4
    1982:	e7ef      	b.n	1964 <bits2int+0x118>
	...

00001990 <uECC_vli_modSub>:
                                  wordcount_t num_words) {
    1990:	b5f0      	push	{r4, r5, r6, r7, lr}
    1992:	46c6      	mov	lr, r8
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1994:	2408      	movs	r4, #8
    1996:	b500      	push	{lr}
    1998:	4698      	mov	r8, r3
    199a:	ab06      	add	r3, sp, #24
    199c:	781b      	ldrb	r3, [r3, #0]
    __asm__ volatile (
    199e:	0006      	movs	r6, r0
    19a0:	b25b      	sxtb	r3, r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    19a2:	1ae4      	subs	r4, r4, r3
    19a4:	00e4      	lsls	r4, r4, #3
    19a6:	469c      	mov	ip, r3
    19a8:	3401      	adds	r4, #1
    __asm__ volatile (
    19aa:	0015      	movs	r5, r2
    19ac:	2200      	movs	r2, #0
    19ae:	a703      	add	r7, pc, #12	; (adr r7, 19bc <uECC_vli_modSub+0x2c>)
    19b0:	19e4      	adds	r4, r4, r7
    19b2:	c980      	ldmia	r1!, {r7}
    19b4:	cd08      	ldmia	r5!, {r3}
    19b6:	1aff      	subs	r7, r7, r3
    19b8:	c680      	stmia	r6!, {r7}
    19ba:	4720      	bx	r4
    19bc:	c980      	ldmia	r1!, {r7}
    19be:	cd08      	ldmia	r5!, {r3}
    19c0:	419f      	sbcs	r7, r3
    19c2:	c680      	stmia	r6!, {r7}
    19c4:	c980      	ldmia	r1!, {r7}
    19c6:	cd08      	ldmia	r5!, {r3}
    19c8:	419f      	sbcs	r7, r3
    19ca:	c680      	stmia	r6!, {r7}
    19cc:	c980      	ldmia	r1!, {r7}
    19ce:	cd08      	ldmia	r5!, {r3}
    19d0:	419f      	sbcs	r7, r3
    19d2:	c680      	stmia	r6!, {r7}
    19d4:	c980      	ldmia	r1!, {r7}
    19d6:	cd08      	ldmia	r5!, {r3}
    19d8:	419f      	sbcs	r7, r3
    19da:	c680      	stmia	r6!, {r7}
    19dc:	c980      	ldmia	r1!, {r7}
    19de:	cd08      	ldmia	r5!, {r3}
    19e0:	419f      	sbcs	r7, r3
    19e2:	c680      	stmia	r6!, {r7}
    19e4:	c980      	ldmia	r1!, {r7}
    19e6:	cd08      	ldmia	r5!, {r3}
    19e8:	419f      	sbcs	r7, r3
    19ea:	c680      	stmia	r6!, {r7}
    19ec:	c980      	ldmia	r1!, {r7}
    19ee:	cd08      	ldmia	r5!, {r3}
    19f0:	419f      	sbcs	r7, r3
    19f2:	c680      	stmia	r6!, {r7}
    19f4:	4152      	adcs	r2, r2
    if (l_borrow) {
    19f6:	b93a      	cbnz	r2, 1a08 <uECC_vli_modSub+0x78>
        uECC_vli_add(result, result, mod, num_words);
    19f8:	f240 7431 	movw	r4, #1841	; 0x731
    19fc:	4663      	mov	r3, ip
    19fe:	4642      	mov	r2, r8
    1a00:	0001      	movs	r1, r0
    1a02:	f2c0 0400 	movt	r4, #0
    1a06:	47a0      	blx	r4
}
    1a08:	bc04      	pop	{r2}
    1a0a:	4690      	mov	r8, r2
    1a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)

00001a10 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
    1a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a12:	46c6      	mov	lr, r8
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1a14:	2408      	movs	r4, #8
    1a16:	b500      	push	{lr}
    1a18:	469c      	mov	ip, r3
    1a1a:	ab06      	add	r3, sp, #24
    1a1c:	781b      	ldrb	r3, [r3, #0]
    __asm__ volatile (
    1a1e:	0005      	movs	r5, r0
    1a20:	b25b      	sxtb	r3, r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1a22:	1ae4      	subs	r4, r4, r3
    1a24:	00e4      	lsls	r4, r4, #3
    1a26:	4698      	mov	r8, r3
    1a28:	3401      	adds	r4, #1
    __asm__ volatile (
    1a2a:	2700      	movs	r7, #0
    1a2c:	a303      	add	r3, pc, #12	; (adr r3, 1a3c <uECC_vli_modAdd+0x2c>)
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	18e4      	adds	r4, r4, r3
    1a32:	c908      	ldmia	r1!, {r3}
    1a34:	ca40      	ldmia	r2!, {r6}
    1a36:	199b      	adds	r3, r3, r6
    1a38:	c508      	stmia	r5!, {r3}
    1a3a:	4720      	bx	r4
    1a3c:	c908      	ldmia	r1!, {r3}
    1a3e:	ca40      	ldmia	r2!, {r6}
    1a40:	4173      	adcs	r3, r6
    1a42:	c508      	stmia	r5!, {r3}
    1a44:	c908      	ldmia	r1!, {r3}
    1a46:	ca40      	ldmia	r2!, {r6}
    1a48:	4173      	adcs	r3, r6
    1a4a:	c508      	stmia	r5!, {r3}
    1a4c:	c908      	ldmia	r1!, {r3}
    1a4e:	ca40      	ldmia	r2!, {r6}
    1a50:	4173      	adcs	r3, r6
    1a52:	c508      	stmia	r5!, {r3}
    1a54:	c908      	ldmia	r1!, {r3}
    1a56:	ca40      	ldmia	r2!, {r6}
    1a58:	4173      	adcs	r3, r6
    1a5a:	c508      	stmia	r5!, {r3}
    1a5c:	c908      	ldmia	r1!, {r3}
    1a5e:	ca40      	ldmia	r2!, {r6}
    1a60:	4173      	adcs	r3, r6
    1a62:	c508      	stmia	r5!, {r3}
    1a64:	c908      	ldmia	r1!, {r3}
    1a66:	ca40      	ldmia	r2!, {r6}
    1a68:	4173      	adcs	r3, r6
    1a6a:	c508      	stmia	r5!, {r3}
    1a6c:	c908      	ldmia	r1!, {r3}
    1a6e:	ca40      	ldmia	r2!, {r6}
    1a70:	4173      	adcs	r3, r6
    1a72:	c508      	stmia	r5!, {r3}
    1a74:	417f      	adcs	r7, r7
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1a76:	b9bf      	cbnz	r7, 1aa8 <uECC_vli_modAdd+0x98>
    for (i = num_words - 1; i >= 0; --i) {
    1a78:	4643      	mov	r3, r8
    1a7a:	1e59      	subs	r1, r3, #1
    1a7c:	b249      	sxtb	r1, r1
    1a7e:	2900      	cmp	r1, #0
    1a80:	db12      	blt.n	1aa8 <uECC_vli_modAdd+0x98>
        if (left[i] > right[i]) {
    1a82:	4663      	mov	r3, ip
    1a84:	008a      	lsls	r2, r1, #2
    1a86:	589c      	ldr	r4, [r3, r2]
    1a88:	5882      	ldr	r2, [r0, r2]
    1a8a:	4294      	cmp	r4, r2
    1a8c:	d814      	bhi.n	1ab8 <uECC_vli_modAdd+0xa8>
        } else if (left[i] < right[i]) {
    1a8e:	d207      	bcs.n	1aa0 <uECC_vli_modAdd+0x90>
    1a90:	e00a      	b.n	1aa8 <uECC_vli_modAdd+0x98>
        if (left[i] > right[i]) {
    1a92:	4663      	mov	r3, ip
    1a94:	008c      	lsls	r4, r1, #2
    1a96:	591d      	ldr	r5, [r3, r4]
    1a98:	5904      	ldr	r4, [r0, r4]
    1a9a:	42a5      	cmp	r5, r4
    1a9c:	d80c      	bhi.n	1ab8 <uECC_vli_modAdd+0xa8>
        } else if (left[i] < right[i]) {
    1a9e:	d303      	bcc.n	1aa8 <uECC_vli_modAdd+0x98>
    1aa0:	3901      	subs	r1, #1
    1aa2:	b249      	sxtb	r1, r1
    for (i = num_words - 1; i >= 0; --i) {
    1aa4:	1c4a      	adds	r2, r1, #1
    1aa6:	d1f4      	bne.n	1a92 <uECC_vli_modAdd+0x82>
        uECC_vli_sub(result, result, mod, num_words);
    1aa8:	f240 7491 	movw	r4, #1937	; 0x791
    1aac:	4643      	mov	r3, r8
    1aae:	4662      	mov	r2, ip
    1ab0:	0001      	movs	r1, r0
    1ab2:	f2c0 0400 	movt	r4, #0
    1ab6:	47a0      	blx	r4
}
    1ab8:	bc04      	pop	{r2}
    1aba:	4690      	mov	r8, r2
    1abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1abe:	46c0      	nop			; (mov r8, r8)

00001ac0 <vli_mmod_fast_secp160r1>:
static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
    1ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ac2:	46de      	mov	lr, fp
    1ac4:	4657      	mov	r7, sl
    1ac6:	464e      	mov	r6, r9
    1ac8:	4645      	mov	r5, r8
        vli[i] = 0;
    1aca:	2300      	movs	r3, #0
    1acc:	4689      	mov	r9, r1
    1ace:	f246 7b3f 	movw	fp, #26431	; 0x673f
    1ad2:	b5e0      	push	{r5, r6, r7, lr}
    1ad4:	b093      	sub	sp, #76	; 0x4c
    1ad6:	930e      	str	r3, [sp, #56]	; 0x38
    1ad8:	930f      	str	r3, [sp, #60]	; 0x3c
    1ada:	9310      	str	r3, [sp, #64]	; 0x40
    1adc:	9311      	str	r3, [sp, #68]	; 0x44
    omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
    1ade:	3314      	adds	r3, #20
    1ae0:	444b      	add	r3, r9
    1ae2:	0019      	movs	r1, r3
static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
    1ae4:	4680      	mov	r8, r0
    1ae6:	2214      	movs	r2, #20
    1ae8:	a809      	add	r0, sp, #36	; 0x24
    1aea:	f2c0 0b00 	movt	fp, #0
    omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
    1aee:	469a      	mov	sl, r3
    1af0:	47d8      	blx	fp
        uECC_word_t temp = *vli;
    1af2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1af4:	2019      	movs	r0, #25
        *vli = (temp >> 1) | carry;
    1af6:	085a      	lsrs	r2, r3, #1
    1af8:	920d      	str	r2, [sp, #52]	; 0x34
        uECC_word_t temp = *vli;
    1afa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        carry = temp << (uECC_WORD_BITS - 1);
    1afc:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    1afe:	0851      	lsrs	r1, r2, #1
    1b00:	430b      	orrs	r3, r1
    1b02:	930c      	str	r3, [sp, #48]	; 0x30
        uECC_word_t temp = *vli;
    1b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        carry = temp << (uECC_WORD_BITS - 1);
    1b06:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    1b08:	0859      	lsrs	r1, r3, #1
    1b0a:	430a      	orrs	r2, r1
    1b0c:	920b      	str	r2, [sp, #44]	; 0x2c
        uECC_word_t temp = *vli;
    1b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
    1b10:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    1b12:	0851      	lsrs	r1, r2, #1
    1b14:	430b      	orrs	r3, r1
    1b16:	930a      	str	r3, [sp, #40]	; 0x28
    1b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
        carry = temp << (uECC_WORD_BITS - 1);
    1b1a:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    1b1c:	085b      	lsrs	r3, r3, #1
    1b1e:	4313      	orrs	r3, r2
    1b20:	9309      	str	r3, [sp, #36]	; 0x24
    result[0] = right[0] << 31; /* get last bit from shift */
    1b22:	464b      	mov	r3, r9
    1b24:	695b      	ldr	r3, [r3, #20]
    1b26:	aa08      	add	r2, sp, #32
    1b28:	07db      	lsls	r3, r3, #31
    1b2a:	9308      	str	r3, [sp, #32]
    1b2c:	4651      	mov	r1, sl
    1b2e:	0014      	movs	r4, r2
    1b30:	2300      	movs	r3, #0
    1b32:	a506      	add	r5, pc, #24	; (adr r5, 1b4c <vli_mmod_fast_secp160r1+0x8c>)
    1b34:	46c0      	nop			; (mov r8, r8)
    1b36:	46c0      	nop			; (mov r8, r8)
    1b38:	46c0      	nop			; (mov r8, r8)
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	46c0      	nop			; (mov r8, r8)
    1b3e:	46c0      	nop			; (mov r8, r8)
    1b40:	1940      	adds	r0, r0, r5
    1b42:	cc20      	ldmia	r4!, {r5}
    1b44:	c940      	ldmia	r1!, {r6}
    1b46:	19ad      	adds	r5, r5, r6
    1b48:	c220      	stmia	r2!, {r5}
    1b4a:	4700      	bx	r0
    1b4c:	cc20      	ldmia	r4!, {r5}
    1b4e:	c940      	ldmia	r1!, {r6}
    1b50:	4175      	adcs	r5, r6
    1b52:	c220      	stmia	r2!, {r5}
    1b54:	cc20      	ldmia	r4!, {r5}
    1b56:	c940      	ldmia	r1!, {r6}
    1b58:	4175      	adcs	r5, r6
    1b5a:	c220      	stmia	r2!, {r5}
    1b5c:	cc20      	ldmia	r4!, {r5}
    1b5e:	c940      	ldmia	r1!, {r6}
    1b60:	4175      	adcs	r5, r6
    1b62:	c220      	stmia	r2!, {r5}
    1b64:	cc20      	ldmia	r4!, {r5}
    1b66:	c940      	ldmia	r1!, {r6}
    1b68:	4175      	adcs	r5, r6
    1b6a:	c220      	stmia	r2!, {r5}
    1b6c:	cc20      	ldmia	r4!, {r5}
    1b6e:	c940      	ldmia	r1!, {r6}
    1b70:	4175      	adcs	r5, r6
    1b72:	c220      	stmia	r2!, {r5}
    1b74:	cc20      	ldmia	r4!, {r5}
    1b76:	c940      	ldmia	r1!, {r6}
    1b78:	4175      	adcs	r5, r6
    1b7a:	c220      	stmia	r2!, {r5}
    1b7c:	cc20      	ldmia	r4!, {r5}
    1b7e:	c940      	ldmia	r1!, {r6}
    1b80:	4175      	adcs	r5, r6
    1b82:	c220      	stmia	r2!, {r5}
    1b84:	415b      	adcs	r3, r3
    1b86:	a908      	add	r1, sp, #32
    for (i = num_words_secp160r1; carry; ++i) {
    1b88:	b15b      	cbz	r3, 1ba2 <vli_mmod_fast_secp160r1+0xe2>
        uint64_t sum = (uint64_t)result[i] + carry;
    1b8a:	2700      	movs	r7, #0
    1b8c:	694e      	ldr	r6, [r1, #20]
    1b8e:	001c      	movs	r4, r3
    1b90:	2500      	movs	r5, #0
    1b92:	0032      	movs	r2, r6
    1b94:	003b      	movs	r3, r7
    1b96:	1912      	adds	r2, r2, r4
    1b98:	416b      	adcs	r3, r5
    1b9a:	3104      	adds	r1, #4
        result[i] = (uint32_t)sum;
    1b9c:	610a      	str	r2, [r1, #16]
    for (i = num_words_secp160r1; carry; ++i) {
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d1f3      	bne.n	1b8a <vli_mmod_fast_secp160r1+0xca>
    1ba2:	4642      	mov	r2, r8
    1ba4:	4649      	mov	r1, r9
    1ba6:	ab08      	add	r3, sp, #32
    1ba8:	2019      	movs	r0, #25
    1baa:	2400      	movs	r4, #0
    1bac:	a503      	add	r5, pc, #12	; (adr r5, 1bbc <vli_mmod_fast_secp160r1+0xfc>)
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	1940      	adds	r0, r0, r5
    1bb2:	c920      	ldmia	r1!, {r5}
    1bb4:	cb40      	ldmia	r3!, {r6}
    1bb6:	19ad      	adds	r5, r5, r6
    1bb8:	c220      	stmia	r2!, {r5}
    1bba:	4700      	bx	r0
    1bbc:	c920      	ldmia	r1!, {r5}
    1bbe:	cb40      	ldmia	r3!, {r6}
    1bc0:	4175      	adcs	r5, r6
    1bc2:	c220      	stmia	r2!, {r5}
    1bc4:	c920      	ldmia	r1!, {r5}
    1bc6:	cb40      	ldmia	r3!, {r6}
    1bc8:	4175      	adcs	r5, r6
    1bca:	c220      	stmia	r2!, {r5}
    1bcc:	c920      	ldmia	r1!, {r5}
    1bce:	cb40      	ldmia	r3!, {r6}
    1bd0:	4175      	adcs	r5, r6
    1bd2:	c220      	stmia	r2!, {r5}
    1bd4:	c920      	ldmia	r1!, {r5}
    1bd6:	cb40      	ldmia	r3!, {r6}
    1bd8:	4175      	adcs	r5, r6
    1bda:	c220      	stmia	r2!, {r5}
    1bdc:	c920      	ldmia	r1!, {r5}
    1bde:	cb40      	ldmia	r3!, {r6}
    1be0:	4175      	adcs	r5, r6
    1be2:	c220      	stmia	r2!, {r5}
    1be4:	c920      	ldmia	r1!, {r5}
    1be6:	cb40      	ldmia	r3!, {r6}
    1be8:	4175      	adcs	r5, r6
    1bea:	c220      	stmia	r2!, {r5}
    1bec:	c920      	ldmia	r1!, {r5}
    1bee:	cb40      	ldmia	r3!, {r6}
    1bf0:	4175      	adcs	r5, r6
    1bf2:	c220      	stmia	r2!, {r5}
    1bf4:	4164      	adcs	r4, r4
    1bf6:	f246 7375 	movw	r3, #26485	; 0x6775
    1bfa:	2214      	movs	r2, #20
    1bfc:	2100      	movs	r1, #0
    1bfe:	f2c0 0300 	movt	r3, #0
    1c02:	4648      	mov	r0, r9
    1c04:	4798      	blx	r3
    uECC_vli_set(result + 1, right, num_words_secp160r1); /* 2^32 */
    1c06:	464b      	mov	r3, r9
    1c08:	1d1d      	adds	r5, r3, #4
    1c0a:	2214      	movs	r2, #20
    1c0c:	a90d      	add	r1, sp, #52	; 0x34
    1c0e:	0028      	movs	r0, r5
    1c10:	47d8      	blx	fp
    while (vli-- > end) {
    1c12:	4649      	mov	r1, r9
    1c14:	2300      	movs	r3, #0
    1c16:	3118      	adds	r1, #24
    1c18:	4652      	mov	r2, sl
    1c1a:	0018      	movs	r0, r3
    1c1c:	428d      	cmp	r5, r1
    1c1e:	d301      	bcc.n	1c24 <vli_mmod_fast_secp160r1+0x164>
    1c20:	e008      	b.n	1c34 <vli_mmod_fast_secp160r1+0x174>
    1c22:	001a      	movs	r2, r3
        uECC_word_t temp = *vli;
    1c24:	6811      	ldr	r1, [r2, #0]
        *vli = (temp >> 1) | carry;
    1c26:	084b      	lsrs	r3, r1, #1
    1c28:	4303      	orrs	r3, r0
    1c2a:	6013      	str	r3, [r2, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    1c2c:	07c8      	lsls	r0, r1, #31
    while (vli-- > end) {
    1c2e:	1f13      	subs	r3, r2, #4
    1c30:	4295      	cmp	r5, r2
    1c32:	d3f6      	bcc.n	1c22 <vli_mmod_fast_secp160r1+0x162>
    result[0] = right[0] << 31; /* get last bit from shift */
    1c34:	464a      	mov	r2, r9
    1c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c38:	a90d      	add	r1, sp, #52	; 0x34
    1c3a:	07db      	lsls	r3, r3, #31
    1c3c:	6013      	str	r3, [r2, #0]
    1c3e:	2019      	movs	r0, #25
    1c40:	464d      	mov	r5, r9
    1c42:	2300      	movs	r3, #0
    1c44:	a605      	add	r6, pc, #20	; (adr r6, 1c5c <vli_mmod_fast_secp160r1+0x19c>)
    1c46:	46c0      	nop			; (mov r8, r8)
    1c48:	46c0      	nop			; (mov r8, r8)
    1c4a:	46c0      	nop			; (mov r8, r8)
    1c4c:	46c0      	nop			; (mov r8, r8)
    1c4e:	46c0      	nop			; (mov r8, r8)
    1c50:	1980      	adds	r0, r0, r6
    1c52:	cd40      	ldmia	r5!, {r6}
    1c54:	c980      	ldmia	r1!, {r7}
    1c56:	19f6      	adds	r6, r6, r7
    1c58:	c240      	stmia	r2!, {r6}
    1c5a:	4700      	bx	r0
    1c5c:	cd40      	ldmia	r5!, {r6}
    1c5e:	c980      	ldmia	r1!, {r7}
    1c60:	417e      	adcs	r6, r7
    1c62:	c240      	stmia	r2!, {r6}
    1c64:	cd40      	ldmia	r5!, {r6}
    1c66:	c980      	ldmia	r1!, {r7}
    1c68:	417e      	adcs	r6, r7
    1c6a:	c240      	stmia	r2!, {r6}
    1c6c:	cd40      	ldmia	r5!, {r6}
    1c6e:	c980      	ldmia	r1!, {r7}
    1c70:	417e      	adcs	r6, r7
    1c72:	c240      	stmia	r2!, {r6}
    1c74:	cd40      	ldmia	r5!, {r6}
    1c76:	c980      	ldmia	r1!, {r7}
    1c78:	417e      	adcs	r6, r7
    1c7a:	c240      	stmia	r2!, {r6}
    1c7c:	cd40      	ldmia	r5!, {r6}
    1c7e:	c980      	ldmia	r1!, {r7}
    1c80:	417e      	adcs	r6, r7
    1c82:	c240      	stmia	r2!, {r6}
    1c84:	cd40      	ldmia	r5!, {r6}
    1c86:	c980      	ldmia	r1!, {r7}
    1c88:	417e      	adcs	r6, r7
    1c8a:	c240      	stmia	r2!, {r6}
    1c8c:	cd40      	ldmia	r5!, {r6}
    1c8e:	c980      	ldmia	r1!, {r7}
    1c90:	417e      	adcs	r6, r7
    1c92:	c240      	stmia	r2!, {r6}
    1c94:	415b      	adcs	r3, r3
    1c96:	4655      	mov	r5, sl
    1c98:	001e      	movs	r6, r3
    for (i = num_words_secp160r1; carry; ++i) {
    1c9a:	b15b      	cbz	r3, 1cb4 <vli_mmod_fast_secp160r1+0x1f4>
        uint64_t sum = (uint64_t)result[i] + carry;
    1c9c:	2300      	movs	r3, #0
    1c9e:	682a      	ldr	r2, [r5, #0]
    1ca0:	0030      	movs	r0, r6
    1ca2:	2100      	movs	r1, #0
    1ca4:	0016      	movs	r6, r2
    1ca6:	001f      	movs	r7, r3
    1ca8:	1836      	adds	r6, r6, r0
    1caa:	414f      	adcs	r7, r1
        result[i] = (uint32_t)sum;
    1cac:	c540      	stmia	r5!, {r6}
        carry = sum >> 32;
    1cae:	003e      	movs	r6, r7
    for (i = num_words_secp160r1; carry; ++i) {
    1cb0:	2f00      	cmp	r7, #0
    1cb2:	d1f3      	bne.n	1c9c <vli_mmod_fast_secp160r1+0x1dc>
    1cb4:	4643      	mov	r3, r8
    1cb6:	464a      	mov	r2, r9
    1cb8:	2119      	movs	r1, #25
    1cba:	4645      	mov	r5, r8
    1cbc:	2000      	movs	r0, #0
    1cbe:	a603      	add	r6, pc, #12	; (adr r6, 1ccc <vli_mmod_fast_secp160r1+0x20c>)
    1cc0:	1989      	adds	r1, r1, r6
    1cc2:	cd40      	ldmia	r5!, {r6}
    1cc4:	ca80      	ldmia	r2!, {r7}
    1cc6:	19f6      	adds	r6, r6, r7
    1cc8:	c340      	stmia	r3!, {r6}
    1cca:	4708      	bx	r1
    1ccc:	cd40      	ldmia	r5!, {r6}
    1cce:	ca80      	ldmia	r2!, {r7}
    1cd0:	417e      	adcs	r6, r7
    1cd2:	c340      	stmia	r3!, {r6}
    1cd4:	cd40      	ldmia	r5!, {r6}
    1cd6:	ca80      	ldmia	r2!, {r7}
    1cd8:	417e      	adcs	r6, r7
    1cda:	c340      	stmia	r3!, {r6}
    1cdc:	cd40      	ldmia	r5!, {r6}
    1cde:	ca80      	ldmia	r2!, {r7}
    1ce0:	417e      	adcs	r6, r7
    1ce2:	c340      	stmia	r3!, {r6}
    1ce4:	cd40      	ldmia	r5!, {r6}
    1ce6:	ca80      	ldmia	r2!, {r7}
    1ce8:	417e      	adcs	r6, r7
    1cea:	c340      	stmia	r3!, {r6}
    1cec:	cd40      	ldmia	r5!, {r6}
    1cee:	ca80      	ldmia	r2!, {r7}
    1cf0:	417e      	adcs	r6, r7
    1cf2:	c340      	stmia	r3!, {r6}
    1cf4:	cd40      	ldmia	r5!, {r6}
    1cf6:	ca80      	ldmia	r2!, {r7}
    1cf8:	417e      	adcs	r6, r7
    1cfa:	c340      	stmia	r3!, {r6}
    1cfc:	cd40      	ldmia	r5!, {r6}
    1cfe:	ca80      	ldmia	r2!, {r7}
    1d00:	417e      	adcs	r6, r7
    1d02:	c340      	stmia	r3!, {r6}
    1d04:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, product, num_words_secp160r1); /* (C1, r) = r + Rq*c */
    1d06:	1824      	adds	r4, r4, r0
    while (carry > 0) {
    1d08:	2c00      	cmp	r4, #0
    1d0a:	d037      	beq.n	1d7c <vli_mmod_fast_secp160r1+0x2bc>
    1d0c:	f646 2058 	movw	r0, #27224	; 0x6a58
    __asm__ volatile (
    1d10:	f240 0938 	movw	r9, #56	; 0x38
    1d14:	f240 0a19 	movw	sl, #25
    1d18:	46c4      	mov	ip, r8
    1d1a:	f2c0 0000 	movt	r0, #0
    1d1e:	4481      	add	r9, r0
        --carry;
    1d20:	3c01      	subs	r4, #1
    1d22:	4663      	mov	r3, ip
    1d24:	464a      	mov	r2, r9
    1d26:	4651      	mov	r1, sl
    1d28:	4667      	mov	r7, ip
    1d2a:	2000      	movs	r0, #0
    1d2c:	a503      	add	r5, pc, #12	; (adr r5, 1d3c <vli_mmod_fast_secp160r1+0x27c>)
    1d2e:	46c0      	nop			; (mov r8, r8)
    1d30:	1949      	adds	r1, r1, r5
    1d32:	cf20      	ldmia	r7!, {r5}
    1d34:	ca40      	ldmia	r2!, {r6}
    1d36:	1bad      	subs	r5, r5, r6
    1d38:	c320      	stmia	r3!, {r5}
    1d3a:	4708      	bx	r1
    1d3c:	cf20      	ldmia	r7!, {r5}
    1d3e:	ca40      	ldmia	r2!, {r6}
    1d40:	41b5      	sbcs	r5, r6
    1d42:	c320      	stmia	r3!, {r5}
    1d44:	cf20      	ldmia	r7!, {r5}
    1d46:	ca40      	ldmia	r2!, {r6}
    1d48:	41b5      	sbcs	r5, r6
    1d4a:	c320      	stmia	r3!, {r5}
    1d4c:	cf20      	ldmia	r7!, {r5}
    1d4e:	ca40      	ldmia	r2!, {r6}
    1d50:	41b5      	sbcs	r5, r6
    1d52:	c320      	stmia	r3!, {r5}
    1d54:	cf20      	ldmia	r7!, {r5}
    1d56:	ca40      	ldmia	r2!, {r6}
    1d58:	41b5      	sbcs	r5, r6
    1d5a:	c320      	stmia	r3!, {r5}
    1d5c:	cf20      	ldmia	r7!, {r5}
    1d5e:	ca40      	ldmia	r2!, {r6}
    1d60:	41b5      	sbcs	r5, r6
    1d62:	c320      	stmia	r3!, {r5}
    1d64:	cf20      	ldmia	r7!, {r5}
    1d66:	ca40      	ldmia	r2!, {r6}
    1d68:	41b5      	sbcs	r5, r6
    1d6a:	c320      	stmia	r3!, {r5}
    1d6c:	cf20      	ldmia	r7!, {r5}
    1d6e:	ca40      	ldmia	r2!, {r6}
    1d70:	41b5      	sbcs	r5, r6
    1d72:	c320      	stmia	r3!, {r5}
    1d74:	4140      	adcs	r0, r0
    while (carry > 0) {
    1d76:	2c00      	cmp	r4, #0
    1d78:	d1d2      	bne.n	1d20 <vli_mmod_fast_secp160r1+0x260>
    1d7a:	46e0      	mov	r8, ip
        } else if (left[i] < right[i]) {
    1d7c:	4643      	mov	r3, r8
    1d7e:	691b      	ldr	r3, [r3, #16]
    1d80:	3301      	adds	r3, #1
    1d82:	d140      	bne.n	1e06 <vli_mmod_fast_secp160r1+0x346>
    1d84:	4643      	mov	r3, r8
    1d86:	68db      	ldr	r3, [r3, #12]
    1d88:	3301      	adds	r3, #1
    1d8a:	d13c      	bne.n	1e06 <vli_mmod_fast_secp160r1+0x346>
    1d8c:	4643      	mov	r3, r8
    1d8e:	689b      	ldr	r3, [r3, #8]
    1d90:	3301      	adds	r3, #1
    1d92:	d138      	bne.n	1e06 <vli_mmod_fast_secp160r1+0x346>
    1d94:	4643      	mov	r3, r8
    1d96:	685b      	ldr	r3, [r3, #4]
    1d98:	3301      	adds	r3, #1
    1d9a:	d134      	bne.n	1e06 <vli_mmod_fast_secp160r1+0x346>
        if (left[i] > right[i]) {
    1d9c:	4643      	mov	r3, r8
    1d9e:	681b      	ldr	r3, [r3, #0]
    1da0:	2b00      	cmp	r3, #0
    1da2:	da30      	bge.n	1e06 <vli_mmod_fast_secp160r1+0x346>
    1da4:	f646 2258 	movw	r2, #27224	; 0x6a58
    1da8:	f2c0 0200 	movt	r2, #0
    1dac:	3238      	adds	r2, #56	; 0x38
    1dae:	4643      	mov	r3, r8
    1db0:	2119      	movs	r1, #25
    1db2:	4640      	mov	r0, r8
    1db4:	2400      	movs	r4, #0
    1db6:	a505      	add	r5, pc, #20	; (adr r5, 1dcc <vli_mmod_fast_secp160r1+0x30c>)
    1db8:	46c0      	nop			; (mov r8, r8)
    1dba:	46c0      	nop			; (mov r8, r8)
    1dbc:	46c0      	nop			; (mov r8, r8)
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	1949      	adds	r1, r1, r5
    1dc2:	c820      	ldmia	r0!, {r5}
    1dc4:	ca40      	ldmia	r2!, {r6}
    1dc6:	1bad      	subs	r5, r5, r6
    1dc8:	c320      	stmia	r3!, {r5}
    1dca:	4708      	bx	r1
    1dcc:	c820      	ldmia	r0!, {r5}
    1dce:	ca40      	ldmia	r2!, {r6}
    1dd0:	41b5      	sbcs	r5, r6
    1dd2:	c320      	stmia	r3!, {r5}
    1dd4:	c820      	ldmia	r0!, {r5}
    1dd6:	ca40      	ldmia	r2!, {r6}
    1dd8:	41b5      	sbcs	r5, r6
    1dda:	c320      	stmia	r3!, {r5}
    1ddc:	c820      	ldmia	r0!, {r5}
    1dde:	ca40      	ldmia	r2!, {r6}
    1de0:	41b5      	sbcs	r5, r6
    1de2:	c320      	stmia	r3!, {r5}
    1de4:	c820      	ldmia	r0!, {r5}
    1de6:	ca40      	ldmia	r2!, {r6}
    1de8:	41b5      	sbcs	r5, r6
    1dea:	c320      	stmia	r3!, {r5}
    1dec:	c820      	ldmia	r0!, {r5}
    1dee:	ca40      	ldmia	r2!, {r6}
    1df0:	41b5      	sbcs	r5, r6
    1df2:	c320      	stmia	r3!, {r5}
    1df4:	c820      	ldmia	r0!, {r5}
    1df6:	ca40      	ldmia	r2!, {r6}
    1df8:	41b5      	sbcs	r5, r6
    1dfa:	c320      	stmia	r3!, {r5}
    1dfc:	c820      	ldmia	r0!, {r5}
    1dfe:	ca40      	ldmia	r2!, {r6}
    1e00:	41b5      	sbcs	r5, r6
    1e02:	c320      	stmia	r3!, {r5}
    1e04:	4164      	adcs	r4, r4
}
    1e06:	b013      	add	sp, #76	; 0x4c
    1e08:	bc3c      	pop	{r2, r3, r4, r5}
    1e0a:	4690      	mov	r8, r2
    1e0c:	4699      	mov	r9, r3
    1e0e:	46a2      	mov	sl, r4
    1e10:	46ab      	mov	fp, r5
    1e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001e20 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e22:	46de      	mov	lr, fp
    1e24:	4645      	mov	r5, r8
    1e26:	4657      	mov	r7, sl
    1e28:	464e      	mov	r6, r9
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
    1e2a:	f246 7375 	movw	r3, #26485	; 0x6775
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1e2e:	b5e0      	push	{r5, r6, r7, lr}
    1e30:	b09d      	sub	sp, #116	; 0x74
    1e32:	0004      	movs	r4, r0
    1e34:	4690      	mov	r8, r2
    1e36:	468a      	mov	sl, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
    1e38:	2220      	movs	r2, #32
    1e3a:	2100      	movs	r1, #0
    1e3c:	f2c0 0300 	movt	r3, #0
    1e40:	a804      	add	r0, sp, #16
    1e42:	4798      	blx	r3
    1e44:	2303      	movs	r3, #3
    1e46:	9304      	str	r3, [sp, #16]
    wordcount_t num_words = curve->num_words;
    1e48:	4643      	mov	r3, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    1e4a:	f240 79ed 	movw	r9, #2029	; 0x7ed
    1e4e:	781b      	ldrb	r3, [r3, #0]
    1e50:	4652      	mov	r2, sl
    1e52:	b25b      	sxtb	r3, r3
    1e54:	4651      	mov	r1, sl
    1e56:	a80c      	add	r0, sp, #48	; 0x30
    1e58:	f2c0 0900 	movt	r9, #0
    1e5c:	001d      	movs	r5, r3
    1e5e:	9302      	str	r3, [sp, #8]
    1e60:	47c8      	blx	r9
    curve->mmod_fast(result, product);
    1e62:	4642      	mov	r2, r8
    1e64:	23b0      	movs	r3, #176	; 0xb0
    1e66:	a90c      	add	r1, sp, #48	; 0x30
    1e68:	58d3      	ldr	r3, [r2, r3]
    1e6a:	0020      	movs	r0, r4
    1e6c:	4798      	blx	r3
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
    1e6e:	4643      	mov	r3, r8
    1e70:	1d1a      	adds	r2, r3, #4
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    1e72:	002b      	movs	r3, r5
    1e74:	f240 7591 	movw	r5, #1937	; 0x791
    1e78:	9201      	str	r2, [sp, #4]
    1e7a:	f2c0 0500 	movt	r5, #0
    1e7e:	aa04      	add	r2, sp, #16
    1e80:	0021      	movs	r1, r4
    1e82:	0020      	movs	r0, r4
    1e84:	9503      	str	r5, [sp, #12]
    1e86:	47a8      	blx	r5
    if (l_borrow) {
    1e88:	b140      	cbz	r0, 1e9c <x_side_default+0x7c>
        uECC_vli_add(result, result, mod, num_words);
    1e8a:	f240 7b31 	movw	fp, #1841	; 0x731
    1e8e:	9b02      	ldr	r3, [sp, #8]
    1e90:	9a01      	ldr	r2, [sp, #4]
    1e92:	0021      	movs	r1, r4
    1e94:	0020      	movs	r0, r4
    1e96:	f2c0 0b00 	movt	fp, #0
    1e9a:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
    1e9c:	4643      	mov	r3, r8
    1e9e:	781b      	ldrb	r3, [r3, #0]
    1ea0:	4652      	mov	r2, sl
    1ea2:	0021      	movs	r1, r4
    1ea4:	a80c      	add	r0, sp, #48	; 0x30
    1ea6:	b25b      	sxtb	r3, r3
    1ea8:	47c8      	blx	r9
    curve->mmod_fast(result, product);
    1eaa:	4642      	mov	r2, r8
    1eac:	23b0      	movs	r3, #176	; 0xb0
    1eae:	a90c      	add	r1, sp, #48	; 0x30
    1eb0:	58d3      	ldr	r3, [r2, r3]
    1eb2:	0020      	movs	r0, r4
    1eb4:	4798      	blx	r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1eb6:	2308      	movs	r3, #8
    1eb8:	9a02      	ldr	r2, [sp, #8]
    __asm__ volatile (
    1eba:	0021      	movs	r1, r4
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1ebc:	1a9b      	subs	r3, r3, r2
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
    1ebe:	4642      	mov	r2, r8
    1ec0:	00db      	lsls	r3, r3, #3
    1ec2:	3301      	adds	r3, #1
    1ec4:	3284      	adds	r2, #132	; 0x84
    __asm__ volatile (
    1ec6:	0027      	movs	r7, r4
    1ec8:	2000      	movs	r0, #0
    1eca:	a604      	add	r6, pc, #16	; (adr r6, 1edc <x_side_default+0xbc>)
    1ecc:	46c0      	nop			; (mov r8, r8)
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	199b      	adds	r3, r3, r6
    1ed2:	cf40      	ldmia	r7!, {r6}
    1ed4:	ca20      	ldmia	r2!, {r5}
    1ed6:	1976      	adds	r6, r6, r5
    1ed8:	c140      	stmia	r1!, {r6}
    1eda:	4718      	bx	r3
    1edc:	cf40      	ldmia	r7!, {r6}
    1ede:	ca20      	ldmia	r2!, {r5}
    1ee0:	416e      	adcs	r6, r5
    1ee2:	c140      	stmia	r1!, {r6}
    1ee4:	cf40      	ldmia	r7!, {r6}
    1ee6:	ca20      	ldmia	r2!, {r5}
    1ee8:	416e      	adcs	r6, r5
    1eea:	c140      	stmia	r1!, {r6}
    1eec:	cf40      	ldmia	r7!, {r6}
    1eee:	ca20      	ldmia	r2!, {r5}
    1ef0:	416e      	adcs	r6, r5
    1ef2:	c140      	stmia	r1!, {r6}
    1ef4:	cf40      	ldmia	r7!, {r6}
    1ef6:	ca20      	ldmia	r2!, {r5}
    1ef8:	416e      	adcs	r6, r5
    1efa:	c140      	stmia	r1!, {r6}
    1efc:	cf40      	ldmia	r7!, {r6}
    1efe:	ca20      	ldmia	r2!, {r5}
    1f00:	416e      	adcs	r6, r5
    1f02:	c140      	stmia	r1!, {r6}
    1f04:	cf40      	ldmia	r7!, {r6}
    1f06:	ca20      	ldmia	r2!, {r5}
    1f08:	416e      	adcs	r6, r5
    1f0a:	c140      	stmia	r1!, {r6}
    1f0c:	cf40      	ldmia	r7!, {r6}
    1f0e:	ca20      	ldmia	r2!, {r5}
    1f10:	416e      	adcs	r6, r5
    1f12:	c140      	stmia	r1!, {r6}
    1f14:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1f16:	b9c0      	cbnz	r0, 1f4a <x_side_default+0x12a>
    for (i = num_words - 1; i >= 0; --i) {
    1f18:	9b02      	ldr	r3, [sp, #8]
    1f1a:	3b01      	subs	r3, #1
    1f1c:	b25b      	sxtb	r3, r3
    1f1e:	2b00      	cmp	r3, #0
    1f20:	da06      	bge.n	1f30 <x_side_default+0x110>
    1f22:	e012      	b.n	1f4a <x_side_default+0x12a>
        } else if (left[i] < right[i]) {
    1f24:	4291      	cmp	r1, r2
    1f26:	d310      	bcc.n	1f4a <x_side_default+0x12a>
    1f28:	3b01      	subs	r3, #1
    1f2a:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    1f2c:	1c5a      	adds	r2, r3, #1
    1f2e:	d00c      	beq.n	1f4a <x_side_default+0x12a>
        if (left[i] > right[i]) {
    1f30:	9901      	ldr	r1, [sp, #4]
    1f32:	009a      	lsls	r2, r3, #2
    1f34:	5889      	ldr	r1, [r1, r2]
    1f36:	58a2      	ldr	r2, [r4, r2]
    1f38:	4291      	cmp	r1, r2
    1f3a:	d9f3      	bls.n	1f24 <x_side_default+0x104>
}
    1f3c:	b01d      	add	sp, #116	; 0x74
    1f3e:	bc3c      	pop	{r2, r3, r4, r5}
    1f40:	4690      	mov	r8, r2
    1f42:	4699      	mov	r9, r3
    1f44:	46a2      	mov	sl, r4
    1f46:	46ab      	mov	fp, r5
    1f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_sub(result, result, mod, num_words);
    1f4a:	0021      	movs	r1, r4
    1f4c:	9b02      	ldr	r3, [sp, #8]
    1f4e:	9a01      	ldr	r2, [sp, #4]
    1f50:	0020      	movs	r0, r4
    1f52:	9c03      	ldr	r4, [sp, #12]
    1f54:	47a0      	blx	r4
    1f56:	e7f1      	b.n	1f3c <x_side_default+0x11c>
	...

00001f60 <x_side_secp256k1>:
    uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
    uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
}

/* Computes result = x^3 + b. result must not overlap x. */
static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1f60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f62:	46ce      	mov	lr, r9
    1f64:	4647      	mov	r7, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    1f66:	2300      	movs	r3, #0
    1f68:	f240 76ed 	movw	r6, #2029	; 0x7ed
    curve->mmod_fast(result, product);
    1f6c:	f240 08b0 	movw	r8, #176	; 0xb0
    1f70:	b580      	push	{r7, lr}
    1f72:	b091      	sub	sp, #68	; 0x44
    1f74:	4681      	mov	r9, r0
    1f76:	0015      	movs	r5, r2
    uECC_vli_mult(product, left, right, curve->num_words);
    1f78:	56d3      	ldrsb	r3, [r2, r3]
    1f7a:	4668      	mov	r0, sp
    1f7c:	000a      	movs	r2, r1
    1f7e:	f2c0 0600 	movt	r6, #0
    1f82:	000f      	movs	r7, r1
    1f84:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    1f86:	4643      	mov	r3, r8
    1f88:	4669      	mov	r1, sp
    1f8a:	4648      	mov	r0, r9
    1f8c:	58eb      	ldr	r3, [r5, r3]
    1f8e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    1f90:	2300      	movs	r3, #0
    1f92:	003a      	movs	r2, r7
    1f94:	56eb      	ldrsb	r3, [r5, r3]
    1f96:	4649      	mov	r1, r9
    1f98:	4668      	mov	r0, sp
    1f9a:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    1f9c:	4643      	mov	r3, r8
    1f9e:	4648      	mov	r0, r9
    1fa0:	58eb      	ldr	r3, [r5, r3]
    1fa2:	4669      	mov	r1, sp
    1fa4:	4798      	blx	r3
    uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
    uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
    1fa6:	002a      	movs	r2, r5
    1fa8:	1d2b      	adds	r3, r5, #4
    1faa:	469c      	mov	ip, r3
    1fac:	3284      	adds	r2, #132	; 0x84
    1fae:	464b      	mov	r3, r9
    1fb0:	2001      	movs	r0, #1
    1fb2:	464f      	mov	r7, r9
    1fb4:	2600      	movs	r6, #0
    1fb6:	a105      	add	r1, pc, #20	; (adr r1, 1fcc <x_side_secp256k1+0x6c>)
    1fb8:	46c0      	nop			; (mov r8, r8)
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	46c0      	nop			; (mov r8, r8)
    1fbe:	46c0      	nop			; (mov r8, r8)
    1fc0:	1840      	adds	r0, r0, r1
    1fc2:	cf02      	ldmia	r7!, {r1}
    1fc4:	ca10      	ldmia	r2!, {r4}
    1fc6:	1909      	adds	r1, r1, r4
    1fc8:	c302      	stmia	r3!, {r1}
    1fca:	4700      	bx	r0
    1fcc:	cf02      	ldmia	r7!, {r1}
    1fce:	ca10      	ldmia	r2!, {r4}
    1fd0:	4161      	adcs	r1, r4
    1fd2:	c302      	stmia	r3!, {r1}
    1fd4:	cf02      	ldmia	r7!, {r1}
    1fd6:	ca10      	ldmia	r2!, {r4}
    1fd8:	4161      	adcs	r1, r4
    1fda:	c302      	stmia	r3!, {r1}
    1fdc:	cf02      	ldmia	r7!, {r1}
    1fde:	ca10      	ldmia	r2!, {r4}
    1fe0:	4161      	adcs	r1, r4
    1fe2:	c302      	stmia	r3!, {r1}
    1fe4:	cf02      	ldmia	r7!, {r1}
    1fe6:	ca10      	ldmia	r2!, {r4}
    1fe8:	4161      	adcs	r1, r4
    1fea:	c302      	stmia	r3!, {r1}
    1fec:	cf02      	ldmia	r7!, {r1}
    1fee:	ca10      	ldmia	r2!, {r4}
    1ff0:	4161      	adcs	r1, r4
    1ff2:	c302      	stmia	r3!, {r1}
    1ff4:	cf02      	ldmia	r7!, {r1}
    1ff6:	ca10      	ldmia	r2!, {r4}
    1ff8:	4161      	adcs	r1, r4
    1ffa:	c302      	stmia	r3!, {r1}
    1ffc:	cf02      	ldmia	r7!, {r1}
    1ffe:	ca10      	ldmia	r2!, {r4}
    2000:	4161      	adcs	r1, r4
    2002:	c302      	stmia	r3!, {r1}
    2004:	4176      	adcs	r6, r6
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    2006:	bb86      	cbnz	r6, 206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2008:	464a      	mov	r2, r9
    200a:	6a2b      	ldr	r3, [r5, #32]
    200c:	69d2      	ldr	r2, [r2, #28]
    200e:	429a      	cmp	r2, r3
    2010:	d200      	bcs.n	2014 <x_side_secp256k1+0xb4>
    2012:	e058      	b.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2014:	d829      	bhi.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2016:	464b      	mov	r3, r9
    2018:	69ea      	ldr	r2, [r5, #28]
    201a:	699b      	ldr	r3, [r3, #24]
    201c:	429a      	cmp	r2, r3
    201e:	d900      	bls.n	2022 <x_side_secp256k1+0xc2>
    2020:	e051      	b.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2022:	d322      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2024:	464b      	mov	r3, r9
    2026:	69aa      	ldr	r2, [r5, #24]
    2028:	695b      	ldr	r3, [r3, #20]
    202a:	429a      	cmp	r2, r3
    202c:	d84b      	bhi.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    202e:	d31c      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2030:	464b      	mov	r3, r9
    2032:	696a      	ldr	r2, [r5, #20]
    2034:	691b      	ldr	r3, [r3, #16]
    2036:	429a      	cmp	r2, r3
    2038:	d845      	bhi.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    203a:	d316      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    203c:	464b      	mov	r3, r9
    203e:	692a      	ldr	r2, [r5, #16]
    2040:	68db      	ldr	r3, [r3, #12]
    2042:	429a      	cmp	r2, r3
    2044:	d83f      	bhi.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2046:	d310      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2048:	464b      	mov	r3, r9
    204a:	68ea      	ldr	r2, [r5, #12]
    204c:	689b      	ldr	r3, [r3, #8]
    204e:	429a      	cmp	r2, r3
    2050:	d839      	bhi.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2052:	d30a      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2054:	464b      	mov	r3, r9
    2056:	68aa      	ldr	r2, [r5, #8]
    2058:	685b      	ldr	r3, [r3, #4]
    205a:	429a      	cmp	r2, r3
    205c:	d833      	bhi.n	20c6 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    205e:	d304      	bcc.n	206a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2060:	464a      	mov	r2, r9
    2062:	686b      	ldr	r3, [r5, #4]
    2064:	6812      	ldr	r2, [r2, #0]
    2066:	4293      	cmp	r3, r2
    2068:	d82d      	bhi.n	20c6 <x_side_secp256k1+0x166>
    __asm__ volatile (
    206a:	4648      	mov	r0, r9
    206c:	4663      	mov	r3, ip
    206e:	2201      	movs	r2, #1
    2070:	4649      	mov	r1, r9
    2072:	2400      	movs	r4, #0
    2074:	a505      	add	r5, pc, #20	; (adr r5, 208c <x_side_secp256k1+0x12c>)
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	46c0      	nop			; (mov r8, r8)
    207a:	46c0      	nop			; (mov r8, r8)
    207c:	46c0      	nop			; (mov r8, r8)
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	1952      	adds	r2, r2, r5
    2082:	c920      	ldmia	r1!, {r5}
    2084:	cb40      	ldmia	r3!, {r6}
    2086:	1bad      	subs	r5, r5, r6
    2088:	c020      	stmia	r0!, {r5}
    208a:	4710      	bx	r2
    208c:	c920      	ldmia	r1!, {r5}
    208e:	cb40      	ldmia	r3!, {r6}
    2090:	41b5      	sbcs	r5, r6
    2092:	c020      	stmia	r0!, {r5}
    2094:	c920      	ldmia	r1!, {r5}
    2096:	cb40      	ldmia	r3!, {r6}
    2098:	41b5      	sbcs	r5, r6
    209a:	c020      	stmia	r0!, {r5}
    209c:	c920      	ldmia	r1!, {r5}
    209e:	cb40      	ldmia	r3!, {r6}
    20a0:	41b5      	sbcs	r5, r6
    20a2:	c020      	stmia	r0!, {r5}
    20a4:	c920      	ldmia	r1!, {r5}
    20a6:	cb40      	ldmia	r3!, {r6}
    20a8:	41b5      	sbcs	r5, r6
    20aa:	c020      	stmia	r0!, {r5}
    20ac:	c920      	ldmia	r1!, {r5}
    20ae:	cb40      	ldmia	r3!, {r6}
    20b0:	41b5      	sbcs	r5, r6
    20b2:	c020      	stmia	r0!, {r5}
    20b4:	c920      	ldmia	r1!, {r5}
    20b6:	cb40      	ldmia	r3!, {r6}
    20b8:	41b5      	sbcs	r5, r6
    20ba:	c020      	stmia	r0!, {r5}
    20bc:	c920      	ldmia	r1!, {r5}
    20be:	cb40      	ldmia	r3!, {r6}
    20c0:	41b5      	sbcs	r5, r6
    20c2:	c020      	stmia	r0!, {r5}
    20c4:	4164      	adcs	r4, r4
}
    20c6:	b011      	add	sp, #68	; 0x44
    20c8:	bc0c      	pop	{r2, r3}
    20ca:	4690      	mov	r8, r2
    20cc:	4699      	mov	r9, r3
    20ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000020d0 <vli_mmod_fast_secp192r1>:
static void vli_mmod_fast_secp192r1(uint32_t *result, uint32_t *product) {
    20d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    20d2:	46de      	mov	lr, fp
    20d4:	4657      	mov	r7, sl
    20d6:	4645      	mov	r5, r8
    20d8:	464e      	mov	r6, r9
        dest[i] = src[i];
    20da:	680b      	ldr	r3, [r1, #0]
    20dc:	b5e0      	push	{r5, r6, r7, lr}
    20de:	6003      	str	r3, [r0, #0]
    20e0:	684b      	ldr	r3, [r1, #4]
    20e2:	0004      	movs	r4, r0
    20e4:	6043      	str	r3, [r0, #4]
    20e6:	688b      	ldr	r3, [r1, #8]
    __asm__ volatile (
    20e8:	f240 0a11 	movw	sl, #17
    20ec:	6083      	str	r3, [r0, #8]
    20ee:	68cb      	ldr	r3, [r1, #12]
    20f0:	b087      	sub	sp, #28
    20f2:	60c3      	str	r3, [r0, #12]
    20f4:	690b      	ldr	r3, [r1, #16]
    20f6:	4688      	mov	r8, r1
    20f8:	6103      	str	r3, [r0, #16]
    20fa:	694b      	ldr	r3, [r1, #20]
    20fc:	2218      	movs	r2, #24
    20fe:	6143      	str	r3, [r0, #20]
    2100:	f246 733f 	movw	r3, #26431	; 0x673f
    2104:	3118      	adds	r1, #24
    2106:	4668      	mov	r0, sp
    2108:	f2c0 0300 	movt	r3, #0
    210c:	4798      	blx	r3
    210e:	0025      	movs	r5, r4
    2110:	0023      	movs	r3, r4
    2112:	466a      	mov	r2, sp
    2114:	4650      	mov	r0, sl
    2116:	2600      	movs	r6, #0
    2118:	a104      	add	r1, pc, #16	; (adr r1, 212c <vli_mmod_fast_secp192r1+0x5c>)
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	46c0      	nop			; (mov r8, r8)
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	1840      	adds	r0, r0, r1
    2122:	cd02      	ldmia	r5!, {r1}
    2124:	ca80      	ldmia	r2!, {r7}
    2126:	19c9      	adds	r1, r1, r7
    2128:	c302      	stmia	r3!, {r1}
    212a:	4700      	bx	r0
    212c:	cd02      	ldmia	r5!, {r1}
    212e:	ca80      	ldmia	r2!, {r7}
    2130:	4179      	adcs	r1, r7
    2132:	c302      	stmia	r3!, {r1}
    2134:	cd02      	ldmia	r5!, {r1}
    2136:	ca80      	ldmia	r2!, {r7}
    2138:	4179      	adcs	r1, r7
    213a:	c302      	stmia	r3!, {r1}
    213c:	cd02      	ldmia	r5!, {r1}
    213e:	ca80      	ldmia	r2!, {r7}
    2140:	4179      	adcs	r1, r7
    2142:	c302      	stmia	r3!, {r1}
    2144:	cd02      	ldmia	r5!, {r1}
    2146:	ca80      	ldmia	r2!, {r7}
    2148:	4179      	adcs	r1, r7
    214a:	c302      	stmia	r3!, {r1}
    214c:	cd02      	ldmia	r5!, {r1}
    214e:	ca80      	ldmia	r2!, {r7}
    2150:	4179      	adcs	r1, r7
    2152:	c302      	stmia	r3!, {r1}
    2154:	cd02      	ldmia	r5!, {r1}
    2156:	ca80      	ldmia	r2!, {r7}
    2158:	4179      	adcs	r1, r7
    215a:	c302      	stmia	r3!, {r1}
    215c:	cd02      	ldmia	r5!, {r1}
    215e:	ca80      	ldmia	r2!, {r7}
    2160:	4179      	adcs	r1, r7
    2162:	c302      	stmia	r3!, {r1}
    2164:	4176      	adcs	r6, r6
    tmp[0] = tmp[1] = 0;
    2166:	f240 0900 	movw	r9, #0
    216a:	464b      	mov	r3, r9
    216c:	9301      	str	r3, [sp, #4]
    216e:	9300      	str	r3, [sp, #0]
    tmp[2] = product[6];
    2170:	4643      	mov	r3, r8
    2172:	699b      	ldr	r3, [r3, #24]
    2174:	46b3      	mov	fp, r6
    2176:	9302      	str	r3, [sp, #8]
    tmp[3] = product[7];
    2178:	4643      	mov	r3, r8
    217a:	69db      	ldr	r3, [r3, #28]
    217c:	466a      	mov	r2, sp
    217e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[8];
    2180:	4643      	mov	r3, r8
    2182:	6a1b      	ldr	r3, [r3, #32]
    2184:	4650      	mov	r0, sl
    2186:	9304      	str	r3, [sp, #16]
    tmp[5] = product[9];
    2188:	4643      	mov	r3, r8
    218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    218c:	0027      	movs	r7, r4
    218e:	9305      	str	r3, [sp, #20]
    2190:	0023      	movs	r3, r4
    2192:	2100      	movs	r1, #0
    2194:	a505      	add	r5, pc, #20	; (adr r5, 21ac <vli_mmod_fast_secp192r1+0xdc>)
    2196:	46c0      	nop			; (mov r8, r8)
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	46c0      	nop			; (mov r8, r8)
    219c:	46c0      	nop			; (mov r8, r8)
    219e:	46c0      	nop			; (mov r8, r8)
    21a0:	1940      	adds	r0, r0, r5
    21a2:	cf20      	ldmia	r7!, {r5}
    21a4:	ca40      	ldmia	r2!, {r6}
    21a6:	19ad      	adds	r5, r5, r6
    21a8:	c320      	stmia	r3!, {r5}
    21aa:	4700      	bx	r0
    21ac:	cf20      	ldmia	r7!, {r5}
    21ae:	ca40      	ldmia	r2!, {r6}
    21b0:	4175      	adcs	r5, r6
    21b2:	c320      	stmia	r3!, {r5}
    21b4:	cf20      	ldmia	r7!, {r5}
    21b6:	ca40      	ldmia	r2!, {r6}
    21b8:	4175      	adcs	r5, r6
    21ba:	c320      	stmia	r3!, {r5}
    21bc:	cf20      	ldmia	r7!, {r5}
    21be:	ca40      	ldmia	r2!, {r6}
    21c0:	4175      	adcs	r5, r6
    21c2:	c320      	stmia	r3!, {r5}
    21c4:	cf20      	ldmia	r7!, {r5}
    21c6:	ca40      	ldmia	r2!, {r6}
    21c8:	4175      	adcs	r5, r6
    21ca:	c320      	stmia	r3!, {r5}
    21cc:	cf20      	ldmia	r7!, {r5}
    21ce:	ca40      	ldmia	r2!, {r6}
    21d0:	4175      	adcs	r5, r6
    21d2:	c320      	stmia	r3!, {r5}
    21d4:	cf20      	ldmia	r7!, {r5}
    21d6:	ca40      	ldmia	r2!, {r6}
    21d8:	4175      	adcs	r5, r6
    21da:	c320      	stmia	r3!, {r5}
    21dc:	cf20      	ldmia	r7!, {r5}
    21de:	ca40      	ldmia	r2!, {r6}
    21e0:	4175      	adcs	r5, r6
    21e2:	c320      	stmia	r3!, {r5}
    21e4:	4149      	adcs	r1, r1
    tmp[0] = tmp[2] = product[10];
    21e6:	4643      	mov	r3, r8
    21e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21ea:	468c      	mov	ip, r1
    21ec:	9302      	str	r3, [sp, #8]
    21ee:	9300      	str	r3, [sp, #0]
    tmp[1] = tmp[3] = product[11];
    21f0:	4643      	mov	r3, r8
    21f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21f4:	0022      	movs	r2, r4
    21f6:	9303      	str	r3, [sp, #12]
    21f8:	9301      	str	r3, [sp, #4]
    tmp[4] = tmp[5] = 0;
    21fa:	464b      	mov	r3, r9
    21fc:	4651      	mov	r1, sl
    21fe:	9305      	str	r3, [sp, #20]
    2200:	9304      	str	r3, [sp, #16]
    2202:	0025      	movs	r5, r4
    2204:	466b      	mov	r3, sp
    2206:	2000      	movs	r0, #0
    2208:	a604      	add	r6, pc, #16	; (adr r6, 221c <vli_mmod_fast_secp192r1+0x14c>)
    220a:	46c0      	nop			; (mov r8, r8)
    220c:	46c0      	nop			; (mov r8, r8)
    220e:	46c0      	nop			; (mov r8, r8)
    2210:	1989      	adds	r1, r1, r6
    2212:	cd40      	ldmia	r5!, {r6}
    2214:	cb80      	ldmia	r3!, {r7}
    2216:	19f6      	adds	r6, r6, r7
    2218:	c240      	stmia	r2!, {r6}
    221a:	4708      	bx	r1
    221c:	cd40      	ldmia	r5!, {r6}
    221e:	cb80      	ldmia	r3!, {r7}
    2220:	417e      	adcs	r6, r7
    2222:	c240      	stmia	r2!, {r6}
    2224:	cd40      	ldmia	r5!, {r6}
    2226:	cb80      	ldmia	r3!, {r7}
    2228:	417e      	adcs	r6, r7
    222a:	c240      	stmia	r2!, {r6}
    222c:	cd40      	ldmia	r5!, {r6}
    222e:	cb80      	ldmia	r3!, {r7}
    2230:	417e      	adcs	r6, r7
    2232:	c240      	stmia	r2!, {r6}
    2234:	cd40      	ldmia	r5!, {r6}
    2236:	cb80      	ldmia	r3!, {r7}
    2238:	417e      	adcs	r6, r7
    223a:	c240      	stmia	r2!, {r6}
    223c:	cd40      	ldmia	r5!, {r6}
    223e:	cb80      	ldmia	r3!, {r7}
    2240:	417e      	adcs	r6, r7
    2242:	c240      	stmia	r2!, {r6}
    2244:	cd40      	ldmia	r5!, {r6}
    2246:	cb80      	ldmia	r3!, {r7}
    2248:	417e      	adcs	r6, r7
    224a:	c240      	stmia	r2!, {r6}
    224c:	cd40      	ldmia	r5!, {r6}
    224e:	cb80      	ldmia	r3!, {r7}
    2250:	417e      	adcs	r6, r7
    2252:	c240      	stmia	r2!, {r6}
    2254:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
    2256:	465d      	mov	r5, fp
    __asm__ volatile (
    2258:	f646 26d8 	movw	r6, #27352	; 0x6ad8
    225c:	4465      	add	r5, ip
    carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
    225e:	46ac      	mov	ip, r5
    2260:	f240 086c 	movw	r8, #108	; 0x6c
    2264:	f2c0 0600 	movt	r6, #0
    2268:	4484      	add	ip, r0
    226a:	44b0      	add	r8, r6
    226c:	f240 0911 	movw	r9, #17
    while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
    2270:	e03e      	b.n	22f0 <vli_mmod_fast_secp192r1+0x220>
        if (left[i] > right[i]) {
    2272:	6923      	ldr	r3, [r4, #16]
    2274:	3301      	adds	r3, #1
    2276:	d141      	bne.n	22fc <vli_mmod_fast_secp192r1+0x22c>
    2278:	68e3      	ldr	r3, [r4, #12]
    227a:	3301      	adds	r3, #1
    227c:	d13e      	bne.n	22fc <vli_mmod_fast_secp192r1+0x22c>
    227e:	68a3      	ldr	r3, [r4, #8]
    2280:	1cda      	adds	r2, r3, #3
    2282:	d93b      	bls.n	22fc <vli_mmod_fast_secp192r1+0x22c>
        } else if (left[i] < right[i]) {
    2284:	3301      	adds	r3, #1
    2286:	d005      	beq.n	2294 <vli_mmod_fast_secp192r1+0x1c4>
        if (left[i] > right[i]) {
    2288:	6863      	ldr	r3, [r4, #4]
    228a:	3301      	adds	r3, #1
    228c:	d136      	bne.n	22fc <vli_mmod_fast_secp192r1+0x22c>
    228e:	6823      	ldr	r3, [r4, #0]
    2290:	3301      	adds	r3, #1
    2292:	d133      	bne.n	22fc <vli_mmod_fast_secp192r1+0x22c>
    2294:	0023      	movs	r3, r4
    2296:	4642      	mov	r2, r8
    2298:	4649      	mov	r1, r9
    229a:	0026      	movs	r6, r4
    229c:	2000      	movs	r0, #0
    229e:	a703      	add	r7, pc, #12	; (adr r7, 22ac <vli_mmod_fast_secp192r1+0x1dc>)
    22a0:	19c9      	adds	r1, r1, r7
    22a2:	ce80      	ldmia	r6!, {r7}
    22a4:	ca20      	ldmia	r2!, {r5}
    22a6:	1b7f      	subs	r7, r7, r5
    22a8:	c380      	stmia	r3!, {r7}
    22aa:	4708      	bx	r1
    22ac:	ce80      	ldmia	r6!, {r7}
    22ae:	ca20      	ldmia	r2!, {r5}
    22b0:	41af      	sbcs	r7, r5
    22b2:	c380      	stmia	r3!, {r7}
    22b4:	ce80      	ldmia	r6!, {r7}
    22b6:	ca20      	ldmia	r2!, {r5}
    22b8:	41af      	sbcs	r7, r5
    22ba:	c380      	stmia	r3!, {r7}
    22bc:	ce80      	ldmia	r6!, {r7}
    22be:	ca20      	ldmia	r2!, {r5}
    22c0:	41af      	sbcs	r7, r5
    22c2:	c380      	stmia	r3!, {r7}
    22c4:	ce80      	ldmia	r6!, {r7}
    22c6:	ca20      	ldmia	r2!, {r5}
    22c8:	41af      	sbcs	r7, r5
    22ca:	c380      	stmia	r3!, {r7}
    22cc:	ce80      	ldmia	r6!, {r7}
    22ce:	ca20      	ldmia	r2!, {r5}
    22d0:	41af      	sbcs	r7, r5
    22d2:	c380      	stmia	r3!, {r7}
    22d4:	ce80      	ldmia	r6!, {r7}
    22d6:	ca20      	ldmia	r2!, {r5}
    22d8:	41af      	sbcs	r7, r5
    22da:	c380      	stmia	r3!, {r7}
    22dc:	ce80      	ldmia	r6!, {r7}
    22de:	ca20      	ldmia	r2!, {r5}
    22e0:	41af      	sbcs	r7, r5
    22e2:	c380      	stmia	r3!, {r7}
    22e4:	4140      	adcs	r0, r0
        carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
    22e6:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    22e8:	4243      	negs	r3, r0
    22ea:	4143      	adcs	r3, r0
    22ec:	1ad3      	subs	r3, r2, r3
    22ee:	469c      	mov	ip, r3
    while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
    22f0:	4663      	mov	r3, ip
    22f2:	2b00      	cmp	r3, #0
    22f4:	d1ce      	bne.n	2294 <vli_mmod_fast_secp192r1+0x1c4>
    22f6:	6963      	ldr	r3, [r4, #20]
    22f8:	3301      	adds	r3, #1
    22fa:	d0ba      	beq.n	2272 <vli_mmod_fast_secp192r1+0x1a2>
}
    22fc:	b007      	add	sp, #28
    22fe:	bc3c      	pop	{r2, r3, r4, r5}
    2300:	4690      	mov	r8, r2
    2302:	4699      	mov	r9, r3
    2304:	46a2      	mov	sl, r4
    2306:	46ab      	mov	fp, r5
    2308:	bdf0      	pop	{r4, r5, r6, r7, pc}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	0000      	movs	r0, r0
	...

00002310 <vli_mmod_fast_secp256k1>:

#if (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp256k1)
static void omega_mult_secp256k1(uECC_word_t *result, const uECC_word_t *right);
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    2310:	b5f0      	push	{r4, r5, r6, r7, lr}
    2312:	46de      	mov	lr, fp
    2314:	4657      	mov	r7, sl
    2316:	464e      	mov	r6, r9
    2318:	4645      	mov	r5, r8
        vli[i] = 0;
    231a:	2300      	movs	r3, #0
    231c:	b5e0      	push	{r5, r6, r7, lr}
    231e:	b093      	sub	sp, #76	; 0x4c
    2320:	930b      	str	r3, [sp, #44]	; 0x2c
    2322:	930c      	str	r3, [sp, #48]	; 0x30
    2324:	930d      	str	r3, [sp, #52]	; 0x34
    2326:	930e      	str	r3, [sp, #56]	; 0x38
    2328:	930f      	str	r3, [sp, #60]	; 0x3c
    232a:	9310      	str	r3, [sp, #64]	; 0x40
    232c:	9311      	str	r3, [sp, #68]	; 0x44
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    232e:	f246 6361 	movw	r3, #26209	; 0x6661
    2332:	f2c0 0300 	movt	r3, #0
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    2336:	000c      	movs	r4, r1
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2338:	001d      	movs	r5, r3
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    233a:	4683      	mov	fp, r0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    233c:	f240 32d1 	movw	r2, #977	; 0x3d1
    2340:	6a08      	ldr	r0, [r1, #32]
    2342:	2300      	movs	r3, #0
    2344:	2100      	movs	r1, #0
    2346:	47a8      	blx	r5
    2348:	000f      	movs	r7, r1
        result[k] = (uint32_t) p;
    234a:	9002      	str	r0, [sp, #8]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    234c:	f240 32d1 	movw	r2, #977	; 0x3d1
    2350:	2300      	movs	r3, #0
    2352:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2354:	2100      	movs	r1, #0
    2356:	47a8      	blx	r5
        carry = p >> 32;
    2358:	003a      	movs	r2, r7
    235a:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    235c:	1880      	adds	r0, r0, r2
    235e:	4159      	adcs	r1, r3
        carry = p >> 32;
    2360:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2362:	46a9      	mov	r9, r5
        carry = p >> 32;
    2364:	001e      	movs	r6, r3
    2366:	000d      	movs	r5, r1
        result[k] = (uint32_t) p;
    2368:	9003      	str	r0, [sp, #12]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    236a:	f240 32d1 	movw	r2, #977	; 0x3d1
    236e:	2300      	movs	r3, #0
    2370:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2372:	2100      	movs	r1, #0
    2374:	47c8      	blx	r9
    2376:	002a      	movs	r2, r5
    2378:	0033      	movs	r3, r6
    237a:	1880      	adds	r0, r0, r2
    237c:	4159      	adcs	r1, r3
        carry = p >> 32;
    237e:	2300      	movs	r3, #0
    2380:	000d      	movs	r5, r1
    2382:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2384:	9004      	str	r0, [sp, #16]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2386:	f240 32d1 	movw	r2, #977	; 0x3d1
    238a:	2300      	movs	r3, #0
    238c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    238e:	2100      	movs	r1, #0
    2390:	47c8      	blx	r9
    2392:	002a      	movs	r2, r5
    2394:	0033      	movs	r3, r6
    2396:	1880      	adds	r0, r0, r2
    2398:	4159      	adcs	r1, r3
        carry = p >> 32;
    239a:	2300      	movs	r3, #0
    239c:	000d      	movs	r5, r1
    239e:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    23a0:	9005      	str	r0, [sp, #20]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    23a2:	f240 32d1 	movw	r2, #977	; 0x3d1
    23a6:	2300      	movs	r3, #0
    23a8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    23aa:	2100      	movs	r1, #0
    23ac:	47c8      	blx	r9
    23ae:	002a      	movs	r2, r5
    23b0:	0033      	movs	r3, r6
    23b2:	1880      	adds	r0, r0, r2
    23b4:	4159      	adcs	r1, r3
        carry = p >> 32;
    23b6:	2300      	movs	r3, #0
    23b8:	000d      	movs	r5, r1
    23ba:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    23bc:	9006      	str	r0, [sp, #24]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    23be:	f240 32d1 	movw	r2, #977	; 0x3d1
    23c2:	2300      	movs	r3, #0
    23c4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    23c6:	2100      	movs	r1, #0
    23c8:	47c8      	blx	r9
    23ca:	002a      	movs	r2, r5
    23cc:	0033      	movs	r3, r6
    23ce:	1880      	adds	r0, r0, r2
    23d0:	4159      	adcs	r1, r3
        carry = p >> 32;
    23d2:	2300      	movs	r3, #0
    23d4:	000d      	movs	r5, r1
    23d6:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    23d8:	9007      	str	r0, [sp, #28]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    23da:	f240 32d1 	movw	r2, #977	; 0x3d1
    23de:	2300      	movs	r3, #0
    23e0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    23e2:	2100      	movs	r1, #0
    23e4:	47c8      	blx	r9
    23e6:	002a      	movs	r2, r5
    23e8:	0033      	movs	r3, r6
    23ea:	1880      	adds	r0, r0, r2
    23ec:	4159      	adcs	r1, r3
        carry = p >> 32;
    23ee:	2300      	movs	r3, #0
    23f0:	000d      	movs	r5, r1
    23f2:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    23f4:	9008      	str	r0, [sp, #32]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    23f6:	f240 32d1 	movw	r2, #977	; 0x3d1
    23fa:	2300      	movs	r3, #0
    23fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    23fe:	2100      	movs	r1, #0
    2400:	47c8      	blx	r9
    2402:	002a      	movs	r2, r5
    2404:	0033      	movs	r3, r6
    __asm__ volatile (
    2406:	f240 0801 	movw	r8, #1
    240a:	1880      	adds	r0, r0, r2
    240c:	4159      	adcs	r1, r3
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
    240e:	0022      	movs	r2, r4
    2410:	ab03      	add	r3, sp, #12
        carry = p >> 32;
    2412:	910a      	str	r1, [sp, #40]	; 0x28
        result[k] = (uint32_t) p;
    2414:	9009      	str	r0, [sp, #36]	; 0x24
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
    2416:	3220      	adds	r2, #32
    2418:	4641      	mov	r1, r8
    241a:	001d      	movs	r5, r3
    241c:	2000      	movs	r0, #0
    241e:	a703      	add	r7, pc, #12	; (adr r7, 242c <vli_mmod_fast_secp256k1+0x11c>)
    2420:	19c9      	adds	r1, r1, r7
    2422:	cd80      	ldmia	r5!, {r7}
    2424:	ca40      	ldmia	r2!, {r6}
    2426:	19bf      	adds	r7, r7, r6
    2428:	c380      	stmia	r3!, {r7}
    242a:	4708      	bx	r1
    242c:	cd80      	ldmia	r5!, {r7}
    242e:	ca40      	ldmia	r2!, {r6}
    2430:	4177      	adcs	r7, r6
    2432:	c380      	stmia	r3!, {r7}
    2434:	cd80      	ldmia	r5!, {r7}
    2436:	ca40      	ldmia	r2!, {r6}
    2438:	4177      	adcs	r7, r6
    243a:	c380      	stmia	r3!, {r7}
    243c:	cd80      	ldmia	r5!, {r7}
    243e:	ca40      	ldmia	r2!, {r6}
    2440:	4177      	adcs	r7, r6
    2442:	c380      	stmia	r3!, {r7}
    2444:	cd80      	ldmia	r5!, {r7}
    2446:	ca40      	ldmia	r2!, {r6}
    2448:	4177      	adcs	r7, r6
    244a:	c380      	stmia	r3!, {r7}
    244c:	cd80      	ldmia	r5!, {r7}
    244e:	ca40      	ldmia	r2!, {r6}
    2450:	4177      	adcs	r7, r6
    2452:	c380      	stmia	r3!, {r7}
    2454:	cd80      	ldmia	r5!, {r7}
    2456:	ca40      	ldmia	r2!, {r6}
    2458:	4177      	adcs	r7, r6
    245a:	c380      	stmia	r3!, {r7}
    245c:	cd80      	ldmia	r5!, {r7}
    245e:	ca40      	ldmia	r2!, {r6}
    2460:	4177      	adcs	r7, r6
    2462:	c380      	stmia	r3!, {r7}
    2464:	4140      	adcs	r0, r0
    }
    result[num_words_secp256k1] = carry;
    /* add the 2^32 multiple */
    result[1 + num_words_secp256k1] =
    2466:	900b      	str	r0, [sp, #44]	; 0x2c
    2468:	465b      	mov	r3, fp
    246a:	0022      	movs	r2, r4
    246c:	a902      	add	r1, sp, #8
    246e:	4640      	mov	r0, r8
    2470:	2500      	movs	r5, #0
    2472:	a706      	add	r7, pc, #24	; (adr r7, 248c <vli_mmod_fast_secp256k1+0x17c>)
    2474:	46c0      	nop			; (mov r8, r8)
    2476:	46c0      	nop			; (mov r8, r8)
    2478:	46c0      	nop			; (mov r8, r8)
    247a:	46c0      	nop			; (mov r8, r8)
    247c:	46c0      	nop			; (mov r8, r8)
    247e:	46c0      	nop			; (mov r8, r8)
    2480:	19c0      	adds	r0, r0, r7
    2482:	ca80      	ldmia	r2!, {r7}
    2484:	c940      	ldmia	r1!, {r6}
    2486:	19bf      	adds	r7, r7, r6
    2488:	c380      	stmia	r3!, {r7}
    248a:	4700      	bx	r0
    248c:	ca80      	ldmia	r2!, {r7}
    248e:	c940      	ldmia	r1!, {r6}
    2490:	4177      	adcs	r7, r6
    2492:	c380      	stmia	r3!, {r7}
    2494:	ca80      	ldmia	r2!, {r7}
    2496:	c940      	ldmia	r1!, {r6}
    2498:	4177      	adcs	r7, r6
    249a:	c380      	stmia	r3!, {r7}
    249c:	ca80      	ldmia	r2!, {r7}
    249e:	c940      	ldmia	r1!, {r6}
    24a0:	4177      	adcs	r7, r6
    24a2:	c380      	stmia	r3!, {r7}
    24a4:	ca80      	ldmia	r2!, {r7}
    24a6:	c940      	ldmia	r1!, {r6}
    24a8:	4177      	adcs	r7, r6
    24aa:	c380      	stmia	r3!, {r7}
    24ac:	ca80      	ldmia	r2!, {r7}
    24ae:	c940      	ldmia	r1!, {r6}
    24b0:	4177      	adcs	r7, r6
    24b2:	c380      	stmia	r3!, {r7}
    24b4:	ca80      	ldmia	r2!, {r7}
    24b6:	c940      	ldmia	r1!, {r6}
    24b8:	4177      	adcs	r7, r6
    24ba:	c380      	stmia	r3!, {r7}
    24bc:	ca80      	ldmia	r2!, {r7}
    24be:	c940      	ldmia	r1!, {r6}
    24c0:	4177      	adcs	r7, r6
    24c2:	c380      	stmia	r3!, {r7}
    24c4:	416d      	adcs	r5, r5
    24c6:	f246 7375 	movw	r3, #26485	; 0x6775
    24ca:	2220      	movs	r2, #32
    24cc:	2100      	movs	r1, #0
    24ce:	0020      	movs	r0, r4
    24d0:	f2c0 0300 	movt	r3, #0
    24d4:	4798      	blx	r3
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24d6:	f240 32d1 	movw	r2, #977	; 0x3d1
    24da:	2300      	movs	r3, #0
    24dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    24de:	2100      	movs	r1, #0
    24e0:	47c8      	blx	r9
        result[k] = (uint32_t) p;
    24e2:	0023      	movs	r3, r4
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24e4:	464f      	mov	r7, r9
    24e6:	4689      	mov	r9, r1
        result[k] = (uint32_t) p;
    24e8:	c301      	stmia	r3!, {r0}
    24ea:	9301      	str	r3, [sp, #4]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24ec:	f240 32d1 	movw	r2, #977	; 0x3d1
    24f0:	2300      	movs	r3, #0
    24f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    24f4:	2100      	movs	r1, #0
    24f6:	47b8      	blx	r7
        carry = p >> 32;
    24f8:	464a      	mov	r2, r9
    24fa:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24fc:	1880      	adds	r0, r0, r2
    24fe:	4159      	adcs	r1, r3
        carry = p >> 32;
    2500:	2300      	movs	r3, #0
    2502:	46aa      	mov	sl, r5
    2504:	001e      	movs	r6, r3
    2506:	000d      	movs	r5, r1
        result[k] = (uint32_t) p;
    2508:	6060      	str	r0, [r4, #4]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    250a:	f240 32d1 	movw	r2, #977	; 0x3d1
    250e:	2300      	movs	r3, #0
    2510:	980c      	ldr	r0, [sp, #48]	; 0x30
    2512:	2100      	movs	r1, #0
    2514:	47b8      	blx	r7
    2516:	002a      	movs	r2, r5
    2518:	0033      	movs	r3, r6
    251a:	1880      	adds	r0, r0, r2
    251c:	4159      	adcs	r1, r3
        carry = p >> 32;
    251e:	2300      	movs	r3, #0
    2520:	000d      	movs	r5, r1
    2522:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2524:	60a0      	str	r0, [r4, #8]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2526:	f240 32d1 	movw	r2, #977	; 0x3d1
    252a:	2300      	movs	r3, #0
    252c:	980d      	ldr	r0, [sp, #52]	; 0x34
    252e:	2100      	movs	r1, #0
    2530:	47b8      	blx	r7
    2532:	002a      	movs	r2, r5
    2534:	0033      	movs	r3, r6
    2536:	1880      	adds	r0, r0, r2
    2538:	4159      	adcs	r1, r3
        carry = p >> 32;
    253a:	2300      	movs	r3, #0
    253c:	000d      	movs	r5, r1
    253e:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2540:	60e0      	str	r0, [r4, #12]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2542:	f240 32d1 	movw	r2, #977	; 0x3d1
    2546:	2300      	movs	r3, #0
    2548:	980e      	ldr	r0, [sp, #56]	; 0x38
    254a:	2100      	movs	r1, #0
    254c:	47b8      	blx	r7
    254e:	002a      	movs	r2, r5
    2550:	0033      	movs	r3, r6
    2552:	1880      	adds	r0, r0, r2
    2554:	4159      	adcs	r1, r3
        carry = p >> 32;
    2556:	2300      	movs	r3, #0
    2558:	000d      	movs	r5, r1
    255a:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    255c:	6120      	str	r0, [r4, #16]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    255e:	f240 32d1 	movw	r2, #977	; 0x3d1
    2562:	2300      	movs	r3, #0
    2564:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2566:	2100      	movs	r1, #0
    2568:	47b8      	blx	r7
    256a:	002a      	movs	r2, r5
    256c:	0033      	movs	r3, r6
    256e:	1880      	adds	r0, r0, r2
    2570:	4159      	adcs	r1, r3
        carry = p >> 32;
    2572:	2300      	movs	r3, #0
    2574:	000d      	movs	r5, r1
    2576:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2578:	6160      	str	r0, [r4, #20]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    257a:	f240 32d1 	movw	r2, #977	; 0x3d1
    257e:	2300      	movs	r3, #0
    2580:	9810      	ldr	r0, [sp, #64]	; 0x40
    2582:	2100      	movs	r1, #0
    2584:	47b8      	blx	r7
    2586:	002a      	movs	r2, r5
    2588:	0033      	movs	r3, r6
    258a:	1880      	adds	r0, r0, r2
    258c:	4159      	adcs	r1, r3
        carry = p >> 32;
    258e:	2300      	movs	r3, #0
    2590:	000d      	movs	r5, r1
    2592:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2594:	61a0      	str	r0, [r4, #24]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2596:	f240 32d1 	movw	r2, #977	; 0x3d1
    259a:	2300      	movs	r3, #0
    259c:	9811      	ldr	r0, [sp, #68]	; 0x44
    259e:	2100      	movs	r1, #0
    25a0:	47b8      	blx	r7
    25a2:	002a      	movs	r2, r5
    25a4:	0033      	movs	r3, r6
    25a6:	1880      	adds	r0, r0, r2
    25a8:	4159      	adcs	r1, r3
    25aa:	9f01      	ldr	r7, [sp, #4]
        result[k] = (uint32_t) p;
    25ac:	61e0      	str	r0, [r4, #28]
        carry = p >> 32;
    25ae:	6221      	str	r1, [r4, #32]
    25b0:	ab0a      	add	r3, sp, #40	; 0x28
    25b2:	4642      	mov	r2, r8
    25b4:	0038      	movs	r0, r7
    25b6:	2100      	movs	r1, #0
    25b8:	a604      	add	r6, pc, #16	; (adr r6, 25cc <vli_mmod_fast_secp256k1+0x2bc>)
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	46c0      	nop			; (mov r8, r8)
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	1992      	adds	r2, r2, r6
    25c2:	c840      	ldmia	r0!, {r6}
    25c4:	cb20      	ldmia	r3!, {r5}
    25c6:	1976      	adds	r6, r6, r5
    25c8:	c740      	stmia	r7!, {r6}
    25ca:	4710      	bx	r2
    25cc:	c840      	ldmia	r0!, {r6}
    25ce:	cb20      	ldmia	r3!, {r5}
    25d0:	416e      	adcs	r6, r5
    25d2:	c740      	stmia	r7!, {r6}
    25d4:	c840      	ldmia	r0!, {r6}
    25d6:	cb20      	ldmia	r3!, {r5}
    25d8:	416e      	adcs	r6, r5
    25da:	c740      	stmia	r7!, {r6}
    25dc:	c840      	ldmia	r0!, {r6}
    25de:	cb20      	ldmia	r3!, {r5}
    25e0:	416e      	adcs	r6, r5
    25e2:	c740      	stmia	r7!, {r6}
    25e4:	c840      	ldmia	r0!, {r6}
    25e6:	cb20      	ldmia	r3!, {r5}
    25e8:	416e      	adcs	r6, r5
    25ea:	c740      	stmia	r7!, {r6}
    25ec:	c840      	ldmia	r0!, {r6}
    25ee:	cb20      	ldmia	r3!, {r5}
    25f0:	416e      	adcs	r6, r5
    25f2:	c740      	stmia	r7!, {r6}
    25f4:	c840      	ldmia	r0!, {r6}
    25f6:	cb20      	ldmia	r3!, {r5}
    25f8:	416e      	adcs	r6, r5
    25fa:	c740      	stmia	r7!, {r6}
    25fc:	c840      	ldmia	r0!, {r6}
    25fe:	cb20      	ldmia	r3!, {r5}
    2600:	416e      	adcs	r6, r5
    2602:	c740      	stmia	r7!, {r6}
    2604:	4149      	adcs	r1, r1
    result[1 + num_words_secp256k1] =
    2606:	6261      	str	r1, [r4, #36]	; 0x24
    2608:	465b      	mov	r3, fp
    260a:	4642      	mov	r2, r8
    260c:	4659      	mov	r1, fp
    260e:	2000      	movs	r0, #0
    2610:	a606      	add	r6, pc, #24	; (adr r6, 262c <vli_mmod_fast_secp256k1+0x31c>)
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	46c0      	nop			; (mov r8, r8)
    2616:	46c0      	nop			; (mov r8, r8)
    2618:	46c0      	nop			; (mov r8, r8)
    261a:	46c0      	nop			; (mov r8, r8)
    261c:	46c0      	nop			; (mov r8, r8)
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	1992      	adds	r2, r2, r6
    2622:	c940      	ldmia	r1!, {r6}
    2624:	cc80      	ldmia	r4!, {r7}
    2626:	19f6      	adds	r6, r6, r7
    2628:	c340      	stmia	r3!, {r6}
    262a:	4710      	bx	r2
    262c:	c940      	ldmia	r1!, {r6}
    262e:	cc80      	ldmia	r4!, {r7}
    2630:	417e      	adcs	r6, r7
    2632:	c340      	stmia	r3!, {r6}
    2634:	c940      	ldmia	r1!, {r6}
    2636:	cc80      	ldmia	r4!, {r7}
    2638:	417e      	adcs	r6, r7
    263a:	c340      	stmia	r3!, {r6}
    263c:	c940      	ldmia	r1!, {r6}
    263e:	cc80      	ldmia	r4!, {r7}
    2640:	417e      	adcs	r6, r7
    2642:	c340      	stmia	r3!, {r6}
    2644:	c940      	ldmia	r1!, {r6}
    2646:	cc80      	ldmia	r4!, {r7}
    2648:	417e      	adcs	r6, r7
    264a:	c340      	stmia	r3!, {r6}
    264c:	c940      	ldmia	r1!, {r6}
    264e:	cc80      	ldmia	r4!, {r7}
    2650:	417e      	adcs	r6, r7
    2652:	c340      	stmia	r3!, {r6}
    2654:	c940      	ldmia	r1!, {r6}
    2656:	cc80      	ldmia	r4!, {r7}
    2658:	417e      	adcs	r6, r7
    265a:	c340      	stmia	r3!, {r6}
    265c:	c940      	ldmia	r1!, {r6}
    265e:	cc80      	ldmia	r4!, {r7}
    2660:	417e      	adcs	r6, r7
    2662:	c340      	stmia	r3!, {r6}
    2664:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
    2666:	4450      	add	r0, sl
    while (carry > 0) {
    2668:	2800      	cmp	r0, #0
    266a:	d036      	beq.n	26da <vli_mmod_fast_secp256k1+0x3ca>
    266c:	f646 34d8 	movw	r4, #27608	; 0x6bd8
    __asm__ volatile (
    2670:	f240 0c20 	movw	ip, #32
    2674:	f240 0801 	movw	r8, #1
    2678:	f2c0 0400 	movt	r4, #0
    267c:	44a4      	add	ip, r4
        --carry;
    267e:	3801      	subs	r0, #1
    2680:	465b      	mov	r3, fp
    2682:	4662      	mov	r2, ip
    2684:	4641      	mov	r1, r8
    2686:	465f      	mov	r7, fp
    2688:	2400      	movs	r4, #0
    268a:	a604      	add	r6, pc, #16	; (adr r6, 269c <vli_mmod_fast_secp256k1+0x38c>)
    268c:	46c0      	nop			; (mov r8, r8)
    268e:	46c0      	nop			; (mov r8, r8)
    2690:	1989      	adds	r1, r1, r6
    2692:	cf40      	ldmia	r7!, {r6}
    2694:	ca20      	ldmia	r2!, {r5}
    2696:	1b76      	subs	r6, r6, r5
    2698:	c340      	stmia	r3!, {r6}
    269a:	4708      	bx	r1
    269c:	cf40      	ldmia	r7!, {r6}
    269e:	ca20      	ldmia	r2!, {r5}
    26a0:	41ae      	sbcs	r6, r5
    26a2:	c340      	stmia	r3!, {r6}
    26a4:	cf40      	ldmia	r7!, {r6}
    26a6:	ca20      	ldmia	r2!, {r5}
    26a8:	41ae      	sbcs	r6, r5
    26aa:	c340      	stmia	r3!, {r6}
    26ac:	cf40      	ldmia	r7!, {r6}
    26ae:	ca20      	ldmia	r2!, {r5}
    26b0:	41ae      	sbcs	r6, r5
    26b2:	c340      	stmia	r3!, {r6}
    26b4:	cf40      	ldmia	r7!, {r6}
    26b6:	ca20      	ldmia	r2!, {r5}
    26b8:	41ae      	sbcs	r6, r5
    26ba:	c340      	stmia	r3!, {r6}
    26bc:	cf40      	ldmia	r7!, {r6}
    26be:	ca20      	ldmia	r2!, {r5}
    26c0:	41ae      	sbcs	r6, r5
    26c2:	c340      	stmia	r3!, {r6}
    26c4:	cf40      	ldmia	r7!, {r6}
    26c6:	ca20      	ldmia	r2!, {r5}
    26c8:	41ae      	sbcs	r6, r5
    26ca:	c340      	stmia	r3!, {r6}
    26cc:	cf40      	ldmia	r7!, {r6}
    26ce:	ca20      	ldmia	r2!, {r5}
    26d0:	41ae      	sbcs	r6, r5
    26d2:	c340      	stmia	r3!, {r6}
    26d4:	4164      	adcs	r4, r4
    while (carry > 0) {
    26d6:	2800      	cmp	r0, #0
    26d8:	d1d1      	bne.n	267e <vli_mmod_fast_secp256k1+0x36e>
        } else if (left[i] < right[i]) {
    26da:	465b      	mov	r3, fp
    26dc:	69db      	ldr	r3, [r3, #28]
    26de:	3301      	adds	r3, #1
    26e0:	d11e      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
    26e2:	465b      	mov	r3, fp
    26e4:	699b      	ldr	r3, [r3, #24]
    26e6:	3301      	adds	r3, #1
    26e8:	d11a      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
    26ea:	465b      	mov	r3, fp
    26ec:	695b      	ldr	r3, [r3, #20]
    26ee:	3301      	adds	r3, #1
    26f0:	d116      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
    26f2:	465b      	mov	r3, fp
    26f4:	691b      	ldr	r3, [r3, #16]
    26f6:	3301      	adds	r3, #1
    26f8:	d112      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
    26fa:	465b      	mov	r3, fp
    26fc:	68db      	ldr	r3, [r3, #12]
    26fe:	3301      	adds	r3, #1
    2700:	d10e      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
    2702:	465b      	mov	r3, fp
    2704:	689b      	ldr	r3, [r3, #8]
    2706:	3301      	adds	r3, #1
    2708:	d10a      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
        if (left[i] > right[i]) {
    270a:	465b      	mov	r3, fp
    270c:	685b      	ldr	r3, [r3, #4]
    270e:	1c5a      	adds	r2, r3, #1
    2710:	d00d      	beq.n	272e <vli_mmod_fast_secp256k1+0x41e>
        } else if (left[i] < right[i]) {
    2712:	3302      	adds	r3, #2
    2714:	d104      	bne.n	2720 <vli_mmod_fast_secp256k1+0x410>
        if (left[i] > right[i]) {
    2716:	465a      	mov	r2, fp
    2718:	4b1f      	ldr	r3, [pc, #124]	; (2798 <vli_mmod_fast_secp256k1+0x488>)
    271a:	6812      	ldr	r2, [r2, #0]
    271c:	429a      	cmp	r2, r3
    271e:	d806      	bhi.n	272e <vli_mmod_fast_secp256k1+0x41e>
}
    2720:	b013      	add	sp, #76	; 0x4c
    2722:	bc3c      	pop	{r2, r3, r4, r5}
    2724:	4690      	mov	r8, r2
    2726:	4699      	mov	r9, r3
    2728:	46a2      	mov	sl, r4
    272a:	46ab      	mov	fp, r5
    272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272e:	f646 33d8 	movw	r3, #27608	; 0x6bd8
    2732:	f2c0 0300 	movt	r3, #0
    2736:	3320      	adds	r3, #32
    2738:	465d      	mov	r5, fp
    273a:	2201      	movs	r2, #1
    273c:	4659      	mov	r1, fp
    273e:	2000      	movs	r0, #0
    2740:	a406      	add	r4, pc, #24	; (adr r4, 275c <vli_mmod_fast_secp256k1+0x44c>)
    2742:	46c0      	nop			; (mov r8, r8)
    2744:	46c0      	nop			; (mov r8, r8)
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	46c0      	nop			; (mov r8, r8)
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	46c0      	nop			; (mov r8, r8)
    274e:	46c0      	nop			; (mov r8, r8)
    2750:	1912      	adds	r2, r2, r4
    2752:	c910      	ldmia	r1!, {r4}
    2754:	cb40      	ldmia	r3!, {r6}
    2756:	1ba4      	subs	r4, r4, r6
    2758:	c510      	stmia	r5!, {r4}
    275a:	4710      	bx	r2
    275c:	c910      	ldmia	r1!, {r4}
    275e:	cb40      	ldmia	r3!, {r6}
    2760:	41b4      	sbcs	r4, r6
    2762:	c510      	stmia	r5!, {r4}
    2764:	c910      	ldmia	r1!, {r4}
    2766:	cb40      	ldmia	r3!, {r6}
    2768:	41b4      	sbcs	r4, r6
    276a:	c510      	stmia	r5!, {r4}
    276c:	c910      	ldmia	r1!, {r4}
    276e:	cb40      	ldmia	r3!, {r6}
    2770:	41b4      	sbcs	r4, r6
    2772:	c510      	stmia	r5!, {r4}
    2774:	c910      	ldmia	r1!, {r4}
    2776:	cb40      	ldmia	r3!, {r6}
    2778:	41b4      	sbcs	r4, r6
    277a:	c510      	stmia	r5!, {r4}
    277c:	c910      	ldmia	r1!, {r4}
    277e:	cb40      	ldmia	r3!, {r6}
    2780:	41b4      	sbcs	r4, r6
    2782:	c510      	stmia	r5!, {r4}
    2784:	c910      	ldmia	r1!, {r4}
    2786:	cb40      	ldmia	r3!, {r6}
    2788:	41b4      	sbcs	r4, r6
    278a:	c510      	stmia	r5!, {r4}
    278c:	c910      	ldmia	r1!, {r4}
    278e:	cb40      	ldmia	r3!, {r6}
    2790:	41b4      	sbcs	r4, r6
    2792:	c510      	stmia	r5!, {r4}
    2794:	4140      	adcs	r0, r0
    2796:	e7c3      	b.n	2720 <vli_mmod_fast_secp256k1+0x410>
    2798:	fffffc2f 	.word	0xfffffc2f
    279c:	00000000 	.word	0x00000000

000027a0 <XYcZ_addC>:
                      uECC_Curve curve) {
    27a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    27a2:	4657      	mov	r7, sl
    27a4:	464e      	mov	r6, r9
    27a6:	4645      	mov	r5, r8
    27a8:	46de      	mov	lr, fp
    wordcount_t num_words = curve->num_words;
    27aa:	2400      	movs	r4, #0
                      uECC_Curve curve) {
    27ac:	4691      	mov	r9, r2
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    27ae:	f240 7891 	movw	r8, #1937	; 0x791
                      uECC_Curve curve) {
    27b2:	b5e0      	push	{r5, r6, r7, lr}
    27b4:	b0af      	sub	sp, #188	; 0xbc
    27b6:	469a      	mov	sl, r3
    27b8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    27ba:	9003      	str	r0, [sp, #12]
    wordcount_t num_words = curve->num_words;
    27bc:	571c      	ldrsb	r4, [r3, r4]
                      uECC_Curve curve) {
    27be:	9302      	str	r3, [sp, #8]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    27c0:	3304      	adds	r3, #4
                      uECC_Curve curve) {
    27c2:	9104      	str	r1, [sp, #16]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    27c4:	9301      	str	r3, [sp, #4]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    27c6:	0002      	movs	r2, r0
    27c8:	0023      	movs	r3, r4
    27ca:	4649      	mov	r1, r9
    27cc:	a806      	add	r0, sp, #24
    27ce:	f2c0 0800 	movt	r8, #0
    27d2:	47c0      	blx	r8
    if (l_borrow) {
    27d4:	b140      	cbz	r0, 27e8 <XYcZ_addC+0x48>
        uECC_vli_add(result, result, mod, num_words);
    27d6:	f240 7631 	movw	r6, #1841	; 0x731
    27da:	a906      	add	r1, sp, #24
    27dc:	0023      	movs	r3, r4
    27de:	9a01      	ldr	r2, [sp, #4]
    27e0:	0008      	movs	r0, r1
    27e2:	f2c0 0600 	movt	r6, #0
    27e6:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    27e8:	f240 7bed 	movw	fp, #2029	; 0x7ed
    curve->mmod_fast(result, product);
    27ec:	26b0      	movs	r6, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    27ee:	9f02      	ldr	r7, [sp, #8]
    27f0:	aa06      	add	r2, sp, #24
    27f2:	783b      	ldrb	r3, [r7, #0]
    27f4:	0011      	movs	r1, r2
    27f6:	f2c0 0b00 	movt	fp, #0
    27fa:	a81e      	add	r0, sp, #120	; 0x78
    27fc:	b25b      	sxtb	r3, r3
    27fe:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2800:	a91e      	add	r1, sp, #120	; 0x78
    2802:	a806      	add	r0, sp, #24
    2804:	59bb      	ldr	r3, [r7, r6]
    2806:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    2808:	9d03      	ldr	r5, [sp, #12]
    280a:	783b      	ldrb	r3, [r7, #0]
    280c:	aa06      	add	r2, sp, #24
    280e:	0029      	movs	r1, r5
    2810:	a81e      	add	r0, sp, #120	; 0x78
    2812:	b25b      	sxtb	r3, r3
    2814:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2816:	a91e      	add	r1, sp, #120	; 0x78
    2818:	0028      	movs	r0, r5
    281a:	59bb      	ldr	r3, [r7, r6]
    281c:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    281e:	783b      	ldrb	r3, [r7, #0]
    2820:	aa06      	add	r2, sp, #24
    2822:	4649      	mov	r1, r9
    2824:	a81e      	add	r0, sp, #120	; 0x78
    2826:	b25b      	sxtb	r3, r3
    2828:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    282a:	59bb      	ldr	r3, [r7, r6]
    282c:	a91e      	add	r1, sp, #120	; 0x78
    282e:	4648      	mov	r0, r9
    2830:	4798      	blx	r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    2832:	2308      	movs	r3, #8
    2834:	1b1b      	subs	r3, r3, r4
    2836:	00db      	lsls	r3, r3, #3
    2838:	3301      	adds	r3, #1
    283a:	0018      	movs	r0, r3
    283c:	9305      	str	r3, [sp, #20]
    __asm__ volatile (
    283e:	4652      	mov	r2, sl
    2840:	ab06      	add	r3, sp, #24
    2842:	9904      	ldr	r1, [sp, #16]
    2844:	2600      	movs	r6, #0
    2846:	a505      	add	r5, pc, #20	; (adr r5, 285c <XYcZ_addC+0xbc>)
    2848:	46c0      	nop			; (mov r8, r8)
    284a:	46c0      	nop			; (mov r8, r8)
    284c:	46c0      	nop			; (mov r8, r8)
    284e:	46c0      	nop			; (mov r8, r8)
    2850:	1940      	adds	r0, r0, r5
    2852:	ca20      	ldmia	r2!, {r5}
    2854:	c980      	ldmia	r1!, {r7}
    2856:	19ed      	adds	r5, r5, r7
    2858:	c320      	stmia	r3!, {r5}
    285a:	4700      	bx	r0
    285c:	ca20      	ldmia	r2!, {r5}
    285e:	c980      	ldmia	r1!, {r7}
    2860:	417d      	adcs	r5, r7
    2862:	c320      	stmia	r3!, {r5}
    2864:	ca20      	ldmia	r2!, {r5}
    2866:	c980      	ldmia	r1!, {r7}
    2868:	417d      	adcs	r5, r7
    286a:	c320      	stmia	r3!, {r5}
    286c:	ca20      	ldmia	r2!, {r5}
    286e:	c980      	ldmia	r1!, {r7}
    2870:	417d      	adcs	r5, r7
    2872:	c320      	stmia	r3!, {r5}
    2874:	ca20      	ldmia	r2!, {r5}
    2876:	c980      	ldmia	r1!, {r7}
    2878:	417d      	adcs	r5, r7
    287a:	c320      	stmia	r3!, {r5}
    287c:	ca20      	ldmia	r2!, {r5}
    287e:	c980      	ldmia	r1!, {r7}
    2880:	417d      	adcs	r5, r7
    2882:	c320      	stmia	r3!, {r5}
    2884:	ca20      	ldmia	r2!, {r5}
    2886:	c980      	ldmia	r1!, {r7}
    2888:	417d      	adcs	r5, r7
    288a:	c320      	stmia	r3!, {r5}
    288c:	ca20      	ldmia	r2!, {r5}
    288e:	c980      	ldmia	r1!, {r7}
    2890:	417d      	adcs	r5, r7
    2892:	c320      	stmia	r3!, {r5}
    2894:	4176      	adcs	r6, r6
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    2896:	b9e6      	cbnz	r6, 28d2 <XYcZ_addC+0x132>
    for (i = num_words - 1; i >= 0; --i) {
    2898:	1e63      	subs	r3, r4, #1
    289a:	b25b      	sxtb	r3, r3
    289c:	2b00      	cmp	r3, #0
    289e:	db18      	blt.n	28d2 <XYcZ_addC+0x132>
        if (left[i] > right[i]) {
    28a0:	9901      	ldr	r1, [sp, #4]
    28a2:	009a      	lsls	r2, r3, #2
    28a4:	a806      	add	r0, sp, #24
    28a6:	5889      	ldr	r1, [r1, r2]
    28a8:	5882      	ldr	r2, [r0, r2]
    28aa:	428a      	cmp	r2, r1
    28ac:	d316      	bcc.n	28dc <XYcZ_addC+0x13c>
        } else if (left[i] < right[i]) {
    28ae:	d810      	bhi.n	28d2 <XYcZ_addC+0x132>
    28b0:	9d01      	ldr	r5, [sp, #4]
    28b2:	9f02      	ldr	r7, [sp, #8]
    28b4:	e007      	b.n	28c6 <XYcZ_addC+0x126>
        if (left[i] > right[i]) {
    28b6:	009a      	lsls	r2, r3, #2
    28b8:	a806      	add	r0, sp, #24
    28ba:	58a9      	ldr	r1, [r5, r2]
    28bc:	5882      	ldr	r2, [r0, r2]
    28be:	4291      	cmp	r1, r2
    28c0:	d900      	bls.n	28c4 <XYcZ_addC+0x124>
    28c2:	e12d      	b.n	2b20 <XYcZ_addC+0x380>
        } else if (left[i] < right[i]) {
    28c4:	d303      	bcc.n	28ce <XYcZ_addC+0x12e>
    28c6:	3b01      	subs	r3, #1
    28c8:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    28ca:	1c5a      	adds	r2, r3, #1
    28cc:	d1f3      	bne.n	28b6 <XYcZ_addC+0x116>
    28ce:	9501      	str	r5, [sp, #4]
    28d0:	9702      	str	r7, [sp, #8]
        uECC_vli_sub(result, result, mod, num_words);
    28d2:	a906      	add	r1, sp, #24
    28d4:	0023      	movs	r3, r4
    28d6:	9a01      	ldr	r2, [sp, #4]
    28d8:	0008      	movs	r0, r1
    28da:	47c0      	blx	r8
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    28dc:	0023      	movs	r3, r4
    28de:	9a04      	ldr	r2, [sp, #16]
    28e0:	4651      	mov	r1, sl
    28e2:	4650      	mov	r0, sl
    28e4:	47c0      	blx	r8
    if (l_borrow) {
    28e6:	b140      	cbz	r0, 28fa <XYcZ_addC+0x15a>
        uECC_vli_add(result, result, mod, num_words);
    28e8:	f240 7631 	movw	r6, #1841	; 0x731
    28ec:	0023      	movs	r3, r4
    28ee:	9a01      	ldr	r2, [sp, #4]
    28f0:	4651      	mov	r1, sl
    28f2:	4650      	mov	r0, sl
    28f4:	f2c0 0600 	movt	r6, #0
    28f8:	47b0      	blx	r6
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    28fa:	ab0e      	add	r3, sp, #56	; 0x38
    28fc:	0018      	movs	r0, r3
    28fe:	9300      	str	r3, [sp, #0]
    2900:	9a03      	ldr	r2, [sp, #12]
    2902:	0023      	movs	r3, r4
    2904:	4649      	mov	r1, r9
    2906:	47c0      	blx	r8
    if (l_borrow) {
    2908:	b140      	cbz	r0, 291c <XYcZ_addC+0x17c>
        uECC_vli_add(result, result, mod, num_words);
    290a:	f240 7531 	movw	r5, #1841	; 0x731
    290e:	9800      	ldr	r0, [sp, #0]
    2910:	0023      	movs	r3, r4
    2912:	9a01      	ldr	r2, [sp, #4]
    2914:	0001      	movs	r1, r0
    2916:	f2c0 0500 	movt	r5, #0
    291a:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    291c:	2300      	movs	r3, #0
    291e:	9e00      	ldr	r6, [sp, #0]
    2920:	9f02      	ldr	r7, [sp, #8]
    2922:	9d04      	ldr	r5, [sp, #16]
    2924:	0032      	movs	r2, r6
    2926:	56fb      	ldrsb	r3, [r7, r3]
    2928:	0029      	movs	r1, r5
    292a:	a81e      	add	r0, sp, #120	; 0x78
    292c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    292e:	23b0      	movs	r3, #176	; 0xb0
    2930:	a91e      	add	r1, sp, #120	; 0x78
    2932:	58fb      	ldr	r3, [r7, r3]
    2934:	0028      	movs	r0, r5
    2936:	4798      	blx	r3
    2938:	9600      	str	r6, [sp, #0]
    293a:	0032      	movs	r2, r6
    293c:	9903      	ldr	r1, [sp, #12]
    293e:	4648      	mov	r0, r9
    2940:	9b05      	ldr	r3, [sp, #20]
    2942:	2500      	movs	r5, #0
    2944:	a705      	add	r7, pc, #20	; (adr r7, 295c <XYcZ_addC+0x1bc>)
    2946:	46c0      	nop			; (mov r8, r8)
    2948:	46c0      	nop			; (mov r8, r8)
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	46c0      	nop			; (mov r8, r8)
    294e:	46c0      	nop			; (mov r8, r8)
    2950:	19db      	adds	r3, r3, r7
    2952:	c980      	ldmia	r1!, {r7}
    2954:	c840      	ldmia	r0!, {r6}
    2956:	19bf      	adds	r7, r7, r6
    2958:	c280      	stmia	r2!, {r7}
    295a:	4718      	bx	r3
    295c:	c980      	ldmia	r1!, {r7}
    295e:	c840      	ldmia	r0!, {r6}
    2960:	4177      	adcs	r7, r6
    2962:	c280      	stmia	r2!, {r7}
    2964:	c980      	ldmia	r1!, {r7}
    2966:	c840      	ldmia	r0!, {r6}
    2968:	4177      	adcs	r7, r6
    296a:	c280      	stmia	r2!, {r7}
    296c:	c980      	ldmia	r1!, {r7}
    296e:	c840      	ldmia	r0!, {r6}
    2970:	4177      	adcs	r7, r6
    2972:	c280      	stmia	r2!, {r7}
    2974:	c980      	ldmia	r1!, {r7}
    2976:	c840      	ldmia	r0!, {r6}
    2978:	4177      	adcs	r7, r6
    297a:	c280      	stmia	r2!, {r7}
    297c:	c980      	ldmia	r1!, {r7}
    297e:	c840      	ldmia	r0!, {r6}
    2980:	4177      	adcs	r7, r6
    2982:	c280      	stmia	r2!, {r7}
    2984:	c980      	ldmia	r1!, {r7}
    2986:	c840      	ldmia	r0!, {r6}
    2988:	4177      	adcs	r7, r6
    298a:	c280      	stmia	r2!, {r7}
    298c:	c980      	ldmia	r1!, {r7}
    298e:	c840      	ldmia	r0!, {r6}
    2990:	4177      	adcs	r7, r6
    2992:	c280      	stmia	r2!, {r7}
    2994:	416d      	adcs	r5, r5
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    2996:	b9e5      	cbnz	r5, 29d2 <XYcZ_addC+0x232>
    for (i = num_words - 1; i >= 0; --i) {
    2998:	1e63      	subs	r3, r4, #1
    299a:	b25b      	sxtb	r3, r3
    299c:	2b00      	cmp	r3, #0
    299e:	db18      	blt.n	29d2 <XYcZ_addC+0x232>
        if (left[i] > right[i]) {
    29a0:	9901      	ldr	r1, [sp, #4]
    29a2:	9800      	ldr	r0, [sp, #0]
    29a4:	009a      	lsls	r2, r3, #2
    29a6:	5889      	ldr	r1, [r1, r2]
    29a8:	5882      	ldr	r2, [r0, r2]
    29aa:	4291      	cmp	r1, r2
    29ac:	d816      	bhi.n	29dc <XYcZ_addC+0x23c>
        } else if (left[i] < right[i]) {
    29ae:	d310      	bcc.n	29d2 <XYcZ_addC+0x232>
    29b0:	9d01      	ldr	r5, [sp, #4]
    29b2:	9f02      	ldr	r7, [sp, #8]
    29b4:	e007      	b.n	29c6 <XYcZ_addC+0x226>
        if (left[i] > right[i]) {
    29b6:	9800      	ldr	r0, [sp, #0]
    29b8:	009a      	lsls	r2, r3, #2
    29ba:	58a9      	ldr	r1, [r5, r2]
    29bc:	5882      	ldr	r2, [r0, r2]
    29be:	4291      	cmp	r1, r2
    29c0:	d900      	bls.n	29c4 <XYcZ_addC+0x224>
    29c2:	e0aa      	b.n	2b1a <XYcZ_addC+0x37a>
        } else if (left[i] < right[i]) {
    29c4:	d303      	bcc.n	29ce <XYcZ_addC+0x22e>
    29c6:	3b01      	subs	r3, #1
    29c8:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    29ca:	1c5a      	adds	r2, r3, #1
    29cc:	d1f3      	bne.n	29b6 <XYcZ_addC+0x216>
    29ce:	9501      	str	r5, [sp, #4]
    29d0:	9702      	str	r7, [sp, #8]
        uECC_vli_sub(result, result, mod, num_words);
    29d2:	9800      	ldr	r0, [sp, #0]
    29d4:	0023      	movs	r3, r4
    29d6:	9a01      	ldr	r2, [sp, #4]
    29d8:	0001      	movs	r1, r0
    29da:	47c0      	blx	r8
    uECC_vli_mult(product, left, right, curve->num_words);
    29dc:	2300      	movs	r3, #0
    29de:	9d02      	ldr	r5, [sp, #8]
    29e0:	4652      	mov	r2, sl
    29e2:	56eb      	ldrsb	r3, [r5, r3]
    29e4:	4651      	mov	r1, sl
    29e6:	a81e      	add	r0, sp, #120	; 0x78
    29e8:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    29ea:	23b0      	movs	r3, #176	; 0xb0
    29ec:	a91e      	add	r1, sp, #120	; 0x78
    29ee:	58eb      	ldr	r3, [r5, r3]
    29f0:	4648      	mov	r0, r9
    29f2:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    29f4:	0023      	movs	r3, r4
    29f6:	9a00      	ldr	r2, [sp, #0]
    29f8:	4649      	mov	r1, r9
    29fa:	4648      	mov	r0, r9
    29fc:	47c0      	blx	r8
    if (l_borrow) {
    29fe:	b140      	cbz	r0, 2a12 <XYcZ_addC+0x272>
        uECC_vli_add(result, result, mod, num_words);
    2a00:	f240 7531 	movw	r5, #1841	; 0x731
    2a04:	0023      	movs	r3, r4
    2a06:	9a01      	ldr	r2, [sp, #4]
    2a08:	4649      	mov	r1, r9
    2a0a:	4648      	mov	r0, r9
    2a0c:	f2c0 0500 	movt	r5, #0
    2a10:	47a8      	blx	r5
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a12:	0023      	movs	r3, r4
    2a14:	464a      	mov	r2, r9
    2a16:	9903      	ldr	r1, [sp, #12]
    2a18:	a816      	add	r0, sp, #88	; 0x58
    2a1a:	47c0      	blx	r8
    if (l_borrow) {
    2a1c:	b140      	cbz	r0, 2a30 <XYcZ_addC+0x290>
        uECC_vli_add(result, result, mod, num_words);
    2a1e:	f240 7931 	movw	r9, #1841	; 0x731
    2a22:	a916      	add	r1, sp, #88	; 0x58
    2a24:	0023      	movs	r3, r4
    2a26:	9a01      	ldr	r2, [sp, #4]
    2a28:	0008      	movs	r0, r1
    2a2a:	f2c0 0900 	movt	r9, #0
    2a2e:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    2a30:	2300      	movs	r3, #0
    2a32:	9d02      	ldr	r5, [sp, #8]
    2a34:	aa16      	add	r2, sp, #88	; 0x58
    2a36:	56eb      	ldrsb	r3, [r5, r3]
    2a38:	4651      	mov	r1, sl
    2a3a:	a81e      	add	r0, sp, #120	; 0x78
    2a3c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2a3e:	23b0      	movs	r3, #176	; 0xb0
    2a40:	a91e      	add	r1, sp, #120	; 0x78
    2a42:	58eb      	ldr	r3, [r5, r3]
    2a44:	4650      	mov	r0, sl
    2a46:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a48:	0023      	movs	r3, r4
    2a4a:	9a04      	ldr	r2, [sp, #16]
    2a4c:	4651      	mov	r1, sl
    2a4e:	4650      	mov	r0, sl
    2a50:	47c0      	blx	r8
    if (l_borrow) {
    2a52:	b140      	cbz	r0, 2a66 <XYcZ_addC+0x2c6>
        uECC_vli_add(result, result, mod, num_words);
    2a54:	f240 7931 	movw	r9, #1841	; 0x731
    2a58:	0023      	movs	r3, r4
    2a5a:	9a01      	ldr	r2, [sp, #4]
    2a5c:	4651      	mov	r1, sl
    2a5e:	4650      	mov	r0, sl
    2a60:	f2c0 0900 	movt	r9, #0
    2a64:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    2a66:	2300      	movs	r3, #0
    2a68:	9d02      	ldr	r5, [sp, #8]
    2a6a:	aa06      	add	r2, sp, #24
    2a6c:	0011      	movs	r1, r2
    2a6e:	56eb      	ldrsb	r3, [r5, r3]
    2a70:	a81e      	add	r0, sp, #120	; 0x78
    2a72:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2a74:	23b0      	movs	r3, #176	; 0xb0
    2a76:	a91e      	add	r1, sp, #120	; 0x78
    2a78:	58eb      	ldr	r3, [r5, r3]
    2a7a:	a816      	add	r0, sp, #88	; 0x58
    2a7c:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a7e:	a916      	add	r1, sp, #88	; 0x58
    2a80:	0023      	movs	r3, r4
    2a82:	9a00      	ldr	r2, [sp, #0]
    2a84:	0008      	movs	r0, r1
    2a86:	47c0      	blx	r8
    if (l_borrow) {
    2a88:	b140      	cbz	r0, 2a9c <XYcZ_addC+0x2fc>
        uECC_vli_add(result, result, mod, num_words);
    2a8a:	f240 7931 	movw	r9, #1841	; 0x731
    2a8e:	a916      	add	r1, sp, #88	; 0x58
    2a90:	0023      	movs	r3, r4
    2a92:	9a01      	ldr	r2, [sp, #4]
    2a94:	0008      	movs	r0, r1
    2a96:	f2c0 0900 	movt	r9, #0
    2a9a:	47c8      	blx	r9
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a9c:	0023      	movs	r3, r4
    2a9e:	9a03      	ldr	r2, [sp, #12]
    2aa0:	a916      	add	r1, sp, #88	; 0x58
    2aa2:	9800      	ldr	r0, [sp, #0]
    2aa4:	47c0      	blx	r8
    if (l_borrow) {
    2aa6:	b140      	cbz	r0, 2aba <XYcZ_addC+0x31a>
        uECC_vli_add(result, result, mod, num_words);
    2aa8:	f240 7931 	movw	r9, #1841	; 0x731
    2aac:	9800      	ldr	r0, [sp, #0]
    2aae:	0023      	movs	r3, r4
    2ab0:	9a01      	ldr	r2, [sp, #4]
    2ab2:	0001      	movs	r1, r0
    2ab4:	f2c0 0900 	movt	r9, #0
    2ab8:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    2aba:	2300      	movs	r3, #0
    2abc:	9d00      	ldr	r5, [sp, #0]
    2abe:	9e02      	ldr	r6, [sp, #8]
    2ac0:	aa06      	add	r2, sp, #24
    2ac2:	56f3      	ldrsb	r3, [r6, r3]
    2ac4:	0029      	movs	r1, r5
    2ac6:	a81e      	add	r0, sp, #120	; 0x78
    2ac8:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2aca:	23b0      	movs	r3, #176	; 0xb0
    2acc:	a91e      	add	r1, sp, #120	; 0x78
    2ace:	58f3      	ldr	r3, [r6, r3]
    2ad0:	0028      	movs	r0, r5
    2ad2:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2ad4:	9804      	ldr	r0, [sp, #16]
    2ad6:	0023      	movs	r3, r4
    2ad8:	0002      	movs	r2, r0
    2ada:	0029      	movs	r1, r5
    2adc:	47c0      	blx	r8
    if (l_borrow) {
    2ade:	b140      	cbz	r0, 2af2 <XYcZ_addC+0x352>
        uECC_vli_add(result, result, mod, num_words);
    2ae0:	f240 7531 	movw	r5, #1841	; 0x731
    2ae4:	9804      	ldr	r0, [sp, #16]
    2ae6:	0023      	movs	r3, r4
    2ae8:	9a01      	ldr	r2, [sp, #4]
    2aea:	0001      	movs	r1, r0
    2aec:	f2c0 0500 	movt	r5, #0
    2af0:	47a8      	blx	r5
    for (i = 0; i < num_words; ++i) {
    2af2:	2c00      	cmp	r4, #0
    2af4:	dd0a      	ble.n	2b0c <XYcZ_addC+0x36c>
    2af6:	f246 733f 	movw	r3, #26431	; 0x673f
        dest[i] = src[i];
    2afa:	3c01      	subs	r4, #1
    2afc:	b2e2      	uxtb	r2, r4
    2afe:	3201      	adds	r2, #1
    2b00:	0092      	lsls	r2, r2, #2
    2b02:	a916      	add	r1, sp, #88	; 0x58
    2b04:	9803      	ldr	r0, [sp, #12]
    2b06:	f2c0 0300 	movt	r3, #0
    2b0a:	4798      	blx	r3
}
    2b0c:	b02f      	add	sp, #188	; 0xbc
    2b0e:	bc3c      	pop	{r2, r3, r4, r5}
    2b10:	4690      	mov	r8, r2
    2b12:	4699      	mov	r9, r3
    2b14:	46a2      	mov	sl, r4
    2b16:	46ab      	mov	fp, r5
    2b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b1a:	9501      	str	r5, [sp, #4]
    2b1c:	9702      	str	r7, [sp, #8]
    2b1e:	e75d      	b.n	29dc <XYcZ_addC+0x23c>
    2b20:	9501      	str	r5, [sp, #4]
    2b22:	9702      	str	r7, [sp, #8]
    2b24:	e6da      	b.n	28dc <XYcZ_addC+0x13c>
    2b26:	46c0      	nop			; (mov r8, r8)
	...

00002b30 <vli_mmod_fast_secp256r1>:
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	4657      	mov	r7, sl
    2b34:	464e      	mov	r6, r9
    2b36:	4645      	mov	r5, r8
    2b38:	46de      	mov	lr, fp
    tmp[0] = tmp[1] = tmp[2] = 0;
    2b3a:	f240 0900 	movw	r9, #0
        dest[i] = src[i];
    2b3e:	680b      	ldr	r3, [r1, #0]
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
    2b40:	b5e0      	push	{r5, r6, r7, lr}
    2b42:	6003      	str	r3, [r0, #0]
    2b44:	684b      	ldr	r3, [r1, #4]
    2b46:	b091      	sub	sp, #68	; 0x44
    2b48:	6043      	str	r3, [r0, #4]
    2b4a:	688b      	ldr	r3, [r1, #8]
    2b4c:	ac08      	add	r4, sp, #32
    2b4e:	6083      	str	r3, [r0, #8]
    2b50:	68cb      	ldr	r3, [r1, #12]
    2b52:	4682      	mov	sl, r0
    2b54:	60c3      	str	r3, [r0, #12]
    2b56:	690b      	ldr	r3, [r1, #16]
    2b58:	2501      	movs	r5, #1
    2b5a:	6103      	str	r3, [r0, #16]
    2b5c:	694b      	ldr	r3, [r1, #20]
    2b5e:	0026      	movs	r6, r4
    2b60:	6143      	str	r3, [r0, #20]
    2b62:	698b      	ldr	r3, [r1, #24]
    2b64:	0027      	movs	r7, r4
    2b66:	6183      	str	r3, [r0, #24]
    2b68:	69cb      	ldr	r3, [r1, #28]
    2b6a:	61c3      	str	r3, [r0, #28]
    tmp[0] = tmp[1] = tmp[2] = 0;
    2b6c:	464b      	mov	r3, r9
    2b6e:	930a      	str	r3, [sp, #40]	; 0x28
    2b70:	9309      	str	r3, [sp, #36]	; 0x24
    2b72:	9308      	str	r3, [sp, #32]
    tmp[3] = product[11];
    2b74:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2b76:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[4] = product[12];
    2b78:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2b7a:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[5] = product[13];
    2b7c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2b7e:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[6] = product[14];
    2b80:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2b82:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[7] = product[15];
    2b84:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    2b86:	930f      	str	r3, [sp, #60]	; 0x3c
    2b88:	2300      	movs	r3, #0
    2b8a:	a204      	add	r2, pc, #16	; (adr r2, 2b9c <vli_mmod_fast_secp256r1+0x6c>)
    2b8c:	46c0      	nop			; (mov r8, r8)
    2b8e:	46c0      	nop			; (mov r8, r8)
    2b90:	18ad      	adds	r5, r5, r2
    2b92:	ce04      	ldmia	r6!, {r2}
    2b94:	cf01      	ldmia	r7!, {r0}
    2b96:	1812      	adds	r2, r2, r0
    2b98:	c404      	stmia	r4!, {r2}
    2b9a:	4728      	bx	r5
    2b9c:	ce04      	ldmia	r6!, {r2}
    2b9e:	cf01      	ldmia	r7!, {r0}
    2ba0:	4142      	adcs	r2, r0
    2ba2:	c404      	stmia	r4!, {r2}
    2ba4:	ce04      	ldmia	r6!, {r2}
    2ba6:	cf01      	ldmia	r7!, {r0}
    2ba8:	4142      	adcs	r2, r0
    2baa:	c404      	stmia	r4!, {r2}
    2bac:	ce04      	ldmia	r6!, {r2}
    2bae:	cf01      	ldmia	r7!, {r0}
    2bb0:	4142      	adcs	r2, r0
    2bb2:	c404      	stmia	r4!, {r2}
    2bb4:	ce04      	ldmia	r6!, {r2}
    2bb6:	cf01      	ldmia	r7!, {r0}
    2bb8:	4142      	adcs	r2, r0
    2bba:	c404      	stmia	r4!, {r2}
    2bbc:	ce04      	ldmia	r6!, {r2}
    2bbe:	cf01      	ldmia	r7!, {r0}
    2bc0:	4142      	adcs	r2, r0
    2bc2:	c404      	stmia	r4!, {r2}
    2bc4:	ce04      	ldmia	r6!, {r2}
    2bc6:	cf01      	ldmia	r7!, {r0}
    2bc8:	4142      	adcs	r2, r0
    2bca:	c404      	stmia	r4!, {r2}
    2bcc:	ce04      	ldmia	r6!, {r2}
    2bce:	cf01      	ldmia	r7!, {r0}
    2bd0:	4142      	adcs	r2, r0
    2bd2:	c404      	stmia	r4!, {r2}
    2bd4:	415b      	adcs	r3, r3
    2bd6:	2601      	movs	r6, #1
    2bd8:	9301      	str	r3, [sp, #4]
    2bda:	4654      	mov	r4, sl
    2bdc:	ad08      	add	r5, sp, #32
    2bde:	4653      	mov	r3, sl
    2be0:	2700      	movs	r7, #0
    2be2:	a206      	add	r2, pc, #24	; (adr r2, 2bfc <vli_mmod_fast_secp256r1+0xcc>)
    2be4:	46c0      	nop			; (mov r8, r8)
    2be6:	46c0      	nop			; (mov r8, r8)
    2be8:	46c0      	nop			; (mov r8, r8)
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	46c0      	nop			; (mov r8, r8)
    2bee:	46c0      	nop			; (mov r8, r8)
    2bf0:	18b6      	adds	r6, r6, r2
    2bf2:	cb04      	ldmia	r3!, {r2}
    2bf4:	cd01      	ldmia	r5!, {r0}
    2bf6:	1812      	adds	r2, r2, r0
    2bf8:	c404      	stmia	r4!, {r2}
    2bfa:	4730      	bx	r6
    2bfc:	cb04      	ldmia	r3!, {r2}
    2bfe:	cd01      	ldmia	r5!, {r0}
    2c00:	4142      	adcs	r2, r0
    2c02:	c404      	stmia	r4!, {r2}
    2c04:	cb04      	ldmia	r3!, {r2}
    2c06:	cd01      	ldmia	r5!, {r0}
    2c08:	4142      	adcs	r2, r0
    2c0a:	c404      	stmia	r4!, {r2}
    2c0c:	cb04      	ldmia	r3!, {r2}
    2c0e:	cd01      	ldmia	r5!, {r0}
    2c10:	4142      	adcs	r2, r0
    2c12:	c404      	stmia	r4!, {r2}
    2c14:	cb04      	ldmia	r3!, {r2}
    2c16:	cd01      	ldmia	r5!, {r0}
    2c18:	4142      	adcs	r2, r0
    2c1a:	c404      	stmia	r4!, {r2}
    2c1c:	cb04      	ldmia	r3!, {r2}
    2c1e:	cd01      	ldmia	r5!, {r0}
    2c20:	4142      	adcs	r2, r0
    2c22:	c404      	stmia	r4!, {r2}
    2c24:	cb04      	ldmia	r3!, {r2}
    2c26:	cd01      	ldmia	r5!, {r0}
    2c28:	4142      	adcs	r2, r0
    2c2a:	c404      	stmia	r4!, {r2}
    2c2c:	cb04      	ldmia	r3!, {r2}
    2c2e:	cd01      	ldmia	r5!, {r0}
    2c30:	4142      	adcs	r2, r0
    2c32:	c404      	stmia	r4!, {r2}
    2c34:	417f      	adcs	r7, r7
    tmp[7] = 0;
    2c36:	464b      	mov	r3, r9
    tmp[3] = product[12];
    2c38:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[7] = 0;
    2c3a:	930f      	str	r3, [sp, #60]	; 0x3c
    tmp[3] = product[12];
    2c3c:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[13];
    2c3e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    2c40:	9702      	str	r7, [sp, #8]
    2c42:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[14];
    2c44:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2c46:	2501      	movs	r5, #1
    2c48:	940d      	str	r4, [sp, #52]	; 0x34
    tmp[6] = product[15];
    2c4a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2c4c:	940e      	str	r4, [sp, #56]	; 0x38
    2c4e:	ac08      	add	r4, sp, #32
    2c50:	0026      	movs	r6, r4
    2c52:	0023      	movs	r3, r4
    2c54:	2700      	movs	r7, #0
    2c56:	a205      	add	r2, pc, #20	; (adr r2, 2c6c <vli_mmod_fast_secp256r1+0x13c>)
    2c58:	46c0      	nop			; (mov r8, r8)
    2c5a:	46c0      	nop			; (mov r8, r8)
    2c5c:	46c0      	nop			; (mov r8, r8)
    2c5e:	46c0      	nop			; (mov r8, r8)
    2c60:	18ad      	adds	r5, r5, r2
    2c62:	ce04      	ldmia	r6!, {r2}
    2c64:	cb01      	ldmia	r3!, {r0}
    2c66:	1812      	adds	r2, r2, r0
    2c68:	c404      	stmia	r4!, {r2}
    2c6a:	4728      	bx	r5
    2c6c:	ce04      	ldmia	r6!, {r2}
    2c6e:	cb01      	ldmia	r3!, {r0}
    2c70:	4142      	adcs	r2, r0
    2c72:	c404      	stmia	r4!, {r2}
    2c74:	ce04      	ldmia	r6!, {r2}
    2c76:	cb01      	ldmia	r3!, {r0}
    2c78:	4142      	adcs	r2, r0
    2c7a:	c404      	stmia	r4!, {r2}
    2c7c:	ce04      	ldmia	r6!, {r2}
    2c7e:	cb01      	ldmia	r3!, {r0}
    2c80:	4142      	adcs	r2, r0
    2c82:	c404      	stmia	r4!, {r2}
    2c84:	ce04      	ldmia	r6!, {r2}
    2c86:	cb01      	ldmia	r3!, {r0}
    2c88:	4142      	adcs	r2, r0
    2c8a:	c404      	stmia	r4!, {r2}
    2c8c:	ce04      	ldmia	r6!, {r2}
    2c8e:	cb01      	ldmia	r3!, {r0}
    2c90:	4142      	adcs	r2, r0
    2c92:	c404      	stmia	r4!, {r2}
    2c94:	ce04      	ldmia	r6!, {r2}
    2c96:	cb01      	ldmia	r3!, {r0}
    2c98:	4142      	adcs	r2, r0
    2c9a:	c404      	stmia	r4!, {r2}
    2c9c:	ce04      	ldmia	r6!, {r2}
    2c9e:	cb01      	ldmia	r3!, {r0}
    2ca0:	4142      	adcs	r2, r0
    2ca2:	c404      	stmia	r4!, {r2}
    2ca4:	417f      	adcs	r7, r7
    2ca6:	2601      	movs	r6, #1
    2ca8:	9703      	str	r7, [sp, #12]
    2caa:	4654      	mov	r4, sl
    2cac:	ad08      	add	r5, sp, #32
    2cae:	4653      	mov	r3, sl
    2cb0:	2700      	movs	r7, #0
    2cb2:	a206      	add	r2, pc, #24	; (adr r2, 2ccc <vli_mmod_fast_secp256r1+0x19c>)
    2cb4:	46c0      	nop			; (mov r8, r8)
    2cb6:	46c0      	nop			; (mov r8, r8)
    2cb8:	46c0      	nop			; (mov r8, r8)
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	46c0      	nop			; (mov r8, r8)
    2cbe:	46c0      	nop			; (mov r8, r8)
    2cc0:	18b6      	adds	r6, r6, r2
    2cc2:	cb04      	ldmia	r3!, {r2}
    2cc4:	cd01      	ldmia	r5!, {r0}
    2cc6:	1812      	adds	r2, r2, r0
    2cc8:	c404      	stmia	r4!, {r2}
    2cca:	4730      	bx	r6
    2ccc:	cb04      	ldmia	r3!, {r2}
    2cce:	cd01      	ldmia	r5!, {r0}
    2cd0:	4142      	adcs	r2, r0
    2cd2:	c404      	stmia	r4!, {r2}
    2cd4:	cb04      	ldmia	r3!, {r2}
    2cd6:	cd01      	ldmia	r5!, {r0}
    2cd8:	4142      	adcs	r2, r0
    2cda:	c404      	stmia	r4!, {r2}
    2cdc:	cb04      	ldmia	r3!, {r2}
    2cde:	cd01      	ldmia	r5!, {r0}
    2ce0:	4142      	adcs	r2, r0
    2ce2:	c404      	stmia	r4!, {r2}
    2ce4:	cb04      	ldmia	r3!, {r2}
    2ce6:	cd01      	ldmia	r5!, {r0}
    2ce8:	4142      	adcs	r2, r0
    2cea:	c404      	stmia	r4!, {r2}
    2cec:	cb04      	ldmia	r3!, {r2}
    2cee:	cd01      	ldmia	r5!, {r0}
    2cf0:	4142      	adcs	r2, r0
    2cf2:	c404      	stmia	r4!, {r2}
    2cf4:	cb04      	ldmia	r3!, {r2}
    2cf6:	cd01      	ldmia	r5!, {r0}
    2cf8:	4142      	adcs	r2, r0
    2cfa:	c404      	stmia	r4!, {r2}
    2cfc:	cb04      	ldmia	r3!, {r2}
    2cfe:	cd01      	ldmia	r5!, {r0}
    2d00:	4142      	adcs	r2, r0
    2d02:	c404      	stmia	r4!, {r2}
    2d04:	417f      	adcs	r7, r7
    tmp[3] = tmp[4] = tmp[5] = 0;
    2d06:	464b      	mov	r3, r9
    tmp[0] = product[8];
    2d08:	6a0c      	ldr	r4, [r1, #32]
    tmp[3] = tmp[4] = tmp[5] = 0;
    2d0a:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[8];
    2d0c:	9408      	str	r4, [sp, #32]
    tmp[1] = product[9];
    2d0e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[3] = tmp[4] = tmp[5] = 0;
    2d10:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[9];
    2d12:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[10];
    2d14:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[3] = tmp[4] = tmp[5] = 0;
    2d16:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[2] = product[10];
    2d18:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[6] = product[14];
    2d1a:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2d1c:	9704      	str	r7, [sp, #16]
    2d1e:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[15];
    2d20:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2d22:	ad08      	add	r5, sp, #32
    2d24:	940f      	str	r4, [sp, #60]	; 0x3c
    2d26:	2601      	movs	r6, #1
    2d28:	4654      	mov	r4, sl
    2d2a:	4653      	mov	r3, sl
    2d2c:	2700      	movs	r7, #0
    2d2e:	a203      	add	r2, pc, #12	; (adr r2, 2d3c <vli_mmod_fast_secp256r1+0x20c>)
    2d30:	18b6      	adds	r6, r6, r2
    2d32:	cb04      	ldmia	r3!, {r2}
    2d34:	cd01      	ldmia	r5!, {r0}
    2d36:	1812      	adds	r2, r2, r0
    2d38:	c404      	stmia	r4!, {r2}
    2d3a:	4730      	bx	r6
    2d3c:	cb04      	ldmia	r3!, {r2}
    2d3e:	cd01      	ldmia	r5!, {r0}
    2d40:	4142      	adcs	r2, r0
    2d42:	c404      	stmia	r4!, {r2}
    2d44:	cb04      	ldmia	r3!, {r2}
    2d46:	cd01      	ldmia	r5!, {r0}
    2d48:	4142      	adcs	r2, r0
    2d4a:	c404      	stmia	r4!, {r2}
    2d4c:	cb04      	ldmia	r3!, {r2}
    2d4e:	cd01      	ldmia	r5!, {r0}
    2d50:	4142      	adcs	r2, r0
    2d52:	c404      	stmia	r4!, {r2}
    2d54:	cb04      	ldmia	r3!, {r2}
    2d56:	cd01      	ldmia	r5!, {r0}
    2d58:	4142      	adcs	r2, r0
    2d5a:	c404      	stmia	r4!, {r2}
    2d5c:	cb04      	ldmia	r3!, {r2}
    2d5e:	cd01      	ldmia	r5!, {r0}
    2d60:	4142      	adcs	r2, r0
    2d62:	c404      	stmia	r4!, {r2}
    2d64:	cb04      	ldmia	r3!, {r2}
    2d66:	cd01      	ldmia	r5!, {r0}
    2d68:	4142      	adcs	r2, r0
    2d6a:	c404      	stmia	r4!, {r2}
    2d6c:	cb04      	ldmia	r3!, {r2}
    2d6e:	cd01      	ldmia	r5!, {r0}
    2d70:	4142      	adcs	r2, r0
    2d72:	c404      	stmia	r4!, {r2}
    2d74:	417f      	adcs	r7, r7
    tmp[0] = product[9];
    2d76:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[4] = product[14];
    2d78:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    tmp[0] = product[9];
    2d7a:	9408      	str	r4, [sp, #32]
    tmp[1] = product[10];
    2d7c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[4] = product[14];
    2d7e:	950c      	str	r5, [sp, #48]	; 0x30
    tmp[1] = product[10];
    2d80:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[11];
    2d82:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[5] = product[15];
    2d84:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
    tmp[2] = product[11];
    2d86:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[13];
    2d88:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[5] = product[15];
    2d8a:	950d      	str	r5, [sp, #52]	; 0x34
    tmp[3] = product[13];
    2d8c:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[6] = product[13];
    2d8e:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[8];
    2d90:	6a0c      	ldr	r4, [r1, #32]
    2d92:	9705      	str	r7, [sp, #20]
    2d94:	940f      	str	r4, [sp, #60]	; 0x3c
    2d96:	ad08      	add	r5, sp, #32
    2d98:	4654      	mov	r4, sl
    2d9a:	2601      	movs	r6, #1
    2d9c:	4653      	mov	r3, sl
    2d9e:	2700      	movs	r7, #0
    2da0:	a206      	add	r2, pc, #24	; (adr r2, 2dbc <vli_mmod_fast_secp256r1+0x28c>)
    2da2:	46c0      	nop			; (mov r8, r8)
    2da4:	46c0      	nop			; (mov r8, r8)
    2da6:	46c0      	nop			; (mov r8, r8)
    2da8:	46c0      	nop			; (mov r8, r8)
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	46c0      	nop			; (mov r8, r8)
    2dae:	46c0      	nop			; (mov r8, r8)
    2db0:	18b6      	adds	r6, r6, r2
    2db2:	cb04      	ldmia	r3!, {r2}
    2db4:	cd01      	ldmia	r5!, {r0}
    2db6:	1812      	adds	r2, r2, r0
    2db8:	c404      	stmia	r4!, {r2}
    2dba:	4730      	bx	r6
    2dbc:	cb04      	ldmia	r3!, {r2}
    2dbe:	cd01      	ldmia	r5!, {r0}
    2dc0:	4142      	adcs	r2, r0
    2dc2:	c404      	stmia	r4!, {r2}
    2dc4:	cb04      	ldmia	r3!, {r2}
    2dc6:	cd01      	ldmia	r5!, {r0}
    2dc8:	4142      	adcs	r2, r0
    2dca:	c404      	stmia	r4!, {r2}
    2dcc:	cb04      	ldmia	r3!, {r2}
    2dce:	cd01      	ldmia	r5!, {r0}
    2dd0:	4142      	adcs	r2, r0
    2dd2:	c404      	stmia	r4!, {r2}
    2dd4:	cb04      	ldmia	r3!, {r2}
    2dd6:	cd01      	ldmia	r5!, {r0}
    2dd8:	4142      	adcs	r2, r0
    2dda:	c404      	stmia	r4!, {r2}
    2ddc:	cb04      	ldmia	r3!, {r2}
    2dde:	cd01      	ldmia	r5!, {r0}
    2de0:	4142      	adcs	r2, r0
    2de2:	c404      	stmia	r4!, {r2}
    2de4:	cb04      	ldmia	r3!, {r2}
    2de6:	cd01      	ldmia	r5!, {r0}
    2de8:	4142      	adcs	r2, r0
    2dea:	c404      	stmia	r4!, {r2}
    2dec:	cb04      	ldmia	r3!, {r2}
    2dee:	cd01      	ldmia	r5!, {r0}
    2df0:	4142      	adcs	r2, r0
    2df2:	c404      	stmia	r4!, {r2}
    2df4:	417f      	adcs	r7, r7
    tmp[3] = tmp[4] = tmp[5] = 0;
    2df6:	464b      	mov	r3, r9
    tmp[0] = product[11];
    2df8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[3] = tmp[4] = tmp[5] = 0;
    2dfa:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[11];
    2dfc:	9408      	str	r4, [sp, #32]
    tmp[1] = product[12];
    2dfe:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[3] = tmp[4] = tmp[5] = 0;
    2e00:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[12];
    2e02:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[13];
    2e04:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[3] = tmp[4] = tmp[5] = 0;
    2e06:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[2] = product[13];
    2e08:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[6] = product[8];
    2e0a:	6a0c      	ldr	r4, [r1, #32]
    2e0c:	46b8      	mov	r8, r7
    2e0e:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[10];
    2e10:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    __asm__ volatile (
    2e12:	ad08      	add	r5, sp, #32
    2e14:	940f      	str	r4, [sp, #60]	; 0x3c
    2e16:	2601      	movs	r6, #1
    2e18:	4654      	mov	r4, sl
    2e1a:	4653      	mov	r3, sl
    2e1c:	2700      	movs	r7, #0
    2e1e:	a203      	add	r2, pc, #12	; (adr r2, 2e2c <vli_mmod_fast_secp256r1+0x2fc>)
    2e20:	18b6      	adds	r6, r6, r2
    2e22:	cb04      	ldmia	r3!, {r2}
    2e24:	cd01      	ldmia	r5!, {r0}
    2e26:	1a12      	subs	r2, r2, r0
    2e28:	c404      	stmia	r4!, {r2}
    2e2a:	4730      	bx	r6
    2e2c:	cb04      	ldmia	r3!, {r2}
    2e2e:	cd01      	ldmia	r5!, {r0}
    2e30:	4182      	sbcs	r2, r0
    2e32:	c404      	stmia	r4!, {r2}
    2e34:	cb04      	ldmia	r3!, {r2}
    2e36:	cd01      	ldmia	r5!, {r0}
    2e38:	4182      	sbcs	r2, r0
    2e3a:	c404      	stmia	r4!, {r2}
    2e3c:	cb04      	ldmia	r3!, {r2}
    2e3e:	cd01      	ldmia	r5!, {r0}
    2e40:	4182      	sbcs	r2, r0
    2e42:	c404      	stmia	r4!, {r2}
    2e44:	cb04      	ldmia	r3!, {r2}
    2e46:	cd01      	ldmia	r5!, {r0}
    2e48:	4182      	sbcs	r2, r0
    2e4a:	c404      	stmia	r4!, {r2}
    2e4c:	cb04      	ldmia	r3!, {r2}
    2e4e:	cd01      	ldmia	r5!, {r0}
    2e50:	4182      	sbcs	r2, r0
    2e52:	c404      	stmia	r4!, {r2}
    2e54:	cb04      	ldmia	r3!, {r2}
    2e56:	cd01      	ldmia	r5!, {r0}
    2e58:	4182      	sbcs	r2, r0
    2e5a:	c404      	stmia	r4!, {r2}
    2e5c:	cb04      	ldmia	r3!, {r2}
    2e5e:	cd01      	ldmia	r5!, {r0}
    2e60:	4182      	sbcs	r2, r0
    2e62:	c404      	stmia	r4!, {r2}
    2e64:	417f      	adcs	r7, r7
    tmp[4] = tmp[5] = 0;
    2e66:	464b      	mov	r3, r9
    tmp[0] = product[12];
    2e68:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[4] = tmp[5] = 0;
    2e6a:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[12];
    2e6c:	9408      	str	r4, [sp, #32]
    tmp[1] = product[13];
    2e6e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[4] = tmp[5] = 0;
    2e70:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[13];
    2e72:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[14];
    2e74:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2e76:	46bc      	mov	ip, r7
    2e78:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[15];
    2e7a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2e7c:	ad08      	add	r5, sp, #32
    2e7e:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[6] = product[9];
    2e80:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    2e82:	2601      	movs	r6, #1
    2e84:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[11];
    2e86:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    2e88:	4653      	mov	r3, sl
    2e8a:	940f      	str	r4, [sp, #60]	; 0x3c
    2e8c:	4654      	mov	r4, sl
    2e8e:	2700      	movs	r7, #0
    2e90:	a206      	add	r2, pc, #24	; (adr r2, 2eac <vli_mmod_fast_secp256r1+0x37c>)
    2e92:	46c0      	nop			; (mov r8, r8)
    2e94:	46c0      	nop			; (mov r8, r8)
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46c0      	nop			; (mov r8, r8)
    2e9a:	46c0      	nop			; (mov r8, r8)
    2e9c:	46c0      	nop			; (mov r8, r8)
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	18b6      	adds	r6, r6, r2
    2ea2:	cb04      	ldmia	r3!, {r2}
    2ea4:	cd01      	ldmia	r5!, {r0}
    2ea6:	1a12      	subs	r2, r2, r0
    2ea8:	c404      	stmia	r4!, {r2}
    2eaa:	4730      	bx	r6
    2eac:	cb04      	ldmia	r3!, {r2}
    2eae:	cd01      	ldmia	r5!, {r0}
    2eb0:	4182      	sbcs	r2, r0
    2eb2:	c404      	stmia	r4!, {r2}
    2eb4:	cb04      	ldmia	r3!, {r2}
    2eb6:	cd01      	ldmia	r5!, {r0}
    2eb8:	4182      	sbcs	r2, r0
    2eba:	c404      	stmia	r4!, {r2}
    2ebc:	cb04      	ldmia	r3!, {r2}
    2ebe:	cd01      	ldmia	r5!, {r0}
    2ec0:	4182      	sbcs	r2, r0
    2ec2:	c404      	stmia	r4!, {r2}
    2ec4:	cb04      	ldmia	r3!, {r2}
    2ec6:	cd01      	ldmia	r5!, {r0}
    2ec8:	4182      	sbcs	r2, r0
    2eca:	c404      	stmia	r4!, {r2}
    2ecc:	cb04      	ldmia	r3!, {r2}
    2ece:	cd01      	ldmia	r5!, {r0}
    2ed0:	4182      	sbcs	r2, r0
    2ed2:	c404      	stmia	r4!, {r2}
    2ed4:	cb04      	ldmia	r3!, {r2}
    2ed6:	cd01      	ldmia	r5!, {r0}
    2ed8:	4182      	sbcs	r2, r0
    2eda:	c404      	stmia	r4!, {r2}
    2edc:	cb04      	ldmia	r3!, {r2}
    2ede:	cd01      	ldmia	r5!, {r0}
    2ee0:	4182      	sbcs	r2, r0
    2ee2:	c404      	stmia	r4!, {r2}
    2ee4:	417f      	adcs	r7, r7
    tmp[6] = 0;
    2ee6:	464b      	mov	r3, r9
    tmp[0] = product[13];
    2ee8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[6] = 0;
    2eea:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[0] = product[13];
    2eec:	9408      	str	r4, [sp, #32]
    tmp[1] = product[14];
    2eee:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2ef0:	46bb      	mov	fp, r7
    2ef2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[15];
    2ef4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2ef6:	ad08      	add	r5, sp, #32
    2ef8:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[8];
    2efa:	6a0c      	ldr	r4, [r1, #32]
    2efc:	2601      	movs	r6, #1
    2efe:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[9];
    2f00:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    2f02:	4653      	mov	r3, sl
    2f04:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[10];
    2f06:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    2f08:	940d      	str	r4, [sp, #52]	; 0x34
    tmp[7] = product[12];
    2f0a:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2f0c:	940f      	str	r4, [sp, #60]	; 0x3c
    2f0e:	4654      	mov	r4, sl
    2f10:	2700      	movs	r7, #0
    2f12:	a206      	add	r2, pc, #24	; (adr r2, 2f2c <vli_mmod_fast_secp256r1+0x3fc>)
    2f14:	46c0      	nop			; (mov r8, r8)
    2f16:	46c0      	nop			; (mov r8, r8)
    2f18:	46c0      	nop			; (mov r8, r8)
    2f1a:	46c0      	nop			; (mov r8, r8)
    2f1c:	46c0      	nop			; (mov r8, r8)
    2f1e:	46c0      	nop			; (mov r8, r8)
    2f20:	18b6      	adds	r6, r6, r2
    2f22:	cb04      	ldmia	r3!, {r2}
    2f24:	cd01      	ldmia	r5!, {r0}
    2f26:	1a12      	subs	r2, r2, r0
    2f28:	c404      	stmia	r4!, {r2}
    2f2a:	4730      	bx	r6
    2f2c:	cb04      	ldmia	r3!, {r2}
    2f2e:	cd01      	ldmia	r5!, {r0}
    2f30:	4182      	sbcs	r2, r0
    2f32:	c404      	stmia	r4!, {r2}
    2f34:	cb04      	ldmia	r3!, {r2}
    2f36:	cd01      	ldmia	r5!, {r0}
    2f38:	4182      	sbcs	r2, r0
    2f3a:	c404      	stmia	r4!, {r2}
    2f3c:	cb04      	ldmia	r3!, {r2}
    2f3e:	cd01      	ldmia	r5!, {r0}
    2f40:	4182      	sbcs	r2, r0
    2f42:	c404      	stmia	r4!, {r2}
    2f44:	cb04      	ldmia	r3!, {r2}
    2f46:	cd01      	ldmia	r5!, {r0}
    2f48:	4182      	sbcs	r2, r0
    2f4a:	c404      	stmia	r4!, {r2}
    2f4c:	cb04      	ldmia	r3!, {r2}
    2f4e:	cd01      	ldmia	r5!, {r0}
    2f50:	4182      	sbcs	r2, r0
    2f52:	c404      	stmia	r4!, {r2}
    2f54:	cb04      	ldmia	r3!, {r2}
    2f56:	cd01      	ldmia	r5!, {r0}
    2f58:	4182      	sbcs	r2, r0
    2f5a:	c404      	stmia	r4!, {r2}
    2f5c:	cb04      	ldmia	r3!, {r2}
    2f5e:	cd01      	ldmia	r5!, {r0}
    2f60:	4182      	sbcs	r2, r0
    2f62:	c404      	stmia	r4!, {r2}
    2f64:	417f      	adcs	r7, r7
    tmp[2] = 0;
    2f66:	464b      	mov	r3, r9
    tmp[0] = product[14];
    2f68:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    tmp[7] = product[13];
    2f6a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    tmp[0] = product[14];
    2f6c:	9408      	str	r4, [sp, #32]
    tmp[1] = product[15];
    2f6e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    tmp[2] = 0;
    2f70:	930a      	str	r3, [sp, #40]	; 0x28
    tmp[1] = product[15];
    2f72:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[3] = product[9];
    2f74:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[6] = 0;
    2f76:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[3] = product[9];
    2f78:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[10];
    2f7a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[7] = product[13];
    2f7c:	9207      	str	r2, [sp, #28]
    tmp[4] = product[10];
    2f7e:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[11];
    2f80:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[7] = product[13];
    2f82:	920f      	str	r2, [sp, #60]	; 0x3c
    tmp[5] = product[11];
    2f84:	940d      	str	r4, [sp, #52]	; 0x34
    2f86:	9706      	str	r7, [sp, #24]
    2f88:	4651      	mov	r1, sl
    2f8a:	aa08      	add	r2, sp, #32
    2f8c:	3301      	adds	r3, #1
    2f8e:	4654      	mov	r4, sl
    2f90:	2500      	movs	r5, #0
    2f92:	a606      	add	r6, pc, #24	; (adr r6, 2fac <vli_mmod_fast_secp256r1+0x47c>)
    2f94:	46c0      	nop			; (mov r8, r8)
    2f96:	46c0      	nop			; (mov r8, r8)
    2f98:	46c0      	nop			; (mov r8, r8)
    2f9a:	46c0      	nop			; (mov r8, r8)
    2f9c:	46c0      	nop			; (mov r8, r8)
    2f9e:	46c0      	nop			; (mov r8, r8)
    2fa0:	199b      	adds	r3, r3, r6
    2fa2:	cc40      	ldmia	r4!, {r6}
    2fa4:	ca01      	ldmia	r2!, {r0}
    2fa6:	1a36      	subs	r6, r6, r0
    2fa8:	c140      	stmia	r1!, {r6}
    2faa:	4718      	bx	r3
    2fac:	cc40      	ldmia	r4!, {r6}
    2fae:	ca01      	ldmia	r2!, {r0}
    2fb0:	4186      	sbcs	r6, r0
    2fb2:	c140      	stmia	r1!, {r6}
    2fb4:	cc40      	ldmia	r4!, {r6}
    2fb6:	ca01      	ldmia	r2!, {r0}
    2fb8:	4186      	sbcs	r6, r0
    2fba:	c140      	stmia	r1!, {r6}
    2fbc:	cc40      	ldmia	r4!, {r6}
    2fbe:	ca01      	ldmia	r2!, {r0}
    2fc0:	4186      	sbcs	r6, r0
    2fc2:	c140      	stmia	r1!, {r6}
    2fc4:	cc40      	ldmia	r4!, {r6}
    2fc6:	ca01      	ldmia	r2!, {r0}
    2fc8:	4186      	sbcs	r6, r0
    2fca:	c140      	stmia	r1!, {r6}
    2fcc:	cc40      	ldmia	r4!, {r6}
    2fce:	ca01      	ldmia	r2!, {r0}
    2fd0:	4186      	sbcs	r6, r0
    2fd2:	c140      	stmia	r1!, {r6}
    2fd4:	cc40      	ldmia	r4!, {r6}
    2fd6:	ca01      	ldmia	r2!, {r0}
    2fd8:	4186      	sbcs	r6, r0
    2fda:	c140      	stmia	r1!, {r6}
    2fdc:	cc40      	ldmia	r4!, {r6}
    2fde:	ca01      	ldmia	r2!, {r0}
    2fe0:	4186      	sbcs	r6, r0
    2fe2:	c140      	stmia	r1!, {r6}
    2fe4:	416d      	adcs	r5, r5
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fe6:	9f02      	ldr	r7, [sp, #8]
    2fe8:	9b01      	ldr	r3, [sp, #4]
    2fea:	46b9      	mov	r9, r7
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2fec:	9f03      	ldr	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fee:	444b      	add	r3, r9
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2ff0:	46b9      	mov	r9, r7
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2ff2:	9f04      	ldr	r7, [sp, #16]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2ff4:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2ff6:	46b9      	mov	r9, r7
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    2ff8:	4662      	mov	r2, ip
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2ffa:	9f05      	ldr	r7, [sp, #20]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2ffc:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2ffe:	46b9      	mov	r9, r7
    3000:	4251      	negs	r1, r2
    3002:	414a      	adcs	r2, r1
    3004:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    3006:	4443      	add	r3, r8
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    3008:	1a9b      	subs	r3, r3, r2
    300a:	465a      	mov	r2, fp
    300c:	4251      	negs	r1, r2
    300e:	414a      	adcs	r2, r1
    3010:	9f06      	ldr	r7, [sp, #24]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    3012:	1a9b      	subs	r3, r3, r2
    3014:	427a      	negs	r2, r7
    3016:	4157      	adcs	r7, r2
    3018:	f646 4658 	movw	r6, #27736	; 0x6c58
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    301c:	1bdf      	subs	r7, r3, r7
    301e:	426c      	negs	r4, r5
    3020:	416c      	adcs	r4, r5
    3022:	f2c0 0600 	movt	r6, #0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    3026:	1b3c      	subs	r4, r7, r4
    if (carry < 0) {
    3028:	d500      	bpl.n	302c <vli_mmod_fast_secp256r1+0x4fc>
    302a:	e056      	b.n	30da <vli_mmod_fast_secp256r1+0x5aa>
    __asm__ volatile (
    302c:	f240 0854 	movw	r8, #84	; 0x54
    3030:	f240 0901 	movw	r9, #1
    3034:	44b0      	add	r8, r6
    3036:	46a4      	mov	ip, r4
    3038:	4650      	mov	r0, sl
    303a:	e041      	b.n	30c0 <vli_mmod_fast_secp256r1+0x590>
        if (left[i] > right[i]) {
    303c:	6983      	ldr	r3, [r0, #24]
    303e:	2b00      	cmp	r3, #0
    3040:	d044      	beq.n	30cc <vli_mmod_fast_secp256r1+0x59c>
        } else if (left[i] < right[i]) {
    3042:	2b01      	cmp	r3, #1
    3044:	d80e      	bhi.n	3064 <vli_mmod_fast_secp256r1+0x534>
    3046:	6943      	ldr	r3, [r0, #20]
    3048:	b963      	cbnz	r3, 3064 <vli_mmod_fast_secp256r1+0x534>
    304a:	6903      	ldr	r3, [r0, #16]
    304c:	b953      	cbnz	r3, 3064 <vli_mmod_fast_secp256r1+0x534>
    304e:	68c3      	ldr	r3, [r0, #12]
    3050:	b943      	cbnz	r3, 3064 <vli_mmod_fast_secp256r1+0x534>
        if (left[i] > right[i]) {
    3052:	6883      	ldr	r3, [r0, #8]
    3054:	3301      	adds	r3, #1
    3056:	d139      	bne.n	30cc <vli_mmod_fast_secp256r1+0x59c>
    3058:	6843      	ldr	r3, [r0, #4]
    305a:	3301      	adds	r3, #1
    305c:	d136      	bne.n	30cc <vli_mmod_fast_secp256r1+0x59c>
    305e:	6803      	ldr	r3, [r0, #0]
    3060:	3301      	adds	r3, #1
    3062:	d133      	bne.n	30cc <vli_mmod_fast_secp256r1+0x59c>
    3064:	0003      	movs	r3, r0
    3066:	4642      	mov	r2, r8
    3068:	4649      	mov	r1, r9
    306a:	0006      	movs	r6, r0
    306c:	2500      	movs	r5, #0
    306e:	a703      	add	r7, pc, #12	; (adr r7, 307c <vli_mmod_fast_secp256r1+0x54c>)
    3070:	19c9      	adds	r1, r1, r7
    3072:	ce80      	ldmia	r6!, {r7}
    3074:	ca10      	ldmia	r2!, {r4}
    3076:	1b3f      	subs	r7, r7, r4
    3078:	c380      	stmia	r3!, {r7}
    307a:	4708      	bx	r1
    307c:	ce80      	ldmia	r6!, {r7}
    307e:	ca10      	ldmia	r2!, {r4}
    3080:	41a7      	sbcs	r7, r4
    3082:	c380      	stmia	r3!, {r7}
    3084:	ce80      	ldmia	r6!, {r7}
    3086:	ca10      	ldmia	r2!, {r4}
    3088:	41a7      	sbcs	r7, r4
    308a:	c380      	stmia	r3!, {r7}
    308c:	ce80      	ldmia	r6!, {r7}
    308e:	ca10      	ldmia	r2!, {r4}
    3090:	41a7      	sbcs	r7, r4
    3092:	c380      	stmia	r3!, {r7}
    3094:	ce80      	ldmia	r6!, {r7}
    3096:	ca10      	ldmia	r2!, {r4}
    3098:	41a7      	sbcs	r7, r4
    309a:	c380      	stmia	r3!, {r7}
    309c:	ce80      	ldmia	r6!, {r7}
    309e:	ca10      	ldmia	r2!, {r4}
    30a0:	41a7      	sbcs	r7, r4
    30a2:	c380      	stmia	r3!, {r7}
    30a4:	ce80      	ldmia	r6!, {r7}
    30a6:	ca10      	ldmia	r2!, {r4}
    30a8:	41a7      	sbcs	r7, r4
    30aa:	c380      	stmia	r3!, {r7}
    30ac:	ce80      	ldmia	r6!, {r7}
    30ae:	ca10      	ldmia	r2!, {r4}
    30b0:	41a7      	sbcs	r7, r4
    30b2:	c380      	stmia	r3!, {r7}
    30b4:	416d      	adcs	r5, r5
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
    30b6:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    30b8:	426b      	negs	r3, r5
    30ba:	416b      	adcs	r3, r5
    30bc:	1ad3      	subs	r3, r2, r3
    30be:	469c      	mov	ip, r3
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
    30c0:	4663      	mov	r3, ip
    30c2:	2b00      	cmp	r3, #0
    30c4:	d1ce      	bne.n	3064 <vli_mmod_fast_secp256r1+0x534>
    30c6:	69c3      	ldr	r3, [r0, #28]
    30c8:	3301      	adds	r3, #1
    30ca:	d0b7      	beq.n	303c <vli_mmod_fast_secp256r1+0x50c>
}
    30cc:	b011      	add	sp, #68	; 0x44
    30ce:	bc3c      	pop	{r2, r3, r4, r5}
    30d0:	4690      	mov	r8, r2
    30d2:	4699      	mov	r9, r3
    30d4:	46a2      	mov	sl, r4
    30d6:	46ab      	mov	fp, r5
    30d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (
    30da:	f240 0c54 	movw	ip, #84	; 0x54
    30de:	f240 0801 	movw	r8, #1
    30e2:	46d1      	mov	r9, sl
    30e4:	44b4      	add	ip, r6
    30e6:	464b      	mov	r3, r9
    30e8:	4662      	mov	r2, ip
    30ea:	4641      	mov	r1, r8
    30ec:	464e      	mov	r6, r9
    30ee:	2500      	movs	r5, #0
    30f0:	a706      	add	r7, pc, #24	; (adr r7, 310c <vli_mmod_fast_secp256r1+0x5dc>)
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	46c0      	nop			; (mov r8, r8)
    30f6:	46c0      	nop			; (mov r8, r8)
    30f8:	46c0      	nop			; (mov r8, r8)
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	46c0      	nop			; (mov r8, r8)
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	19c9      	adds	r1, r1, r7
    3102:	ce80      	ldmia	r6!, {r7}
    3104:	ca01      	ldmia	r2!, {r0}
    3106:	183f      	adds	r7, r7, r0
    3108:	c380      	stmia	r3!, {r7}
    310a:	4708      	bx	r1
    310c:	ce80      	ldmia	r6!, {r7}
    310e:	ca01      	ldmia	r2!, {r0}
    3110:	4147      	adcs	r7, r0
    3112:	c380      	stmia	r3!, {r7}
    3114:	ce80      	ldmia	r6!, {r7}
    3116:	ca01      	ldmia	r2!, {r0}
    3118:	4147      	adcs	r7, r0
    311a:	c380      	stmia	r3!, {r7}
    311c:	ce80      	ldmia	r6!, {r7}
    311e:	ca01      	ldmia	r2!, {r0}
    3120:	4147      	adcs	r7, r0
    3122:	c380      	stmia	r3!, {r7}
    3124:	ce80      	ldmia	r6!, {r7}
    3126:	ca01      	ldmia	r2!, {r0}
    3128:	4147      	adcs	r7, r0
    312a:	c380      	stmia	r3!, {r7}
    312c:	ce80      	ldmia	r6!, {r7}
    312e:	ca01      	ldmia	r2!, {r0}
    3130:	4147      	adcs	r7, r0
    3132:	c380      	stmia	r3!, {r7}
    3134:	ce80      	ldmia	r6!, {r7}
    3136:	ca01      	ldmia	r2!, {r0}
    3138:	4147      	adcs	r7, r0
    313a:	c380      	stmia	r3!, {r7}
    313c:	ce80      	ldmia	r6!, {r7}
    313e:	ca01      	ldmia	r2!, {r0}
    3140:	4147      	adcs	r7, r0
    3142:	c380      	stmia	r3!, {r7}
    3144:	416d      	adcs	r5, r5
        } while (carry < 0);
    3146:	1964      	adds	r4, r4, r5
    3148:	d4cd      	bmi.n	30e6 <vli_mmod_fast_secp256r1+0x5b6>
    314a:	e7bf      	b.n	30cc <vli_mmod_fast_secp256r1+0x59c>
    314c:	0000      	movs	r0, r0
	...

00003150 <double_jacobian_secp256k1.part.2>:
static void double_jacobian_secp256k1(uECC_word_t * X1,
    3150:	b5f0      	push	{r4, r5, r6, r7, lr}
    3152:	46de      	mov	lr, fp
    3154:	4657      	mov	r7, sl
    3156:	464e      	mov	r6, r9
    3158:	4645      	mov	r5, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    315a:	f240 78ed 	movw	r8, #2029	; 0x7ed
    315e:	469a      	mov	sl, r3
    3160:	b5e0      	push	{r5, r6, r7, lr}
    3162:	781b      	ldrb	r3, [r3, #0]
    3164:	b0a3      	sub	sp, #140	; 0x8c
    3166:	4683      	mov	fp, r0
    3168:	f2c0 0800 	movt	r8, #0
    316c:	4691      	mov	r9, r2
    316e:	a812      	add	r0, sp, #72	; 0x48
    3170:	000a      	movs	r2, r1
    3172:	b25b      	sxtb	r3, r3
    curve->mmod_fast(result, product);
    3174:	27b0      	movs	r7, #176	; 0xb0
    3176:	000c      	movs	r4, r1
    uECC_vli_mult(product, left, right, curve->num_words);
    3178:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    317a:	4653      	mov	r3, sl
    317c:	a912      	add	r1, sp, #72	; 0x48
    317e:	a80a      	add	r0, sp, #40	; 0x28
    3180:	59db      	ldr	r3, [r3, r7]
    3182:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3184:	4653      	mov	r3, sl
    3186:	781b      	ldrb	r3, [r3, #0]
    3188:	aa0a      	add	r2, sp, #40	; 0x28
    318a:	4659      	mov	r1, fp
    318c:	a812      	add	r0, sp, #72	; 0x48
    318e:	b25b      	sxtb	r3, r3
    3190:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    3192:	4653      	mov	r3, sl
    3194:	a912      	add	r1, sp, #72	; 0x48
    3196:	a802      	add	r0, sp, #8
    3198:	59db      	ldr	r3, [r3, r7]
    319a:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    319c:	4653      	mov	r3, sl
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	465a      	mov	r2, fp
    31a2:	4659      	mov	r1, fp
    31a4:	a812      	add	r0, sp, #72	; 0x48
    31a6:	b25b      	sxtb	r3, r3
    31a8:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    31aa:	4653      	mov	r3, sl
    31ac:	a912      	add	r1, sp, #72	; 0x48
    31ae:	4658      	mov	r0, fp
    31b0:	59db      	ldr	r3, [r3, r7]
    31b2:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    31b4:	4653      	mov	r3, sl
    31b6:	781b      	ldrb	r3, [r3, #0]
    31b8:	aa0a      	add	r2, sp, #40	; 0x28
    31ba:	0011      	movs	r1, r2
    31bc:	a812      	add	r0, sp, #72	; 0x48
    31be:	b25b      	sxtb	r3, r3
    31c0:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    31c2:	4653      	mov	r3, sl
    31c4:	a912      	add	r1, sp, #72	; 0x48
    31c6:	a80a      	add	r0, sp, #40	; 0x28
    31c8:	59db      	ldr	r3, [r3, r7]
    31ca:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    31cc:	4653      	mov	r3, sl
    31ce:	781b      	ldrb	r3, [r3, #0]
    31d0:	464a      	mov	r2, r9
    31d2:	0021      	movs	r1, r4
    31d4:	a812      	add	r0, sp, #72	; 0x48
    31d6:	b25b      	sxtb	r3, r3
    31d8:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    31da:	4653      	mov	r3, sl
    31dc:	a912      	add	r1, sp, #72	; 0x48
    31de:	59db      	ldr	r3, [r3, r7]
    31e0:	4648      	mov	r0, r9
    31e2:	4798      	blx	r3
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
    31e4:	4653      	mov	r3, sl
    31e6:	3304      	adds	r3, #4
    31e8:	9301      	str	r3, [sp, #4]
    31ea:	0022      	movs	r2, r4
    31ec:	465b      	mov	r3, fp
    31ee:	2101      	movs	r1, #1
    31f0:	465f      	mov	r7, fp
    31f2:	2000      	movs	r0, #0
    31f4:	a605      	add	r6, pc, #20	; (adr r6, 320c <double_jacobian_secp256k1.part.2+0xbc>)
    31f6:	46c0      	nop			; (mov r8, r8)
    31f8:	46c0      	nop			; (mov r8, r8)
    31fa:	46c0      	nop			; (mov r8, r8)
    31fc:	46c0      	nop			; (mov r8, r8)
    31fe:	46c0      	nop			; (mov r8, r8)
    3200:	1989      	adds	r1, r1, r6
    3202:	cb40      	ldmia	r3!, {r6}
    3204:	cf20      	ldmia	r7!, {r5}
    3206:	1976      	adds	r6, r6, r5
    3208:	c240      	stmia	r2!, {r6}
    320a:	4708      	bx	r1
    320c:	cb40      	ldmia	r3!, {r6}
    320e:	cf20      	ldmia	r7!, {r5}
    3210:	416e      	adcs	r6, r5
    3212:	c240      	stmia	r2!, {r6}
    3214:	cb40      	ldmia	r3!, {r6}
    3216:	cf20      	ldmia	r7!, {r5}
    3218:	416e      	adcs	r6, r5
    321a:	c240      	stmia	r2!, {r6}
    321c:	cb40      	ldmia	r3!, {r6}
    321e:	cf20      	ldmia	r7!, {r5}
    3220:	416e      	adcs	r6, r5
    3222:	c240      	stmia	r2!, {r6}
    3224:	cb40      	ldmia	r3!, {r6}
    3226:	cf20      	ldmia	r7!, {r5}
    3228:	416e      	adcs	r6, r5
    322a:	c240      	stmia	r2!, {r6}
    322c:	cb40      	ldmia	r3!, {r6}
    322e:	cf20      	ldmia	r7!, {r5}
    3230:	416e      	adcs	r6, r5
    3232:	c240      	stmia	r2!, {r6}
    3234:	cb40      	ldmia	r3!, {r6}
    3236:	cf20      	ldmia	r7!, {r5}
    3238:	416e      	adcs	r6, r5
    323a:	c240      	stmia	r2!, {r6}
    323c:	cb40      	ldmia	r3!, {r6}
    323e:	cf20      	ldmia	r7!, {r5}
    3240:	416e      	adcs	r6, r5
    3242:	c240      	stmia	r2!, {r6}
    3244:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    3246:	bb80      	cbnz	r0, 32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3248:	4653      	mov	r3, sl
    324a:	6a1a      	ldr	r2, [r3, #32]
    324c:	69e3      	ldr	r3, [r4, #28]
    324e:	429a      	cmp	r2, r3
    3250:	d900      	bls.n	3254 <double_jacobian_secp256k1.part.2+0x104>
    3252:	e058      	b.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3254:	d329      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3256:	4653      	mov	r3, sl
    3258:	69da      	ldr	r2, [r3, #28]
    325a:	69a3      	ldr	r3, [r4, #24]
    325c:	429a      	cmp	r2, r3
    325e:	d900      	bls.n	3262 <double_jacobian_secp256k1.part.2+0x112>
    3260:	e051      	b.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3262:	d322      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3264:	4653      	mov	r3, sl
    3266:	699a      	ldr	r2, [r3, #24]
    3268:	6963      	ldr	r3, [r4, #20]
    326a:	429a      	cmp	r2, r3
    326c:	d84b      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    326e:	d31c      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3270:	4653      	mov	r3, sl
    3272:	695a      	ldr	r2, [r3, #20]
    3274:	6923      	ldr	r3, [r4, #16]
    3276:	429a      	cmp	r2, r3
    3278:	d845      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    327a:	d316      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    327c:	4653      	mov	r3, sl
    327e:	691a      	ldr	r2, [r3, #16]
    3280:	68e3      	ldr	r3, [r4, #12]
    3282:	429a      	cmp	r2, r3
    3284:	d83f      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3286:	d310      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3288:	4653      	mov	r3, sl
    328a:	68da      	ldr	r2, [r3, #12]
    328c:	68a3      	ldr	r3, [r4, #8]
    328e:	429a      	cmp	r2, r3
    3290:	d839      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3292:	d30a      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3294:	4653      	mov	r3, sl
    3296:	689a      	ldr	r2, [r3, #8]
    3298:	6863      	ldr	r3, [r4, #4]
    329a:	429a      	cmp	r2, r3
    329c:	d833      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    329e:	d304      	bcc.n	32aa <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    32a0:	4653      	mov	r3, sl
    32a2:	6822      	ldr	r2, [r4, #0]
    32a4:	685b      	ldr	r3, [r3, #4]
    32a6:	4293      	cmp	r3, r2
    32a8:	d82d      	bhi.n	3306 <double_jacobian_secp256k1.part.2+0x1b6>
    __asm__ volatile (
    32aa:	0023      	movs	r3, r4
    32ac:	9a01      	ldr	r2, [sp, #4]
    32ae:	2101      	movs	r1, #1
    32b0:	0020      	movs	r0, r4
    32b2:	2500      	movs	r5, #0
    32b4:	a605      	add	r6, pc, #20	; (adr r6, 32cc <double_jacobian_secp256k1.part.2+0x17c>)
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	46c0      	nop			; (mov r8, r8)
    32ba:	46c0      	nop			; (mov r8, r8)
    32bc:	46c0      	nop			; (mov r8, r8)
    32be:	46c0      	nop			; (mov r8, r8)
    32c0:	1989      	adds	r1, r1, r6
    32c2:	c840      	ldmia	r0!, {r6}
    32c4:	ca80      	ldmia	r2!, {r7}
    32c6:	1bf6      	subs	r6, r6, r7
    32c8:	c340      	stmia	r3!, {r6}
    32ca:	4708      	bx	r1
    32cc:	c840      	ldmia	r0!, {r6}
    32ce:	ca80      	ldmia	r2!, {r7}
    32d0:	41be      	sbcs	r6, r7
    32d2:	c340      	stmia	r3!, {r6}
    32d4:	c840      	ldmia	r0!, {r6}
    32d6:	ca80      	ldmia	r2!, {r7}
    32d8:	41be      	sbcs	r6, r7
    32da:	c340      	stmia	r3!, {r6}
    32dc:	c840      	ldmia	r0!, {r6}
    32de:	ca80      	ldmia	r2!, {r7}
    32e0:	41be      	sbcs	r6, r7
    32e2:	c340      	stmia	r3!, {r6}
    32e4:	c840      	ldmia	r0!, {r6}
    32e6:	ca80      	ldmia	r2!, {r7}
    32e8:	41be      	sbcs	r6, r7
    32ea:	c340      	stmia	r3!, {r6}
    32ec:	c840      	ldmia	r0!, {r6}
    32ee:	ca80      	ldmia	r2!, {r7}
    32f0:	41be      	sbcs	r6, r7
    32f2:	c340      	stmia	r3!, {r6}
    32f4:	c840      	ldmia	r0!, {r6}
    32f6:	ca80      	ldmia	r2!, {r7}
    32f8:	41be      	sbcs	r6, r7
    32fa:	c340      	stmia	r3!, {r6}
    32fc:	c840      	ldmia	r0!, {r6}
    32fe:	ca80      	ldmia	r2!, {r7}
    3300:	41be      	sbcs	r6, r7
    3302:	c340      	stmia	r3!, {r6}
    3304:	416d      	adcs	r5, r5
    __asm__ volatile (
    3306:	0023      	movs	r3, r4
    3308:	465a      	mov	r2, fp
    330a:	2101      	movs	r1, #1
    330c:	0027      	movs	r7, r4
    330e:	2000      	movs	r0, #0
    3310:	a506      	add	r5, pc, #24	; (adr r5, 332c <double_jacobian_secp256k1.part.2+0x1dc>)
    3312:	46c0      	nop			; (mov r8, r8)
    3314:	46c0      	nop			; (mov r8, r8)
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	46c0      	nop			; (mov r8, r8)
    331a:	46c0      	nop			; (mov r8, r8)
    331c:	46c0      	nop			; (mov r8, r8)
    331e:	46c0      	nop			; (mov r8, r8)
    3320:	1949      	adds	r1, r1, r5
    3322:	cf20      	ldmia	r7!, {r5}
    3324:	ca40      	ldmia	r2!, {r6}
    3326:	19ad      	adds	r5, r5, r6
    3328:	c320      	stmia	r3!, {r5}
    332a:	4708      	bx	r1
    332c:	cf20      	ldmia	r7!, {r5}
    332e:	ca40      	ldmia	r2!, {r6}
    3330:	4175      	adcs	r5, r6
    3332:	c320      	stmia	r3!, {r5}
    3334:	cf20      	ldmia	r7!, {r5}
    3336:	ca40      	ldmia	r2!, {r6}
    3338:	4175      	adcs	r5, r6
    333a:	c320      	stmia	r3!, {r5}
    333c:	cf20      	ldmia	r7!, {r5}
    333e:	ca40      	ldmia	r2!, {r6}
    3340:	4175      	adcs	r5, r6
    3342:	c320      	stmia	r3!, {r5}
    3344:	cf20      	ldmia	r7!, {r5}
    3346:	ca40      	ldmia	r2!, {r6}
    3348:	4175      	adcs	r5, r6
    334a:	c320      	stmia	r3!, {r5}
    334c:	cf20      	ldmia	r7!, {r5}
    334e:	ca40      	ldmia	r2!, {r6}
    3350:	4175      	adcs	r5, r6
    3352:	c320      	stmia	r3!, {r5}
    3354:	cf20      	ldmia	r7!, {r5}
    3356:	ca40      	ldmia	r2!, {r6}
    3358:	4175      	adcs	r5, r6
    335a:	c320      	stmia	r3!, {r5}
    335c:	cf20      	ldmia	r7!, {r5}
    335e:	ca40      	ldmia	r2!, {r6}
    3360:	4175      	adcs	r5, r6
    3362:	c320      	stmia	r3!, {r5}
    3364:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    3366:	bb80      	cbnz	r0, 33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3368:	4653      	mov	r3, sl
    336a:	6a1a      	ldr	r2, [r3, #32]
    336c:	69e3      	ldr	r3, [r4, #28]
    336e:	429a      	cmp	r2, r3
    3370:	d900      	bls.n	3374 <double_jacobian_secp256k1.part.2+0x224>
    3372:	e058      	b.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3374:	d329      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3376:	4653      	mov	r3, sl
    3378:	69da      	ldr	r2, [r3, #28]
    337a:	69a3      	ldr	r3, [r4, #24]
    337c:	429a      	cmp	r2, r3
    337e:	d900      	bls.n	3382 <double_jacobian_secp256k1.part.2+0x232>
    3380:	e051      	b.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3382:	d322      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3384:	4653      	mov	r3, sl
    3386:	699a      	ldr	r2, [r3, #24]
    3388:	6963      	ldr	r3, [r4, #20]
    338a:	429a      	cmp	r2, r3
    338c:	d84b      	bhi.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    338e:	d31c      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3390:	4653      	mov	r3, sl
    3392:	695a      	ldr	r2, [r3, #20]
    3394:	6923      	ldr	r3, [r4, #16]
    3396:	429a      	cmp	r2, r3
    3398:	d845      	bhi.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    339a:	d316      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    339c:	4653      	mov	r3, sl
    339e:	691a      	ldr	r2, [r3, #16]
    33a0:	68e3      	ldr	r3, [r4, #12]
    33a2:	429a      	cmp	r2, r3
    33a4:	d83f      	bhi.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    33a6:	d310      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    33a8:	4653      	mov	r3, sl
    33aa:	68da      	ldr	r2, [r3, #12]
    33ac:	68a3      	ldr	r3, [r4, #8]
    33ae:	429a      	cmp	r2, r3
    33b0:	d839      	bhi.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    33b2:	d30a      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    33b4:	4653      	mov	r3, sl
    33b6:	689a      	ldr	r2, [r3, #8]
    33b8:	6863      	ldr	r3, [r4, #4]
    33ba:	429a      	cmp	r2, r3
    33bc:	d833      	bhi.n	3426 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    33be:	d304      	bcc.n	33ca <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    33c0:	4652      	mov	r2, sl
    33c2:	6823      	ldr	r3, [r4, #0]
    33c4:	6852      	ldr	r2, [r2, #4]
    33c6:	429a      	cmp	r2, r3
    33c8:	d82e      	bhi.n	3428 <double_jacobian_secp256k1.part.2+0x2d8>
    __asm__ volatile (
    33ca:	0023      	movs	r3, r4
    33cc:	9a01      	ldr	r2, [sp, #4]
    33ce:	2101      	movs	r1, #1
    33d0:	0020      	movs	r0, r4
    33d2:	2500      	movs	r5, #0
    33d4:	a605      	add	r6, pc, #20	; (adr r6, 33ec <double_jacobian_secp256k1.part.2+0x29c>)
    33d6:	46c0      	nop			; (mov r8, r8)
    33d8:	46c0      	nop			; (mov r8, r8)
    33da:	46c0      	nop			; (mov r8, r8)
    33dc:	46c0      	nop			; (mov r8, r8)
    33de:	46c0      	nop			; (mov r8, r8)
    33e0:	1989      	adds	r1, r1, r6
    33e2:	c840      	ldmia	r0!, {r6}
    33e4:	ca80      	ldmia	r2!, {r7}
    33e6:	1bf6      	subs	r6, r6, r7
    33e8:	c340      	stmia	r3!, {r6}
    33ea:	4708      	bx	r1
    33ec:	c840      	ldmia	r0!, {r6}
    33ee:	ca80      	ldmia	r2!, {r7}
    33f0:	41be      	sbcs	r6, r7
    33f2:	c340      	stmia	r3!, {r6}
    33f4:	c840      	ldmia	r0!, {r6}
    33f6:	ca80      	ldmia	r2!, {r7}
    33f8:	41be      	sbcs	r6, r7
    33fa:	c340      	stmia	r3!, {r6}
    33fc:	c840      	ldmia	r0!, {r6}
    33fe:	ca80      	ldmia	r2!, {r7}
    3400:	41be      	sbcs	r6, r7
    3402:	c340      	stmia	r3!, {r6}
    3404:	c840      	ldmia	r0!, {r6}
    3406:	ca80      	ldmia	r2!, {r7}
    3408:	41be      	sbcs	r6, r7
    340a:	c340      	stmia	r3!, {r6}
    340c:	c840      	ldmia	r0!, {r6}
    340e:	ca80      	ldmia	r2!, {r7}
    3410:	41be      	sbcs	r6, r7
    3412:	c340      	stmia	r3!, {r6}
    3414:	c840      	ldmia	r0!, {r6}
    3416:	ca80      	ldmia	r2!, {r7}
    3418:	41be      	sbcs	r6, r7
    341a:	c340      	stmia	r3!, {r6}
    341c:	c840      	ldmia	r0!, {r6}
    341e:	ca80      	ldmia	r2!, {r7}
    3420:	41be      	sbcs	r6, r7
    3422:	c340      	stmia	r3!, {r6}
    3424:	416d      	adcs	r5, r5
    3426:	6823      	ldr	r3, [r4, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    3428:	2201      	movs	r2, #1
    if (uECC_vli_testBit(Y1, 0)) {
    342a:	4213      	tst	r3, r2
    342c:	d000      	beq.n	3430 <double_jacobian_secp256k1.part.2+0x2e0>
    342e:	e1e1      	b.n	37f4 <double_jacobian_secp256k1.part.2+0x6a4>
        uECC_word_t temp = *vli;
    3430:	69e2      	ldr	r2, [r4, #28]
    while (vli-- > end) {
    3432:	f240 0918 	movw	r9, #24
        *vli = (temp >> 1) | carry;
    3436:	0851      	lsrs	r1, r2, #1
    3438:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
    343a:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    343c:	0022      	movs	r2, r4
    343e:	321c      	adds	r2, #28
    3440:	44a1      	add	r9, r4
    3442:	4294      	cmp	r4, r2
    3444:	d23a      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
    3446:	f240 0c14 	movw	ip, #20
        uECC_word_t temp = *vli;
    344a:	69a2      	ldr	r2, [r4, #24]
    while (vli-- > end) {
    344c:	44a4      	add	ip, r4
        *vli = (temp >> 1) | carry;
    344e:	0850      	lsrs	r0, r2, #1
    3450:	4301      	orrs	r1, r0
    3452:	61a1      	str	r1, [r4, #24]
        carry = temp << (uECC_WORD_BITS - 1);
    3454:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    3456:	454c      	cmp	r4, r9
    3458:	d230      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
    345a:	f240 0910 	movw	r9, #16
        uECC_word_t temp = *vli;
    345e:	6962      	ldr	r2, [r4, #20]
    while (vli-- > end) {
    3460:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    3462:	0850      	lsrs	r0, r2, #1
    3464:	4301      	orrs	r1, r0
    3466:	6161      	str	r1, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
    3468:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    346a:	4564      	cmp	r4, ip
    346c:	d226      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
    346e:	f240 0c0c 	movw	ip, #12
        uECC_word_t temp = *vli;
    3472:	6922      	ldr	r2, [r4, #16]
    while (vli-- > end) {
    3474:	44a4      	add	ip, r4
        *vli = (temp >> 1) | carry;
    3476:	0850      	lsrs	r0, r2, #1
    3478:	4301      	orrs	r1, r0
    347a:	6121      	str	r1, [r4, #16]
        carry = temp << (uECC_WORD_BITS - 1);
    347c:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    347e:	454c      	cmp	r4, r9
    3480:	d21c      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
    3482:	f240 0908 	movw	r9, #8
        uECC_word_t temp = *vli;
    3486:	68e2      	ldr	r2, [r4, #12]
    while (vli-- > end) {
    3488:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    348a:	0850      	lsrs	r0, r2, #1
    348c:	4301      	orrs	r1, r0
    348e:	60e1      	str	r1, [r4, #12]
        carry = temp << (uECC_WORD_BITS - 1);
    3490:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    3492:	4564      	cmp	r4, ip
    3494:	d212      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
        uECC_word_t temp = *vli;
    3496:	68a2      	ldr	r2, [r4, #8]
        *vli = (temp >> 1) | carry;
    3498:	0850      	lsrs	r0, r2, #1
    349a:	4301      	orrs	r1, r0
    349c:	60a1      	str	r1, [r4, #8]
        carry = temp << (uECC_WORD_BITS - 1);
    349e:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    34a0:	1d22      	adds	r2, r4, #4
    34a2:	4694      	mov	ip, r2
    34a4:	454c      	cmp	r4, r9
    34a6:	d209      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
        uECC_word_t temp = *vli;
    34a8:	6862      	ldr	r2, [r4, #4]
        *vli = (temp >> 1) | carry;
    34aa:	0850      	lsrs	r0, r2, #1
    34ac:	4301      	orrs	r1, r0
    34ae:	6061      	str	r1, [r4, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    34b0:	07d2      	lsls	r2, r2, #31
    while (vli-- > end) {
    34b2:	4564      	cmp	r4, ip
    34b4:	d202      	bcs.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
        *vli = (temp >> 1) | carry;
    34b6:	085b      	lsrs	r3, r3, #1
    34b8:	4313      	orrs	r3, r2
    34ba:	6023      	str	r3, [r4, #0]
    uECC_vli_mult(product, left, right, curve->num_words);
    34bc:	4653      	mov	r3, sl
    34be:	781b      	ldrb	r3, [r3, #0]
    34c0:	0022      	movs	r2, r4
    34c2:	0021      	movs	r1, r4
    34c4:	a812      	add	r0, sp, #72	; 0x48
    34c6:	b25b      	sxtb	r3, r3
    34c8:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    34ca:	4652      	mov	r2, sl
    34cc:	23b0      	movs	r3, #176	; 0xb0
    34ce:	f240 0901 	movw	r9, #1
    34d2:	58d3      	ldr	r3, [r2, r3]
    34d4:	a912      	add	r1, sp, #72	; 0x48
    34d6:	4658      	mov	r0, fp
    34d8:	4798      	blx	r3
    34da:	465f      	mov	r7, fp
    34dc:	465b      	mov	r3, fp
    34de:	aa02      	add	r2, sp, #8
    34e0:	4649      	mov	r1, r9
    34e2:	2000      	movs	r0, #0
    34e4:	a505      	add	r5, pc, #20	; (adr r5, 34fc <double_jacobian_secp256k1.part.2+0x3ac>)
    34e6:	46c0      	nop			; (mov r8, r8)
    34e8:	46c0      	nop			; (mov r8, r8)
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	46c0      	nop			; (mov r8, r8)
    34ee:	46c0      	nop			; (mov r8, r8)
    34f0:	1949      	adds	r1, r1, r5
    34f2:	cf20      	ldmia	r7!, {r5}
    34f4:	ca40      	ldmia	r2!, {r6}
    34f6:	1bad      	subs	r5, r5, r6
    34f8:	c320      	stmia	r3!, {r5}
    34fa:	4708      	bx	r1
    34fc:	cf20      	ldmia	r7!, {r5}
    34fe:	ca40      	ldmia	r2!, {r6}
    3500:	41b5      	sbcs	r5, r6
    3502:	c320      	stmia	r3!, {r5}
    3504:	cf20      	ldmia	r7!, {r5}
    3506:	ca40      	ldmia	r2!, {r6}
    3508:	41b5      	sbcs	r5, r6
    350a:	c320      	stmia	r3!, {r5}
    350c:	cf20      	ldmia	r7!, {r5}
    350e:	ca40      	ldmia	r2!, {r6}
    3510:	41b5      	sbcs	r5, r6
    3512:	c320      	stmia	r3!, {r5}
    3514:	cf20      	ldmia	r7!, {r5}
    3516:	ca40      	ldmia	r2!, {r6}
    3518:	41b5      	sbcs	r5, r6
    351a:	c320      	stmia	r3!, {r5}
    351c:	cf20      	ldmia	r7!, {r5}
    351e:	ca40      	ldmia	r2!, {r6}
    3520:	41b5      	sbcs	r5, r6
    3522:	c320      	stmia	r3!, {r5}
    3524:	cf20      	ldmia	r7!, {r5}
    3526:	ca40      	ldmia	r2!, {r6}
    3528:	41b5      	sbcs	r5, r6
    352a:	c320      	stmia	r3!, {r5}
    352c:	cf20      	ldmia	r7!, {r5}
    352e:	ca40      	ldmia	r2!, {r6}
    3530:	41b5      	sbcs	r5, r6
    3532:	c320      	stmia	r3!, {r5}
    3534:	4140      	adcs	r0, r0
    if (l_borrow) {
    3536:	2800      	cmp	r0, #0
    3538:	d12d      	bne.n	3596 <double_jacobian_secp256k1.part.2+0x446>
    __asm__ volatile (
    353a:	465b      	mov	r3, fp
    353c:	9901      	ldr	r1, [sp, #4]
    353e:	464a      	mov	r2, r9
    3540:	4658      	mov	r0, fp
    3542:	2500      	movs	r5, #0
    3544:	a605      	add	r6, pc, #20	; (adr r6, 355c <double_jacobian_secp256k1.part.2+0x40c>)
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	46c0      	nop			; (mov r8, r8)
    354a:	46c0      	nop			; (mov r8, r8)
    354c:	46c0      	nop			; (mov r8, r8)
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	1992      	adds	r2, r2, r6
    3552:	c840      	ldmia	r0!, {r6}
    3554:	c980      	ldmia	r1!, {r7}
    3556:	19f6      	adds	r6, r6, r7
    3558:	c340      	stmia	r3!, {r6}
    355a:	4710      	bx	r2
    355c:	c840      	ldmia	r0!, {r6}
    355e:	c980      	ldmia	r1!, {r7}
    3560:	417e      	adcs	r6, r7
    3562:	c340      	stmia	r3!, {r6}
    3564:	c840      	ldmia	r0!, {r6}
    3566:	c980      	ldmia	r1!, {r7}
    3568:	417e      	adcs	r6, r7
    356a:	c340      	stmia	r3!, {r6}
    356c:	c840      	ldmia	r0!, {r6}
    356e:	c980      	ldmia	r1!, {r7}
    3570:	417e      	adcs	r6, r7
    3572:	c340      	stmia	r3!, {r6}
    3574:	c840      	ldmia	r0!, {r6}
    3576:	c980      	ldmia	r1!, {r7}
    3578:	417e      	adcs	r6, r7
    357a:	c340      	stmia	r3!, {r6}
    357c:	c840      	ldmia	r0!, {r6}
    357e:	c980      	ldmia	r1!, {r7}
    3580:	417e      	adcs	r6, r7
    3582:	c340      	stmia	r3!, {r6}
    3584:	c840      	ldmia	r0!, {r6}
    3586:	c980      	ldmia	r1!, {r7}
    3588:	417e      	adcs	r6, r7
    358a:	c340      	stmia	r3!, {r6}
    358c:	c840      	ldmia	r0!, {r6}
    358e:	c980      	ldmia	r1!, {r7}
    3590:	417e      	adcs	r6, r7
    3592:	c340      	stmia	r3!, {r6}
    3594:	416d      	adcs	r5, r5
    __asm__ volatile (
    3596:	f240 0901 	movw	r9, #1
    359a:	465b      	mov	r3, fp
    359c:	aa02      	add	r2, sp, #8
    359e:	4649      	mov	r1, r9
    35a0:	465f      	mov	r7, fp
    35a2:	2000      	movs	r0, #0
    35a4:	a505      	add	r5, pc, #20	; (adr r5, 35bc <double_jacobian_secp256k1.part.2+0x46c>)
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	46c0      	nop			; (mov r8, r8)
    35aa:	46c0      	nop			; (mov r8, r8)
    35ac:	46c0      	nop			; (mov r8, r8)
    35ae:	46c0      	nop			; (mov r8, r8)
    35b0:	1949      	adds	r1, r1, r5
    35b2:	cf20      	ldmia	r7!, {r5}
    35b4:	ca40      	ldmia	r2!, {r6}
    35b6:	1bad      	subs	r5, r5, r6
    35b8:	c320      	stmia	r3!, {r5}
    35ba:	4708      	bx	r1
    35bc:	cf20      	ldmia	r7!, {r5}
    35be:	ca40      	ldmia	r2!, {r6}
    35c0:	41b5      	sbcs	r5, r6
    35c2:	c320      	stmia	r3!, {r5}
    35c4:	cf20      	ldmia	r7!, {r5}
    35c6:	ca40      	ldmia	r2!, {r6}
    35c8:	41b5      	sbcs	r5, r6
    35ca:	c320      	stmia	r3!, {r5}
    35cc:	cf20      	ldmia	r7!, {r5}
    35ce:	ca40      	ldmia	r2!, {r6}
    35d0:	41b5      	sbcs	r5, r6
    35d2:	c320      	stmia	r3!, {r5}
    35d4:	cf20      	ldmia	r7!, {r5}
    35d6:	ca40      	ldmia	r2!, {r6}
    35d8:	41b5      	sbcs	r5, r6
    35da:	c320      	stmia	r3!, {r5}
    35dc:	cf20      	ldmia	r7!, {r5}
    35de:	ca40      	ldmia	r2!, {r6}
    35e0:	41b5      	sbcs	r5, r6
    35e2:	c320      	stmia	r3!, {r5}
    35e4:	cf20      	ldmia	r7!, {r5}
    35e6:	ca40      	ldmia	r2!, {r6}
    35e8:	41b5      	sbcs	r5, r6
    35ea:	c320      	stmia	r3!, {r5}
    35ec:	cf20      	ldmia	r7!, {r5}
    35ee:	ca40      	ldmia	r2!, {r6}
    35f0:	41b5      	sbcs	r5, r6
    35f2:	c320      	stmia	r3!, {r5}
    35f4:	4140      	adcs	r0, r0
    35f6:	2800      	cmp	r0, #0
    35f8:	d12d      	bne.n	3656 <double_jacobian_secp256k1.part.2+0x506>
    __asm__ volatile (
    35fa:	465b      	mov	r3, fp
    35fc:	9901      	ldr	r1, [sp, #4]
    35fe:	464a      	mov	r2, r9
    3600:	4658      	mov	r0, fp
    3602:	2500      	movs	r5, #0
    3604:	a605      	add	r6, pc, #20	; (adr r6, 361c <double_jacobian_secp256k1.part.2+0x4cc>)
    3606:	46c0      	nop			; (mov r8, r8)
    3608:	46c0      	nop			; (mov r8, r8)
    360a:	46c0      	nop			; (mov r8, r8)
    360c:	46c0      	nop			; (mov r8, r8)
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	1992      	adds	r2, r2, r6
    3612:	c840      	ldmia	r0!, {r6}
    3614:	c980      	ldmia	r1!, {r7}
    3616:	19f6      	adds	r6, r6, r7
    3618:	c340      	stmia	r3!, {r6}
    361a:	4710      	bx	r2
    361c:	c840      	ldmia	r0!, {r6}
    361e:	c980      	ldmia	r1!, {r7}
    3620:	417e      	adcs	r6, r7
    3622:	c340      	stmia	r3!, {r6}
    3624:	c840      	ldmia	r0!, {r6}
    3626:	c980      	ldmia	r1!, {r7}
    3628:	417e      	adcs	r6, r7
    362a:	c340      	stmia	r3!, {r6}
    362c:	c840      	ldmia	r0!, {r6}
    362e:	c980      	ldmia	r1!, {r7}
    3630:	417e      	adcs	r6, r7
    3632:	c340      	stmia	r3!, {r6}
    3634:	c840      	ldmia	r0!, {r6}
    3636:	c980      	ldmia	r1!, {r7}
    3638:	417e      	adcs	r6, r7
    363a:	c340      	stmia	r3!, {r6}
    363c:	c840      	ldmia	r0!, {r6}
    363e:	c980      	ldmia	r1!, {r7}
    3640:	417e      	adcs	r6, r7
    3642:	c340      	stmia	r3!, {r6}
    3644:	c840      	ldmia	r0!, {r6}
    3646:	c980      	ldmia	r1!, {r7}
    3648:	417e      	adcs	r6, r7
    364a:	c340      	stmia	r3!, {r6}
    364c:	c840      	ldmia	r0!, {r6}
    364e:	c980      	ldmia	r1!, {r7}
    3650:	417e      	adcs	r6, r7
    3652:	c340      	stmia	r3!, {r6}
    3654:	416d      	adcs	r5, r5
    __asm__ volatile (
    3656:	f240 0c01 	movw	ip, #1
    365a:	ab02      	add	r3, sp, #8
    365c:	465e      	mov	r6, fp
    365e:	4662      	mov	r2, ip
    3660:	001f      	movs	r7, r3
    3662:	2000      	movs	r0, #0
    3664:	a505      	add	r5, pc, #20	; (adr r5, 367c <double_jacobian_secp256k1.part.2+0x52c>)
    3666:	46c0      	nop			; (mov r8, r8)
    3668:	46c0      	nop			; (mov r8, r8)
    366a:	46c0      	nop			; (mov r8, r8)
    366c:	46c0      	nop			; (mov r8, r8)
    366e:	46c0      	nop			; (mov r8, r8)
    3670:	1952      	adds	r2, r2, r5
    3672:	cf20      	ldmia	r7!, {r5}
    3674:	ce02      	ldmia	r6!, {r1}
    3676:	1a6d      	subs	r5, r5, r1
    3678:	c320      	stmia	r3!, {r5}
    367a:	4710      	bx	r2
    367c:	cf20      	ldmia	r7!, {r5}
    367e:	ce02      	ldmia	r6!, {r1}
    3680:	418d      	sbcs	r5, r1
    3682:	c320      	stmia	r3!, {r5}
    3684:	cf20      	ldmia	r7!, {r5}
    3686:	ce02      	ldmia	r6!, {r1}
    3688:	418d      	sbcs	r5, r1
    368a:	c320      	stmia	r3!, {r5}
    368c:	cf20      	ldmia	r7!, {r5}
    368e:	ce02      	ldmia	r6!, {r1}
    3690:	418d      	sbcs	r5, r1
    3692:	c320      	stmia	r3!, {r5}
    3694:	cf20      	ldmia	r7!, {r5}
    3696:	ce02      	ldmia	r6!, {r1}
    3698:	418d      	sbcs	r5, r1
    369a:	c320      	stmia	r3!, {r5}
    369c:	cf20      	ldmia	r7!, {r5}
    369e:	ce02      	ldmia	r6!, {r1}
    36a0:	418d      	sbcs	r5, r1
    36a2:	c320      	stmia	r3!, {r5}
    36a4:	cf20      	ldmia	r7!, {r5}
    36a6:	ce02      	ldmia	r6!, {r1}
    36a8:	418d      	sbcs	r5, r1
    36aa:	c320      	stmia	r3!, {r5}
    36ac:	cf20      	ldmia	r7!, {r5}
    36ae:	ce02      	ldmia	r6!, {r1}
    36b0:	418d      	sbcs	r5, r1
    36b2:	c320      	stmia	r3!, {r5}
    36b4:	4140      	adcs	r0, r0
    36b6:	2800      	cmp	r0, #0
    36b8:	d12d      	bne.n	3716 <double_jacobian_secp256k1.part.2+0x5c6>
    __asm__ volatile (
    36ba:	ab02      	add	r3, sp, #8
    36bc:	9801      	ldr	r0, [sp, #4]
    36be:	4662      	mov	r2, ip
    36c0:	0019      	movs	r1, r3
    36c2:	2600      	movs	r6, #0
    36c4:	a505      	add	r5, pc, #20	; (adr r5, 36dc <double_jacobian_secp256k1.part.2+0x58c>)
    36c6:	46c0      	nop			; (mov r8, r8)
    36c8:	46c0      	nop			; (mov r8, r8)
    36ca:	46c0      	nop			; (mov r8, r8)
    36cc:	46c0      	nop			; (mov r8, r8)
    36ce:	46c0      	nop			; (mov r8, r8)
    36d0:	1952      	adds	r2, r2, r5
    36d2:	c920      	ldmia	r1!, {r5}
    36d4:	c880      	ldmia	r0!, {r7}
    36d6:	19ed      	adds	r5, r5, r7
    36d8:	c320      	stmia	r3!, {r5}
    36da:	4710      	bx	r2
    36dc:	c920      	ldmia	r1!, {r5}
    36de:	c880      	ldmia	r0!, {r7}
    36e0:	417d      	adcs	r5, r7
    36e2:	c320      	stmia	r3!, {r5}
    36e4:	c920      	ldmia	r1!, {r5}
    36e6:	c880      	ldmia	r0!, {r7}
    36e8:	417d      	adcs	r5, r7
    36ea:	c320      	stmia	r3!, {r5}
    36ec:	c920      	ldmia	r1!, {r5}
    36ee:	c880      	ldmia	r0!, {r7}
    36f0:	417d      	adcs	r5, r7
    36f2:	c320      	stmia	r3!, {r5}
    36f4:	c920      	ldmia	r1!, {r5}
    36f6:	c880      	ldmia	r0!, {r7}
    36f8:	417d      	adcs	r5, r7
    36fa:	c320      	stmia	r3!, {r5}
    36fc:	c920      	ldmia	r1!, {r5}
    36fe:	c880      	ldmia	r0!, {r7}
    3700:	417d      	adcs	r5, r7
    3702:	c320      	stmia	r3!, {r5}
    3704:	c920      	ldmia	r1!, {r5}
    3706:	c880      	ldmia	r0!, {r7}
    3708:	417d      	adcs	r5, r7
    370a:	c320      	stmia	r3!, {r5}
    370c:	c920      	ldmia	r1!, {r5}
    370e:	c880      	ldmia	r0!, {r7}
    3710:	417d      	adcs	r5, r7
    3712:	c320      	stmia	r3!, {r5}
    3714:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    3716:	4653      	mov	r3, sl
    3718:	781b      	ldrb	r3, [r3, #0]
    371a:	aa02      	add	r2, sp, #8
    371c:	0021      	movs	r1, r4
    371e:	a812      	add	r0, sp, #72	; 0x48
    3720:	b25b      	sxtb	r3, r3
    3722:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    3724:	4652      	mov	r2, sl
    3726:	23b0      	movs	r3, #176	; 0xb0
    3728:	a912      	add	r1, sp, #72	; 0x48
    372a:	58d3      	ldr	r3, [r2, r3]
    372c:	0020      	movs	r0, r4
    372e:	4798      	blx	r3
    __asm__ volatile (
    3730:	f240 0c01 	movw	ip, #1
    3734:	0023      	movs	r3, r4
    3736:	aa0a      	add	r2, sp, #40	; 0x28
    3738:	4661      	mov	r1, ip
    373a:	0026      	movs	r6, r4
    373c:	2500      	movs	r5, #0
    373e:	a703      	add	r7, pc, #12	; (adr r7, 374c <double_jacobian_secp256k1.part.2+0x5fc>)
    3740:	19c9      	adds	r1, r1, r7
    3742:	ce80      	ldmia	r6!, {r7}
    3744:	ca01      	ldmia	r2!, {r0}
    3746:	1a3f      	subs	r7, r7, r0
    3748:	c380      	stmia	r3!, {r7}
    374a:	4708      	bx	r1
    374c:	ce80      	ldmia	r6!, {r7}
    374e:	ca01      	ldmia	r2!, {r0}
    3750:	4187      	sbcs	r7, r0
    3752:	c380      	stmia	r3!, {r7}
    3754:	ce80      	ldmia	r6!, {r7}
    3756:	ca01      	ldmia	r2!, {r0}
    3758:	4187      	sbcs	r7, r0
    375a:	c380      	stmia	r3!, {r7}
    375c:	ce80      	ldmia	r6!, {r7}
    375e:	ca01      	ldmia	r2!, {r0}
    3760:	4187      	sbcs	r7, r0
    3762:	c380      	stmia	r3!, {r7}
    3764:	ce80      	ldmia	r6!, {r7}
    3766:	ca01      	ldmia	r2!, {r0}
    3768:	4187      	sbcs	r7, r0
    376a:	c380      	stmia	r3!, {r7}
    376c:	ce80      	ldmia	r6!, {r7}
    376e:	ca01      	ldmia	r2!, {r0}
    3770:	4187      	sbcs	r7, r0
    3772:	c380      	stmia	r3!, {r7}
    3774:	ce80      	ldmia	r6!, {r7}
    3776:	ca01      	ldmia	r2!, {r0}
    3778:	4187      	sbcs	r7, r0
    377a:	c380      	stmia	r3!, {r7}
    377c:	ce80      	ldmia	r6!, {r7}
    377e:	ca01      	ldmia	r2!, {r0}
    3780:	4187      	sbcs	r7, r0
    3782:	c380      	stmia	r3!, {r7}
    3784:	416d      	adcs	r5, r5
    if (l_borrow) {
    3786:	2d00      	cmp	r5, #0
    3788:	d12d      	bne.n	37e6 <double_jacobian_secp256k1.part.2+0x696>
    __asm__ volatile (
    378a:	9f01      	ldr	r7, [sp, #4]
    378c:	4663      	mov	r3, ip
    378e:	0022      	movs	r2, r4
    3790:	2100      	movs	r1, #0
    3792:	a006      	add	r0, pc, #24	; (adr r0, 37ac <double_jacobian_secp256k1.part.2+0x65c>)
    3794:	46c0      	nop			; (mov r8, r8)
    3796:	46c0      	nop			; (mov r8, r8)
    3798:	46c0      	nop			; (mov r8, r8)
    379a:	46c0      	nop			; (mov r8, r8)
    379c:	46c0      	nop			; (mov r8, r8)
    379e:	46c0      	nop			; (mov r8, r8)
    37a0:	181b      	adds	r3, r3, r0
    37a2:	ca01      	ldmia	r2!, {r0}
    37a4:	cf20      	ldmia	r7!, {r5}
    37a6:	1940      	adds	r0, r0, r5
    37a8:	c401      	stmia	r4!, {r0}
    37aa:	4718      	bx	r3
    37ac:	ca01      	ldmia	r2!, {r0}
    37ae:	cf20      	ldmia	r7!, {r5}
    37b0:	4168      	adcs	r0, r5
    37b2:	c401      	stmia	r4!, {r0}
    37b4:	ca01      	ldmia	r2!, {r0}
    37b6:	cf20      	ldmia	r7!, {r5}
    37b8:	4168      	adcs	r0, r5
    37ba:	c401      	stmia	r4!, {r0}
    37bc:	ca01      	ldmia	r2!, {r0}
    37be:	cf20      	ldmia	r7!, {r5}
    37c0:	4168      	adcs	r0, r5
    37c2:	c401      	stmia	r4!, {r0}
    37c4:	ca01      	ldmia	r2!, {r0}
    37c6:	cf20      	ldmia	r7!, {r5}
    37c8:	4168      	adcs	r0, r5
    37ca:	c401      	stmia	r4!, {r0}
    37cc:	ca01      	ldmia	r2!, {r0}
    37ce:	cf20      	ldmia	r7!, {r5}
    37d0:	4168      	adcs	r0, r5
    37d2:	c401      	stmia	r4!, {r0}
    37d4:	ca01      	ldmia	r2!, {r0}
    37d6:	cf20      	ldmia	r7!, {r5}
    37d8:	4168      	adcs	r0, r5
    37da:	c401      	stmia	r4!, {r0}
    37dc:	ca01      	ldmia	r2!, {r0}
    37de:	cf20      	ldmia	r7!, {r5}
    37e0:	4168      	adcs	r0, r5
    37e2:	c401      	stmia	r4!, {r0}
    37e4:	4149      	adcs	r1, r1
}
    37e6:	b023      	add	sp, #140	; 0x8c
    37e8:	bc3c      	pop	{r2, r3, r4, r5}
    37ea:	4690      	mov	r8, r2
    37ec:	4699      	mov	r9, r3
    37ee:	46a2      	mov	sl, r4
    37f0:	46ab      	mov	fp, r5
    37f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37f4:	0013      	movs	r3, r2
    37f6:	0021      	movs	r1, r4
    37f8:	9801      	ldr	r0, [sp, #4]
    37fa:	0022      	movs	r2, r4
    37fc:	2500      	movs	r5, #0
    37fe:	a603      	add	r6, pc, #12	; (adr r6, 380c <double_jacobian_secp256k1.part.2+0x6bc>)
    3800:	199b      	adds	r3, r3, r6
    3802:	ca40      	ldmia	r2!, {r6}
    3804:	c880      	ldmia	r0!, {r7}
    3806:	19f6      	adds	r6, r6, r7
    3808:	c140      	stmia	r1!, {r6}
    380a:	4718      	bx	r3
    380c:	ca40      	ldmia	r2!, {r6}
    380e:	c880      	ldmia	r0!, {r7}
    3810:	417e      	adcs	r6, r7
    3812:	c140      	stmia	r1!, {r6}
    3814:	ca40      	ldmia	r2!, {r6}
    3816:	c880      	ldmia	r0!, {r7}
    3818:	417e      	adcs	r6, r7
    381a:	c140      	stmia	r1!, {r6}
    381c:	ca40      	ldmia	r2!, {r6}
    381e:	c880      	ldmia	r0!, {r7}
    3820:	417e      	adcs	r6, r7
    3822:	c140      	stmia	r1!, {r6}
    3824:	ca40      	ldmia	r2!, {r6}
    3826:	c880      	ldmia	r0!, {r7}
    3828:	417e      	adcs	r6, r7
    382a:	c140      	stmia	r1!, {r6}
    382c:	ca40      	ldmia	r2!, {r6}
    382e:	c880      	ldmia	r0!, {r7}
    3830:	417e      	adcs	r6, r7
    3832:	c140      	stmia	r1!, {r6}
    3834:	ca40      	ldmia	r2!, {r6}
    3836:	c880      	ldmia	r0!, {r7}
    3838:	417e      	adcs	r6, r7
    383a:	c140      	stmia	r1!, {r6}
    383c:	ca40      	ldmia	r2!, {r6}
    383e:	c880      	ldmia	r0!, {r7}
    3840:	417e      	adcs	r6, r7
    3842:	c140      	stmia	r1!, {r6}
    3844:	416d      	adcs	r5, r5
    while (vli-- > end) {
    3846:	0023      	movs	r3, r4
    3848:	0020      	movs	r0, r4
        uECC_word_t temp = *vli;
    384a:	69e1      	ldr	r1, [r4, #28]
    while (vli-- > end) {
    384c:	331c      	adds	r3, #28
        *vli = (temp >> 1) | carry;
    384e:	084a      	lsrs	r2, r1, #1
    3850:	46ac      	mov	ip, r5
    3852:	61e2      	str	r2, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
    3854:	07c9      	lsls	r1, r1, #31
    while (vli-- > end) {
    3856:	3018      	adds	r0, #24
    3858:	429c      	cmp	r4, r3
    385a:	d239      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
    385c:	f240 0914 	movw	r9, #20
        uECC_word_t temp = *vli;
    3860:	69a3      	ldr	r3, [r4, #24]
    while (vli-- > end) {
    3862:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    3864:	085d      	lsrs	r5, r3, #1
    3866:	4329      	orrs	r1, r5
    3868:	61a1      	str	r1, [r4, #24]
        carry = temp << (uECC_WORD_BITS - 1);
    386a:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    386c:	4284      	cmp	r4, r0
    386e:	d22f      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    3870:	6963      	ldr	r3, [r4, #20]
        *vli = (temp >> 1) | carry;
    3872:	0858      	lsrs	r0, r3, #1
    3874:	4301      	orrs	r1, r0
    while (vli-- > end) {
    3876:	0020      	movs	r0, r4
        *vli = (temp >> 1) | carry;
    3878:	6161      	str	r1, [r4, #20]
    while (vli-- > end) {
    387a:	3010      	adds	r0, #16
        carry = temp << (uECC_WORD_BITS - 1);
    387c:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    387e:	454c      	cmp	r4, r9
    3880:	d226      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
    3882:	f240 090c 	movw	r9, #12
        uECC_word_t temp = *vli;
    3886:	6923      	ldr	r3, [r4, #16]
    while (vli-- > end) {
    3888:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    388a:	085d      	lsrs	r5, r3, #1
    388c:	4329      	orrs	r1, r5
    388e:	6121      	str	r1, [r4, #16]
        carry = temp << (uECC_WORD_BITS - 1);
    3890:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    3892:	4284      	cmp	r4, r0
    3894:	d21c      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    3896:	68e3      	ldr	r3, [r4, #12]
        *vli = (temp >> 1) | carry;
    3898:	0858      	lsrs	r0, r3, #1
    389a:	4301      	orrs	r1, r0
    while (vli-- > end) {
    389c:	0020      	movs	r0, r4
        *vli = (temp >> 1) | carry;
    389e:	60e1      	str	r1, [r4, #12]
    while (vli-- > end) {
    38a0:	3008      	adds	r0, #8
        carry = temp << (uECC_WORD_BITS - 1);
    38a2:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    38a4:	454c      	cmp	r4, r9
    38a6:	d213      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    38a8:	68a3      	ldr	r3, [r4, #8]
        *vli = (temp >> 1) | carry;
    38aa:	085d      	lsrs	r5, r3, #1
    38ac:	4329      	orrs	r1, r5
    38ae:	60a1      	str	r1, [r4, #8]
        carry = temp << (uECC_WORD_BITS - 1);
    38b0:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    38b2:	1d23      	adds	r3, r4, #4
    38b4:	4699      	mov	r9, r3
    38b6:	4284      	cmp	r4, r0
    38b8:	d20a      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    38ba:	6863      	ldr	r3, [r4, #4]
        *vli = (temp >> 1) | carry;
    38bc:	0858      	lsrs	r0, r3, #1
    38be:	4301      	orrs	r1, r0
    38c0:	6061      	str	r1, [r4, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    38c2:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    38c4:	454c      	cmp	r4, r9
    38c6:	d203      	bcs.n	38d0 <double_jacobian_secp256k1.part.2+0x780>
        *vli = (temp >> 1) | carry;
    38c8:	6823      	ldr	r3, [r4, #0]
    38ca:	085b      	lsrs	r3, r3, #1
    38cc:	430b      	orrs	r3, r1
    38ce:	6023      	str	r3, [r4, #0]
        Y1[num_words_secp256k1 - 1] |= carry << (uECC_WORD_BITS - 1);
    38d0:	4663      	mov	r3, ip
    38d2:	07db      	lsls	r3, r3, #31
    38d4:	431a      	orrs	r2, r3
    38d6:	61e2      	str	r2, [r4, #28]
    38d8:	e5f0      	b.n	34bc <double_jacobian_secp256k1.part.2+0x36c>
    38da:	46c0      	nop			; (mov r8, r8)

000038dc <double_jacobian_secp256k1>:
                                      uECC_Curve curve) {
    38dc:	b570      	push	{r4, r5, r6, lr}
        bits |= vli[i];
    38de:	6855      	ldr	r5, [r2, #4]
    38e0:	6814      	ldr	r4, [r2, #0]
    38e2:	432c      	orrs	r4, r5
    38e4:	6895      	ldr	r5, [r2, #8]
    38e6:	432c      	orrs	r4, r5
    38e8:	68d5      	ldr	r5, [r2, #12]
    38ea:	432c      	orrs	r4, r5
    38ec:	6915      	ldr	r5, [r2, #16]
    38ee:	432c      	orrs	r4, r5
    38f0:	6955      	ldr	r5, [r2, #20]
    38f2:	432c      	orrs	r4, r5
    38f4:	6995      	ldr	r5, [r2, #24]
    38f6:	432c      	orrs	r4, r5
    38f8:	69d5      	ldr	r5, [r2, #28]
    38fa:	432c      	orrs	r4, r5
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
    38fc:	b904      	cbnz	r4, 3900 <double_jacobian_secp256k1+0x24>
}
    38fe:	bd70      	pop	{r4, r5, r6, pc}
    3900:	f243 1451 	movw	r4, #12625	; 0x3151
    3904:	f2c0 0400 	movt	r4, #0
    3908:	47a0      	blx	r4
    390a:	e7f8      	b.n	38fe <double_jacobian_secp256k1+0x22>
    390c:	0000      	movs	r0, r0
	...

00003910 <uECC_vli_modInv.part.1>:
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
    3910:	b5f0      	push	{r4, r5, r6, r7, lr}
    3912:	4645      	mov	r5, r8
    3914:	46de      	mov	lr, fp
    3916:	4657      	mov	r7, sl
    3918:	464e      	mov	r6, r9
    391a:	b5e0      	push	{r5, r6, r7, lr}
    391c:	b0b7      	sub	sp, #220	; 0xdc
    391e:	900c      	str	r0, [sp, #48]	; 0x30
    3920:	4690      	mov	r8, r2
    3922:	920d      	str	r2, [sp, #52]	; 0x34
    3924:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    3926:	2b00      	cmp	r3, #0
    3928:	dc00      	bgt.n	392c <uECC_vli_modInv.part.1+0x1c>
    392a:	e2ca      	b.n	3ec2 <uECC_vli_modInv.part.1+0x5b2>
        dest[i] = src[i];
    392c:	1e5f      	subs	r7, r3, #1
    392e:	b2fb      	uxtb	r3, r7
    3930:	3301      	adds	r3, #1
    3932:	009b      	lsls	r3, r3, #2
    3934:	f246 763f 	movw	r6, #26431	; 0x673f
    3938:	4699      	mov	r9, r3
    393a:	f246 7a75 	movw	sl, #26485	; 0x6775
    393e:	ac16      	add	r4, sp, #88	; 0x58
    3940:	001a      	movs	r2, r3
    3942:	f2c0 0600 	movt	r6, #0
    3946:	0020      	movs	r0, r4
    3948:	ad1e      	add	r5, sp, #120	; 0x78
    394a:	47b0      	blx	r6
    394c:	4641      	mov	r1, r8
    394e:	464a      	mov	r2, r9
    3950:	0028      	movs	r0, r5
    3952:	47b0      	blx	r6
    3954:	ae26      	add	r6, sp, #152	; 0x98
    3956:	464a      	mov	r2, r9
    3958:	2100      	movs	r1, #0
    395a:	0030      	movs	r0, r6
    395c:	f2c0 0a00 	movt	sl, #0
    3960:	47d0      	blx	sl
    u[0] = 1;
    3962:	2301      	movs	r3, #1
    3964:	9326      	str	r3, [sp, #152]	; 0x98
    3966:	ab2e      	add	r3, sp, #184	; 0xb8
    3968:	464a      	mov	r2, r9
    396a:	2100      	movs	r1, #0
    396c:	0018      	movs	r0, r3
    396e:	4698      	mov	r8, r3
    3970:	47d0      	blx	sl
    3972:	b2fb      	uxtb	r3, r7
    3974:	930b      	str	r3, [sp, #44]	; 0x2c
    3976:	b25b      	sxtb	r3, r3
        if (left[i] > right[i]) {
    3978:	009a      	lsls	r2, r3, #2
    vli += num_words;
    397a:	9905      	ldr	r1, [sp, #20]
    397c:	9303      	str	r3, [sp, #12]
        if (left[i] > right[i]) {
    397e:	18a3      	adds	r3, r4, r2
    3980:	9304      	str	r3, [sp, #16]
    3982:	18ab      	adds	r3, r5, r2
    3984:	0017      	movs	r7, r2
    3986:	469a      	mov	sl, r3
    3988:	18b2      	adds	r2, r6, r2
    vli += num_words;
    398a:	008b      	lsls	r3, r1, #2
        if (left[i] > right[i]) {
    398c:	9214      	str	r2, [sp, #80]	; 0x50
    vli += num_words;
    398e:	001a      	movs	r2, r3
    3990:	4442      	add	r2, r8
    3992:	9210      	str	r2, [sp, #64]	; 0x40
    while (vli-- > end) {
    3994:	3a04      	subs	r2, #4
    3996:	9211      	str	r2, [sp, #68]	; 0x44
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    3998:	2208      	movs	r2, #8
    399a:	1a52      	subs	r2, r2, r1
    399c:	00d2      	lsls	r2, r2, #3
    399e:	3201      	adds	r2, #1
    39a0:	9212      	str	r2, [sp, #72]	; 0x48
        uv[num_words - 1] |= HIGH_BIT_SET;
    39a2:	1f1a      	subs	r2, r3, #4
    39a4:	0011      	movs	r1, r2
    39a6:	4693      	mov	fp, r2
    39a8:	4441      	add	r1, r8
    vli += num_words;
    39aa:	18e8      	adds	r0, r5, r3
        uv[num_words - 1] |= HIGH_BIT_SET;
    39ac:	9115      	str	r1, [sp, #84]	; 0x54
    vli += num_words;
    39ae:	18e1      	adds	r1, r4, r3
    39b0:	18f3      	adds	r3, r6, r3
    39b2:	9306      	str	r3, [sp, #24]
    while (vli-- > end) {
    39b4:	3b04      	subs	r3, #4
    39b6:	9309      	str	r3, [sp, #36]	; 0x24
    39b8:	1f03      	subs	r3, r0, #4
        if (left[i] > right[i]) {
    39ba:	4447      	add	r7, r8
    39bc:	930f      	str	r3, [sp, #60]	; 0x3c
    39be:	1f2b      	subs	r3, r5, #4
    39c0:	9713      	str	r7, [sp, #76]	; 0x4c
    39c2:	4699      	mov	r9, r3
    39c4:	1f27      	subs	r7, r4, #4
    39c6:	1f0b      	subs	r3, r1, #4
    vli += num_words;
    39c8:	900e      	str	r0, [sp, #56]	; 0x38
    39ca:	9107      	str	r1, [sp, #28]
        uv[num_words - 1] |= HIGH_BIT_SET;
    39cc:	44b3      	add	fp, r6
    39ce:	9308      	str	r3, [sp, #32]
    39d0:	9702      	str	r7, [sp, #8]
    39d2:	9501      	str	r5, [sp, #4]
    39d4:	9600      	str	r6, [sp, #0]
    for (i = num_words - 1; i >= 0; --i) {
    39d6:	9903      	ldr	r1, [sp, #12]
    39d8:	2900      	cmp	r1, #0
    39da:	da00      	bge.n	39de <uECC_vli_modInv.part.1+0xce>
    39dc:	e073      	b.n	3ac6 <uECC_vli_modInv.part.1+0x1b6>
        if (left[i] > right[i]) {
    39de:	9b04      	ldr	r3, [sp, #16]
    39e0:	681a      	ldr	r2, [r3, #0]
    39e2:	4653      	mov	r3, sl
    39e4:	681b      	ldr	r3, [r3, #0]
    39e6:	429a      	cmp	r2, r3
    39e8:	d828      	bhi.n	3a3c <uECC_vli_modInv.part.1+0x12c>
        } else if (left[i] < right[i]) {
    39ea:	d200      	bcs.n	39ee <uECC_vli_modInv.part.1+0xde>
    39ec:	e0bc      	b.n	3b68 <uECC_vli_modInv.part.1+0x258>
    39ee:	000b      	movs	r3, r1
    39f0:	9f02      	ldr	r7, [sp, #8]
    39f2:	9d01      	ldr	r5, [sp, #4]
    39f4:	9e00      	ldr	r6, [sp, #0]
    39f6:	e006      	b.n	3a06 <uECC_vli_modInv.part.1+0xf6>
        if (left[i] > right[i]) {
    39f8:	009a      	lsls	r2, r3, #2
    39fa:	58a1      	ldr	r1, [r4, r2]
    39fc:	58aa      	ldr	r2, [r5, r2]
    39fe:	4291      	cmp	r1, r2
    3a00:	d819      	bhi.n	3a36 <uECC_vli_modInv.part.1+0x126>
        } else if (left[i] < right[i]) {
    3a02:	d200      	bcs.n	3a06 <uECC_vli_modInv.part.1+0xf6>
    3a04:	e0ad      	b.n	3b62 <uECC_vli_modInv.part.1+0x252>
    3a06:	3b01      	subs	r3, #1
    3a08:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    3a0a:	1c5a      	adds	r2, r3, #1
    3a0c:	d1f4      	bne.n	39f8 <uECC_vli_modInv.part.1+0xe8>
    for (i = 0; i < num_words; ++i) {
    3a0e:	9b05      	ldr	r3, [sp, #20]
    3a10:	2b00      	cmp	r3, #0
    3a12:	dd09      	ble.n	3a28 <uECC_vli_modInv.part.1+0x118>
    3a14:	f246 733f 	movw	r3, #26431	; 0x673f
        dest[i] = src[i];
    3a18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a1a:	0031      	movs	r1, r6
    3a1c:	3201      	adds	r2, #1
    3a1e:	0092      	lsls	r2, r2, #2
    3a20:	980c      	ldr	r0, [sp, #48]	; 0x30
    3a22:	f2c0 0300 	movt	r3, #0
    3a26:	4798      	blx	r3
}
    3a28:	b037      	add	sp, #220	; 0xdc
    3a2a:	bc3c      	pop	{r2, r3, r4, r5}
    3a2c:	4690      	mov	r8, r2
    3a2e:	4699      	mov	r9, r3
    3a30:	46a2      	mov	sl, r4
    3a32:	46ab      	mov	fp, r5
    3a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a36:	9702      	str	r7, [sp, #8]
    3a38:	9501      	str	r5, [sp, #4]
    3a3a:	9600      	str	r6, [sp, #0]
            return 1;
    3a3c:	2301      	movs	r3, #1
        if (EVEN(a)) {
    3a3e:	2101      	movs	r1, #1
    3a40:	6822      	ldr	r2, [r4, #0]
    3a42:	420a      	tst	r2, r1
    3a44:	d141      	bne.n	3aca <uECC_vli_modInv.part.1+0x1ba>
    while (vli-- > end) {
    3a46:	9a07      	ldr	r2, [sp, #28]
    3a48:	9908      	ldr	r1, [sp, #32]
    3a4a:	2300      	movs	r3, #0
    3a4c:	42a2      	cmp	r2, r4
    3a4e:	d90e      	bls.n	3a6e <uECC_vli_modInv.part.1+0x15e>
    3a50:	0018      	movs	r0, r3
    3a52:	9f02      	ldr	r7, [sp, #8]
    3a54:	9d01      	ldr	r5, [sp, #4]
    3a56:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3a58:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3a5a:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3a5c:	0853      	lsrs	r3, r2, #1
    3a5e:	4303      	orrs	r3, r0
    3a60:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3a62:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3a64:	42b9      	cmp	r1, r7
    3a66:	d1f7      	bne.n	3a58 <uECC_vli_modInv.part.1+0x148>
    3a68:	9702      	str	r7, [sp, #8]
    3a6a:	9501      	str	r5, [sp, #4]
    3a6c:	9600      	str	r6, [sp, #0]
    if (!EVEN(uv)) {
    3a6e:	2201      	movs	r2, #1
    3a70:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3a72:	4213      	tst	r3, r2
    3a74:	d000      	beq.n	3a78 <uECC_vli_modInv.part.1+0x168>
    3a76:	e0dc      	b.n	3c32 <uECC_vli_modInv.part.1+0x322>
    while (vli-- > end) {
    3a78:	9b06      	ldr	r3, [sp, #24]
    3a7a:	9a00      	ldr	r2, [sp, #0]
    uECC_word_t carry = 0;
    3a7c:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3a80:	4293      	cmp	r3, r2
    3a82:	d9a8      	bls.n	39d6 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3a84:	2300      	movs	r3, #0
    3a86:	9909      	ldr	r1, [sp, #36]	; 0x24
    3a88:	9f02      	ldr	r7, [sp, #8]
    3a8a:	0018      	movs	r0, r3
    3a8c:	9d01      	ldr	r5, [sp, #4]
    3a8e:	9e00      	ldr	r6, [sp, #0]
    3a90:	e000      	b.n	3a94 <uECC_vli_modInv.part.1+0x184>
    while (vli-- > end) {
    3a92:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3a94:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3a96:	0853      	lsrs	r3, r2, #1
    3a98:	4303      	orrs	r3, r0
    3a9a:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3a9c:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3a9e:	1f0b      	subs	r3, r1, #4
    3aa0:	42b1      	cmp	r1, r6
    3aa2:	d8f6      	bhi.n	3a92 <uECC_vli_modInv.part.1+0x182>
    3aa4:	9702      	str	r7, [sp, #8]
    3aa6:	9501      	str	r5, [sp, #4]
    3aa8:	9600      	str	r6, [sp, #0]
    if (carry) {
    3aaa:	4663      	mov	r3, ip
    3aac:	2b00      	cmp	r3, #0
    3aae:	d092      	beq.n	39d6 <uECC_vli_modInv.part.1+0xc6>
        uv[num_words - 1] |= HIGH_BIT_SET;
    3ab0:	465a      	mov	r2, fp
    3ab2:	2380      	movs	r3, #128	; 0x80
    3ab4:	6812      	ldr	r2, [r2, #0]
    3ab6:	061b      	lsls	r3, r3, #24
    3ab8:	4313      	orrs	r3, r2
    3aba:	465a      	mov	r2, fp
    for (i = num_words - 1; i >= 0; --i) {
    3abc:	9903      	ldr	r1, [sp, #12]
        uv[num_words - 1] |= HIGH_BIT_SET;
    3abe:	6013      	str	r3, [r2, #0]
    for (i = num_words - 1; i >= 0; --i) {
    3ac0:	2900      	cmp	r1, #0
    3ac2:	db00      	blt.n	3ac6 <uECC_vli_modInv.part.1+0x1b6>
    3ac4:	e78b      	b.n	39de <uECC_vli_modInv.part.1+0xce>
    3ac6:	9e00      	ldr	r6, [sp, #0]
    3ac8:	e7a1      	b.n	3a0e <uECC_vli_modInv.part.1+0xfe>
        } else if (EVEN(b)) {
    3aca:	2101      	movs	r1, #1
    3acc:	9801      	ldr	r0, [sp, #4]
    3ace:	6802      	ldr	r2, [r0, #0]
    3ad0:	420a      	tst	r2, r1
    3ad2:	d14c      	bne.n	3b6e <uECC_vli_modInv.part.1+0x25e>
    while (vli-- > end) {
    3ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3ad6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3ad8:	2300      	movs	r3, #0
    3ada:	4282      	cmp	r2, r0
    3adc:	d912      	bls.n	3b04 <uECC_vli_modInv.part.1+0x1f4>
    3ade:	0005      	movs	r5, r0
    3ae0:	46a4      	mov	ip, r4
    3ae2:	0018      	movs	r0, r3
    3ae4:	464c      	mov	r4, r9
    3ae6:	9f02      	ldr	r7, [sp, #8]
    3ae8:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3aea:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3aec:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3aee:	0853      	lsrs	r3, r2, #1
    3af0:	4303      	orrs	r3, r0
    3af2:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3af4:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3af6:	428c      	cmp	r4, r1
    3af8:	d1f7      	bne.n	3aea <uECC_vli_modInv.part.1+0x1da>
    3afa:	46a1      	mov	r9, r4
    3afc:	4664      	mov	r4, ip
    3afe:	9702      	str	r7, [sp, #8]
    3b00:	9501      	str	r5, [sp, #4]
    3b02:	9600      	str	r6, [sp, #0]
    if (!EVEN(uv)) {
    3b04:	2201      	movs	r2, #1
    3b06:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3b08:	4213      	tst	r3, r2
    3b0a:	d000      	beq.n	3b0e <uECC_vli_modInv.part.1+0x1fe>
    3b0c:	e0c2      	b.n	3c94 <uECC_vli_modInv.part.1+0x384>
    while (vli-- > end) {
    3b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uECC_word_t carry = 0;
    3b10:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3b14:	4543      	cmp	r3, r8
    3b16:	d800      	bhi.n	3b1a <uECC_vli_modInv.part.1+0x20a>
    3b18:	e75d      	b.n	39d6 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3b1a:	2300      	movs	r3, #0
    3b1c:	4640      	mov	r0, r8
    3b1e:	9911      	ldr	r1, [sp, #68]	; 0x44
    3b20:	46a0      	mov	r8, r4
    3b22:	9f02      	ldr	r7, [sp, #8]
    3b24:	9d01      	ldr	r5, [sp, #4]
    3b26:	9e00      	ldr	r6, [sp, #0]
    3b28:	001c      	movs	r4, r3
    3b2a:	e000      	b.n	3b2e <uECC_vli_modInv.part.1+0x21e>
    while (vli-- > end) {
    3b2c:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3b2e:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3b30:	0853      	lsrs	r3, r2, #1
    3b32:	4323      	orrs	r3, r4
    3b34:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3b36:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    3b38:	1f0b      	subs	r3, r1, #4
    3b3a:	4281      	cmp	r1, r0
    3b3c:	d8f6      	bhi.n	3b2c <uECC_vli_modInv.part.1+0x21c>
    3b3e:	4644      	mov	r4, r8
    3b40:	4680      	mov	r8, r0
    3b42:	9702      	str	r7, [sp, #8]
    3b44:	9501      	str	r5, [sp, #4]
    3b46:	9600      	str	r6, [sp, #0]
    if (carry) {
    3b48:	4663      	mov	r3, ip
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d100      	bne.n	3b50 <uECC_vli_modInv.part.1+0x240>
    3b4e:	e742      	b.n	39d6 <uECC_vli_modInv.part.1+0xc6>
        uv[num_words - 1] |= HIGH_BIT_SET;
    3b50:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3b52:	6813      	ldr	r3, [r2, #0]
    3b54:	930a      	str	r3, [sp, #40]	; 0x28
    3b56:	2380      	movs	r3, #128	; 0x80
    3b58:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b5a:	061b      	lsls	r3, r3, #24
    3b5c:	430b      	orrs	r3, r1
    3b5e:	6013      	str	r3, [r2, #0]
    3b60:	e739      	b.n	39d6 <uECC_vli_modInv.part.1+0xc6>
    3b62:	9702      	str	r7, [sp, #8]
    3b64:	9501      	str	r5, [sp, #4]
    3b66:	9600      	str	r6, [sp, #0]
            return -1;
    3b68:	2301      	movs	r3, #1
    3b6a:	425b      	negs	r3, r3
    3b6c:	e767      	b.n	3a3e <uECC_vli_modInv.part.1+0x12e>
        } else if (cmpResult > 0) {
    3b6e:	2b01      	cmp	r3, #1
    3b70:	d000      	beq.n	3b74 <uECC_vli_modInv.part.1+0x264>
    3b72:	e0be      	b.n	3cf2 <uECC_vli_modInv.part.1+0x3e2>
            uECC_vli_sub(a, a, b, num_words);
    3b74:	f240 7791 	movw	r7, #1937	; 0x791
    3b78:	0002      	movs	r2, r0
    3b7a:	9b05      	ldr	r3, [sp, #20]
    3b7c:	0021      	movs	r1, r4
    3b7e:	f2c0 0700 	movt	r7, #0
    3b82:	0020      	movs	r0, r4
    3b84:	970a      	str	r7, [sp, #40]	; 0x28
    3b86:	47b8      	blx	r7
    while (vli-- > end) {
    3b88:	9a07      	ldr	r2, [sp, #28]
    3b8a:	9908      	ldr	r1, [sp, #32]
    3b8c:	2300      	movs	r3, #0
    3b8e:	42a2      	cmp	r2, r4
    3b90:	d90e      	bls.n	3bb0 <uECC_vli_modInv.part.1+0x2a0>
    3b92:	0018      	movs	r0, r3
    3b94:	9f02      	ldr	r7, [sp, #8]
    3b96:	9d01      	ldr	r5, [sp, #4]
    3b98:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3b9a:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3b9c:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3b9e:	0853      	lsrs	r3, r2, #1
    3ba0:	4303      	orrs	r3, r0
    3ba2:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3ba4:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3ba6:	428f      	cmp	r7, r1
    3ba8:	d1f7      	bne.n	3b9a <uECC_vli_modInv.part.1+0x28a>
    3baa:	9702      	str	r7, [sp, #8]
    3bac:	9501      	str	r5, [sp, #4]
    3bae:	9600      	str	r6, [sp, #0]
        if (left[i] > right[i]) {
    3bb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3bb2:	681a      	ldr	r2, [r3, #0]
    3bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3bb6:	681b      	ldr	r3, [r3, #0]
    3bb8:	429a      	cmp	r2, r3
    3bba:	d900      	bls.n	3bbe <uECC_vli_modInv.part.1+0x2ae>
    3bbc:	e10a      	b.n	3dd4 <uECC_vli_modInv.part.1+0x4c4>
        } else if (left[i] < right[i]) {
    3bbe:	d200      	bcs.n	3bc2 <uECC_vli_modInv.part.1+0x2b2>
    3bc0:	e0ff      	b.n	3dc2 <uECC_vli_modInv.part.1+0x4b2>
    3bc2:	9b03      	ldr	r3, [sp, #12]
    3bc4:	9f02      	ldr	r7, [sp, #8]
    3bc6:	9d01      	ldr	r5, [sp, #4]
    3bc8:	9e00      	ldr	r6, [sp, #0]
    3bca:	4640      	mov	r0, r8
    3bcc:	e006      	b.n	3bdc <uECC_vli_modInv.part.1+0x2cc>
        if (left[i] > right[i]) {
    3bce:	009a      	lsls	r2, r3, #2
    3bd0:	58b1      	ldr	r1, [r6, r2]
    3bd2:	5882      	ldr	r2, [r0, r2]
    3bd4:	4291      	cmp	r1, r2
    3bd6:	d805      	bhi.n	3be4 <uECC_vli_modInv.part.1+0x2d4>
        } else if (left[i] < right[i]) {
    3bd8:	d200      	bcs.n	3bdc <uECC_vli_modInv.part.1+0x2cc>
    3bda:	e0ee      	b.n	3dba <uECC_vli_modInv.part.1+0x4aa>
    3bdc:	3b01      	subs	r3, #1
    3bde:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    3be0:	1c5a      	adds	r2, r3, #1
    3be2:	d1f4      	bne.n	3bce <uECC_vli_modInv.part.1+0x2be>
    3be4:	9501      	str	r5, [sp, #4]
    3be6:	4680      	mov	r8, r0
    3be8:	0035      	movs	r5, r6
    3bea:	9702      	str	r7, [sp, #8]
    3bec:	9600      	str	r6, [sp, #0]
            uECC_vli_sub(u, u, v, num_words);
    3bee:	9b05      	ldr	r3, [sp, #20]
    3bf0:	4642      	mov	r2, r8
    3bf2:	0029      	movs	r1, r5
    3bf4:	0028      	movs	r0, r5
    3bf6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3bf8:	47b8      	blx	r7
    if (!EVEN(uv)) {
    3bfa:	2201      	movs	r2, #1
    3bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3bfe:	4213      	tst	r3, r2
    3c00:	d000      	beq.n	3c04 <uECC_vli_modInv.part.1+0x2f4>
    3c02:	e0e9      	b.n	3dd8 <uECC_vli_modInv.part.1+0x4c8>
    while (vli-- > end) {
    3c04:	9b06      	ldr	r3, [sp, #24]
    uECC_word_t carry = 0;
    3c06:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3c0a:	42ab      	cmp	r3, r5
    3c0c:	d800      	bhi.n	3c10 <uECC_vli_modInv.part.1+0x300>
    3c0e:	e6e2      	b.n	39d6 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3c10:	2300      	movs	r3, #0
    3c12:	9909      	ldr	r1, [sp, #36]	; 0x24
    3c14:	9f02      	ldr	r7, [sp, #8]
    3c16:	0018      	movs	r0, r3
    3c18:	9d01      	ldr	r5, [sp, #4]
    3c1a:	9e00      	ldr	r6, [sp, #0]
    3c1c:	e000      	b.n	3c20 <uECC_vli_modInv.part.1+0x310>
    while (vli-- > end) {
    3c1e:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3c20:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3c22:	0853      	lsrs	r3, r2, #1
    3c24:	4303      	orrs	r3, r0
    3c26:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3c28:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3c2a:	1f0b      	subs	r3, r1, #4
    3c2c:	42b1      	cmp	r1, r6
    3c2e:	d8f6      	bhi.n	3c1e <uECC_vli_modInv.part.1+0x30e>
    3c30:	e738      	b.n	3aa4 <uECC_vli_modInv.part.1+0x194>
    __asm__ volatile (
    3c32:	9900      	ldr	r1, [sp, #0]
    3c34:	980d      	ldr	r0, [sp, #52]	; 0x34
    3c36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3c38:	000f      	movs	r7, r1
    3c3a:	2200      	movs	r2, #0
    3c3c:	a503      	add	r5, pc, #12	; (adr r5, 3c4c <uECC_vli_modInv.part.1+0x33c>)
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	195b      	adds	r3, r3, r5
    3c42:	cf20      	ldmia	r7!, {r5}
    3c44:	c840      	ldmia	r0!, {r6}
    3c46:	19ad      	adds	r5, r5, r6
    3c48:	c120      	stmia	r1!, {r5}
    3c4a:	4718      	bx	r3
    3c4c:	cf20      	ldmia	r7!, {r5}
    3c4e:	c840      	ldmia	r0!, {r6}
    3c50:	4175      	adcs	r5, r6
    3c52:	c120      	stmia	r1!, {r5}
    3c54:	cf20      	ldmia	r7!, {r5}
    3c56:	c840      	ldmia	r0!, {r6}
    3c58:	4175      	adcs	r5, r6
    3c5a:	c120      	stmia	r1!, {r5}
    3c5c:	cf20      	ldmia	r7!, {r5}
    3c5e:	c840      	ldmia	r0!, {r6}
    3c60:	4175      	adcs	r5, r6
    3c62:	c120      	stmia	r1!, {r5}
    3c64:	cf20      	ldmia	r7!, {r5}
    3c66:	c840      	ldmia	r0!, {r6}
    3c68:	4175      	adcs	r5, r6
    3c6a:	c120      	stmia	r1!, {r5}
    3c6c:	cf20      	ldmia	r7!, {r5}
    3c6e:	c840      	ldmia	r0!, {r6}
    3c70:	4175      	adcs	r5, r6
    3c72:	c120      	stmia	r1!, {r5}
    3c74:	cf20      	ldmia	r7!, {r5}
    3c76:	c840      	ldmia	r0!, {r6}
    3c78:	4175      	adcs	r5, r6
    3c7a:	c120      	stmia	r1!, {r5}
    3c7c:	cf20      	ldmia	r7!, {r5}
    3c7e:	c840      	ldmia	r0!, {r6}
    3c80:	4175      	adcs	r5, r6
    3c82:	c120      	stmia	r1!, {r5}
    3c84:	4152      	adcs	r2, r2
    3c86:	4694      	mov	ip, r2
    3c88:	9b06      	ldr	r3, [sp, #24]
    3c8a:	9a00      	ldr	r2, [sp, #0]
    3c8c:	4293      	cmp	r3, r2
    3c8e:	d900      	bls.n	3c92 <uECC_vli_modInv.part.1+0x382>
    3c90:	e6f8      	b.n	3a84 <uECC_vli_modInv.part.1+0x174>
    3c92:	e70a      	b.n	3aaa <uECC_vli_modInv.part.1+0x19a>
    3c94:	4643      	mov	r3, r8
    3c96:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c98:	9812      	ldr	r0, [sp, #72]	; 0x48
    3c9a:	4645      	mov	r5, r8
    3c9c:	2200      	movs	r2, #0
    3c9e:	a603      	add	r6, pc, #12	; (adr r6, 3cac <uECC_vli_modInv.part.1+0x39c>)
    3ca0:	1980      	adds	r0, r0, r6
    3ca2:	cd40      	ldmia	r5!, {r6}
    3ca4:	c980      	ldmia	r1!, {r7}
    3ca6:	19f6      	adds	r6, r6, r7
    3ca8:	c340      	stmia	r3!, {r6}
    3caa:	4700      	bx	r0
    3cac:	cd40      	ldmia	r5!, {r6}
    3cae:	c980      	ldmia	r1!, {r7}
    3cb0:	417e      	adcs	r6, r7
    3cb2:	c340      	stmia	r3!, {r6}
    3cb4:	cd40      	ldmia	r5!, {r6}
    3cb6:	c980      	ldmia	r1!, {r7}
    3cb8:	417e      	adcs	r6, r7
    3cba:	c340      	stmia	r3!, {r6}
    3cbc:	cd40      	ldmia	r5!, {r6}
    3cbe:	c980      	ldmia	r1!, {r7}
    3cc0:	417e      	adcs	r6, r7
    3cc2:	c340      	stmia	r3!, {r6}
    3cc4:	cd40      	ldmia	r5!, {r6}
    3cc6:	c980      	ldmia	r1!, {r7}
    3cc8:	417e      	adcs	r6, r7
    3cca:	c340      	stmia	r3!, {r6}
    3ccc:	cd40      	ldmia	r5!, {r6}
    3cce:	c980      	ldmia	r1!, {r7}
    3cd0:	417e      	adcs	r6, r7
    3cd2:	c340      	stmia	r3!, {r6}
    3cd4:	cd40      	ldmia	r5!, {r6}
    3cd6:	c980      	ldmia	r1!, {r7}
    3cd8:	417e      	adcs	r6, r7
    3cda:	c340      	stmia	r3!, {r6}
    3cdc:	cd40      	ldmia	r5!, {r6}
    3cde:	c980      	ldmia	r1!, {r7}
    3ce0:	417e      	adcs	r6, r7
    3ce2:	c340      	stmia	r3!, {r6}
    3ce4:	4152      	adcs	r2, r2
    3ce6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ce8:	4694      	mov	ip, r2
    3cea:	4543      	cmp	r3, r8
    3cec:	d900      	bls.n	3cf0 <uECC_vli_modInv.part.1+0x3e0>
    3cee:	e714      	b.n	3b1a <uECC_vli_modInv.part.1+0x20a>
    3cf0:	e72a      	b.n	3b48 <uECC_vli_modInv.part.1+0x238>
            uECC_vli_sub(b, b, a, num_words);
    3cf2:	f240 7791 	movw	r7, #1937	; 0x791
    3cf6:	9b05      	ldr	r3, [sp, #20]
    3cf8:	0022      	movs	r2, r4
    3cfa:	0001      	movs	r1, r0
    3cfc:	f2c0 0700 	movt	r7, #0
    3d00:	0005      	movs	r5, r0
    3d02:	970a      	str	r7, [sp, #40]	; 0x28
    3d04:	47b8      	blx	r7
    while (vli-- > end) {
    3d06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3d08:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3d0a:	2300      	movs	r3, #0
    3d0c:	42aa      	cmp	r2, r5
    3d0e:	d912      	bls.n	3d36 <uECC_vli_modInv.part.1+0x426>
    3d10:	46a4      	mov	ip, r4
    3d12:	0018      	movs	r0, r3
    3d14:	464c      	mov	r4, r9
    3d16:	9f02      	ldr	r7, [sp, #8]
    3d18:	9d01      	ldr	r5, [sp, #4]
    3d1a:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3d1c:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3d1e:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3d20:	0853      	lsrs	r3, r2, #1
    3d22:	4303      	orrs	r3, r0
    3d24:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3d26:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3d28:	428c      	cmp	r4, r1
    3d2a:	d1f7      	bne.n	3d1c <uECC_vli_modInv.part.1+0x40c>
    3d2c:	46a1      	mov	r9, r4
    3d2e:	4664      	mov	r4, ip
    3d30:	9702      	str	r7, [sp, #8]
    3d32:	9501      	str	r5, [sp, #4]
    3d34:	9600      	str	r6, [sp, #0]
        if (left[i] > right[i]) {
    3d36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3d38:	681a      	ldr	r2, [r3, #0]
    3d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3d3c:	681b      	ldr	r3, [r3, #0]
    3d3e:	429a      	cmp	r2, r3
    3d40:	d900      	bls.n	3d44 <uECC_vli_modInv.part.1+0x434>
    3d42:	e08c      	b.n	3e5e <uECC_vli_modInv.part.1+0x54e>
        } else if (left[i] < right[i]) {
    3d44:	d200      	bcs.n	3d48 <uECC_vli_modInv.part.1+0x438>
    3d46:	e081      	b.n	3e4c <uECC_vli_modInv.part.1+0x53c>
    3d48:	9b03      	ldr	r3, [sp, #12]
    3d4a:	9f02      	ldr	r7, [sp, #8]
    3d4c:	9d01      	ldr	r5, [sp, #4]
    3d4e:	9e00      	ldr	r6, [sp, #0]
    3d50:	4640      	mov	r0, r8
    3d52:	e006      	b.n	3d62 <uECC_vli_modInv.part.1+0x452>
        if (left[i] > right[i]) {
    3d54:	009a      	lsls	r2, r3, #2
    3d56:	5881      	ldr	r1, [r0, r2]
    3d58:	58b2      	ldr	r2, [r6, r2]
    3d5a:	4291      	cmp	r1, r2
    3d5c:	d805      	bhi.n	3d6a <uECC_vli_modInv.part.1+0x45a>
        } else if (left[i] < right[i]) {
    3d5e:	d200      	bcs.n	3d62 <uECC_vli_modInv.part.1+0x452>
    3d60:	e070      	b.n	3e44 <uECC_vli_modInv.part.1+0x534>
    3d62:	3b01      	subs	r3, #1
    3d64:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    3d66:	1c5a      	adds	r2, r3, #1
    3d68:	d1f4      	bne.n	3d54 <uECC_vli_modInv.part.1+0x444>
    3d6a:	4680      	mov	r8, r0
    3d6c:	0032      	movs	r2, r6
    3d6e:	9702      	str	r7, [sp, #8]
    3d70:	9501      	str	r5, [sp, #4]
    3d72:	9600      	str	r6, [sp, #0]
            uECC_vli_sub(v, v, u, num_words);
    3d74:	9b05      	ldr	r3, [sp, #20]
    3d76:	4641      	mov	r1, r8
    3d78:	4640      	mov	r0, r8
    3d7a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3d7c:	47a8      	blx	r5
    if (!EVEN(uv)) {
    3d7e:	2201      	movs	r2, #1
    3d80:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3d82:	4213      	tst	r3, r2
    3d84:	d000      	beq.n	3d88 <uECC_vli_modInv.part.1+0x478>
    3d86:	e06c      	b.n	3e62 <uECC_vli_modInv.part.1+0x552>
    while (vli-- > end) {
    3d88:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uECC_word_t carry = 0;
    3d8a:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3d8e:	4543      	cmp	r3, r8
    3d90:	d800      	bhi.n	3d94 <uECC_vli_modInv.part.1+0x484>
    3d92:	e620      	b.n	39d6 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3d94:	2300      	movs	r3, #0
    3d96:	4640      	mov	r0, r8
    3d98:	9911      	ldr	r1, [sp, #68]	; 0x44
    3d9a:	46a0      	mov	r8, r4
    3d9c:	9f02      	ldr	r7, [sp, #8]
    3d9e:	9d01      	ldr	r5, [sp, #4]
    3da0:	9e00      	ldr	r6, [sp, #0]
    3da2:	001c      	movs	r4, r3
    3da4:	e000      	b.n	3da8 <uECC_vli_modInv.part.1+0x498>
    while (vli-- > end) {
    3da6:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3da8:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3daa:	0853      	lsrs	r3, r2, #1
    3dac:	4323      	orrs	r3, r4
    3dae:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3db0:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    3db2:	1f0b      	subs	r3, r1, #4
    3db4:	4281      	cmp	r1, r0
    3db6:	d8f6      	bhi.n	3da6 <uECC_vli_modInv.part.1+0x496>
    3db8:	e6c1      	b.n	3b3e <uECC_vli_modInv.part.1+0x22e>
    3dba:	4680      	mov	r8, r0
    3dbc:	9702      	str	r7, [sp, #8]
    3dbe:	9501      	str	r5, [sp, #4]
    3dc0:	9600      	str	r6, [sp, #0]
                uECC_vli_add(u, u, mod, num_words);
    3dc2:	f240 7531 	movw	r5, #1841	; 0x731
    3dc6:	9800      	ldr	r0, [sp, #0]
    3dc8:	9b05      	ldr	r3, [sp, #20]
    3dca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3dcc:	0001      	movs	r1, r0
    3dce:	f2c0 0500 	movt	r5, #0
    3dd2:	47a8      	blx	r5
    3dd4:	9d00      	ldr	r5, [sp, #0]
    3dd6:	e70a      	b.n	3bee <uECC_vli_modInv.part.1+0x2de>
    3dd8:	9b00      	ldr	r3, [sp, #0]
    3dda:	990d      	ldr	r1, [sp, #52]	; 0x34
    3ddc:	9812      	ldr	r0, [sp, #72]	; 0x48
    3dde:	001d      	movs	r5, r3
    3de0:	2200      	movs	r2, #0
    3de2:	a606      	add	r6, pc, #24	; (adr r6, 3dfc <uECC_vli_modInv.part.1+0x4ec>)
    3de4:	46c0      	nop			; (mov r8, r8)
    3de6:	46c0      	nop			; (mov r8, r8)
    3de8:	46c0      	nop			; (mov r8, r8)
    3dea:	46c0      	nop			; (mov r8, r8)
    3dec:	46c0      	nop			; (mov r8, r8)
    3dee:	46c0      	nop			; (mov r8, r8)
    3df0:	1980      	adds	r0, r0, r6
    3df2:	cd40      	ldmia	r5!, {r6}
    3df4:	c980      	ldmia	r1!, {r7}
    3df6:	19f6      	adds	r6, r6, r7
    3df8:	c340      	stmia	r3!, {r6}
    3dfa:	4700      	bx	r0
    3dfc:	cd40      	ldmia	r5!, {r6}
    3dfe:	c980      	ldmia	r1!, {r7}
    3e00:	417e      	adcs	r6, r7
    3e02:	c340      	stmia	r3!, {r6}
    3e04:	cd40      	ldmia	r5!, {r6}
    3e06:	c980      	ldmia	r1!, {r7}
    3e08:	417e      	adcs	r6, r7
    3e0a:	c340      	stmia	r3!, {r6}
    3e0c:	cd40      	ldmia	r5!, {r6}
    3e0e:	c980      	ldmia	r1!, {r7}
    3e10:	417e      	adcs	r6, r7
    3e12:	c340      	stmia	r3!, {r6}
    3e14:	cd40      	ldmia	r5!, {r6}
    3e16:	c980      	ldmia	r1!, {r7}
    3e18:	417e      	adcs	r6, r7
    3e1a:	c340      	stmia	r3!, {r6}
    3e1c:	cd40      	ldmia	r5!, {r6}
    3e1e:	c980      	ldmia	r1!, {r7}
    3e20:	417e      	adcs	r6, r7
    3e22:	c340      	stmia	r3!, {r6}
    3e24:	cd40      	ldmia	r5!, {r6}
    3e26:	c980      	ldmia	r1!, {r7}
    3e28:	417e      	adcs	r6, r7
    3e2a:	c340      	stmia	r3!, {r6}
    3e2c:	cd40      	ldmia	r5!, {r6}
    3e2e:	c980      	ldmia	r1!, {r7}
    3e30:	417e      	adcs	r6, r7
    3e32:	c340      	stmia	r3!, {r6}
    3e34:	4152      	adcs	r2, r2
    3e36:	4694      	mov	ip, r2
    while (vli-- > end) {
    3e38:	9b06      	ldr	r3, [sp, #24]
    3e3a:	9a00      	ldr	r2, [sp, #0]
    3e3c:	4293      	cmp	r3, r2
    3e3e:	d900      	bls.n	3e42 <uECC_vli_modInv.part.1+0x532>
    3e40:	e6e6      	b.n	3c10 <uECC_vli_modInv.part.1+0x300>
    3e42:	e632      	b.n	3aaa <uECC_vli_modInv.part.1+0x19a>
    3e44:	4680      	mov	r8, r0
    3e46:	9702      	str	r7, [sp, #8]
    3e48:	9501      	str	r5, [sp, #4]
    3e4a:	9600      	str	r6, [sp, #0]
                uECC_vli_add(v, v, mod, num_words);
    3e4c:	f240 7531 	movw	r5, #1841	; 0x731
    3e50:	9b05      	ldr	r3, [sp, #20]
    3e52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e54:	4641      	mov	r1, r8
    3e56:	4640      	mov	r0, r8
    3e58:	f2c0 0500 	movt	r5, #0
    3e5c:	47a8      	blx	r5
    3e5e:	9a00      	ldr	r2, [sp, #0]
    3e60:	e788      	b.n	3d74 <uECC_vli_modInv.part.1+0x464>
    3e62:	4643      	mov	r3, r8
    3e64:	990d      	ldr	r1, [sp, #52]	; 0x34
    3e66:	9812      	ldr	r0, [sp, #72]	; 0x48
    3e68:	4645      	mov	r5, r8
    3e6a:	2200      	movs	r2, #0
    3e6c:	a603      	add	r6, pc, #12	; (adr r6, 3e7c <uECC_vli_modInv.part.1+0x56c>)
    3e6e:	46c0      	nop			; (mov r8, r8)
    3e70:	1980      	adds	r0, r0, r6
    3e72:	cd40      	ldmia	r5!, {r6}
    3e74:	c980      	ldmia	r1!, {r7}
    3e76:	19f6      	adds	r6, r6, r7
    3e78:	c340      	stmia	r3!, {r6}
    3e7a:	4700      	bx	r0
    3e7c:	cd40      	ldmia	r5!, {r6}
    3e7e:	c980      	ldmia	r1!, {r7}
    3e80:	417e      	adcs	r6, r7
    3e82:	c340      	stmia	r3!, {r6}
    3e84:	cd40      	ldmia	r5!, {r6}
    3e86:	c980      	ldmia	r1!, {r7}
    3e88:	417e      	adcs	r6, r7
    3e8a:	c340      	stmia	r3!, {r6}
    3e8c:	cd40      	ldmia	r5!, {r6}
    3e8e:	c980      	ldmia	r1!, {r7}
    3e90:	417e      	adcs	r6, r7
    3e92:	c340      	stmia	r3!, {r6}
    3e94:	cd40      	ldmia	r5!, {r6}
    3e96:	c980      	ldmia	r1!, {r7}
    3e98:	417e      	adcs	r6, r7
    3e9a:	c340      	stmia	r3!, {r6}
    3e9c:	cd40      	ldmia	r5!, {r6}
    3e9e:	c980      	ldmia	r1!, {r7}
    3ea0:	417e      	adcs	r6, r7
    3ea2:	c340      	stmia	r3!, {r6}
    3ea4:	cd40      	ldmia	r5!, {r6}
    3ea6:	c980      	ldmia	r1!, {r7}
    3ea8:	417e      	adcs	r6, r7
    3eaa:	c340      	stmia	r3!, {r6}
    3eac:	cd40      	ldmia	r5!, {r6}
    3eae:	c980      	ldmia	r1!, {r7}
    3eb0:	417e      	adcs	r6, r7
    3eb2:	c340      	stmia	r3!, {r6}
    3eb4:	4152      	adcs	r2, r2
    while (vli-- > end) {
    3eb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3eb8:	4694      	mov	ip, r2
    3eba:	4543      	cmp	r3, r8
    3ebc:	d900      	bls.n	3ec0 <uECC_vli_modInv.part.1+0x5b0>
    3ebe:	e769      	b.n	3d94 <uECC_vli_modInv.part.1+0x484>
    3ec0:	e642      	b.n	3b48 <uECC_vli_modInv.part.1+0x238>
    u[0] = 1;
    3ec2:	2301      	movs	r3, #1
    3ec4:	9326      	str	r3, [sp, #152]	; 0x98
    3ec6:	9b05      	ldr	r3, [sp, #20]
    3ec8:	ac16      	add	r4, sp, #88	; 0x58
    3eca:	1e5f      	subs	r7, r3, #1
    3ecc:	ab2e      	add	r3, sp, #184	; 0xb8
    3ece:	ad1e      	add	r5, sp, #120	; 0x78
    3ed0:	ae26      	add	r6, sp, #152	; 0x98
    3ed2:	4698      	mov	r8, r3
    3ed4:	e54d      	b.n	3972 <uECC_vli_modInv.part.1+0x62>
    3ed6:	46c0      	nop			; (mov r8, r8)

00003ed8 <EccPoint_mult>:
                          uECC_Curve curve) {
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eda:	4645      	mov	r5, r8
    3edc:	46de      	mov	lr, fp
    3ede:	4657      	mov	r7, sl
    3ee0:	464e      	mov	r6, r9
    3ee2:	b5e0      	push	{r5, r6, r7, lr}
    3ee4:	b0d1      	sub	sp, #324	; 0x144
    3ee6:	4698      	mov	r8, r3
    3ee8:	ab5a      	add	r3, sp, #360	; 0x168
    3eea:	9204      	str	r2, [sp, #16]
    3eec:	2200      	movs	r2, #0
    3eee:	5e9a      	ldrsh	r2, [r3, r2]
    wordcount_t num_words = curve->num_words;
    3ef0:	2300      	movs	r3, #0
                          uECC_Curve curve) {
    3ef2:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
    3ef4:	900d      	str	r0, [sp, #52]	; 0x34
    wordcount_t num_words = curve->num_words;
    3ef6:	56fb      	ldrsb	r3, [r7, r3]
                          uECC_Curve curve) {
    3ef8:	4689      	mov	r9, r1
    3efa:	910b      	str	r1, [sp, #44]	; 0x2c
    3efc:	4693      	mov	fp, r2
    wordcount_t num_words = curve->num_words;
    3efe:	9308      	str	r3, [sp, #32]
    for (i = 0; i < num_words; ++i) {
    3f00:	1e1d      	subs	r5, r3, #0
    3f02:	dc00      	bgt.n	3f06 <EccPoint_mult+0x2e>
    3f04:	e1c7      	b.n	4296 <EccPoint_mult+0x3be>
    3f06:	f246 7a3f 	movw	sl, #26431	; 0x673f
        dest[i] = src[i];
    3f0a:	1e5c      	subs	r4, r3, #1
    3f0c:	b2e6      	uxtb	r6, r4
    3f0e:	3601      	adds	r6, #1
    3f10:	ab28      	add	r3, sp, #160	; 0xa0
    3f12:	00b6      	lsls	r6, r6, #2
    3f14:	0032      	movs	r2, r6
    3f16:	0018      	movs	r0, r3
    3f18:	f2c0 0a00 	movt	sl, #0
    3f1c:	930a      	str	r3, [sp, #40]	; 0x28
    3f1e:	47d0      	blx	sl
    uECC_vli_set(Ry[1], point + num_words, num_words);
    3f20:	00ab      	lsls	r3, r5, #2
    3f22:	469c      	mov	ip, r3
    3f24:	464a      	mov	r2, r9
    3f26:	4462      	add	r2, ip
    3f28:	930e      	str	r3, [sp, #56]	; 0x38
    3f2a:	0013      	movs	r3, r2
    3f2c:	ad38      	add	r5, sp, #224	; 0xe0
    3f2e:	920c      	str	r2, [sp, #48]	; 0x30
    3f30:	0019      	movs	r1, r3
    3f32:	0032      	movs	r2, r6
    3f34:	0028      	movs	r0, r5
    3f36:	47d0      	blx	sl
    if (initial_Z) {
    3f38:	4643      	mov	r3, r8
    3f3a:	2b00      	cmp	r3, #0
    3f3c:	d100      	bne.n	3f40 <EccPoint_mult+0x68>
    3f3e:	e19d      	b.n	427c <EccPoint_mult+0x3a4>
    3f40:	ab10      	add	r3, sp, #64	; 0x40
    3f42:	0032      	movs	r2, r6
    3f44:	4641      	mov	r1, r8
    3f46:	0018      	movs	r0, r3
    3f48:	4699      	mov	r9, r3
    3f4a:	47d0      	blx	sl
        dest[i] = src[i];
    3f4c:	9b08      	ldr	r3, [sp, #32]
    3f4e:	2b00      	cmp	r3, #0
    3f50:	dc00      	bgt.n	3f54 <EccPoint_mult+0x7c>
    3f52:	e191      	b.n	4278 <EccPoint_mult+0x3a0>
    3f54:	b2e4      	uxtb	r4, r4
    3f56:	3401      	adds	r4, #1
    3f58:	00a4      	lsls	r4, r4, #2
    3f5a:	f246 7651 	movw	r6, #26449	; 0x6751
    3f5e:	ab20      	add	r3, sp, #128	; 0x80
    3f60:	0022      	movs	r2, r4
    3f62:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f64:	0018      	movs	r0, r3
    3f66:	f2c0 0600 	movt	r6, #0
    3f6a:	469a      	mov	sl, r3
    3f6c:	47b0      	blx	r6
    3f6e:	ab30      	add	r3, sp, #192	; 0xc0
    3f70:	0018      	movs	r0, r3
    3f72:	0022      	movs	r2, r4
    3f74:	0029      	movs	r1, r5
    3f76:	9309      	str	r3, [sp, #36]	; 0x24
    3f78:	47b0      	blx	r6
    3f7a:	2300      	movs	r3, #0
    3f7c:	56fb      	ldrsb	r3, [r7, r3]
    uECC_vli_mult(product, left, right, curve->num_words);
    3f7e:	f240 74ed 	movw	r4, #2029	; 0x7ed
    3f82:	464a      	mov	r2, r9
    3f84:	f2c0 0400 	movt	r4, #0
    3f88:	4649      	mov	r1, r9
    3f8a:	a840      	add	r0, sp, #256	; 0x100
    3f8c:	9407      	str	r4, [sp, #28]
    3f8e:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    3f90:	24b0      	movs	r4, #176	; 0xb0
    3f92:	a940      	add	r1, sp, #256	; 0x100
    3f94:	a818      	add	r0, sp, #96	; 0x60
    3f96:	593b      	ldr	r3, [r7, r4]
    3f98:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3f9a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f9c:	2300      	movs	r3, #0
    3f9e:	4688      	mov	r8, r1
    3fa0:	aa18      	add	r2, sp, #96	; 0x60
    3fa2:	56fb      	ldrsb	r3, [r7, r3]
    3fa4:	a840      	add	r0, sp, #256	; 0x100
    3fa6:	9e07      	ldr	r6, [sp, #28]
    3fa8:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3faa:	4640      	mov	r0, r8
    3fac:	a940      	add	r1, sp, #256	; 0x100
    3fae:	593b      	ldr	r3, [r7, r4]
    3fb0:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3fb2:	2300      	movs	r3, #0
    3fb4:	464a      	mov	r2, r9
    3fb6:	56fb      	ldrsb	r3, [r7, r3]
    3fb8:	a918      	add	r1, sp, #96	; 0x60
    3fba:	a840      	add	r0, sp, #256	; 0x100
    3fbc:	9e07      	ldr	r6, [sp, #28]
    3fbe:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3fc0:	ab18      	add	r3, sp, #96	; 0x60
    3fc2:	0018      	movs	r0, r3
    3fc4:	a940      	add	r1, sp, #256	; 0x100
    3fc6:	593b      	ldr	r3, [r7, r4]
    3fc8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3fca:	2300      	movs	r3, #0
    3fcc:	aa18      	add	r2, sp, #96	; 0x60
    3fce:	56fb      	ldrsb	r3, [r7, r3]
    3fd0:	0029      	movs	r1, r5
    3fd2:	a840      	add	r0, sp, #256	; 0x100
    3fd4:	9e07      	ldr	r6, [sp, #28]
    3fd6:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3fd8:	a940      	add	r1, sp, #256	; 0x100
    3fda:	0028      	movs	r0, r5
    3fdc:	593b      	ldr	r3, [r7, r4]
    3fde:	4798      	blx	r3
    curve->double_jacobian(X1, Y1, z, curve);
    3fe0:	23a4      	movs	r3, #164	; 0xa4
    3fe2:	4640      	mov	r0, r8
    3fe4:	58fe      	ldr	r6, [r7, r3]
    3fe6:	464a      	mov	r2, r9
    3fe8:	003b      	movs	r3, r7
    3fea:	0029      	movs	r1, r5
    3fec:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    3fee:	2300      	movs	r3, #0
    3ff0:	9e07      	ldr	r6, [sp, #28]
    3ff2:	464a      	mov	r2, r9
    3ff4:	56fb      	ldrsb	r3, [r7, r3]
    3ff6:	4649      	mov	r1, r9
    3ff8:	a840      	add	r0, sp, #256	; 0x100
    3ffa:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3ffc:	a940      	add	r1, sp, #256	; 0x100
    3ffe:	a818      	add	r0, sp, #96	; 0x60
    4000:	593b      	ldr	r3, [r7, r4]
    4002:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    4004:	2300      	movs	r3, #0
    4006:	aa18      	add	r2, sp, #96	; 0x60
    4008:	56fb      	ldrsb	r3, [r7, r3]
    400a:	4651      	mov	r1, sl
    400c:	a840      	add	r0, sp, #256	; 0x100
    400e:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    4010:	a940      	add	r1, sp, #256	; 0x100
    4012:	4650      	mov	r0, sl
    4014:	593b      	ldr	r3, [r7, r4]
    4016:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    4018:	2300      	movs	r3, #0
    401a:	464a      	mov	r2, r9
    401c:	56fb      	ldrsb	r3, [r7, r3]
    401e:	a918      	add	r1, sp, #96	; 0x60
    4020:	a840      	add	r0, sp, #256	; 0x100
    4022:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    4024:	a940      	add	r1, sp, #256	; 0x100
    4026:	a818      	add	r0, sp, #96	; 0x60
    4028:	593b      	ldr	r3, [r7, r4]
    402a:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    402c:	9909      	ldr	r1, [sp, #36]	; 0x24
    402e:	2300      	movs	r3, #0
    4030:	4688      	mov	r8, r1
    4032:	56fb      	ldrsb	r3, [r7, r3]
    4034:	aa18      	add	r2, sp, #96	; 0x60
    4036:	a840      	add	r0, sp, #256	; 0x100
    4038:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    403a:	593b      	ldr	r3, [r7, r4]
    403c:	a940      	add	r1, sp, #256	; 0x100
    403e:	4640      	mov	r0, r8
    4040:	4798      	blx	r3
    for (i = num_bits - 2; i > 0; --i) {
    4042:	465b      	mov	r3, fp
    4044:	3b02      	subs	r3, #2
    4046:	b21b      	sxth	r3, r3
    4048:	2b00      	cmp	r3, #0
    404a:	dc00      	bgt.n	404e <EccPoint_mult+0x176>
    404c:	e136      	b.n	42bc <EccPoint_mult+0x3e4>
    404e:	f242 72a1 	movw	r2, #10145	; 0x27a1
    4052:	f2c0 0200 	movt	r2, #0
    4056:	9206      	str	r2, [sp, #24]
    4058:	f640 527d 	movw	r2, #3453	; 0xd7d
    405c:	f2c0 0200 	movt	r2, #0
    4060:	9205      	str	r2, [sp, #20]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    4062:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4064:	4693      	mov	fp, r2
    4066:	464a      	mov	r2, r9
    4068:	46b9      	mov	r9, r7
    406a:	920f      	str	r2, [sp, #60]	; 0x3c
    406c:	221f      	movs	r2, #31
    406e:	2101      	movs	r1, #1
    4070:	b29d      	uxth	r5, r3
    4072:	402a      	ands	r2, r5
    4074:	4091      	lsls	r1, r2
    4076:	000a      	movs	r2, r1
    4078:	115b      	asrs	r3, r3, #5
    407a:	9904      	ldr	r1, [sp, #16]
    407c:	009b      	lsls	r3, r3, #2
    407e:	585c      	ldr	r4, [r3, r1]
    4080:	3d01      	subs	r5, #1
    4082:	4014      	ands	r4, r2
        nb = !uECC_vli_testBit(scalar, i);
    4084:	4262      	negs	r2, r4
    4086:	4162      	adcs	r2, r4
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    4088:	2301      	movs	r3, #1
    408a:	1a9e      	subs	r6, r3, r2
    408c:	4653      	mov	r3, sl
    408e:	0154      	lsls	r4, r2, #5
    4090:	191f      	adds	r7, r3, r4
    4092:	0023      	movs	r3, r4
    4094:	0176      	lsls	r6, r6, #5
    4096:	46b0      	mov	r8, r6
    4098:	445b      	add	r3, fp
    409a:	001a      	movs	r2, r3
    409c:	464b      	mov	r3, r9
    409e:	44d0      	add	r8, sl
    40a0:	445e      	add	r6, fp
    40a2:	9300      	str	r3, [sp, #0]
    40a4:	9203      	str	r2, [sp, #12]
    40a6:	0013      	movs	r3, r2
    40a8:	0031      	movs	r1, r6
    40aa:	003a      	movs	r2, r7
    40ac:	4640      	mov	r0, r8
    40ae:	9c06      	ldr	r4, [sp, #24]
    40b0:	47a0      	blx	r4
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    40b2:	464b      	mov	r3, r9
    40b4:	4642      	mov	r2, r8
    40b6:	9300      	str	r3, [sp, #0]
    40b8:	9903      	ldr	r1, [sp, #12]
    40ba:	0033      	movs	r3, r6
    40bc:	0038      	movs	r0, r7
    40be:	9c05      	ldr	r4, [sp, #20]
    40c0:	b2ad      	uxth	r5, r5
    40c2:	47a0      	blx	r4
    40c4:	b22b      	sxth	r3, r5
    for (i = num_bits - 2; i > 0; --i) {
    40c6:	2d00      	cmp	r5, #0
    40c8:	d1d0      	bne.n	406c <EccPoint_mult+0x194>
    40ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    40cc:	464f      	mov	r7, r9
    40ce:	4699      	mov	r9, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    40d0:	9b04      	ldr	r3, [sp, #16]
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40d2:	4651      	mov	r1, sl
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    40d4:	681a      	ldr	r2, [r3, #0]
    40d6:	2301      	movs	r3, #1
    40d8:	001e      	movs	r6, r3
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40da:	9809      	ldr	r0, [sp, #36]	; 0x24
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    40dc:	4016      	ands	r6, r2
    40de:	0176      	lsls	r6, r6, #5
    40e0:	4393      	bics	r3, r2
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40e2:	1989      	adds	r1, r1, r6
    40e4:	4680      	mov	r8, r0
    40e6:	015b      	lsls	r3, r3, #5
    40e8:	000c      	movs	r4, r1
    40ea:	001a      	movs	r2, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    40ec:	f240 7591 	movw	r5, #1937	; 0x791
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40f0:	4446      	add	r6, r8
    40f2:	4498      	add	r8, r3
    40f4:	4452      	add	r2, sl
    40f6:	0020      	movs	r0, r4
    40f8:	9103      	str	r1, [sp, #12]
    40fa:	4643      	mov	r3, r8
    40fc:	0031      	movs	r1, r6
    40fe:	9700      	str	r7, [sp, #0]
    4100:	9c06      	ldr	r4, [sp, #24]
    4102:	9204      	str	r2, [sp, #16]
    4104:	47a0      	blx	r4
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
    4106:	1d3b      	adds	r3, r7, #4
    4108:	469b      	mov	fp, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    410a:	4652      	mov	r2, sl
    410c:	9b08      	ldr	r3, [sp, #32]
    410e:	990a      	ldr	r1, [sp, #40]	; 0x28
    4110:	4648      	mov	r0, r9
    4112:	f2c0 0500 	movt	r5, #0
    4116:	47a8      	blx	r5
    if (l_borrow) {
    4118:	b140      	cbz	r0, 412c <EccPoint_mult+0x254>
        uECC_vli_add(result, result, mod, num_words);
    411a:	f240 7531 	movw	r5, #1841	; 0x731
    411e:	9b08      	ldr	r3, [sp, #32]
    4120:	465a      	mov	r2, fp
    4122:	4649      	mov	r1, r9
    4124:	4648      	mov	r0, r9
    4126:	f2c0 0500 	movt	r5, #0
    412a:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    412c:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    412e:	25b0      	movs	r5, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    4130:	0032      	movs	r2, r6
    4132:	56fb      	ldrsb	r3, [r7, r3]
    4134:	4649      	mov	r1, r9
    4136:	a840      	add	r0, sp, #256	; 0x100
    4138:	9c07      	ldr	r4, [sp, #28]
    413a:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    413c:	a940      	add	r1, sp, #256	; 0x100
    413e:	4648      	mov	r0, r9
    4140:	597b      	ldr	r3, [r7, r5]
    4142:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    4144:	2300      	movs	r3, #0
    4146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4148:	56fb      	ldrsb	r3, [r7, r3]
    414a:	4649      	mov	r1, r9
    414c:	a840      	add	r0, sp, #256	; 0x100
    414e:	9c07      	ldr	r4, [sp, #28]
    4150:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    4152:	597b      	ldr	r3, [r7, r5]
    4154:	a940      	add	r1, sp, #256	; 0x100
    4156:	4648      	mov	r0, r9
    4158:	4798      	blx	r3
    for (i = 0; i < num_words; ++i) {
    415a:	9b08      	ldr	r3, [sp, #32]
    415c:	2b00      	cmp	r3, #0
    415e:	dd1a      	ble.n	4196 <EccPoint_mult+0x2be>
    4160:	1e59      	subs	r1, r3, #1
    4162:	2200      	movs	r2, #0
    4164:	2300      	movs	r3, #0
    4166:	4648      	mov	r0, r9
    4168:	b2c9      	uxtb	r1, r1
    416a:	3101      	adds	r1, #1
    416c:	9c03      	ldr	r4, [sp, #12]
    416e:	0089      	lsls	r1, r1, #2
        bits |= vli[i];
    4170:	5885      	ldr	r5, [r0, r2]
    4172:	3204      	adds	r2, #4
    4174:	432b      	orrs	r3, r5
    for (i = 0; i < num_words; ++i) {
    4176:	428a      	cmp	r2, r1
    4178:	d1fa      	bne.n	4170 <EccPoint_mult+0x298>
    417a:	9403      	str	r4, [sp, #12]
    417c:	4681      	mov	r9, r0
    if (uECC_vli_isZero(input, num_words)) {
    417e:	2b00      	cmp	r3, #0
    4180:	d100      	bne.n	4184 <EccPoint_mult+0x2ac>
    4182:	e071      	b.n	4268 <EccPoint_mult+0x390>
    4184:	f643 1511 	movw	r5, #14609	; 0x3911
    4188:	9b08      	ldr	r3, [sp, #32]
    418a:	465a      	mov	r2, fp
    418c:	4649      	mov	r1, r9
    418e:	4648      	mov	r0, r9
    4190:	f2c0 0500 	movt	r5, #0
    4194:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    4196:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    4198:	25b0      	movs	r5, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    419a:	9c07      	ldr	r4, [sp, #28]
    419c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    419e:	56fb      	ldrsb	r3, [r7, r3]
    41a0:	4649      	mov	r1, r9
    41a2:	a840      	add	r0, sp, #256	; 0x100
    41a4:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41a6:	a940      	add	r1, sp, #256	; 0x100
    41a8:	4648      	mov	r0, r9
    41aa:	597b      	ldr	r3, [r7, r5]
    41ac:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41ae:	9a03      	ldr	r2, [sp, #12]
    41b0:	2300      	movs	r3, #0
    41b2:	4693      	mov	fp, r2
    41b4:	56fb      	ldrsb	r3, [r7, r3]
    41b6:	4649      	mov	r1, r9
    41b8:	a840      	add	r0, sp, #256	; 0x100
    41ba:	9407      	str	r4, [sp, #28]
    41bc:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41be:	a940      	add	r1, sp, #256	; 0x100
    41c0:	4648      	mov	r0, r9
    41c2:	597b      	ldr	r3, [r7, r5]
    41c4:	4798      	blx	r3
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    41c6:	0033      	movs	r3, r6
    41c8:	4641      	mov	r1, r8
    41ca:	465a      	mov	r2, fp
    41cc:	9804      	ldr	r0, [sp, #16]
    41ce:	9700      	str	r7, [sp, #0]
    41d0:	9e05      	ldr	r6, [sp, #20]
    41d2:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    41d4:	2300      	movs	r3, #0
    41d6:	9c07      	ldr	r4, [sp, #28]
    41d8:	464a      	mov	r2, r9
    41da:	56fb      	ldrsb	r3, [r7, r3]
    41dc:	4649      	mov	r1, r9
    41de:	a840      	add	r0, sp, #256	; 0x100
    41e0:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41e2:	a940      	add	r1, sp, #256	; 0x100
    41e4:	a818      	add	r0, sp, #96	; 0x60
    41e6:	597b      	ldr	r3, [r7, r5]
    41e8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41ea:	2300      	movs	r3, #0
    41ec:	aa18      	add	r2, sp, #96	; 0x60
    41ee:	56fb      	ldrsb	r3, [r7, r3]
    41f0:	4651      	mov	r1, sl
    41f2:	a840      	add	r0, sp, #256	; 0x100
    41f4:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41f6:	a940      	add	r1, sp, #256	; 0x100
    41f8:	4650      	mov	r0, sl
    41fa:	597b      	ldr	r3, [r7, r5]
    41fc:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41fe:	2300      	movs	r3, #0
    4200:	464a      	mov	r2, r9
    4202:	56fb      	ldrsb	r3, [r7, r3]
    4204:	a918      	add	r1, sp, #96	; 0x60
    4206:	a840      	add	r0, sp, #256	; 0x100
    4208:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    420a:	a940      	add	r1, sp, #256	; 0x100
    420c:	a818      	add	r0, sp, #96	; 0x60
    420e:	597b      	ldr	r3, [r7, r5]
    4210:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    4212:	9909      	ldr	r1, [sp, #36]	; 0x24
    4214:	2300      	movs	r3, #0
    4216:	4688      	mov	r8, r1
    4218:	56fb      	ldrsb	r3, [r7, r3]
    421a:	aa18      	add	r2, sp, #96	; 0x60
    421c:	a840      	add	r0, sp, #256	; 0x100
    421e:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    4220:	597b      	ldr	r3, [r7, r5]
    4222:	a940      	add	r1, sp, #256	; 0x100
    4224:	4640      	mov	r0, r8
    4226:	4798      	blx	r3
    for (i = 0; i < num_words; ++i) {
    4228:	9b08      	ldr	r3, [sp, #32]
    422a:	2b00      	cmp	r3, #0
    422c:	dd15      	ble.n	425a <EccPoint_mult+0x382>
        dest[i] = src[i];
    422e:	001c      	movs	r4, r3
    4230:	f246 753f 	movw	r5, #26431	; 0x673f
    4234:	3c01      	subs	r4, #1
    4236:	b2e4      	uxtb	r4, r4
    4238:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    423a:	3401      	adds	r4, #1
    423c:	00a4      	lsls	r4, r4, #2
    423e:	0022      	movs	r2, r4
    4240:	4651      	mov	r1, sl
    4242:	0038      	movs	r0, r7
    4244:	f2c0 0500 	movt	r5, #0
    4248:	47a8      	blx	r5
    424a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    424c:	003b      	movs	r3, r7
    424e:	4694      	mov	ip, r2
    4250:	4463      	add	r3, ip
    4252:	0018      	movs	r0, r3
    4254:	0022      	movs	r2, r4
    4256:	4641      	mov	r1, r8
    4258:	47a8      	blx	r5
}
    425a:	b051      	add	sp, #324	; 0x144
    425c:	bc3c      	pop	{r2, r3, r4, r5}
    425e:	4690      	mov	r8, r2
    4260:	4699      	mov	r9, r3
    4262:	46a2      	mov	sl, r4
    4264:	46ab      	mov	fp, r5
    4266:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4268:	f246 7375 	movw	r3, #26485	; 0x6775
    426c:	2100      	movs	r1, #0
    426e:	4648      	mov	r0, r9
    4270:	f2c0 0300 	movt	r3, #0
    4274:	4798      	blx	r3
    4276:	e78e      	b.n	4196 <EccPoint_mult+0x2be>
        dest[i] = src[i];
    4278:	2404      	movs	r4, #4
    427a:	e66e      	b.n	3f5a <EccPoint_mult+0x82>
    427c:	ab10      	add	r3, sp, #64	; 0x40
    427e:	0018      	movs	r0, r3
    4280:	4699      	mov	r9, r3
    4282:	f246 7375 	movw	r3, #26485	; 0x6775
    4286:	0032      	movs	r2, r6
    4288:	f2c0 0300 	movt	r3, #0
    428c:	2100      	movs	r1, #0
    428e:	4798      	blx	r3
        z[0] = 1;
    4290:	2301      	movs	r3, #1
    4292:	9310      	str	r3, [sp, #64]	; 0x40
    4294:	e65a      	b.n	3f4c <EccPoint_mult+0x74>
    uECC_vli_set(Ry[1], point + num_words, num_words);
    4296:	009b      	lsls	r3, r3, #2
    4298:	469c      	mov	ip, r3
    429a:	000a      	movs	r2, r1
    429c:	930e      	str	r3, [sp, #56]	; 0x38
    if (initial_Z) {
    429e:	4643      	mov	r3, r8
    uECC_vli_set(Ry[1], point + num_words, num_words);
    42a0:	4462      	add	r2, ip
    42a2:	920c      	str	r2, [sp, #48]	; 0x30
    if (initial_Z) {
    42a4:	b1ab      	cbz	r3, 42d2 <EccPoint_mult+0x3fa>
    42a6:	aa28      	add	r2, sp, #160	; 0xa0
    42a8:	920a      	str	r2, [sp, #40]	; 0x28
    42aa:	aa10      	add	r2, sp, #64	; 0x40
    42ac:	4691      	mov	r9, r2
    42ae:	aa20      	add	r2, sp, #128	; 0x80
    42b0:	4692      	mov	sl, r2
    42b2:	aa30      	add	r2, sp, #192	; 0xc0
    42b4:	9b08      	ldr	r3, [sp, #32]
    42b6:	ad38      	add	r5, sp, #224	; 0xe0
    42b8:	9209      	str	r2, [sp, #36]	; 0x24
    42ba:	e660      	b.n	3f7e <EccPoint_mult+0xa6>
    42bc:	f242 73a1 	movw	r3, #10145	; 0x27a1
    42c0:	f2c0 0300 	movt	r3, #0
    42c4:	9306      	str	r3, [sp, #24]
    42c6:	f640 537d 	movw	r3, #3453	; 0xd7d
    42ca:	f2c0 0300 	movt	r3, #0
    42ce:	9305      	str	r3, [sp, #20]
    42d0:	e6fe      	b.n	40d0 <EccPoint_mult+0x1f8>
        z[0] = 1;
    42d2:	2301      	movs	r3, #1
    42d4:	9310      	str	r3, [sp, #64]	; 0x40
    42d6:	e7e6      	b.n	42a6 <EccPoint_mult+0x3ce>
	...

000042e0 <mod_sqrt_secp224r1>:
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    42e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42e2:	46de      	mov	lr, fp
    42e4:	4645      	mov	r5, r8
    42e6:	4657      	mov	r7, sl
    42e8:	464e      	mov	r6, r9
    42ea:	b5e0      	push	{r5, r6, r7, lr}
    42ec:	b0ed      	sub	sp, #436	; 0x1b4
    uECC_word_t e0[num_words_secp224r1] = {1}; /* e0 <-- 1 */
    42ee:	ab3d      	add	r3, sp, #244	; 0xf4
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    42f0:	0004      	movs	r4, r0
    42f2:	9007      	str	r0, [sp, #28]
    uECC_word_t e0[num_words_secp224r1] = {1}; /* e0 <-- 1 */
    42f4:	0018      	movs	r0, r3
    42f6:	f246 7375 	movw	r3, #26485	; 0x6775
    42fa:	221c      	movs	r2, #28
    42fc:	2100      	movs	r1, #0
    42fe:	f2c0 0300 	movt	r3, #0
    4302:	4798      	blx	r3
    4304:	2301      	movs	r3, #1
    4306:	933d      	str	r3, [sp, #244]	; 0xf4
    4308:	f246 733f 	movw	r3, #26431	; 0x673f
    430c:	0021      	movs	r1, r4
    430e:	f2c0 0300 	movt	r3, #0
    4312:	221c      	movs	r2, #28
    4314:	a836      	add	r0, sp, #216	; 0xd8
    4316:	9318      	str	r3, [sp, #96]	; 0x60
    4318:	4798      	blx	r3
    __asm__ volatile (
    431a:	f646 13d8 	movw	r3, #27096	; 0x69d8
    431e:	f2c0 0300 	movt	r3, #0
    4322:	9319      	str	r3, [sp, #100]	; 0x64
    4324:	3304      	adds	r3, #4
    4326:	469c      	mov	ip, r3
    4328:	2509      	movs	r5, #9
    432a:	ab44      	add	r3, sp, #272	; 0x110
    432c:	4662      	mov	r2, ip
    432e:	0021      	movs	r1, r4
    4330:	0028      	movs	r0, r5
    4332:	2600      	movs	r6, #0
    4334:	a705      	add	r7, pc, #20	; (adr r7, 434c <mod_sqrt_secp224r1+0x6c>)
    4336:	46c0      	nop			; (mov r8, r8)
    4338:	46c0      	nop			; (mov r8, r8)
    433a:	46c0      	nop			; (mov r8, r8)
    433c:	46c0      	nop			; (mov r8, r8)
    433e:	46c0      	nop			; (mov r8, r8)
    4340:	19c0      	adds	r0, r0, r7
    4342:	ca80      	ldmia	r2!, {r7}
    4344:	c910      	ldmia	r1!, {r4}
    4346:	1b3f      	subs	r7, r7, r4
    4348:	c380      	stmia	r3!, {r7}
    434a:	4700      	bx	r0
    434c:	ca80      	ldmia	r2!, {r7}
    434e:	c910      	ldmia	r1!, {r4}
    4350:	41a7      	sbcs	r7, r4
    4352:	c380      	stmia	r3!, {r7}
    4354:	ca80      	ldmia	r2!, {r7}
    4356:	c910      	ldmia	r1!, {r4}
    4358:	41a7      	sbcs	r7, r4
    435a:	c380      	stmia	r3!, {r7}
    435c:	ca80      	ldmia	r2!, {r7}
    435e:	c910      	ldmia	r1!, {r4}
    4360:	41a7      	sbcs	r7, r4
    4362:	c380      	stmia	r3!, {r7}
    4364:	ca80      	ldmia	r2!, {r7}
    4366:	c910      	ldmia	r1!, {r4}
    4368:	41a7      	sbcs	r7, r4
    436a:	c380      	stmia	r3!, {r7}
    436c:	ca80      	ldmia	r2!, {r7}
    436e:	c910      	ldmia	r1!, {r4}
    4370:	41a7      	sbcs	r7, r4
    4372:	c380      	stmia	r3!, {r7}
    4374:	ca80      	ldmia	r2!, {r7}
    4376:	c910      	ldmia	r1!, {r4}
    4378:	41a7      	sbcs	r7, r4
    437a:	c380      	stmia	r3!, {r7}
    437c:	ca80      	ldmia	r2!, {r7}
    437e:	c910      	ldmia	r1!, {r4}
    4380:	41a7      	sbcs	r7, r4
    4382:	c380      	stmia	r3!, {r7}
    4384:	4176      	adcs	r6, r6
    if (l_borrow) {
    4386:	2e00      	cmp	r6, #0
    4388:	d12d      	bne.n	43e6 <mod_sqrt_secp224r1+0x106>
    __asm__ volatile (
    438a:	ab44      	add	r3, sp, #272	; 0x110
    438c:	4662      	mov	r2, ip
    438e:	0029      	movs	r1, r5
    4390:	0018      	movs	r0, r3
    4392:	2400      	movs	r4, #0
    4394:	a505      	add	r5, pc, #20	; (adr r5, 43ac <mod_sqrt_secp224r1+0xcc>)
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	46c0      	nop			; (mov r8, r8)
    439a:	46c0      	nop			; (mov r8, r8)
    439c:	46c0      	nop			; (mov r8, r8)
    439e:	46c0      	nop			; (mov r8, r8)
    43a0:	1949      	adds	r1, r1, r5
    43a2:	c820      	ldmia	r0!, {r5}
    43a4:	ca40      	ldmia	r2!, {r6}
    43a6:	19ad      	adds	r5, r5, r6
    43a8:	c320      	stmia	r3!, {r5}
    43aa:	4708      	bx	r1
    43ac:	c820      	ldmia	r0!, {r5}
    43ae:	ca40      	ldmia	r2!, {r6}
    43b0:	4175      	adcs	r5, r6
    43b2:	c320      	stmia	r3!, {r5}
    43b4:	c820      	ldmia	r0!, {r5}
    43b6:	ca40      	ldmia	r2!, {r6}
    43b8:	4175      	adcs	r5, r6
    43ba:	c320      	stmia	r3!, {r5}
    43bc:	c820      	ldmia	r0!, {r5}
    43be:	ca40      	ldmia	r2!, {r6}
    43c0:	4175      	adcs	r5, r6
    43c2:	c320      	stmia	r3!, {r5}
    43c4:	c820      	ldmia	r0!, {r5}
    43c6:	ca40      	ldmia	r2!, {r6}
    43c8:	4175      	adcs	r5, r6
    43ca:	c320      	stmia	r3!, {r5}
    43cc:	c820      	ldmia	r0!, {r5}
    43ce:	ca40      	ldmia	r2!, {r6}
    43d0:	4175      	adcs	r5, r6
    43d2:	c320      	stmia	r3!, {r5}
    43d4:	c820      	ldmia	r0!, {r5}
    43d6:	ca40      	ldmia	r2!, {r6}
    43d8:	4175      	adcs	r5, r6
    43da:	c320      	stmia	r3!, {r5}
    43dc:	c820      	ldmia	r0!, {r5}
    43de:	ca40      	ldmia	r2!, {r6}
    43e0:	4175      	adcs	r5, r6
    43e2:	c320      	stmia	r3!, {r5}
    43e4:	4164      	adcs	r4, r4
    43e6:	f240 75ed 	movw	r5, #2029	; 0x7ed
    43ea:	9b44      	ldr	r3, [sp, #272]	; 0x110
    43ec:	f2c0 0500 	movt	r5, #0
    43f0:	9309      	str	r3, [sp, #36]	; 0x24
    43f2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    43f4:	9f38      	ldr	r7, [sp, #224]	; 0xe0
    43f6:	930a      	str	r3, [sp, #40]	; 0x28
    43f8:	9b46      	ldr	r3, [sp, #280]	; 0x118
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    43fa:	2407      	movs	r4, #7
    43fc:	930b      	str	r3, [sp, #44]	; 0x2c
    43fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    4400:	f241 2b71 	movw	fp, #4721	; 0x1271
    4404:	930c      	str	r3, [sp, #48]	; 0x30
    4406:	9b48      	ldr	r3, [sp, #288]	; 0x120
    __asm__ volatile (
    4408:	f240 0909 	movw	r9, #9
    440c:	930d      	str	r3, [sp, #52]	; 0x34
    440e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    4410:	f2c0 0b00 	movt	fp, #0
    4414:	930e      	str	r3, [sp, #56]	; 0x38
    4416:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    4418:	930f      	str	r3, [sp, #60]	; 0x3c
    441a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    441c:	9310      	str	r3, [sp, #64]	; 0x40
    441e:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    4420:	9311      	str	r3, [sp, #68]	; 0x44
    4422:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4424:	9312      	str	r3, [sp, #72]	; 0x48
    4426:	9b40      	ldr	r3, [sp, #256]	; 0x100
    4428:	9313      	str	r3, [sp, #76]	; 0x4c
    442a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    442c:	9314      	str	r3, [sp, #80]	; 0x50
    442e:	9b42      	ldr	r3, [sp, #264]	; 0x108
    4430:	9315      	str	r3, [sp, #84]	; 0x54
    4432:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    4434:	9316      	str	r3, [sp, #88]	; 0x58
    4436:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4438:	9317      	str	r3, [sp, #92]	; 0x5c
    443a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    443c:	9839      	ldr	r0, [sp, #228]	; 0xe4
    443e:	9505      	str	r5, [sp, #20]
    4440:	ad4c      	add	r5, sp, #304	; 0x130
    4442:	46aa      	mov	sl, r5
    4444:	f640 7531 	movw	r5, #3889	; 0xf31
    4448:	f2c0 0500 	movt	r5, #0
    444c:	9504      	str	r5, [sp, #16]
    444e:	ad2f      	add	r5, sp, #188	; 0xbc
    4450:	9503      	str	r5, [sp, #12]
    4452:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4454:	469c      	mov	ip, r3
    4456:	3504      	adds	r5, #4
    4458:	46a8      	mov	r8, r5
    445a:	9408      	str	r4, [sp, #32]
    445c:	993a      	ldr	r1, [sp, #232]	; 0xe8
    445e:	3c06      	subs	r4, #6
    4460:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    4462:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    4464:	9406      	str	r4, [sp, #24]
    4466:	ac28      	add	r4, sp, #160	; 0xa0
        mod_sqrt_secp224r1_rss(d1, e1, f1, d0, e0, f0, pow2i); /* RSS (d1,e1,f1,d0,e0,f0,2^i) */
    4468:	466d      	mov	r5, sp
    446a:	2618      	movs	r6, #24
    446c:	5fad      	ldrsh	r5, [r5, r6]
        dest[i] = src[i];
    446e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    4470:	9327      	str	r3, [sp, #156]	; 0x9c
    4472:	9621      	str	r6, [sp, #132]	; 0x84
    4474:	4666      	mov	r6, ip
    4476:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4478:	9622      	str	r6, [sp, #136]	; 0x88
    447a:	9328      	str	r3, [sp, #160]	; 0xa0
    447c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    447e:	9723      	str	r7, [sp, #140]	; 0x8c
    4480:	9329      	str	r3, [sp, #164]	; 0xa4
    4482:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4484:	9024      	str	r0, [sp, #144]	; 0x90
    4486:	932a      	str	r3, [sp, #168]	; 0xa8
    4488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    448a:	9125      	str	r1, [sp, #148]	; 0x94
    448c:	932b      	str	r3, [sp, #172]	; 0xac
    448e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4490:	9226      	str	r2, [sp, #152]	; 0x98
    4492:	932c      	str	r3, [sp, #176]	; 0xb0
    4494:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for (i = 1; i <= j; i++) {
    4496:	2701      	movs	r7, #1
    4498:	932d      	str	r3, [sp, #180]	; 0xb4
    449a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    449c:	1e2e      	subs	r6, r5, #0
    449e:	932e      	str	r3, [sp, #184]	; 0xb8
    44a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44a2:	932f      	str	r3, [sp, #188]	; 0xbc
    44a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44a6:	9330      	str	r3, [sp, #192]	; 0xc0
    44a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    44aa:	9331      	str	r3, [sp, #196]	; 0xc4
    44ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    44ae:	9332      	str	r3, [sp, #200]	; 0xc8
    44b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    44b2:	9333      	str	r3, [sp, #204]	; 0xcc
    44b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    44b6:	9334      	str	r3, [sp, #208]	; 0xd0
    44b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    44ba:	9335      	str	r3, [sp, #212]	; 0xd4
    44bc:	dd0a      	ble.n	44d4 <mod_sqrt_secp224r1+0x1f4>
        mod_sqrt_secp224r1_rs(d1, e1, f1, d1, e1, f1); /* RS (d1,e1,f1,d1,e1,f1) */
    44be:	9a03      	ldr	r2, [sp, #12]
    44c0:	ab21      	add	r3, sp, #132	; 0x84
    44c2:	3701      	adds	r7, #1
    44c4:	9201      	str	r2, [sp, #4]
    44c6:	9400      	str	r4, [sp, #0]
    44c8:	0021      	movs	r1, r4
    44ca:	0018      	movs	r0, r3
    44cc:	b23f      	sxth	r7, r7
    44ce:	47d8      	blx	fp
    for (i = 1; i <= j; i++) {
    44d0:	42be      	cmp	r6, r7
    44d2:	daf4      	bge.n	44be <mod_sqrt_secp224r1+0x1de>
    uECC_vli_mult(product, left, right, curve->num_words);
    44d4:	aa3d      	add	r2, sp, #244	; 0xf4
    44d6:	2307      	movs	r3, #7
    44d8:	0021      	movs	r1, r4
    44da:	a85c      	add	r0, sp, #368	; 0x170
    44dc:	9f05      	ldr	r7, [sp, #20]
    44de:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    44e0:	a95c      	add	r1, sp, #368	; 0x170
    44e2:	4650      	mov	r0, sl
    44e4:	9d04      	ldr	r5, [sp, #16]
    44e6:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    44e8:	9a07      	ldr	r2, [sp, #28]
    44ea:	2307      	movs	r3, #7
    44ec:	4651      	mov	r1, sl
    44ee:	a85c      	add	r0, sp, #368	; 0x170
    44f0:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    44f2:	a95c      	add	r1, sp, #368	; 0x170
    44f4:	4650      	mov	r0, sl
    44f6:	47a8      	blx	r5
    44f8:	4656      	mov	r6, sl
    44fa:	4653      	mov	r3, sl
    44fc:	4642      	mov	r2, r8
    44fe:	4649      	mov	r1, r9
    4500:	2000      	movs	r0, #0
    4502:	a706      	add	r7, pc, #24	; (adr r7, 451c <mod_sqrt_secp224r1+0x23c>)
    4504:	46c0      	nop			; (mov r8, r8)
    4506:	46c0      	nop			; (mov r8, r8)
    4508:	46c0      	nop			; (mov r8, r8)
    450a:	46c0      	nop			; (mov r8, r8)
    450c:	46c0      	nop			; (mov r8, r8)
    450e:	46c0      	nop			; (mov r8, r8)
    4510:	19c9      	adds	r1, r1, r7
    4512:	ca80      	ldmia	r2!, {r7}
    4514:	ce20      	ldmia	r6!, {r5}
    4516:	1b7f      	subs	r7, r7, r5
    4518:	c380      	stmia	r3!, {r7}
    451a:	4708      	bx	r1
    451c:	ca80      	ldmia	r2!, {r7}
    451e:	ce20      	ldmia	r6!, {r5}
    4520:	41af      	sbcs	r7, r5
    4522:	c380      	stmia	r3!, {r7}
    4524:	ca80      	ldmia	r2!, {r7}
    4526:	ce20      	ldmia	r6!, {r5}
    4528:	41af      	sbcs	r7, r5
    452a:	c380      	stmia	r3!, {r7}
    452c:	ca80      	ldmia	r2!, {r7}
    452e:	ce20      	ldmia	r6!, {r5}
    4530:	41af      	sbcs	r7, r5
    4532:	c380      	stmia	r3!, {r7}
    4534:	ca80      	ldmia	r2!, {r7}
    4536:	ce20      	ldmia	r6!, {r5}
    4538:	41af      	sbcs	r7, r5
    453a:	c380      	stmia	r3!, {r7}
    453c:	ca80      	ldmia	r2!, {r7}
    453e:	ce20      	ldmia	r6!, {r5}
    4540:	41af      	sbcs	r7, r5
    4542:	c380      	stmia	r3!, {r7}
    4544:	ca80      	ldmia	r2!, {r7}
    4546:	ce20      	ldmia	r6!, {r5}
    4548:	41af      	sbcs	r7, r5
    454a:	c380      	stmia	r3!, {r7}
    454c:	ca80      	ldmia	r2!, {r7}
    454e:	ce20      	ldmia	r6!, {r5}
    4550:	41af      	sbcs	r7, r5
    4552:	c380      	stmia	r3!, {r7}
    4554:	4140      	adcs	r0, r0
    if (l_borrow) {
    4556:	2800      	cmp	r0, #0
    4558:	d12d      	bne.n	45b6 <mod_sqrt_secp224r1+0x2d6>
    __asm__ volatile (
    455a:	4653      	mov	r3, sl
    455c:	4642      	mov	r2, r8
    455e:	4649      	mov	r1, r9
    4560:	4650      	mov	r0, sl
    4562:	2600      	movs	r6, #0
    4564:	a705      	add	r7, pc, #20	; (adr r7, 457c <mod_sqrt_secp224r1+0x29c>)
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	46c0      	nop			; (mov r8, r8)
    456a:	46c0      	nop			; (mov r8, r8)
    456c:	46c0      	nop			; (mov r8, r8)
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	19c9      	adds	r1, r1, r7
    4572:	c880      	ldmia	r0!, {r7}
    4574:	ca20      	ldmia	r2!, {r5}
    4576:	197f      	adds	r7, r7, r5
    4578:	c380      	stmia	r3!, {r7}
    457a:	4708      	bx	r1
    457c:	c880      	ldmia	r0!, {r7}
    457e:	ca20      	ldmia	r2!, {r5}
    4580:	416f      	adcs	r7, r5
    4582:	c380      	stmia	r3!, {r7}
    4584:	c880      	ldmia	r0!, {r7}
    4586:	ca20      	ldmia	r2!, {r5}
    4588:	416f      	adcs	r7, r5
    458a:	c380      	stmia	r3!, {r7}
    458c:	c880      	ldmia	r0!, {r7}
    458e:	ca20      	ldmia	r2!, {r5}
    4590:	416f      	adcs	r7, r5
    4592:	c380      	stmia	r3!, {r7}
    4594:	c880      	ldmia	r0!, {r7}
    4596:	ca20      	ldmia	r2!, {r5}
    4598:	416f      	adcs	r7, r5
    459a:	c380      	stmia	r3!, {r7}
    459c:	c880      	ldmia	r0!, {r7}
    459e:	ca20      	ldmia	r2!, {r5}
    45a0:	416f      	adcs	r7, r5
    45a2:	c380      	stmia	r3!, {r7}
    45a4:	c880      	ldmia	r0!, {r7}
    45a6:	ca20      	ldmia	r2!, {r5}
    45a8:	416f      	adcs	r7, r5
    45aa:	c380      	stmia	r3!, {r7}
    45ac:	c880      	ldmia	r0!, {r7}
    45ae:	ca20      	ldmia	r2!, {r5}
    45b0:	416f      	adcs	r7, r5
    45b2:	c380      	stmia	r3!, {r7}
    45b4:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    45b6:	aa36      	add	r2, sp, #216	; 0xd8
    45b8:	a921      	add	r1, sp, #132	; 0x84
    45ba:	a85c      	add	r0, sp, #368	; 0x170
    45bc:	9e05      	ldr	r6, [sp, #20]
    45be:	2307      	movs	r3, #7
    45c0:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    45c2:	a95c      	add	r1, sp, #368	; 0x170
    45c4:	9b04      	ldr	r3, [sp, #16]
    45c6:	a854      	add	r0, sp, #336	; 0x150
    45c8:	4798      	blx	r3
    45ca:	ab54      	add	r3, sp, #336	; 0x150
    45cc:	4652      	mov	r2, sl
    45ce:	4649      	mov	r1, r9
    45d0:	001e      	movs	r6, r3
    45d2:	2000      	movs	r0, #0
    45d4:	a705      	add	r7, pc, #20	; (adr r7, 45ec <mod_sqrt_secp224r1+0x30c>)
    45d6:	46c0      	nop			; (mov r8, r8)
    45d8:	46c0      	nop			; (mov r8, r8)
    45da:	46c0      	nop			; (mov r8, r8)
    45dc:	46c0      	nop			; (mov r8, r8)
    45de:	46c0      	nop			; (mov r8, r8)
    45e0:	19c9      	adds	r1, r1, r7
    45e2:	ce80      	ldmia	r6!, {r7}
    45e4:	ca20      	ldmia	r2!, {r5}
    45e6:	197f      	adds	r7, r7, r5
    45e8:	c380      	stmia	r3!, {r7}
    45ea:	4708      	bx	r1
    45ec:	ce80      	ldmia	r6!, {r7}
    45ee:	ca20      	ldmia	r2!, {r5}
    45f0:	416f      	adcs	r7, r5
    45f2:	c380      	stmia	r3!, {r7}
    45f4:	ce80      	ldmia	r6!, {r7}
    45f6:	ca20      	ldmia	r2!, {r5}
    45f8:	416f      	adcs	r7, r5
    45fa:	c380      	stmia	r3!, {r7}
    45fc:	ce80      	ldmia	r6!, {r7}
    45fe:	ca20      	ldmia	r2!, {r5}
    4600:	416f      	adcs	r7, r5
    4602:	c380      	stmia	r3!, {r7}
    4604:	ce80      	ldmia	r6!, {r7}
    4606:	ca20      	ldmia	r2!, {r5}
    4608:	416f      	adcs	r7, r5
    460a:	c380      	stmia	r3!, {r7}
    460c:	ce80      	ldmia	r6!, {r7}
    460e:	ca20      	ldmia	r2!, {r5}
    4610:	416f      	adcs	r7, r5
    4612:	c380      	stmia	r3!, {r7}
    4614:	ce80      	ldmia	r6!, {r7}
    4616:	ca20      	ldmia	r2!, {r5}
    4618:	416f      	adcs	r7, r5
    461a:	c380      	stmia	r3!, {r7}
    461c:	ce80      	ldmia	r6!, {r7}
    461e:	ca20      	ldmia	r2!, {r5}
    4620:	416f      	adcs	r7, r5
    4622:	c380      	stmia	r3!, {r7}
    4624:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    4626:	b990      	cbnz	r0, 464e <mod_sqrt_secp224r1+0x36e>
        if (left[i] > right[i]) {
    4628:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    462a:	3301      	adds	r3, #1
    462c:	d13b      	bne.n	46a6 <mod_sqrt_secp224r1+0x3c6>
    462e:	9b59      	ldr	r3, [sp, #356]	; 0x164
    4630:	3301      	adds	r3, #1
    4632:	d138      	bne.n	46a6 <mod_sqrt_secp224r1+0x3c6>
    4634:	9b58      	ldr	r3, [sp, #352]	; 0x160
    4636:	3301      	adds	r3, #1
    4638:	d135      	bne.n	46a6 <mod_sqrt_secp224r1+0x3c6>
    463a:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    463c:	3301      	adds	r3, #1
    463e:	d132      	bne.n	46a6 <mod_sqrt_secp224r1+0x3c6>
        } else if (left[i] < right[i]) {
    4640:	9b56      	ldr	r3, [sp, #344]	; 0x158
    4642:	b923      	cbnz	r3, 464e <mod_sqrt_secp224r1+0x36e>
    4644:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4646:	b913      	cbnz	r3, 464e <mod_sqrt_secp224r1+0x36e>
        if (left[i] > right[i]) {
    4648:	9b54      	ldr	r3, [sp, #336]	; 0x150
    464a:	2b00      	cmp	r3, #0
    464c:	d02b      	beq.n	46a6 <mod_sqrt_secp224r1+0x3c6>
    __asm__ volatile (
    464e:	ab54      	add	r3, sp, #336	; 0x150
    4650:	4642      	mov	r2, r8
    4652:	4649      	mov	r1, r9
    4654:	0018      	movs	r0, r3
    4656:	2600      	movs	r6, #0
    4658:	a704      	add	r7, pc, #16	; (adr r7, 466c <mod_sqrt_secp224r1+0x38c>)
    465a:	46c0      	nop			; (mov r8, r8)
    465c:	46c0      	nop			; (mov r8, r8)
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	19c9      	adds	r1, r1, r7
    4662:	c880      	ldmia	r0!, {r7}
    4664:	ca20      	ldmia	r2!, {r5}
    4666:	1b7f      	subs	r7, r7, r5
    4668:	c380      	stmia	r3!, {r7}
    466a:	4708      	bx	r1
    466c:	c880      	ldmia	r0!, {r7}
    466e:	ca20      	ldmia	r2!, {r5}
    4670:	41af      	sbcs	r7, r5
    4672:	c380      	stmia	r3!, {r7}
    4674:	c880      	ldmia	r0!, {r7}
    4676:	ca20      	ldmia	r2!, {r5}
    4678:	41af      	sbcs	r7, r5
    467a:	c380      	stmia	r3!, {r7}
    467c:	c880      	ldmia	r0!, {r7}
    467e:	ca20      	ldmia	r2!, {r5}
    4680:	41af      	sbcs	r7, r5
    4682:	c380      	stmia	r3!, {r7}
    4684:	c880      	ldmia	r0!, {r7}
    4686:	ca20      	ldmia	r2!, {r5}
    4688:	41af      	sbcs	r7, r5
    468a:	c380      	stmia	r3!, {r7}
    468c:	c880      	ldmia	r0!, {r7}
    468e:	ca20      	ldmia	r2!, {r5}
    4690:	41af      	sbcs	r7, r5
    4692:	c380      	stmia	r3!, {r7}
    4694:	c880      	ldmia	r0!, {r7}
    4696:	ca20      	ldmia	r2!, {r5}
    4698:	41af      	sbcs	r7, r5
    469a:	c380      	stmia	r3!, {r7}
    469c:	c880      	ldmia	r0!, {r7}
    469e:	ca20      	ldmia	r2!, {r5}
    46a0:	41af      	sbcs	r7, r5
    46a2:	c380      	stmia	r3!, {r7}
    46a4:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    46a6:	aa3d      	add	r2, sp, #244	; 0xf4
    46a8:	2307      	movs	r3, #7
    46aa:	a921      	add	r1, sp, #132	; 0x84
    46ac:	a85c      	add	r0, sp, #368	; 0x170
    46ae:	9f05      	ldr	r7, [sp, #20]
    46b0:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    46b2:	a95c      	add	r1, sp, #368	; 0x170
    46b4:	4650      	mov	r0, sl
    46b6:	9d04      	ldr	r5, [sp, #16]
    46b8:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    46ba:	0022      	movs	r2, r4
    46bc:	2307      	movs	r3, #7
    46be:	a936      	add	r1, sp, #216	; 0xd8
    46c0:	a85c      	add	r0, sp, #368	; 0x170
    46c2:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    46c4:	a95c      	add	r1, sp, #368	; 0x170
    46c6:	0020      	movs	r0, r4
    46c8:	47a8      	blx	r5
    __asm__ volatile (
    46ca:	0026      	movs	r6, r4
    46cc:	0023      	movs	r3, r4
    46ce:	4652      	mov	r2, sl
    46d0:	4649      	mov	r1, r9
    46d2:	2000      	movs	r0, #0
    46d4:	a705      	add	r7, pc, #20	; (adr r7, 46ec <mod_sqrt_secp224r1+0x40c>)
    46d6:	46c0      	nop			; (mov r8, r8)
    46d8:	46c0      	nop			; (mov r8, r8)
    46da:	46c0      	nop			; (mov r8, r8)
    46dc:	46c0      	nop			; (mov r8, r8)
    46de:	46c0      	nop			; (mov r8, r8)
    46e0:	19c9      	adds	r1, r1, r7
    46e2:	ce80      	ldmia	r6!, {r7}
    46e4:	ca20      	ldmia	r2!, {r5}
    46e6:	197f      	adds	r7, r7, r5
    46e8:	c380      	stmia	r3!, {r7}
    46ea:	4708      	bx	r1
    46ec:	ce80      	ldmia	r6!, {r7}
    46ee:	ca20      	ldmia	r2!, {r5}
    46f0:	416f      	adcs	r7, r5
    46f2:	c380      	stmia	r3!, {r7}
    46f4:	ce80      	ldmia	r6!, {r7}
    46f6:	ca20      	ldmia	r2!, {r5}
    46f8:	416f      	adcs	r7, r5
    46fa:	c380      	stmia	r3!, {r7}
    46fc:	ce80      	ldmia	r6!, {r7}
    46fe:	ca20      	ldmia	r2!, {r5}
    4700:	416f      	adcs	r7, r5
    4702:	c380      	stmia	r3!, {r7}
    4704:	ce80      	ldmia	r6!, {r7}
    4706:	ca20      	ldmia	r2!, {r5}
    4708:	416f      	adcs	r7, r5
    470a:	c380      	stmia	r3!, {r7}
    470c:	ce80      	ldmia	r6!, {r7}
    470e:	ca20      	ldmia	r2!, {r5}
    4710:	416f      	adcs	r7, r5
    4712:	c380      	stmia	r3!, {r7}
    4714:	ce80      	ldmia	r6!, {r7}
    4716:	ca20      	ldmia	r2!, {r5}
    4718:	416f      	adcs	r7, r5
    471a:	c380      	stmia	r3!, {r7}
    471c:	ce80      	ldmia	r6!, {r7}
    471e:	ca20      	ldmia	r2!, {r5}
    4720:	416f      	adcs	r7, r5
    4722:	c380      	stmia	r3!, {r7}
    4724:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    4726:	b990      	cbnz	r0, 474e <mod_sqrt_secp224r1+0x46e>
        if (left[i] > right[i]) {
    4728:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    472a:	3301      	adds	r3, #1
    472c:	d13b      	bne.n	47a6 <mod_sqrt_secp224r1+0x4c6>
    472e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    4730:	3301      	adds	r3, #1
    4732:	d138      	bne.n	47a6 <mod_sqrt_secp224r1+0x4c6>
    4734:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    4736:	3301      	adds	r3, #1
    4738:	d135      	bne.n	47a6 <mod_sqrt_secp224r1+0x4c6>
    473a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    473c:	3301      	adds	r3, #1
    473e:	d132      	bne.n	47a6 <mod_sqrt_secp224r1+0x4c6>
        } else if (left[i] < right[i]) {
    4740:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4742:	b923      	cbnz	r3, 474e <mod_sqrt_secp224r1+0x46e>
    4744:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4746:	b913      	cbnz	r3, 474e <mod_sqrt_secp224r1+0x46e>
        if (left[i] > right[i]) {
    4748:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    474a:	2b00      	cmp	r3, #0
    474c:	d02b      	beq.n	47a6 <mod_sqrt_secp224r1+0x4c6>
    __asm__ volatile (
    474e:	0023      	movs	r3, r4
    4750:	4642      	mov	r2, r8
    4752:	4649      	mov	r1, r9
    4754:	0020      	movs	r0, r4
    4756:	2600      	movs	r6, #0
    4758:	a704      	add	r7, pc, #16	; (adr r7, 476c <mod_sqrt_secp224r1+0x48c>)
    475a:	46c0      	nop			; (mov r8, r8)
    475c:	46c0      	nop			; (mov r8, r8)
    475e:	46c0      	nop			; (mov r8, r8)
    4760:	19c9      	adds	r1, r1, r7
    4762:	c880      	ldmia	r0!, {r7}
    4764:	ca20      	ldmia	r2!, {r5}
    4766:	1b7f      	subs	r7, r7, r5
    4768:	c380      	stmia	r3!, {r7}
    476a:	4708      	bx	r1
    476c:	c880      	ldmia	r0!, {r7}
    476e:	ca20      	ldmia	r2!, {r5}
    4770:	41af      	sbcs	r7, r5
    4772:	c380      	stmia	r3!, {r7}
    4774:	c880      	ldmia	r0!, {r7}
    4776:	ca20      	ldmia	r2!, {r5}
    4778:	41af      	sbcs	r7, r5
    477a:	c380      	stmia	r3!, {r7}
    477c:	c880      	ldmia	r0!, {r7}
    477e:	ca20      	ldmia	r2!, {r5}
    4780:	41af      	sbcs	r7, r5
    4782:	c380      	stmia	r3!, {r7}
    4784:	c880      	ldmia	r0!, {r7}
    4786:	ca20      	ldmia	r2!, {r5}
    4788:	41af      	sbcs	r7, r5
    478a:	c380      	stmia	r3!, {r7}
    478c:	c880      	ldmia	r0!, {r7}
    478e:	ca20      	ldmia	r2!, {r5}
    4790:	41af      	sbcs	r7, r5
    4792:	c380      	stmia	r3!, {r7}
    4794:	c880      	ldmia	r0!, {r7}
    4796:	ca20      	ldmia	r2!, {r5}
    4798:	41af      	sbcs	r7, r5
    479a:	c380      	stmia	r3!, {r7}
    479c:	c880      	ldmia	r0!, {r7}
    479e:	ca20      	ldmia	r2!, {r5}
    47a0:	41af      	sbcs	r7, r5
    47a2:	c380      	stmia	r3!, {r7}
    47a4:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    47a6:	0022      	movs	r2, r4
    47a8:	2307      	movs	r3, #7
    47aa:	0021      	movs	r1, r4
    47ac:	a85c      	add	r0, sp, #368	; 0x170
    47ae:	9f05      	ldr	r7, [sp, #20]
    47b0:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    47b2:	9e03      	ldr	r6, [sp, #12]
    47b4:	a95c      	add	r1, sp, #368	; 0x170
    47b6:	0030      	movs	r0, r6
    47b8:	9d04      	ldr	r5, [sp, #16]
    47ba:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    47bc:	9a07      	ldr	r2, [sp, #28]
    47be:	2307      	movs	r3, #7
    47c0:	0031      	movs	r1, r6
    47c2:	a85c      	add	r0, sp, #368	; 0x170
    47c4:	9603      	str	r6, [sp, #12]
    47c6:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    47c8:	9e03      	ldr	r6, [sp, #12]
    47ca:	a95c      	add	r1, sp, #368	; 0x170
    47cc:	0030      	movs	r0, r6
    47ce:	47a8      	blx	r5
    47d0:	0033      	movs	r3, r6
    47d2:	4642      	mov	r2, r8
    47d4:	4649      	mov	r1, r9
    47d6:	2000      	movs	r0, #0
    47d8:	a704      	add	r7, pc, #16	; (adr r7, 47ec <mod_sqrt_secp224r1+0x50c>)
    47da:	46c0      	nop			; (mov r8, r8)
    47dc:	46c0      	nop			; (mov r8, r8)
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	19c9      	adds	r1, r1, r7
    47e2:	ca80      	ldmia	r2!, {r7}
    47e4:	ce20      	ldmia	r6!, {r5}
    47e6:	1b7f      	subs	r7, r7, r5
    47e8:	c380      	stmia	r3!, {r7}
    47ea:	4708      	bx	r1
    47ec:	ca80      	ldmia	r2!, {r7}
    47ee:	ce20      	ldmia	r6!, {r5}
    47f0:	41af      	sbcs	r7, r5
    47f2:	c380      	stmia	r3!, {r7}
    47f4:	ca80      	ldmia	r2!, {r7}
    47f6:	ce20      	ldmia	r6!, {r5}
    47f8:	41af      	sbcs	r7, r5
    47fa:	c380      	stmia	r3!, {r7}
    47fc:	ca80      	ldmia	r2!, {r7}
    47fe:	ce20      	ldmia	r6!, {r5}
    4800:	41af      	sbcs	r7, r5
    4802:	c380      	stmia	r3!, {r7}
    4804:	ca80      	ldmia	r2!, {r7}
    4806:	ce20      	ldmia	r6!, {r5}
    4808:	41af      	sbcs	r7, r5
    480a:	c380      	stmia	r3!, {r7}
    480c:	ca80      	ldmia	r2!, {r7}
    480e:	ce20      	ldmia	r6!, {r5}
    4810:	41af      	sbcs	r7, r5
    4812:	c380      	stmia	r3!, {r7}
    4814:	ca80      	ldmia	r2!, {r7}
    4816:	ce20      	ldmia	r6!, {r5}
    4818:	41af      	sbcs	r7, r5
    481a:	c380      	stmia	r3!, {r7}
    481c:	ca80      	ldmia	r2!, {r7}
    481e:	ce20      	ldmia	r6!, {r5}
    4820:	41af      	sbcs	r7, r5
    4822:	c380      	stmia	r3!, {r7}
    4824:	4140      	adcs	r0, r0
    if (l_borrow) {
    4826:	2800      	cmp	r0, #0
    4828:	d12d      	bne.n	4886 <mod_sqrt_secp224r1+0x5a6>
    __asm__ volatile (
    482a:	9b03      	ldr	r3, [sp, #12]
    482c:	4642      	mov	r2, r8
    482e:	4649      	mov	r1, r9
    4830:	0018      	movs	r0, r3
    4832:	2600      	movs	r6, #0
    4834:	a705      	add	r7, pc, #20	; (adr r7, 484c <mod_sqrt_secp224r1+0x56c>)
    4836:	46c0      	nop			; (mov r8, r8)
    4838:	46c0      	nop			; (mov r8, r8)
    483a:	46c0      	nop			; (mov r8, r8)
    483c:	46c0      	nop			; (mov r8, r8)
    483e:	46c0      	nop			; (mov r8, r8)
    4840:	19c9      	adds	r1, r1, r7
    4842:	c880      	ldmia	r0!, {r7}
    4844:	ca20      	ldmia	r2!, {r5}
    4846:	197f      	adds	r7, r7, r5
    4848:	c380      	stmia	r3!, {r7}
    484a:	4708      	bx	r1
    484c:	c880      	ldmia	r0!, {r7}
    484e:	ca20      	ldmia	r2!, {r5}
    4850:	416f      	adcs	r7, r5
    4852:	c380      	stmia	r3!, {r7}
    4854:	c880      	ldmia	r0!, {r7}
    4856:	ca20      	ldmia	r2!, {r5}
    4858:	416f      	adcs	r7, r5
    485a:	c380      	stmia	r3!, {r7}
    485c:	c880      	ldmia	r0!, {r7}
    485e:	ca20      	ldmia	r2!, {r5}
    4860:	416f      	adcs	r7, r5
    4862:	c380      	stmia	r3!, {r7}
    4864:	c880      	ldmia	r0!, {r7}
    4866:	ca20      	ldmia	r2!, {r5}
    4868:	416f      	adcs	r7, r5
    486a:	c380      	stmia	r3!, {r7}
    486c:	c880      	ldmia	r0!, {r7}
    486e:	ca20      	ldmia	r2!, {r5}
    4870:	416f      	adcs	r7, r5
    4872:	c380      	stmia	r3!, {r7}
    4874:	c880      	ldmia	r0!, {r7}
    4876:	ca20      	ldmia	r2!, {r5}
    4878:	416f      	adcs	r7, r5
    487a:	c380      	stmia	r3!, {r7}
    487c:	c880      	ldmia	r0!, {r7}
    487e:	ca20      	ldmia	r2!, {r5}
    4880:	416f      	adcs	r7, r5
    4882:	c380      	stmia	r3!, {r7}
    4884:	4176      	adcs	r6, r6
        dest[i] = src[i];
    4886:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4888:	9f56      	ldr	r7, [sp, #344]	; 0x158
    488a:	001e      	movs	r6, r3
    488c:	9317      	str	r3, [sp, #92]	; 0x5c
    488e:	9321      	str	r3, [sp, #132]	; 0x84
    4890:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4892:	9636      	str	r6, [sp, #216]	; 0xd8
    4894:	469c      	mov	ip, r3
    4896:	4666      	mov	r6, ip
    4898:	9637      	str	r6, [sp, #220]	; 0xdc
    489a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    489c:	9857      	ldr	r0, [sp, #348]	; 0x15c
    489e:	9610      	str	r6, [sp, #64]	; 0x40
    48a0:	963d      	str	r6, [sp, #244]	; 0xf4
    48a2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    48a4:	9958      	ldr	r1, [sp, #352]	; 0x160
    48a6:	9611      	str	r6, [sp, #68]	; 0x44
    48a8:	963e      	str	r6, [sp, #248]	; 0xf8
    48aa:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
    48ac:	9a59      	ldr	r2, [sp, #356]	; 0x164
    48ae:	9322      	str	r3, [sp, #136]	; 0x88
    48b0:	9612      	str	r6, [sp, #72]	; 0x48
    48b2:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    48b4:	963f      	str	r6, [sp, #252]	; 0xfc
    48b6:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    48b8:	9723      	str	r7, [sp, #140]	; 0x8c
    48ba:	9024      	str	r0, [sp, #144]	; 0x90
    48bc:	9125      	str	r1, [sp, #148]	; 0x94
    48be:	9226      	str	r2, [sp, #152]	; 0x98
    48c0:	9327      	str	r3, [sp, #156]	; 0x9c
    48c2:	9738      	str	r7, [sp, #224]	; 0xe0
    48c4:	9039      	str	r0, [sp, #228]	; 0xe4
    48c6:	913a      	str	r1, [sp, #232]	; 0xe8
    48c8:	923b      	str	r2, [sp, #236]	; 0xec
    48ca:	933c      	str	r3, [sp, #240]	; 0xf0
    48cc:	9613      	str	r6, [sp, #76]	; 0x4c
    48ce:	9640      	str	r6, [sp, #256]	; 0x100
    48d0:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    48d2:	9614      	str	r6, [sp, #80]	; 0x50
    48d4:	9641      	str	r6, [sp, #260]	; 0x104
    48d6:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
    48d8:	9615      	str	r6, [sp, #84]	; 0x54
    48da:	9642      	str	r6, [sp, #264]	; 0x108
    48dc:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    48de:	9616      	str	r6, [sp, #88]	; 0x58
    48e0:	9643      	str	r6, [sp, #268]	; 0x10c
    48e2:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    48e4:	9609      	str	r6, [sp, #36]	; 0x24
    48e6:	9644      	str	r6, [sp, #272]	; 0x110
    48e8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    48ea:	960a      	str	r6, [sp, #40]	; 0x28
    48ec:	9645      	str	r6, [sp, #276]	; 0x114
    48ee:	9e31      	ldr	r6, [sp, #196]	; 0xc4
    48f0:	960b      	str	r6, [sp, #44]	; 0x2c
    48f2:	9646      	str	r6, [sp, #280]	; 0x118
    48f4:	9e32      	ldr	r6, [sp, #200]	; 0xc8
    48f6:	960c      	str	r6, [sp, #48]	; 0x30
    48f8:	9647      	str	r6, [sp, #284]	; 0x11c
    48fa:	9e33      	ldr	r6, [sp, #204]	; 0xcc
    48fc:	960d      	str	r6, [sp, #52]	; 0x34
    48fe:	9648      	str	r6, [sp, #288]	; 0x120
    4900:	9e34      	ldr	r6, [sp, #208]	; 0xd0
    4902:	960e      	str	r6, [sp, #56]	; 0x38
    4904:	9649      	str	r6, [sp, #292]	; 0x124
    4906:	9e35      	ldr	r6, [sp, #212]	; 0xd4
    4908:	960f      	str	r6, [sp, #60]	; 0x3c
    490a:	964a      	str	r6, [sp, #296]	; 0x128
        pow2i *= 2;
    490c:	9e06      	ldr	r6, [sp, #24]
    490e:	0076      	lsls	r6, r6, #1
    4910:	b276      	sxtb	r6, r6
    4912:	9606      	str	r6, [sp, #24]
    4914:	9e08      	ldr	r6, [sp, #32]
    4916:	3e01      	subs	r6, #1
    4918:	b2f6      	uxtb	r6, r6
    491a:	9608      	str	r6, [sp, #32]
    for (i = 0; i <= 6; i++) {
    491c:	2e00      	cmp	r6, #0
    491e:	d000      	beq.n	4922 <mod_sqrt_secp224r1+0x642>
    4920:	e5a2      	b.n	4468 <mod_sqrt_secp224r1+0x188>
    mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0);     /* RS (d1, e1, f1, d0, e0, f0) */
    4922:	9b03      	ldr	r3, [sp, #12]
    4924:	aa36      	add	r2, sp, #216	; 0xd8
    4926:	9301      	str	r3, [sp, #4]
    4928:	a91a      	add	r1, sp, #104	; 0x68
    492a:	ab21      	add	r3, sp, #132	; 0x84
    492c:	a83d      	add	r0, sp, #244	; 0xf4
    492e:	9400      	str	r4, [sp, #0]
    4930:	47d8      	blx	fp
    4932:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    4934:	9841      	ldr	r0, [sp, #260]	; 0x104
    4936:	4699      	mov	r9, r3
    4938:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    493a:	9942      	ldr	r1, [sp, #264]	; 0x108
    493c:	4698      	mov	r8, r3
    493e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4940:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    4942:	469c      	mov	ip, r3
    4944:	465d      	mov	r5, fp
    4946:	9f40      	ldr	r7, [sp, #256]	; 0x100
    4948:	468b      	mov	fp, r1
    494a:	365f      	adds	r6, #95	; 0x5f
    494c:	0011      	movs	r1, r2
    494e:	4642      	mov	r2, r8
    4950:	4680      	mov	r8, r0
    4952:	4660      	mov	r0, ip
    4954:	e002      	b.n	495c <mod_sqrt_secp224r1+0x67c>
    4956:	3e01      	subs	r6, #1
    4958:	b2b6      	uxth	r6, r6
    for (i = 1; i <= 95; i++) {
    495a:	b3fe      	cbz	r6, 49dc <mod_sqrt_secp224r1+0x6fc>
    495c:	464b      	mov	r3, r9
    495e:	9321      	str	r3, [sp, #132]	; 0x84
    4960:	4643      	mov	r3, r8
    4962:	9325      	str	r3, [sp, #148]	; 0x94
    4964:	465b      	mov	r3, fp
    4966:	9326      	str	r3, [sp, #152]	; 0x98
    4968:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    496a:	9222      	str	r2, [sp, #136]	; 0x88
    496c:	9328      	str	r3, [sp, #160]	; 0xa0
    496e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4970:	9023      	str	r0, [sp, #140]	; 0x8c
    4972:	9329      	str	r3, [sp, #164]	; 0xa4
    4974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4976:	9724      	str	r7, [sp, #144]	; 0x90
    4978:	932a      	str	r3, [sp, #168]	; 0xa8
    497a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    497c:	9127      	str	r1, [sp, #156]	; 0x9c
    497e:	932b      	str	r3, [sp, #172]	; 0xac
    4980:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0); /* RS (d1, e1, f1, d0, e0, f0) */
    4982:	aa36      	add	r2, sp, #216	; 0xd8
    4984:	932c      	str	r3, [sp, #176]	; 0xb0
    4986:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4988:	a91a      	add	r1, sp, #104	; 0x68
    498a:	932d      	str	r3, [sp, #180]	; 0xb4
    498c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    498e:	a83d      	add	r0, sp, #244	; 0xf4
    4990:	932e      	str	r3, [sp, #184]	; 0xb8
    4992:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4994:	932f      	str	r3, [sp, #188]	; 0xbc
    4996:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4998:	9330      	str	r3, [sp, #192]	; 0xc0
    499a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    499c:	9331      	str	r3, [sp, #196]	; 0xc4
    499e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    49a0:	9332      	str	r3, [sp, #200]	; 0xc8
    49a2:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    49a4:	9333      	str	r3, [sp, #204]	; 0xcc
    49a6:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    49a8:	9334      	str	r3, [sp, #208]	; 0xd0
    49aa:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    49ac:	9400      	str	r4, [sp, #0]
    49ae:	9335      	str	r3, [sp, #212]	; 0xd4
    49b0:	9b03      	ldr	r3, [sp, #12]
    49b2:	9301      	str	r3, [sp, #4]
    49b4:	ab21      	add	r3, sp, #132	; 0x84
    49b6:	47a8      	blx	r5
        bits |= vli[i];
    49b8:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    49ba:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    49bc:	983f      	ldr	r0, [sp, #252]	; 0xfc
    49be:	4699      	mov	r9, r3
    49c0:	9f40      	ldr	r7, [sp, #256]	; 0x100
    49c2:	4313      	orrs	r3, r2
    49c4:	9941      	ldr	r1, [sp, #260]	; 0x104
    49c6:	4303      	orrs	r3, r0
    49c8:	433b      	orrs	r3, r7
    49ca:	430b      	orrs	r3, r1
    49cc:	4688      	mov	r8, r1
    49ce:	9942      	ldr	r1, [sp, #264]	; 0x108
    49d0:	430b      	orrs	r3, r1
    49d2:	468b      	mov	fp, r1
    49d4:	9943      	ldr	r1, [sp, #268]	; 0x10c
    49d6:	430b      	orrs	r3, r1
        if (uECC_vli_isZero(d1, num_words_secp224r1)) {     /* if d1 == 0 */
    49d8:	2b00      	cmp	r3, #0
    49da:	d1bc      	bne.n	4956 <mod_sqrt_secp224r1+0x676>
    49dc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    49de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    49e0:	4313      	orrs	r3, r2
    49e2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    49e4:	4313      	orrs	r3, r2
    49e6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    49e8:	4313      	orrs	r3, r2
    49ea:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    49ec:	4313      	orrs	r3, r2
    49ee:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    49f0:	4313      	orrs	r3, r2
    49f2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    49f4:	4313      	orrs	r3, r2
    if (uECC_vli_isZero(input, num_words)) {
    49f6:	b9bb      	cbnz	r3, 4a28 <mod_sqrt_secp224r1+0x748>
        vli[i] = 0;
    49f8:	9336      	str	r3, [sp, #216]	; 0xd8
    49fa:	9337      	str	r3, [sp, #220]	; 0xdc
    49fc:	9338      	str	r3, [sp, #224]	; 0xe0
    49fe:	9339      	str	r3, [sp, #228]	; 0xe4
    4a00:	933a      	str	r3, [sp, #232]	; 0xe8
    4a02:	933b      	str	r3, [sp, #236]	; 0xec
    4a04:	933c      	str	r3, [sp, #240]	; 0xf0
    uECC_vli_mult(product, left, right, curve->num_words);
    4a06:	aa36      	add	r2, sp, #216	; 0xd8
    4a08:	a921      	add	r1, sp, #132	; 0x84
    4a0a:	a85c      	add	r0, sp, #368	; 0x170
    4a0c:	2307      	movs	r3, #7
    4a0e:	9c05      	ldr	r4, [sp, #20]
    4a10:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    4a12:	a95c      	add	r1, sp, #368	; 0x170
    4a14:	9807      	ldr	r0, [sp, #28]
    4a16:	9b04      	ldr	r3, [sp, #16]
    4a18:	4798      	blx	r3
}
    4a1a:	b06d      	add	sp, #436	; 0x1b4
    4a1c:	bc3c      	pop	{r2, r3, r4, r5}
    4a1e:	4690      	mov	r8, r2
    4a20:	4699      	mov	r9, r3
    4a22:	46a2      	mov	sl, r4
    4a24:	46ab      	mov	fp, r5
    4a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a28:	0021      	movs	r1, r4
    4a2a:	221c      	movs	r2, #28
    4a2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a2e:	a844      	add	r0, sp, #272	; 0x110
    4a30:	4798      	blx	r3
    4a32:	9a19      	ldr	r2, [sp, #100]	; 0x64
    4a34:	4653      	mov	r3, sl
    4a36:	3204      	adds	r2, #4
    4a38:	0011      	movs	r1, r2
    4a3a:	c931      	ldmia	r1!, {r0, r4, r5}
    4a3c:	c331      	stmia	r3!, {r0, r4, r5}
    4a3e:	c931      	ldmia	r1!, {r0, r4, r5}
    4a40:	c331      	stmia	r3!, {r0, r4, r5}
    4a42:	6808      	ldr	r0, [r1, #0]
    u[0] = 1;
    4a44:	2101      	movs	r1, #1
    4a46:	6018      	str	r0, [r3, #0]
        vli[i] = 0;
    4a48:	2300      	movs	r3, #0
    __asm__ volatile (
    4a4a:	f240 0909 	movw	r9, #9
    __asm__ volatile (
    4a4e:	4693      	mov	fp, r2
    4a50:	9355      	str	r3, [sp, #340]	; 0x154
    4a52:	9356      	str	r3, [sp, #344]	; 0x158
    4a54:	9357      	str	r3, [sp, #348]	; 0x15c
    4a56:	9358      	str	r3, [sp, #352]	; 0x160
    4a58:	9359      	str	r3, [sp, #356]	; 0x164
    4a5a:	935a      	str	r3, [sp, #360]	; 0x168
    u[0] = 1;
    4a5c:	9154      	str	r1, [sp, #336]	; 0x150
        vli[i] = 0;
    4a5e:	935c      	str	r3, [sp, #368]	; 0x170
    4a60:	935d      	str	r3, [sp, #372]	; 0x174
    4a62:	935e      	str	r3, [sp, #376]	; 0x178
    4a64:	935f      	str	r3, [sp, #380]	; 0x17c
    4a66:	9360      	str	r3, [sp, #384]	; 0x180
    4a68:	9361      	str	r3, [sp, #388]	; 0x184
    4a6a:	9362      	str	r3, [sp, #392]	; 0x188
    4a6c:	9944      	ldr	r1, [sp, #272]	; 0x110
    4a6e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
        if (left[i] > right[i]) {
    4a70:	4298      	cmp	r0, r3
    4a72:	d32a      	bcc.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a74:	d900      	bls.n	4a78 <mod_sqrt_secp224r1+0x798>
    4a76:	e1bf      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a78:	9c49      	ldr	r4, [sp, #292]	; 0x124
    4a7a:	9a51      	ldr	r2, [sp, #324]	; 0x144
    4a7c:	4294      	cmp	r4, r2
    4a7e:	d824      	bhi.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a80:	d200      	bcs.n	4a84 <mod_sqrt_secp224r1+0x7a4>
    4a82:	e1b9      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a84:	9c48      	ldr	r4, [sp, #288]	; 0x120
    4a86:	9a50      	ldr	r2, [sp, #320]	; 0x140
    4a88:	4294      	cmp	r4, r2
    4a8a:	d81e      	bhi.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a8c:	d200      	bcs.n	4a90 <mod_sqrt_secp224r1+0x7b0>
    4a8e:	e1b3      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a90:	9c47      	ldr	r4, [sp, #284]	; 0x11c
    4a92:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    4a94:	4294      	cmp	r4, r2
    4a96:	d818      	bhi.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a98:	d200      	bcs.n	4a9c <mod_sqrt_secp224r1+0x7bc>
    4a9a:	e1ad      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a9c:	9c46      	ldr	r4, [sp, #280]	; 0x118
    4a9e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    4aa0:	4294      	cmp	r4, r2
    4aa2:	d812      	bhi.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4aa4:	d200      	bcs.n	4aa8 <mod_sqrt_secp224r1+0x7c8>
    4aa6:	e1a7      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4aa8:	9c45      	ldr	r4, [sp, #276]	; 0x114
    4aaa:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    4aac:	4294      	cmp	r4, r2
    4aae:	d80c      	bhi.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4ab0:	d200      	bcs.n	4ab4 <mod_sqrt_secp224r1+0x7d4>
    4ab2:	e1a1      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4ab4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    4ab6:	428a      	cmp	r2, r1
    4ab8:	d307      	bcc.n	4aca <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4aba:	d900      	bls.n	4abe <mod_sqrt_secp224r1+0x7de>
    4abc:	e19c      	b.n	4df8 <mod_sqrt_secp224r1+0xb18>
    4abe:	221c      	movs	r2, #28
    4ac0:	a954      	add	r1, sp, #336	; 0x150
    4ac2:	a836      	add	r0, sp, #216	; 0xd8
    4ac4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4ac6:	4798      	blx	r3
    4ac8:	e79d      	b.n	4a06 <mod_sqrt_secp224r1+0x726>
            return 1;
    4aca:	2401      	movs	r4, #1
        if (EVEN(a)) {
    4acc:	2201      	movs	r2, #1
    4ace:	420a      	tst	r2, r1
    4ad0:	d161      	bne.n	4b96 <mod_sqrt_secp224r1+0x8b6>
        uECC_word_t temp = *vli;
    4ad2:	9a49      	ldr	r2, [sp, #292]	; 0x124
        *vli = (temp >> 1) | carry;
    4ad4:	085c      	lsrs	r4, r3, #1
    4ad6:	0856      	lsrs	r6, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4ad8:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4ada:	4333      	orrs	r3, r6
    4adc:	9349      	str	r3, [sp, #292]	; 0x124
        uECC_word_t temp = *vli;
    4ade:	9b48      	ldr	r3, [sp, #288]	; 0x120
        carry = temp << (uECC_WORD_BITS - 1);
    4ae0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ae2:	085e      	lsrs	r6, r3, #1
    4ae4:	4332      	orrs	r2, r6
    4ae6:	9248      	str	r2, [sp, #288]	; 0x120
        uECC_word_t temp = *vli;
    4ae8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        carry = temp << (uECC_WORD_BITS - 1);
    4aea:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4aec:	0856      	lsrs	r6, r2, #1
    4aee:	4333      	orrs	r3, r6
    4af0:	9347      	str	r3, [sp, #284]	; 0x11c
        uECC_word_t temp = *vli;
    4af2:	9b46      	ldr	r3, [sp, #280]	; 0x118
        carry = temp << (uECC_WORD_BITS - 1);
    4af4:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4af6:	085e      	lsrs	r6, r3, #1
    4af8:	4332      	orrs	r2, r6
    4afa:	9246      	str	r2, [sp, #280]	; 0x118
        uECC_word_t temp = *vli;
    4afc:	9a45      	ldr	r2, [sp, #276]	; 0x114
        *vli = (temp >> 1) | carry;
    4afe:	0849      	lsrs	r1, r1, #1
    4b00:	0856      	lsrs	r6, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4b02:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4b04:	4311      	orrs	r1, r2
    uECC_word_t carry = 0;
    4b06:	2200      	movs	r2, #0
        carry = temp << (uECC_WORD_BITS - 1);
    4b08:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4b0a:	4333      	orrs	r3, r6
    4b0c:	9345      	str	r3, [sp, #276]	; 0x114
    if (!EVEN(uv)) {
    4b0e:	9b54      	ldr	r3, [sp, #336]	; 0x150
    uECC_word_t carry = 0;
    4b10:	9203      	str	r2, [sp, #12]
    if (!EVEN(uv)) {
    4b12:	3201      	adds	r2, #1
        *vli = (temp >> 1) | carry;
    4b14:	944a      	str	r4, [sp, #296]	; 0x128
    4b16:	9144      	str	r1, [sp, #272]	; 0x110
    if (!EVEN(uv)) {
    4b18:	421a      	tst	r2, r3
    4b1a:	d000      	beq.n	4b1e <mod_sqrt_secp224r1+0x83e>
    4b1c:	e16f      	b.n	4dfe <mod_sqrt_secp224r1+0xb1e>
        uECC_word_t temp = *vli;
    4b1e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    4b20:	9f59      	ldr	r7, [sp, #356]	; 0x164
    4b22:	4694      	mov	ip, r2
        *vli = (temp >> 1) | carry;
    4b24:	087d      	lsrs	r5, r7, #1
    4b26:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4b28:	4665      	mov	r5, ip
    4b2a:	07ed      	lsls	r5, r5, #31
    4b2c:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b2e:	4645      	mov	r5, r8
    4b30:	4666      	mov	r6, ip
    4b32:	4335      	orrs	r5, r6
    4b34:	9559      	str	r5, [sp, #356]	; 0x164
        uECC_word_t temp = *vli;
    4b36:	9d58      	ldr	r5, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4b38:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
    4b3a:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b3c:	086d      	lsrs	r5, r5, #1
    4b3e:	432f      	orrs	r7, r5
    4b40:	9758      	str	r7, [sp, #352]	; 0x160
        uECC_word_t temp = *vli;
    4b42:	9f57      	ldr	r7, [sp, #348]	; 0x15c
        *vli = (temp >> 1) | carry;
    4b44:	085b      	lsrs	r3, r3, #1
    4b46:	087d      	lsrs	r5, r7, #1
    4b48:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4b4a:	4665      	mov	r5, ip
    4b4c:	07ed      	lsls	r5, r5, #31
    4b4e:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b50:	4645      	mov	r5, r8
    4b52:	4666      	mov	r6, ip
    4b54:	4335      	orrs	r5, r6
    4b56:	9557      	str	r5, [sp, #348]	; 0x15c
        uECC_word_t temp = *vli;
    4b58:	9d56      	ldr	r5, [sp, #344]	; 0x158
        carry = temp << (uECC_WORD_BITS - 1);
    4b5a:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
    4b5c:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b5e:	086d      	lsrs	r5, r5, #1
    4b60:	432f      	orrs	r7, r5
    4b62:	9756      	str	r7, [sp, #344]	; 0x158
        uECC_word_t temp = *vli;
    4b64:	9f55      	ldr	r7, [sp, #340]	; 0x154
        *vli = (temp >> 1) | carry;
    4b66:	0852      	lsrs	r2, r2, #1
    4b68:	087d      	lsrs	r5, r7, #1
    4b6a:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4b6c:	4665      	mov	r5, ip
    4b6e:	07ed      	lsls	r5, r5, #31
    4b70:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b72:	4645      	mov	r5, r8
    4b74:	4666      	mov	r6, ip
        carry = temp << (uECC_WORD_BITS - 1);
    4b76:	07ff      	lsls	r7, r7, #31
        *vli = (temp >> 1) | carry;
    4b78:	433b      	orrs	r3, r7
    4b7a:	9354      	str	r3, [sp, #336]	; 0x150
    if (carry) {
    4b7c:	0023      	movs	r3, r4
    4b7e:	9c03      	ldr	r4, [sp, #12]
        *vli = (temp >> 1) | carry;
    4b80:	4335      	orrs	r5, r6
    4b82:	925a      	str	r2, [sp, #360]	; 0x168
    4b84:	9555      	str	r5, [sp, #340]	; 0x154
    if (carry) {
    4b86:	2c00      	cmp	r4, #0
    4b88:	d100      	bne.n	4b8c <mod_sqrt_secp224r1+0x8ac>
    4b8a:	e771      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4b8c:	2480      	movs	r4, #128	; 0x80
    4b8e:	0624      	lsls	r4, r4, #24
    4b90:	4322      	orrs	r2, r4
    4b92:	925a      	str	r2, [sp, #360]	; 0x168
    4b94:	e76c      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
        } else if (EVEN(b)) {
    4b96:	4652      	mov	r2, sl
    4b98:	2501      	movs	r5, #1
    4b9a:	6812      	ldr	r2, [r2, #0]
    4b9c:	4215      	tst	r5, r2
    4b9e:	d14f      	bne.n	4c40 <mod_sqrt_secp224r1+0x960>
        uECC_word_t temp = *vli;
    4ba0:	9f51      	ldr	r7, [sp, #324]	; 0x144
        *vli = (temp >> 1) | carry;
    4ba2:	0844      	lsrs	r4, r0, #1
    4ba4:	087e      	lsrs	r6, r7, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4ba6:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4ba8:	4330      	orrs	r0, r6
        uECC_word_t temp = *vli;
    4baa:	9e50      	ldr	r6, [sp, #320]	; 0x140
        *vli = (temp >> 1) | carry;
    4bac:	9051      	str	r0, [sp, #324]	; 0x144
        carry = temp << (uECC_WORD_BITS - 1);
    4bae:	07ff      	lsls	r7, r7, #31
        *vli = (temp >> 1) | carry;
    4bb0:	0870      	lsrs	r0, r6, #1
    4bb2:	4307      	orrs	r7, r0
        uECC_word_t temp = *vli;
    4bb4:	984f      	ldr	r0, [sp, #316]	; 0x13c
        *vli = (temp >> 1) | carry;
    4bb6:	9750      	str	r7, [sp, #320]	; 0x140
        carry = temp << (uECC_WORD_BITS - 1);
    4bb8:	07f6      	lsls	r6, r6, #31
        *vli = (temp >> 1) | carry;
    4bba:	0847      	lsrs	r7, r0, #1
    4bbc:	433e      	orrs	r6, r7
    4bbe:	964f      	str	r6, [sp, #316]	; 0x13c
        uECC_word_t temp = *vli;
    4bc0:	9e4e      	ldr	r6, [sp, #312]	; 0x138
        carry = temp << (uECC_WORD_BITS - 1);
    4bc2:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bc4:	0877      	lsrs	r7, r6, #1
    4bc6:	4338      	orrs	r0, r7
    4bc8:	904e      	str	r0, [sp, #312]	; 0x138
        uECC_word_t temp = *vli;
    4bca:	984d      	ldr	r0, [sp, #308]	; 0x134
        *vli = (temp >> 1) | carry;
    4bcc:	0852      	lsrs	r2, r2, #1
    4bce:	0847      	lsrs	r7, r0, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4bd0:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bd2:	4302      	orrs	r2, r0
    if (!EVEN(uv)) {
    4bd4:	2001      	movs	r0, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4bd6:	07f6      	lsls	r6, r6, #31
        *vli = (temp >> 1) | carry;
    4bd8:	924c      	str	r2, [sp, #304]	; 0x130
    if (!EVEN(uv)) {
    4bda:	9a5c      	ldr	r2, [sp, #368]	; 0x170
        *vli = (temp >> 1) | carry;
    4bdc:	433e      	orrs	r6, r7
    4bde:	9452      	str	r4, [sp, #328]	; 0x148
    4be0:	964d      	str	r6, [sp, #308]	; 0x134
    if (!EVEN(uv)) {
    4be2:	4694      	mov	ip, r2
    uECC_word_t carry = 0;
    4be4:	2700      	movs	r7, #0
    if (!EVEN(uv)) {
    4be6:	4210      	tst	r0, r2
    4be8:	d000      	beq.n	4bec <mod_sqrt_secp224r1+0x90c>
    4bea:	e20b      	b.n	5004 <mod_sqrt_secp224r1+0xd24>
        uECC_word_t temp = *vli;
    4bec:	9862      	ldr	r0, [sp, #392]	; 0x188
    4bee:	9a61      	ldr	r2, [sp, #388]	; 0x184
        *vli = (temp >> 1) | carry;
    4bf0:	0846      	lsrs	r6, r0, #1
    4bf2:	0855      	lsrs	r5, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4bf4:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bf6:	4328      	orrs	r0, r5
    4bf8:	9061      	str	r0, [sp, #388]	; 0x184
        uECC_word_t temp = *vli;
    4bfa:	9860      	ldr	r0, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4bfc:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4bfe:	0845      	lsrs	r5, r0, #1
    4c00:	432a      	orrs	r2, r5
    4c02:	9260      	str	r2, [sp, #384]	; 0x180
        uECC_word_t temp = *vli;
    4c04:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
        carry = temp << (uECC_WORD_BITS - 1);
    4c06:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4c08:	0855      	lsrs	r5, r2, #1
    4c0a:	4328      	orrs	r0, r5
    4c0c:	905f      	str	r0, [sp, #380]	; 0x17c
        uECC_word_t temp = *vli;
    4c0e:	985e      	ldr	r0, [sp, #376]	; 0x178
        carry = temp << (uECC_WORD_BITS - 1);
    4c10:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4c12:	0845      	lsrs	r5, r0, #1
    4c14:	432a      	orrs	r2, r5
    4c16:	925e      	str	r2, [sp, #376]	; 0x178
        uECC_word_t temp = *vli;
    4c18:	9a5d      	ldr	r2, [sp, #372]	; 0x174
        carry = temp << (uECC_WORD_BITS - 1);
    4c1a:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4c1c:	0855      	lsrs	r5, r2, #1
    4c1e:	4328      	orrs	r0, r5
    4c20:	905d      	str	r0, [sp, #372]	; 0x174
    4c22:	4660      	mov	r0, ip
        carry = temp << (uECC_WORD_BITS - 1);
    4c24:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4c26:	0840      	lsrs	r0, r0, #1
    4c28:	4302      	orrs	r2, r0
    4c2a:	9662      	str	r6, [sp, #392]	; 0x188
    4c2c:	925c      	str	r2, [sp, #368]	; 0x170
    if (carry) {
    4c2e:	0020      	movs	r0, r4
    4c30:	2f00      	cmp	r7, #0
    4c32:	d100      	bne.n	4c36 <mod_sqrt_secp224r1+0x956>
    4c34:	e71c      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4c36:	2280      	movs	r2, #128	; 0x80
    4c38:	0612      	lsls	r2, r2, #24
    4c3a:	4316      	orrs	r6, r2
    4c3c:	9662      	str	r6, [sp, #392]	; 0x188
    4c3e:	e717      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
        } else if (cmpResult > 0) {
    4c40:	2c01      	cmp	r4, #1
    4c42:	d000      	beq.n	4c46 <mod_sqrt_secp224r1+0x966>
    4c44:	e10d      	b.n	4e62 <mod_sqrt_secp224r1+0xb82>
    __asm__ volatile (
    4c46:	ab44      	add	r3, sp, #272	; 0x110
    4c48:	4652      	mov	r2, sl
    4c4a:	4649      	mov	r1, r9
    4c4c:	0018      	movs	r0, r3
    4c4e:	2400      	movs	r4, #0
    4c50:	a606      	add	r6, pc, #24	; (adr r6, 4c6c <mod_sqrt_secp224r1+0x98c>)
    4c52:	46c0      	nop			; (mov r8, r8)
    4c54:	46c0      	nop			; (mov r8, r8)
    4c56:	46c0      	nop			; (mov r8, r8)
    4c58:	46c0      	nop			; (mov r8, r8)
    4c5a:	46c0      	nop			; (mov r8, r8)
    4c5c:	46c0      	nop			; (mov r8, r8)
    4c5e:	46c0      	nop			; (mov r8, r8)
    4c60:	1989      	adds	r1, r1, r6
    4c62:	c840      	ldmia	r0!, {r6}
    4c64:	ca80      	ldmia	r2!, {r7}
    4c66:	1bf6      	subs	r6, r6, r7
    4c68:	c340      	stmia	r3!, {r6}
    4c6a:	4708      	bx	r1
    4c6c:	c840      	ldmia	r0!, {r6}
    4c6e:	ca80      	ldmia	r2!, {r7}
    4c70:	41be      	sbcs	r6, r7
    4c72:	c340      	stmia	r3!, {r6}
    4c74:	c840      	ldmia	r0!, {r6}
    4c76:	ca80      	ldmia	r2!, {r7}
    4c78:	41be      	sbcs	r6, r7
    4c7a:	c340      	stmia	r3!, {r6}
    4c7c:	c840      	ldmia	r0!, {r6}
    4c7e:	ca80      	ldmia	r2!, {r7}
    4c80:	41be      	sbcs	r6, r7
    4c82:	c340      	stmia	r3!, {r6}
    4c84:	c840      	ldmia	r0!, {r6}
    4c86:	ca80      	ldmia	r2!, {r7}
    4c88:	41be      	sbcs	r6, r7
    4c8a:	c340      	stmia	r3!, {r6}
    4c8c:	c840      	ldmia	r0!, {r6}
    4c8e:	ca80      	ldmia	r2!, {r7}
    4c90:	41be      	sbcs	r6, r7
    4c92:	c340      	stmia	r3!, {r6}
    4c94:	c840      	ldmia	r0!, {r6}
    4c96:	ca80      	ldmia	r2!, {r7}
    4c98:	41be      	sbcs	r6, r7
    4c9a:	c340      	stmia	r3!, {r6}
    4c9c:	c840      	ldmia	r0!, {r6}
    4c9e:	ca80      	ldmia	r2!, {r7}
    4ca0:	41be      	sbcs	r6, r7
    4ca2:	c340      	stmia	r3!, {r6}
    4ca4:	4164      	adcs	r4, r4
        uECC_word_t temp = *vli;
    4ca6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
        *vli = (temp >> 1) | carry;
    4ca8:	085a      	lsrs	r2, r3, #1
    4caa:	924a      	str	r2, [sp, #296]	; 0x128
        uECC_word_t temp = *vli;
    4cac:	9a49      	ldr	r2, [sp, #292]	; 0x124
        carry = temp << (uECC_WORD_BITS - 1);
    4cae:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4cb0:	0851      	lsrs	r1, r2, #1
    4cb2:	430b      	orrs	r3, r1
    4cb4:	9349      	str	r3, [sp, #292]	; 0x124
        uECC_word_t temp = *vli;
    4cb6:	9b48      	ldr	r3, [sp, #288]	; 0x120
        carry = temp << (uECC_WORD_BITS - 1);
    4cb8:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4cba:	0859      	lsrs	r1, r3, #1
    4cbc:	430a      	orrs	r2, r1
    4cbe:	9248      	str	r2, [sp, #288]	; 0x120
        uECC_word_t temp = *vli;
    4cc0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        carry = temp << (uECC_WORD_BITS - 1);
    4cc2:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4cc4:	0851      	lsrs	r1, r2, #1
    4cc6:	430b      	orrs	r3, r1
    4cc8:	9347      	str	r3, [sp, #284]	; 0x11c
        uECC_word_t temp = *vli;
    4cca:	9b46      	ldr	r3, [sp, #280]	; 0x118
        carry = temp << (uECC_WORD_BITS - 1);
    4ccc:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4cce:	0859      	lsrs	r1, r3, #1
    4cd0:	430a      	orrs	r2, r1
    4cd2:	9246      	str	r2, [sp, #280]	; 0x118
        uECC_word_t temp = *vli;
    4cd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
        carry = temp << (uECC_WORD_BITS - 1);
    4cd6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4cd8:	0851      	lsrs	r1, r2, #1
    4cda:	430b      	orrs	r3, r1
    4cdc:	9345      	str	r3, [sp, #276]	; 0x114
    4cde:	9b44      	ldr	r3, [sp, #272]	; 0x110
        carry = temp << (uECC_WORD_BITS - 1);
    4ce0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ce2:	085b      	lsrs	r3, r3, #1
    4ce4:	4313      	orrs	r3, r2
    4ce6:	9344      	str	r3, [sp, #272]	; 0x110
        if (left[i] > right[i]) {
    4ce8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    4cea:	9b62      	ldr	r3, [sp, #392]	; 0x188
    4cec:	429a      	cmp	r2, r3
    4cee:	d824      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cf0:	d200      	bcs.n	4cf4 <mod_sqrt_secp224r1+0xa14>
    4cf2:	e1e2      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4cf4:	9a59      	ldr	r2, [sp, #356]	; 0x164
    4cf6:	9b61      	ldr	r3, [sp, #388]	; 0x184
    4cf8:	429a      	cmp	r2, r3
    4cfa:	d81e      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cfc:	d200      	bcs.n	4d00 <mod_sqrt_secp224r1+0xa20>
    4cfe:	e1dc      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4d00:	9a58      	ldr	r2, [sp, #352]	; 0x160
    4d02:	9b60      	ldr	r3, [sp, #384]	; 0x180
    4d04:	429a      	cmp	r2, r3
    4d06:	d818      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4d08:	d200      	bcs.n	4d0c <mod_sqrt_secp224r1+0xa2c>
    4d0a:	e1d6      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4d0c:	9a57      	ldr	r2, [sp, #348]	; 0x15c
    4d0e:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    4d10:	429a      	cmp	r2, r3
    4d12:	d812      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4d14:	d200      	bcs.n	4d18 <mod_sqrt_secp224r1+0xa38>
    4d16:	e1d0      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4d18:	9a56      	ldr	r2, [sp, #344]	; 0x158
    4d1a:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    4d1c:	429a      	cmp	r2, r3
    4d1e:	d80c      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4d20:	d200      	bcs.n	4d24 <mod_sqrt_secp224r1+0xa44>
    4d22:	e1ca      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4d24:	9a55      	ldr	r2, [sp, #340]	; 0x154
    4d26:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    4d28:	429a      	cmp	r2, r3
    4d2a:	d806      	bhi.n	4d3a <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4d2c:	d200      	bcs.n	4d30 <mod_sqrt_secp224r1+0xa50>
    4d2e:	e1c4      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
    4d30:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4d32:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    4d34:	4293      	cmp	r3, r2
    4d36:	d200      	bcs.n	4d3a <mod_sqrt_secp224r1+0xa5a>
    4d38:	e1bf      	b.n	50ba <mod_sqrt_secp224r1+0xdda>
    4d3a:	ab54      	add	r3, sp, #336	; 0x150
    4d3c:	aa5c      	add	r2, sp, #368	; 0x170
    4d3e:	4649      	mov	r1, r9
    4d40:	0018      	movs	r0, r3
    4d42:	2400      	movs	r4, #0
    4d44:	a605      	add	r6, pc, #20	; (adr r6, 4d5c <mod_sqrt_secp224r1+0xa7c>)
    4d46:	46c0      	nop			; (mov r8, r8)
    4d48:	46c0      	nop			; (mov r8, r8)
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	46c0      	nop			; (mov r8, r8)
    4d4e:	46c0      	nop			; (mov r8, r8)
    4d50:	1989      	adds	r1, r1, r6
    4d52:	c840      	ldmia	r0!, {r6}
    4d54:	ca80      	ldmia	r2!, {r7}
    4d56:	1bf6      	subs	r6, r6, r7
    4d58:	c340      	stmia	r3!, {r6}
    4d5a:	4708      	bx	r1
    4d5c:	c840      	ldmia	r0!, {r6}
    4d5e:	ca80      	ldmia	r2!, {r7}
    4d60:	41be      	sbcs	r6, r7
    4d62:	c340      	stmia	r3!, {r6}
    4d64:	c840      	ldmia	r0!, {r6}
    4d66:	ca80      	ldmia	r2!, {r7}
    4d68:	41be      	sbcs	r6, r7
    4d6a:	c340      	stmia	r3!, {r6}
    4d6c:	c840      	ldmia	r0!, {r6}
    4d6e:	ca80      	ldmia	r2!, {r7}
    4d70:	41be      	sbcs	r6, r7
    4d72:	c340      	stmia	r3!, {r6}
    4d74:	c840      	ldmia	r0!, {r6}
    4d76:	ca80      	ldmia	r2!, {r7}
    4d78:	41be      	sbcs	r6, r7
    4d7a:	c340      	stmia	r3!, {r6}
    4d7c:	c840      	ldmia	r0!, {r6}
    4d7e:	ca80      	ldmia	r2!, {r7}
    4d80:	41be      	sbcs	r6, r7
    4d82:	c340      	stmia	r3!, {r6}
    4d84:	c840      	ldmia	r0!, {r6}
    4d86:	ca80      	ldmia	r2!, {r7}
    4d88:	41be      	sbcs	r6, r7
    4d8a:	c340      	stmia	r3!, {r6}
    4d8c:	c840      	ldmia	r0!, {r6}
    4d8e:	ca80      	ldmia	r2!, {r7}
    4d90:	41be      	sbcs	r6, r7
    4d92:	c340      	stmia	r3!, {r6}
    4d94:	4164      	adcs	r4, r4
    if (!EVEN(uv)) {
    4d96:	2301      	movs	r3, #1
    4d98:	9e54      	ldr	r6, [sp, #336]	; 0x150
    uECC_word_t carry = 0;
    4d9a:	2400      	movs	r4, #0
    if (!EVEN(uv)) {
    4d9c:	4233      	tst	r3, r6
    4d9e:	d000      	beq.n	4da2 <mod_sqrt_secp224r1+0xac2>
    4da0:	e15f      	b.n	5062 <mod_sqrt_secp224r1+0xd82>
        uECC_word_t temp = *vli;
    4da2:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4da4:	9a59      	ldr	r2, [sp, #356]	; 0x164
        *vli = (temp >> 1) | carry;
    4da6:	0858      	lsrs	r0, r3, #1
    4da8:	0851      	lsrs	r1, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4daa:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4dac:	430b      	orrs	r3, r1
    4dae:	9359      	str	r3, [sp, #356]	; 0x164
        uECC_word_t temp = *vli;
    4db0:	9b58      	ldr	r3, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4db2:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4db4:	0859      	lsrs	r1, r3, #1
    4db6:	430a      	orrs	r2, r1
        uECC_word_t temp = *vli;
    4db8:	9957      	ldr	r1, [sp, #348]	; 0x15c
        *vli = (temp >> 1) | carry;
    4dba:	9258      	str	r2, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4dbc:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4dbe:	084a      	lsrs	r2, r1, #1
    4dc0:	4313      	orrs	r3, r2
        uECC_word_t temp = *vli;
    4dc2:	9a56      	ldr	r2, [sp, #344]	; 0x158
        *vli = (temp >> 1) | carry;
    4dc4:	9357      	str	r3, [sp, #348]	; 0x15c
        carry = temp << (uECC_WORD_BITS - 1);
    4dc6:	07c9      	lsls	r1, r1, #31
        *vli = (temp >> 1) | carry;
    4dc8:	0853      	lsrs	r3, r2, #1
    4dca:	4319      	orrs	r1, r3
        uECC_word_t temp = *vli;
    4dcc:	9b55      	ldr	r3, [sp, #340]	; 0x154
        *vli = (temp >> 1) | carry;
    4dce:	9156      	str	r1, [sp, #344]	; 0x158
        carry = temp << (uECC_WORD_BITS - 1);
    4dd0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4dd2:	0859      	lsrs	r1, r3, #1
    4dd4:	0876      	lsrs	r6, r6, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4dd6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4dd8:	430a      	orrs	r2, r1
    4dda:	4333      	orrs	r3, r6
    4ddc:	905a      	str	r0, [sp, #360]	; 0x168
    4dde:	9255      	str	r2, [sp, #340]	; 0x154
    4de0:	9354      	str	r3, [sp, #336]	; 0x150
    if (carry) {
    4de2:	2c00      	cmp	r4, #0
    4de4:	d100      	bne.n	4de8 <mod_sqrt_secp224r1+0xb08>
    4de6:	e109      	b.n	4ffc <mod_sqrt_secp224r1+0xd1c>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4de8:	2380      	movs	r3, #128	; 0x80
    4dea:	061b      	lsls	r3, r3, #24
    4dec:	4318      	orrs	r0, r3
    4dee:	905a      	str	r0, [sp, #360]	; 0x168
    4df0:	9944      	ldr	r1, [sp, #272]	; 0x110
    4df2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    4df4:	9852      	ldr	r0, [sp, #328]	; 0x148
    4df6:	e63b      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
            return -1;
    4df8:	2401      	movs	r4, #1
    4dfa:	4264      	negs	r4, r4
    4dfc:	e666      	b.n	4acc <mod_sqrt_secp224r1+0x7ec>
    __asm__ volatile (
    4dfe:	ab54      	add	r3, sp, #336	; 0x150
    4e00:	465a      	mov	r2, fp
    4e02:	4649      	mov	r1, r9
    4e04:	0018      	movs	r0, r3
    4e06:	2600      	movs	r6, #0
    4e08:	a404      	add	r4, pc, #16	; (adr r4, 4e1c <mod_sqrt_secp224r1+0xb3c>)
    4e0a:	46c0      	nop			; (mov r8, r8)
    4e0c:	46c0      	nop			; (mov r8, r8)
    4e0e:	46c0      	nop			; (mov r8, r8)
    4e10:	1909      	adds	r1, r1, r4
    4e12:	c810      	ldmia	r0!, {r4}
    4e14:	ca80      	ldmia	r2!, {r7}
    4e16:	19e4      	adds	r4, r4, r7
    4e18:	c310      	stmia	r3!, {r4}
    4e1a:	4708      	bx	r1
    4e1c:	c810      	ldmia	r0!, {r4}
    4e1e:	ca80      	ldmia	r2!, {r7}
    4e20:	417c      	adcs	r4, r7
    4e22:	c310      	stmia	r3!, {r4}
    4e24:	c810      	ldmia	r0!, {r4}
    4e26:	ca80      	ldmia	r2!, {r7}
    4e28:	417c      	adcs	r4, r7
    4e2a:	c310      	stmia	r3!, {r4}
    4e2c:	c810      	ldmia	r0!, {r4}
    4e2e:	ca80      	ldmia	r2!, {r7}
    4e30:	417c      	adcs	r4, r7
    4e32:	c310      	stmia	r3!, {r4}
    4e34:	c810      	ldmia	r0!, {r4}
    4e36:	ca80      	ldmia	r2!, {r7}
    4e38:	417c      	adcs	r4, r7
    4e3a:	c310      	stmia	r3!, {r4}
    4e3c:	c810      	ldmia	r0!, {r4}
    4e3e:	ca80      	ldmia	r2!, {r7}
    4e40:	417c      	adcs	r4, r7
    4e42:	c310      	stmia	r3!, {r4}
    4e44:	c810      	ldmia	r0!, {r4}
    4e46:	ca80      	ldmia	r2!, {r7}
    4e48:	417c      	adcs	r4, r7
    4e4a:	c310      	stmia	r3!, {r4}
    4e4c:	c810      	ldmia	r0!, {r4}
    4e4e:	ca80      	ldmia	r2!, {r7}
    4e50:	417c      	adcs	r4, r7
    4e52:	c310      	stmia	r3!, {r4}
    4e54:	4176      	adcs	r6, r6
    4e56:	9603      	str	r6, [sp, #12]
    4e58:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4e5a:	9944      	ldr	r1, [sp, #272]	; 0x110
    4e5c:	9c4a      	ldr	r4, [sp, #296]	; 0x128
    4e5e:	9852      	ldr	r0, [sp, #328]	; 0x148
    4e60:	e65d      	b.n	4b1e <mod_sqrt_secp224r1+0x83e>
    __asm__ volatile (
    4e62:	4653      	mov	r3, sl
    4e64:	aa44      	add	r2, sp, #272	; 0x110
    4e66:	4649      	mov	r1, r9
    4e68:	4650      	mov	r0, sl
    4e6a:	2400      	movs	r4, #0
    4e6c:	a603      	add	r6, pc, #12	; (adr r6, 4e7c <mod_sqrt_secp224r1+0xb9c>)
    4e6e:	46c0      	nop			; (mov r8, r8)
    4e70:	1989      	adds	r1, r1, r6
    4e72:	c840      	ldmia	r0!, {r6}
    4e74:	ca80      	ldmia	r2!, {r7}
    4e76:	1bf6      	subs	r6, r6, r7
    4e78:	c340      	stmia	r3!, {r6}
    4e7a:	4708      	bx	r1
    4e7c:	c840      	ldmia	r0!, {r6}
    4e7e:	ca80      	ldmia	r2!, {r7}
    4e80:	41be      	sbcs	r6, r7
    4e82:	c340      	stmia	r3!, {r6}
    4e84:	c840      	ldmia	r0!, {r6}
    4e86:	ca80      	ldmia	r2!, {r7}
    4e88:	41be      	sbcs	r6, r7
    4e8a:	c340      	stmia	r3!, {r6}
    4e8c:	c840      	ldmia	r0!, {r6}
    4e8e:	ca80      	ldmia	r2!, {r7}
    4e90:	41be      	sbcs	r6, r7
    4e92:	c340      	stmia	r3!, {r6}
    4e94:	c840      	ldmia	r0!, {r6}
    4e96:	ca80      	ldmia	r2!, {r7}
    4e98:	41be      	sbcs	r6, r7
    4e9a:	c340      	stmia	r3!, {r6}
    4e9c:	c840      	ldmia	r0!, {r6}
    4e9e:	ca80      	ldmia	r2!, {r7}
    4ea0:	41be      	sbcs	r6, r7
    4ea2:	c340      	stmia	r3!, {r6}
    4ea4:	c840      	ldmia	r0!, {r6}
    4ea6:	ca80      	ldmia	r2!, {r7}
    4ea8:	41be      	sbcs	r6, r7
    4eaa:	c340      	stmia	r3!, {r6}
    4eac:	c840      	ldmia	r0!, {r6}
    4eae:	ca80      	ldmia	r2!, {r7}
    4eb0:	41be      	sbcs	r6, r7
    4eb2:	c340      	stmia	r3!, {r6}
    4eb4:	4164      	adcs	r4, r4
        uECC_word_t temp = *vli;
    4eb6:	9b52      	ldr	r3, [sp, #328]	; 0x148
        *vli = (temp >> 1) | carry;
    4eb8:	085a      	lsrs	r2, r3, #1
    4eba:	9252      	str	r2, [sp, #328]	; 0x148
        uECC_word_t temp = *vli;
    4ebc:	9a51      	ldr	r2, [sp, #324]	; 0x144
        carry = temp << (uECC_WORD_BITS - 1);
    4ebe:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4ec0:	0851      	lsrs	r1, r2, #1
    4ec2:	430b      	orrs	r3, r1
    4ec4:	9351      	str	r3, [sp, #324]	; 0x144
        uECC_word_t temp = *vli;
    4ec6:	9b50      	ldr	r3, [sp, #320]	; 0x140
        carry = temp << (uECC_WORD_BITS - 1);
    4ec8:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4eca:	0859      	lsrs	r1, r3, #1
    4ecc:	430a      	orrs	r2, r1
    4ece:	9250      	str	r2, [sp, #320]	; 0x140
        uECC_word_t temp = *vli;
    4ed0:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
        carry = temp << (uECC_WORD_BITS - 1);
    4ed2:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4ed4:	0851      	lsrs	r1, r2, #1
    4ed6:	430b      	orrs	r3, r1
    4ed8:	934f      	str	r3, [sp, #316]	; 0x13c
        uECC_word_t temp = *vli;
    4eda:	9b4e      	ldr	r3, [sp, #312]	; 0x138
        carry = temp << (uECC_WORD_BITS - 1);
    4edc:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ede:	0859      	lsrs	r1, r3, #1
    4ee0:	430a      	orrs	r2, r1
    4ee2:	924e      	str	r2, [sp, #312]	; 0x138
        uECC_word_t temp = *vli;
    4ee4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
        carry = temp << (uECC_WORD_BITS - 1);
    4ee6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4ee8:	0851      	lsrs	r1, r2, #1
    4eea:	430b      	orrs	r3, r1
    4eec:	934d      	str	r3, [sp, #308]	; 0x134
    4eee:	9b4c      	ldr	r3, [sp, #304]	; 0x130
        carry = temp << (uECC_WORD_BITS - 1);
    4ef0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ef2:	085b      	lsrs	r3, r3, #1
    4ef4:	4313      	orrs	r3, r2
    4ef6:	934c      	str	r3, [sp, #304]	; 0x130
        if (left[i] > right[i]) {
    4ef8:	9a62      	ldr	r2, [sp, #392]	; 0x188
    4efa:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4efc:	429a      	cmp	r2, r3
    4efe:	d824      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f00:	d200      	bcs.n	4f04 <mod_sqrt_secp224r1+0xc24>
    4f02:	e13a      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4f04:	9a61      	ldr	r2, [sp, #388]	; 0x184
    4f06:	9b59      	ldr	r3, [sp, #356]	; 0x164
    4f08:	429a      	cmp	r2, r3
    4f0a:	d81e      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f0c:	d200      	bcs.n	4f10 <mod_sqrt_secp224r1+0xc30>
    4f0e:	e134      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4f10:	9a60      	ldr	r2, [sp, #384]	; 0x180
    4f12:	9b58      	ldr	r3, [sp, #352]	; 0x160
    4f14:	429a      	cmp	r2, r3
    4f16:	d818      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f18:	d200      	bcs.n	4f1c <mod_sqrt_secp224r1+0xc3c>
    4f1a:	e12e      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4f1c:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
    4f1e:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    4f20:	429a      	cmp	r2, r3
    4f22:	d812      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f24:	d200      	bcs.n	4f28 <mod_sqrt_secp224r1+0xc48>
    4f26:	e128      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4f28:	9a5e      	ldr	r2, [sp, #376]	; 0x178
    4f2a:	9b56      	ldr	r3, [sp, #344]	; 0x158
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d80c      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f30:	d200      	bcs.n	4f34 <mod_sqrt_secp224r1+0xc54>
    4f32:	e122      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4f34:	9a5d      	ldr	r2, [sp, #372]	; 0x174
    4f36:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4f38:	429a      	cmp	r2, r3
    4f3a:	d806      	bhi.n	4f4a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4f3c:	d200      	bcs.n	4f40 <mod_sqrt_secp224r1+0xc60>
    4f3e:	e11c      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
    4f40:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    4f42:	9a54      	ldr	r2, [sp, #336]	; 0x150
    4f44:	4293      	cmp	r3, r2
    4f46:	d200      	bcs.n	4f4a <mod_sqrt_secp224r1+0xc6a>
    4f48:	e117      	b.n	517a <mod_sqrt_secp224r1+0xe9a>
    4f4a:	ab5c      	add	r3, sp, #368	; 0x170
    4f4c:	aa54      	add	r2, sp, #336	; 0x150
    4f4e:	4649      	mov	r1, r9
    4f50:	0018      	movs	r0, r3
    4f52:	2400      	movs	r4, #0
    4f54:	a605      	add	r6, pc, #20	; (adr r6, 4f6c <mod_sqrt_secp224r1+0xc8c>)
    4f56:	46c0      	nop			; (mov r8, r8)
    4f58:	46c0      	nop			; (mov r8, r8)
    4f5a:	46c0      	nop			; (mov r8, r8)
    4f5c:	46c0      	nop			; (mov r8, r8)
    4f5e:	46c0      	nop			; (mov r8, r8)
    4f60:	1989      	adds	r1, r1, r6
    4f62:	c840      	ldmia	r0!, {r6}
    4f64:	ca80      	ldmia	r2!, {r7}
    4f66:	1bf6      	subs	r6, r6, r7
    4f68:	c340      	stmia	r3!, {r6}
    4f6a:	4708      	bx	r1
    4f6c:	c840      	ldmia	r0!, {r6}
    4f6e:	ca80      	ldmia	r2!, {r7}
    4f70:	41be      	sbcs	r6, r7
    4f72:	c340      	stmia	r3!, {r6}
    4f74:	c840      	ldmia	r0!, {r6}
    4f76:	ca80      	ldmia	r2!, {r7}
    4f78:	41be      	sbcs	r6, r7
    4f7a:	c340      	stmia	r3!, {r6}
    4f7c:	c840      	ldmia	r0!, {r6}
    4f7e:	ca80      	ldmia	r2!, {r7}
    4f80:	41be      	sbcs	r6, r7
    4f82:	c340      	stmia	r3!, {r6}
    4f84:	c840      	ldmia	r0!, {r6}
    4f86:	ca80      	ldmia	r2!, {r7}
    4f88:	41be      	sbcs	r6, r7
    4f8a:	c340      	stmia	r3!, {r6}
    4f8c:	c840      	ldmia	r0!, {r6}
    4f8e:	ca80      	ldmia	r2!, {r7}
    4f90:	41be      	sbcs	r6, r7
    4f92:	c340      	stmia	r3!, {r6}
    4f94:	c840      	ldmia	r0!, {r6}
    4f96:	ca80      	ldmia	r2!, {r7}
    4f98:	41be      	sbcs	r6, r7
    4f9a:	c340      	stmia	r3!, {r6}
    4f9c:	c840      	ldmia	r0!, {r6}
    4f9e:	ca80      	ldmia	r2!, {r7}
    4fa0:	41be      	sbcs	r6, r7
    4fa2:	c340      	stmia	r3!, {r6}
    4fa4:	4164      	adcs	r4, r4
    if (!EVEN(uv)) {
    4fa6:	2301      	movs	r3, #1
    4fa8:	9e5c      	ldr	r6, [sp, #368]	; 0x170
    uECC_word_t carry = 0;
    4faa:	2400      	movs	r4, #0
    if (!EVEN(uv)) {
    4fac:	4233      	tst	r3, r6
    4fae:	d000      	beq.n	4fb2 <mod_sqrt_secp224r1+0xcd2>
    4fb0:	e0b2      	b.n	5118 <mod_sqrt_secp224r1+0xe38>
        uECC_word_t temp = *vli;
    4fb2:	9b62      	ldr	r3, [sp, #392]	; 0x188
    4fb4:	9a61      	ldr	r2, [sp, #388]	; 0x184
        *vli = (temp >> 1) | carry;
    4fb6:	0858      	lsrs	r0, r3, #1
    4fb8:	0851      	lsrs	r1, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4fba:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4fbc:	430b      	orrs	r3, r1
    4fbe:	9361      	str	r3, [sp, #388]	; 0x184
        uECC_word_t temp = *vli;
    4fc0:	9b60      	ldr	r3, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4fc2:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4fc4:	0859      	lsrs	r1, r3, #1
    4fc6:	430a      	orrs	r2, r1
        uECC_word_t temp = *vli;
    4fc8:	995f      	ldr	r1, [sp, #380]	; 0x17c
        *vli = (temp >> 1) | carry;
    4fca:	9260      	str	r2, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4fcc:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4fce:	084a      	lsrs	r2, r1, #1
    4fd0:	4313      	orrs	r3, r2
        uECC_word_t temp = *vli;
    4fd2:	9a5e      	ldr	r2, [sp, #376]	; 0x178
        *vli = (temp >> 1) | carry;
    4fd4:	935f      	str	r3, [sp, #380]	; 0x17c
        carry = temp << (uECC_WORD_BITS - 1);
    4fd6:	07c9      	lsls	r1, r1, #31
        *vli = (temp >> 1) | carry;
    4fd8:	0853      	lsrs	r3, r2, #1
    4fda:	4319      	orrs	r1, r3
        uECC_word_t temp = *vli;
    4fdc:	9b5d      	ldr	r3, [sp, #372]	; 0x174
        *vli = (temp >> 1) | carry;
    4fde:	915e      	str	r1, [sp, #376]	; 0x178
        carry = temp << (uECC_WORD_BITS - 1);
    4fe0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4fe2:	0859      	lsrs	r1, r3, #1
    4fe4:	0876      	lsrs	r6, r6, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4fe6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4fe8:	430a      	orrs	r2, r1
    4fea:	4333      	orrs	r3, r6
    4fec:	9062      	str	r0, [sp, #392]	; 0x188
    4fee:	925d      	str	r2, [sp, #372]	; 0x174
    4ff0:	935c      	str	r3, [sp, #368]	; 0x170
    if (carry) {
    4ff2:	b11c      	cbz	r4, 4ffc <mod_sqrt_secp224r1+0xd1c>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4ff4:	2380      	movs	r3, #128	; 0x80
    4ff6:	061b      	lsls	r3, r3, #24
    4ff8:	4318      	orrs	r0, r3
    4ffa:	9062      	str	r0, [sp, #392]	; 0x188
    4ffc:	9944      	ldr	r1, [sp, #272]	; 0x110
    4ffe:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5000:	9852      	ldr	r0, [sp, #328]	; 0x148
    5002:	e535      	b.n	4a70 <mod_sqrt_secp224r1+0x790>
    __asm__ volatile (
    5004:	ab5c      	add	r3, sp, #368	; 0x170
    5006:	465a      	mov	r2, fp
    5008:	4649      	mov	r1, r9
    500a:	0018      	movs	r0, r3
    500c:	2700      	movs	r7, #0
    500e:	a403      	add	r4, pc, #12	; (adr r4, 501c <mod_sqrt_secp224r1+0xd3c>)
    5010:	1909      	adds	r1, r1, r4
    5012:	c810      	ldmia	r0!, {r4}
    5014:	ca40      	ldmia	r2!, {r6}
    5016:	19a4      	adds	r4, r4, r6
    5018:	c310      	stmia	r3!, {r4}
    501a:	4708      	bx	r1
    501c:	c810      	ldmia	r0!, {r4}
    501e:	ca40      	ldmia	r2!, {r6}
    5020:	4174      	adcs	r4, r6
    5022:	c310      	stmia	r3!, {r4}
    5024:	c810      	ldmia	r0!, {r4}
    5026:	ca40      	ldmia	r2!, {r6}
    5028:	4174      	adcs	r4, r6
    502a:	c310      	stmia	r3!, {r4}
    502c:	c810      	ldmia	r0!, {r4}
    502e:	ca40      	ldmia	r2!, {r6}
    5030:	4174      	adcs	r4, r6
    5032:	c310      	stmia	r3!, {r4}
    5034:	c810      	ldmia	r0!, {r4}
    5036:	ca40      	ldmia	r2!, {r6}
    5038:	4174      	adcs	r4, r6
    503a:	c310      	stmia	r3!, {r4}
    503c:	c810      	ldmia	r0!, {r4}
    503e:	ca40      	ldmia	r2!, {r6}
    5040:	4174      	adcs	r4, r6
    5042:	c310      	stmia	r3!, {r4}
    5044:	c810      	ldmia	r0!, {r4}
    5046:	ca40      	ldmia	r2!, {r6}
    5048:	4174      	adcs	r4, r6
    504a:	c310      	stmia	r3!, {r4}
    504c:	c810      	ldmia	r0!, {r4}
    504e:	ca40      	ldmia	r2!, {r6}
    5050:	4174      	adcs	r4, r6
    5052:	c310      	stmia	r3!, {r4}
    5054:	417f      	adcs	r7, r7
    5056:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    5058:	9944      	ldr	r1, [sp, #272]	; 0x110
    505a:	469c      	mov	ip, r3
    505c:	9c52      	ldr	r4, [sp, #328]	; 0x148
    505e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5060:	e5c4      	b.n	4bec <mod_sqrt_secp224r1+0x90c>
    5062:	ab54      	add	r3, sp, #336	; 0x150
    5064:	465a      	mov	r2, fp
    5066:	4649      	mov	r1, r9
    5068:	0018      	movs	r0, r3
    506a:	2400      	movs	r4, #0
    506c:	a603      	add	r6, pc, #12	; (adr r6, 507c <mod_sqrt_secp224r1+0xd9c>)
    506e:	46c0      	nop			; (mov r8, r8)
    5070:	1989      	adds	r1, r1, r6
    5072:	c840      	ldmia	r0!, {r6}
    5074:	ca80      	ldmia	r2!, {r7}
    5076:	19f6      	adds	r6, r6, r7
    5078:	c340      	stmia	r3!, {r6}
    507a:	4708      	bx	r1
    507c:	c840      	ldmia	r0!, {r6}
    507e:	ca80      	ldmia	r2!, {r7}
    5080:	417e      	adcs	r6, r7
    5082:	c340      	stmia	r3!, {r6}
    5084:	c840      	ldmia	r0!, {r6}
    5086:	ca80      	ldmia	r2!, {r7}
    5088:	417e      	adcs	r6, r7
    508a:	c340      	stmia	r3!, {r6}
    508c:	c840      	ldmia	r0!, {r6}
    508e:	ca80      	ldmia	r2!, {r7}
    5090:	417e      	adcs	r6, r7
    5092:	c340      	stmia	r3!, {r6}
    5094:	c840      	ldmia	r0!, {r6}
    5096:	ca80      	ldmia	r2!, {r7}
    5098:	417e      	adcs	r6, r7
    509a:	c340      	stmia	r3!, {r6}
    509c:	c840      	ldmia	r0!, {r6}
    509e:	ca80      	ldmia	r2!, {r7}
    50a0:	417e      	adcs	r6, r7
    50a2:	c340      	stmia	r3!, {r6}
    50a4:	c840      	ldmia	r0!, {r6}
    50a6:	ca80      	ldmia	r2!, {r7}
    50a8:	417e      	adcs	r6, r7
    50aa:	c340      	stmia	r3!, {r6}
    50ac:	c840      	ldmia	r0!, {r6}
    50ae:	ca80      	ldmia	r2!, {r7}
    50b0:	417e      	adcs	r6, r7
    50b2:	c340      	stmia	r3!, {r6}
    50b4:	4164      	adcs	r4, r4
    50b6:	9e54      	ldr	r6, [sp, #336]	; 0x150
    50b8:	e673      	b.n	4da2 <mod_sqrt_secp224r1+0xac2>
    50ba:	ab54      	add	r3, sp, #336	; 0x150
    50bc:	465a      	mov	r2, fp
    50be:	4649      	mov	r1, r9
    50c0:	0018      	movs	r0, r3
    50c2:	2400      	movs	r4, #0
    50c4:	a605      	add	r6, pc, #20	; (adr r6, 50dc <mod_sqrt_secp224r1+0xdfc>)
    50c6:	46c0      	nop			; (mov r8, r8)
    50c8:	46c0      	nop			; (mov r8, r8)
    50ca:	46c0      	nop			; (mov r8, r8)
    50cc:	46c0      	nop			; (mov r8, r8)
    50ce:	46c0      	nop			; (mov r8, r8)
    50d0:	1989      	adds	r1, r1, r6
    50d2:	c840      	ldmia	r0!, {r6}
    50d4:	ca80      	ldmia	r2!, {r7}
    50d6:	19f6      	adds	r6, r6, r7
    50d8:	c340      	stmia	r3!, {r6}
    50da:	4708      	bx	r1
    50dc:	c840      	ldmia	r0!, {r6}
    50de:	ca80      	ldmia	r2!, {r7}
    50e0:	417e      	adcs	r6, r7
    50e2:	c340      	stmia	r3!, {r6}
    50e4:	c840      	ldmia	r0!, {r6}
    50e6:	ca80      	ldmia	r2!, {r7}
    50e8:	417e      	adcs	r6, r7
    50ea:	c340      	stmia	r3!, {r6}
    50ec:	c840      	ldmia	r0!, {r6}
    50ee:	ca80      	ldmia	r2!, {r7}
    50f0:	417e      	adcs	r6, r7
    50f2:	c340      	stmia	r3!, {r6}
    50f4:	c840      	ldmia	r0!, {r6}
    50f6:	ca80      	ldmia	r2!, {r7}
    50f8:	417e      	adcs	r6, r7
    50fa:	c340      	stmia	r3!, {r6}
    50fc:	c840      	ldmia	r0!, {r6}
    50fe:	ca80      	ldmia	r2!, {r7}
    5100:	417e      	adcs	r6, r7
    5102:	c340      	stmia	r3!, {r6}
    5104:	c840      	ldmia	r0!, {r6}
    5106:	ca80      	ldmia	r2!, {r7}
    5108:	417e      	adcs	r6, r7
    510a:	c340      	stmia	r3!, {r6}
    510c:	c840      	ldmia	r0!, {r6}
    510e:	ca80      	ldmia	r2!, {r7}
    5110:	417e      	adcs	r6, r7
    5112:	c340      	stmia	r3!, {r6}
    5114:	4164      	adcs	r4, r4
    5116:	e610      	b.n	4d3a <mod_sqrt_secp224r1+0xa5a>
    5118:	ab5c      	add	r3, sp, #368	; 0x170
    511a:	465a      	mov	r2, fp
    511c:	4649      	mov	r1, r9
    511e:	0018      	movs	r0, r3
    5120:	2400      	movs	r4, #0
    5122:	a606      	add	r6, pc, #24	; (adr r6, 513c <mod_sqrt_secp224r1+0xe5c>)
    5124:	46c0      	nop			; (mov r8, r8)
    5126:	46c0      	nop			; (mov r8, r8)
    5128:	46c0      	nop			; (mov r8, r8)
    512a:	46c0      	nop			; (mov r8, r8)
    512c:	46c0      	nop			; (mov r8, r8)
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	1989      	adds	r1, r1, r6
    5132:	c840      	ldmia	r0!, {r6}
    5134:	ca80      	ldmia	r2!, {r7}
    5136:	19f6      	adds	r6, r6, r7
    5138:	c340      	stmia	r3!, {r6}
    513a:	4708      	bx	r1
    513c:	c840      	ldmia	r0!, {r6}
    513e:	ca80      	ldmia	r2!, {r7}
    5140:	417e      	adcs	r6, r7
    5142:	c340      	stmia	r3!, {r6}
    5144:	c840      	ldmia	r0!, {r6}
    5146:	ca80      	ldmia	r2!, {r7}
    5148:	417e      	adcs	r6, r7
    514a:	c340      	stmia	r3!, {r6}
    514c:	c840      	ldmia	r0!, {r6}
    514e:	ca80      	ldmia	r2!, {r7}
    5150:	417e      	adcs	r6, r7
    5152:	c340      	stmia	r3!, {r6}
    5154:	c840      	ldmia	r0!, {r6}
    5156:	ca80      	ldmia	r2!, {r7}
    5158:	417e      	adcs	r6, r7
    515a:	c340      	stmia	r3!, {r6}
    515c:	c840      	ldmia	r0!, {r6}
    515e:	ca80      	ldmia	r2!, {r7}
    5160:	417e      	adcs	r6, r7
    5162:	c340      	stmia	r3!, {r6}
    5164:	c840      	ldmia	r0!, {r6}
    5166:	ca80      	ldmia	r2!, {r7}
    5168:	417e      	adcs	r6, r7
    516a:	c340      	stmia	r3!, {r6}
    516c:	c840      	ldmia	r0!, {r6}
    516e:	ca80      	ldmia	r2!, {r7}
    5170:	417e      	adcs	r6, r7
    5172:	c340      	stmia	r3!, {r6}
    5174:	4164      	adcs	r4, r4
    5176:	9e5c      	ldr	r6, [sp, #368]	; 0x170
    5178:	e71b      	b.n	4fb2 <mod_sqrt_secp224r1+0xcd2>
    517a:	ab5c      	add	r3, sp, #368	; 0x170
    517c:	465a      	mov	r2, fp
    517e:	4649      	mov	r1, r9
    5180:	0018      	movs	r0, r3
    5182:	2400      	movs	r4, #0
    5184:	a605      	add	r6, pc, #20	; (adr r6, 519c <mod_sqrt_secp224r1+0xebc>)
    5186:	46c0      	nop			; (mov r8, r8)
    5188:	46c0      	nop			; (mov r8, r8)
    518a:	46c0      	nop			; (mov r8, r8)
    518c:	46c0      	nop			; (mov r8, r8)
    518e:	46c0      	nop			; (mov r8, r8)
    5190:	1989      	adds	r1, r1, r6
    5192:	c840      	ldmia	r0!, {r6}
    5194:	ca80      	ldmia	r2!, {r7}
    5196:	19f6      	adds	r6, r6, r7
    5198:	c340      	stmia	r3!, {r6}
    519a:	4708      	bx	r1
    519c:	c840      	ldmia	r0!, {r6}
    519e:	ca80      	ldmia	r2!, {r7}
    51a0:	417e      	adcs	r6, r7
    51a2:	c340      	stmia	r3!, {r6}
    51a4:	c840      	ldmia	r0!, {r6}
    51a6:	ca80      	ldmia	r2!, {r7}
    51a8:	417e      	adcs	r6, r7
    51aa:	c340      	stmia	r3!, {r6}
    51ac:	c840      	ldmia	r0!, {r6}
    51ae:	ca80      	ldmia	r2!, {r7}
    51b0:	417e      	adcs	r6, r7
    51b2:	c340      	stmia	r3!, {r6}
    51b4:	c840      	ldmia	r0!, {r6}
    51b6:	ca80      	ldmia	r2!, {r7}
    51b8:	417e      	adcs	r6, r7
    51ba:	c340      	stmia	r3!, {r6}
    51bc:	c840      	ldmia	r0!, {r6}
    51be:	ca80      	ldmia	r2!, {r7}
    51c0:	417e      	adcs	r6, r7
    51c2:	c340      	stmia	r3!, {r6}
    51c4:	c840      	ldmia	r0!, {r6}
    51c6:	ca80      	ldmia	r2!, {r7}
    51c8:	417e      	adcs	r6, r7
    51ca:	c340      	stmia	r3!, {r6}
    51cc:	c840      	ldmia	r0!, {r6}
    51ce:	ca80      	ldmia	r2!, {r7}
    51d0:	417e      	adcs	r6, r7
    51d2:	c340      	stmia	r3!, {r6}
    51d4:	4164      	adcs	r4, r4
    51d6:	e6b8      	b.n	4f4a <mod_sqrt_secp224r1+0xc6a>
	...

000051e0 <uECC_sign_with_k_internal>:
static int uECC_sign_with_k_internal(const uint8_t *private_key,
                            const uint8_t *message_hash,
                            unsigned hash_size,
                            uECC_word_t *k,
                            uint8_t *signature,
                            uECC_Curve curve) {
    51e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51e2:	46de      	mov	lr, fp
    51e4:	464e      	mov	r6, r9
    51e6:	4657      	mov	r7, sl
    51e8:	4645      	mov	r5, r8
    51ea:	b5e0      	push	{r5, r6, r7, lr}
    51ec:	b0c1      	sub	sp, #260	; 0x104
    51ee:	001e      	movs	r6, r3

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t s[uECC_MAX_WORDS];
    uECC_word_t *k2[2] = {tmp, s};
    51f0:	ab10      	add	r3, sp, #64	; 0x40
    51f2:	930e      	str	r3, [sp, #56]	; 0x38
    51f4:	ab18      	add	r3, sp, #96	; 0x60
    51f6:	930f      	str	r3, [sp, #60]	; 0x3c
    uECC_word_t *p = (uECC_word_t *)signature;
#else
    uECC_word_t p[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
    51f8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
                            uECC_Curve curve) {
    51fa:	9005      	str	r0, [sp, #20]
    wordcount_t num_words = curve->num_words;
    51fc:	781b      	ldrb	r3, [r3, #0]
                            uECC_Curve curve) {
    51fe:	9106      	str	r1, [sp, #24]
    wordcount_t num_words = curve->num_words;
    5200:	b25b      	sxtb	r3, r3
                            uECC_Curve curve) {
    5202:	9207      	str	r2, [sp, #28]
    wordcount_t num_words = curve->num_words;
    5204:	469b      	mov	fp, r3
    for (i = 0; i < num_words; ++i) {
    5206:	2b00      	cmp	r3, #0
    5208:	dd0f      	ble.n	522a <uECC_sign_with_k_internal+0x4a>
    520a:	1e5c      	subs	r4, r3, #1
    520c:	b2e4      	uxtb	r4, r4
    520e:	3401      	adds	r4, #1
    5210:	00a3      	lsls	r3, r4, #2
    5212:	001c      	movs	r4, r3
    5214:	18f0      	adds	r0, r6, r3
    5216:	46b1      	mov	r9, r6
    5218:	0033      	movs	r3, r6
    521a:	2200      	movs	r2, #0
        bits |= vli[i];
    521c:	cb02      	ldmia	r3!, {r1}
    521e:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    5220:	4298      	cmp	r0, r3
    5222:	d1fb      	bne.n	521c <uECC_sign_with_k_internal+0x3c>
    5224:	0025      	movs	r5, r4
    5226:	9404      	str	r4, [sp, #16]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    bitcount_t num_n_bits = curve->num_n_bits;

    /* Make sure 0 < k < curve_n */
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    5228:	b93a      	cbnz	r2, 523a <uECC_sign_with_k_internal+0x5a>
        return 0;
    522a:	2000      	movs	r0, #0
    bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s, curve->num_bytes);
#else
    uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
#endif
    return 1;
}
    522c:	b041      	add	sp, #260	; 0x104
    522e:	bc3c      	pop	{r2, r3, r4, r5}
    5230:	4690      	mov	r8, r2
    5232:	4699      	mov	r9, r3
    5234:	46a2      	mov	sl, r4
    5236:	46ab      	mov	fp, r5
    5238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    523a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    523c:	f240 7a91 	movw	sl, #1937	; 0x791
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5240:	2202      	movs	r2, #2
    5242:	5e9b      	ldrsh	r3, [r3, r2]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5244:	f2c0 0a00 	movt	sl, #0
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5248:	001a      	movs	r2, r3
    524a:	930a      	str	r3, [sp, #40]	; 0x28
    524c:	231f      	movs	r3, #31
    524e:	321f      	adds	r2, #31
    5250:	17d1      	asrs	r1, r2, #31
    5252:	400b      	ands	r3, r1
    5254:	189b      	adds	r3, r3, r2
    5256:	466a      	mov	r2, sp
    5258:	115b      	asrs	r3, r3, #5
    525a:	7313      	strb	r3, [r2, #12]
    525c:	4698      	mov	r8, r3
    525e:	7b13      	ldrb	r3, [r2, #12]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5260:	0032      	movs	r2, r6
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5262:	b25b      	sxtb	r3, r3
    5264:	001c      	movs	r4, r3
    5266:	9309      	str	r3, [sp, #36]	; 0x24
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    5268:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    526a:	3324      	adds	r3, #36	; 0x24
    526c:	0019      	movs	r1, r3
    526e:	9308      	str	r3, [sp, #32]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5270:	ab30      	add	r3, sp, #192	; 0xc0
    5272:	0018      	movs	r0, r3
    5274:	9303      	str	r3, [sp, #12]
    5276:	0023      	movs	r3, r4
    5278:	47d0      	blx	sl
    527a:	1e42      	subs	r2, r0, #1
    527c:	4190      	sbcs	r0, r2
    527e:	b2c2      	uxtb	r2, r0
    for (i = 0; i < num_words; ++i) {
    5280:	2c00      	cmp	r4, #0
    5282:	dc00      	bgt.n	5286 <uECC_sign_with_k_internal+0xa6>
    5284:	e1fe      	b.n	5684 <uECC_sign_with_k_internal+0x4a4>
    5286:	2301      	movs	r3, #1
    5288:	4669      	mov	r1, sp
    528a:	425b      	negs	r3, r3
    528c:	4443      	add	r3, r8
    528e:	740b      	strb	r3, [r1, #16]
    5290:	7c08      	ldrb	r0, [r1, #16]
    5292:	2300      	movs	r3, #0
    5294:	2100      	movs	r1, #0
    5296:	3001      	adds	r0, #1
    5298:	002c      	movs	r4, r5
    529a:	9d03      	ldr	r5, [sp, #12]
    529c:	0080      	lsls	r0, r0, #2
        bits |= vli[i];
    529e:	586f      	ldr	r7, [r5, r1]
    52a0:	3104      	adds	r1, #4
    52a2:	433b      	orrs	r3, r7
    for (i = 0; i < num_words; ++i) {
    52a4:	4281      	cmp	r1, r0
    52a6:	d1fa      	bne.n	529e <uECC_sign_with_k_internal+0xbe>
    52a8:	1e59      	subs	r1, r3, #1
    52aa:	418b      	sbcs	r3, r1
    52ac:	9404      	str	r4, [sp, #16]
    52ae:	b2db      	uxtb	r3, r3
    return (!equal - 2 * neg);
    52b0:	0052      	lsls	r2, r2, #1
    52b2:	1a9a      	subs	r2, r3, r2
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    52b4:	b2d3      	uxtb	r3, r2
    52b6:	930b      	str	r3, [sp, #44]	; 0x2c
    52b8:	2b01      	cmp	r3, #1
    52ba:	d1b6      	bne.n	522a <uECC_sign_with_k_internal+0x4a>
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    52bc:	f240 0a1f 	movw	sl, #31
    52c0:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    52c2:	4657      	mov	r7, sl
    52c4:	2202      	movs	r2, #2
    52c6:	5e9a      	ldrsh	r2, [r3, r2]
    52c8:	a810      	add	r0, sp, #64	; 0x40
    52ca:	0011      	movs	r1, r2
    52cc:	311f      	adds	r1, #31
    52ce:	17cb      	asrs	r3, r1, #31
    52d0:	403b      	ands	r3, r7
    52d2:	185b      	adds	r3, r3, r1
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    52d4:	2108      	movs	r1, #8
    52d6:	115b      	asrs	r3, r3, #5
    52d8:	b25b      	sxtb	r3, r3
    52da:	1ac9      	subs	r1, r1, r3
    52dc:	00c9      	lsls	r1, r1, #3
    52de:	930c      	str	r3, [sp, #48]	; 0x30
    52e0:	920d      	str	r2, [sp, #52]	; 0x34
    52e2:	3101      	adds	r1, #1
    __asm__ volatile (
    52e4:	0033      	movs	r3, r6
    52e6:	9f08      	ldr	r7, [sp, #32]
    52e8:	2200      	movs	r2, #0
    52ea:	a404      	add	r4, pc, #16	; (adr r4, 52fc <uECC_sign_with_k_internal+0x11c>)
    52ec:	46c0      	nop			; (mov r8, r8)
    52ee:	46c0      	nop			; (mov r8, r8)
    52f0:	1909      	adds	r1, r1, r4
    52f2:	cb10      	ldmia	r3!, {r4}
    52f4:	cf20      	ldmia	r7!, {r5}
    52f6:	1964      	adds	r4, r4, r5
    52f8:	c010      	stmia	r0!, {r4}
    52fa:	4708      	bx	r1
    52fc:	cb10      	ldmia	r3!, {r4}
    52fe:	cf20      	ldmia	r7!, {r5}
    5300:	416c      	adcs	r4, r5
    5302:	c010      	stmia	r0!, {r4}
    5304:	cb10      	ldmia	r3!, {r4}
    5306:	cf20      	ldmia	r7!, {r5}
    5308:	416c      	adcs	r4, r5
    530a:	c010      	stmia	r0!, {r4}
    530c:	cb10      	ldmia	r3!, {r4}
    530e:	cf20      	ldmia	r7!, {r5}
    5310:	416c      	adcs	r4, r5
    5312:	c010      	stmia	r0!, {r4}
    5314:	cb10      	ldmia	r3!, {r4}
    5316:	cf20      	ldmia	r7!, {r5}
    5318:	416c      	adcs	r4, r5
    531a:	c010      	stmia	r0!, {r4}
    531c:	cb10      	ldmia	r3!, {r4}
    531e:	cf20      	ldmia	r7!, {r5}
    5320:	416c      	adcs	r4, r5
    5322:	c010      	stmia	r0!, {r4}
    5324:	cb10      	ldmia	r3!, {r4}
    5326:	cf20      	ldmia	r7!, {r5}
    5328:	416c      	adcs	r4, r5
    532a:	c010      	stmia	r0!, {r4}
    532c:	cb10      	ldmia	r3!, {r4}
    532e:	cf20      	ldmia	r7!, {r5}
    5330:	416c      	adcs	r4, r5
    5332:	c010      	stmia	r0!, {r4}
    5334:	4152      	adcs	r2, r2
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    5336:	2301      	movs	r3, #1
    5338:	001c      	movs	r4, r3
    533a:	b9b2      	cbnz	r2, 536a <uECC_sign_with_k_internal+0x18a>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
    533c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    533e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
    5340:	0159      	lsls	r1, r3, #5
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    5342:	2300      	movs	r3, #0
    5344:	001c      	movs	r4, r3
    5346:	428a      	cmp	r2, r1
    5348:	da0f      	bge.n	536a <uECC_sign_with_k_internal+0x18a>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    534a:	4650      	mov	r0, sl
    534c:	ab40      	add	r3, sp, #256	; 0x100
    534e:	469c      	mov	ip, r3
    5350:	1151      	asrs	r1, r2, #5
    5352:	4010      	ands	r0, r2
    5354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5356:	0089      	lsls	r1, r1, #2
    5358:	4082      	lsls	r2, r0
    535a:	4461      	add	r1, ip
    535c:	39c0      	subs	r1, #192	; 0xc0
    535e:	6809      	ldr	r1, [r1, #0]
    5360:	400a      	ands	r2, r1
    5362:	0013      	movs	r3, r2
    5364:	1e5a      	subs	r2, r3, #1
    5366:	4193      	sbcs	r3, r2
    5368:	001c      	movs	r4, r3
    uECC_vli_add(k1, k0, curve->n, num_n_words);
    536a:	f240 7a31 	movw	sl, #1841	; 0x731
    536e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5370:	f2c0 0a00 	movt	sl, #0
    5374:	9a08      	ldr	r2, [sp, #32]
    5376:	a910      	add	r1, sp, #64	; 0x40
    5378:	a818      	add	r0, sp, #96	; 0x60
    537a:	47d0      	blx	sl
    if (g_rng_function) {
    537c:	f240 0a00 	movw	sl, #0
    5380:	f2c2 0a00 	movt	sl, #8192	; 0x2000
    5384:	4653      	mov	r3, sl
    5386:	681b      	ldr	r3, [r3, #0]
    5388:	2b00      	cmp	r3, #0
    538a:	d100      	bne.n	538e <uECC_sign_with_k_internal+0x1ae>
    538c:	e17e      	b.n	568c <uECC_sign_with_k_internal+0x4ac>
        if (!uECC_generate_random_int(k2[carry], curve->p, num_words)) {
    538e:	2108      	movs	r1, #8
    5390:	aa0c      	add	r2, sp, #48	; 0x30
    5392:	1852      	adds	r2, r2, r1
    5394:	00a3      	lsls	r3, r4, #2
    5396:	58d3      	ldr	r3, [r2, r3]
    5398:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    539a:	001d      	movs	r5, r3
    539c:	0018      	movs	r0, r3
    539e:	f640 03a5 	movw	r3, #2213	; 0x8a5
    53a2:	1d11      	adds	r1, r2, #4
    53a4:	f2c0 0300 	movt	r3, #0
    53a8:	465a      	mov	r2, fp
    53aa:	4798      	blx	r3
    53ac:	2800      	cmp	r0, #0
    53ae:	d100      	bne.n	53b2 <uECC_sign_with_k_internal+0x1d2>
    53b0:	e73b      	b.n	522a <uECC_sign_with_k_internal+0x4a>
    EccPoint_mult(p, curve->G, k2[!carry], initial_Z, num_n_bits + 1, curve);
    53b2:	2301      	movs	r3, #1
    53b4:	0022      	movs	r2, r4
    53b6:	2108      	movs	r1, #8
    53b8:	f643 6bd9 	movw	fp, #16089	; 0x3ed9
    53bc:	405a      	eors	r2, r3
    53be:	0093      	lsls	r3, r2, #2
    53c0:	aa0c      	add	r2, sp, #48	; 0x30
    53c2:	1852      	adds	r2, r2, r1
    53c4:	58d2      	ldr	r2, [r2, r3]
    53c6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    53c8:	994b      	ldr	r1, [sp, #300]	; 0x12c
    53ca:	9301      	str	r3, [sp, #4]
    53cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    53ce:	3144      	adds	r1, #68	; 0x44
    53d0:	3301      	adds	r3, #1
    53d2:	b21b      	sxth	r3, r3
    53d4:	9300      	str	r3, [sp, #0]
    53d6:	a820      	add	r0, sp, #128	; 0x80
    53d8:	002b      	movs	r3, r5
    53da:	f2c0 0b00 	movt	fp, #0
    53de:	47d8      	blx	fp
    53e0:	2200      	movs	r2, #0
    53e2:	2300      	movs	r3, #0
    53e4:	9c04      	ldr	r4, [sp, #16]
        bits |= vli[i];
    53e6:	2050      	movs	r0, #80	; 0x50
    53e8:	a90c      	add	r1, sp, #48	; 0x30
    53ea:	1809      	adds	r1, r1, r0
    53ec:	5889      	ldr	r1, [r1, r2]
    53ee:	3204      	adds	r2, #4
    53f0:	9104      	str	r1, [sp, #16]
    53f2:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
    53f4:	42a2      	cmp	r2, r4
    53f6:	d1f6      	bne.n	53e6 <uECC_sign_with_k_internal+0x206>
    53f8:	9404      	str	r4, [sp, #16]
    if (uECC_vli_isZero(p, num_words)) {
    53fa:	2b00      	cmp	r3, #0
    53fc:	d100      	bne.n	5400 <uECC_sign_with_k_internal+0x220>
    53fe:	e714      	b.n	522a <uECC_sign_with_k_internal+0x4a>
    if (!g_rng_function) {
    5400:	4653      	mov	r3, sl
    5402:	681b      	ldr	r3, [r3, #0]
    5404:	2b00      	cmp	r3, #0
    5406:	d100      	bne.n	540a <uECC_sign_with_k_internal+0x22a>
    5408:	e14b      	b.n	56a2 <uECC_sign_with_k_internal+0x4c2>
    } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
    540a:	f640 03a5 	movw	r3, #2213	; 0x8a5
    540e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5410:	9908      	ldr	r1, [sp, #32]
    5412:	a810      	add	r0, sp, #64	; 0x40
    5414:	f2c0 0300 	movt	r3, #0
    5418:	4798      	blx	r3
    541a:	2800      	cmp	r0, #0
    541c:	d100      	bne.n	5420 <uECC_sign_with_k_internal+0x240>
    541e:	e704      	b.n	522a <uECC_sign_with_k_internal+0x4a>
    5420:	2301      	movs	r3, #1
    5422:	425b      	negs	r3, r3
    5424:	4443      	add	r3, r8
    5426:	469a      	mov	sl, r3
    uECC_vli_mult(product, left, right, num_words);
    5428:	f240 74ed 	movw	r4, #2029	; 0x7ed
    uECC_vli_mmod(result, product, mod, num_words);
    542c:	f640 1bcd 	movw	fp, #2509	; 0x9cd
    uECC_vli_mult(product, left, right, num_words);
    5430:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5432:	9f03      	ldr	r7, [sp, #12]
    5434:	002b      	movs	r3, r5
    5436:	aa10      	add	r2, sp, #64	; 0x40
    5438:	0031      	movs	r1, r6
    543a:	0038      	movs	r0, r7
    543c:	f2c0 0400 	movt	r4, #0
    5440:	940a      	str	r4, [sp, #40]	; 0x28
    uECC_vli_mmod(result, product, mod, num_words);
    5442:	f2c0 0b00 	movt	fp, #0
    uECC_vli_mult(product, left, right, num_words);
    5446:	47a0      	blx	r4
    uECC_vli_mmod(result, product, mod, num_words);
    5448:	002b      	movs	r3, r5
    544a:	9a08      	ldr	r2, [sp, #32]
    544c:	0039      	movs	r1, r7
    544e:	0030      	movs	r0, r6
    5450:	47d8      	blx	fp
    for (i = 0; i < num_words; ++i) {
    5452:	2d00      	cmp	r5, #0
    5454:	dd21      	ble.n	549a <uECC_sign_with_k_internal+0x2ba>
    5456:	212c      	movs	r1, #44	; 0x2c
    5458:	466a      	mov	r2, sp
    545a:	4653      	mov	r3, sl
    545c:	1852      	adds	r2, r2, r1
    545e:	7013      	strb	r3, [r2, #0]
    5460:	222c      	movs	r2, #44	; 0x2c
    5462:	466b      	mov	r3, sp
    5464:	189b      	adds	r3, r3, r2
    5466:	781a      	ldrb	r2, [r3, #0]
    5468:	4649      	mov	r1, r9
    546a:	3201      	adds	r2, #1
    546c:	0092      	lsls	r2, r2, #2
    546e:	2300      	movs	r3, #0
    5470:	4694      	mov	ip, r2
    5472:	9c04      	ldr	r4, [sp, #16]
    5474:	18b0      	adds	r0, r6, r2
        bits |= vli[i];
    5476:	c904      	ldmia	r1!, {r2}
    5478:	4313      	orrs	r3, r2
    for (i = 0; i < num_words; ++i) {
    547a:	4288      	cmp	r0, r1
    547c:	d1fb      	bne.n	5476 <uECC_sign_with_k_internal+0x296>
    547e:	4662      	mov	r2, ip
    5480:	9404      	str	r4, [sp, #16]
    if (uECC_vli_isZero(input, num_words)) {
    5482:	2b00      	cmp	r3, #0
    5484:	d100      	bne.n	5488 <uECC_sign_with_k_internal+0x2a8>
    5486:	e104      	b.n	5692 <uECC_sign_with_k_internal+0x4b2>
    5488:	f643 1911 	movw	r9, #14609	; 0x3911
    548c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    548e:	9a08      	ldr	r2, [sp, #32]
    5490:	0031      	movs	r1, r6
    5492:	0030      	movs	r0, r6
    5494:	f2c0 0900 	movt	r9, #0
    5498:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, num_words);
    549a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    549c:	9f03      	ldr	r7, [sp, #12]
    549e:	002b      	movs	r3, r5
    54a0:	aa10      	add	r2, sp, #64	; 0x40
    54a2:	0031      	movs	r1, r6
    54a4:	0038      	movs	r0, r7
    54a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    54a8:	47a0      	blx	r4
    uECC_vli_mmod(result, product, mod, num_words);
    54aa:	002b      	movs	r3, r5
    54ac:	9a08      	ldr	r2, [sp, #32]
    54ae:	0039      	movs	r1, r7
    54b0:	0030      	movs	r0, r6
    54b2:	47d8      	blx	fp
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    54b4:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    for (i = 0; i < num_bytes; ++i) {
    54b6:	2200      	movs	r2, #0
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    54b8:	785b      	ldrb	r3, [r3, #1]
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    54ba:	2103      	movs	r1, #3
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    54bc:	b25b      	sxtb	r3, r3
    54be:	469c      	mov	ip, r3
    54c0:	2301      	movs	r3, #1
    54c2:	425b      	negs	r3, r3
    54c4:	4463      	add	r3, ip
    54c6:	4699      	mov	r9, r3
    for (i = 0; i < num_bytes; ++i) {
    54c8:	4663      	mov	r3, ip
    54ca:	2b00      	cmp	r3, #0
    54cc:	dd16      	ble.n	54fc <uECC_sign_with_k_internal+0x31c>
    54ce:	9b04      	ldr	r3, [sp, #16]
    54d0:	4665      	mov	r5, ip
    54d2:	46b0      	mov	r8, r6
    54d4:	469c      	mov	ip, r3
    54d6:	464e      	mov	r6, r9
    54d8:	1ab3      	subs	r3, r6, r2
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    54da:	0018      	movs	r0, r3
    54dc:	2450      	movs	r4, #80	; 0x50
    54de:	af0c      	add	r7, sp, #48	; 0x30
    54e0:	4388      	bics	r0, r1
    54e2:	193f      	adds	r7, r7, r4
    54e4:	400b      	ands	r3, r1
    54e6:	5838      	ldr	r0, [r7, r0]
    54e8:	00db      	lsls	r3, r3, #3
    54ea:	40d8      	lsrs	r0, r3
    54ec:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    54ee:	5498      	strb	r0, [r3, r2]
    for (i = 0; i < num_bytes; ++i) {
    54f0:	3201      	adds	r2, #1
    54f2:	4295      	cmp	r5, r2
    54f4:	dcf0      	bgt.n	54d8 <uECC_sign_with_k_internal+0x2f8>
    54f6:	4663      	mov	r3, ip
    54f8:	4646      	mov	r6, r8
    54fa:	9304      	str	r3, [sp, #16]
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
    54fc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    54fe:	2202      	movs	r2, #2
    5500:	5e9a      	ldrsh	r2, [r3, r2]
    5502:	2307      	movs	r3, #7
    5504:	3207      	adds	r2, #7
    5506:	17d1      	asrs	r1, r2, #31
    5508:	400b      	ands	r3, r1
    550a:	189b      	adds	r3, r3, r2
    550c:	10db      	asrs	r3, r3, #3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    550e:	1cda      	adds	r2, r3, #3
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
    5510:	4699      	mov	r9, r3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    5512:	2303      	movs	r3, #3
    5514:	17d1      	asrs	r1, r2, #31
    5516:	400b      	ands	r3, r1
    5518:	189b      	adds	r3, r3, r2
    551a:	109b      	asrs	r3, r3, #2
    for (i = 0; i < num_words; ++i) {
    551c:	b25a      	sxtb	r2, r3
    551e:	2a00      	cmp	r2, #0
    5520:	dd0a      	ble.n	5538 <uECC_sign_with_k_internal+0x358>
        vli[i] = 0;
    5522:	1e5a      	subs	r2, r3, #1
    5524:	f246 7375 	movw	r3, #26485	; 0x6775
    5528:	b2d2      	uxtb	r2, r2
    552a:	3201      	adds	r2, #1
    552c:	0092      	lsls	r2, r2, #2
    552e:	2100      	movs	r1, #0
    5530:	a810      	add	r0, sp, #64	; 0x40
    5532:	f2c0 0300 	movt	r3, #0
    5536:	4798      	blx	r3
    5538:	464b      	mov	r3, r9
    553a:	1e5a      	subs	r2, r3, #1
    553c:	9b05      	ldr	r3, [sp, #20]
        native[b / uECC_WORD_SIZE] |=
    553e:	f240 0c03 	movw	ip, #3
    5542:	4698      	mov	r8, r3
    for (i = 0; i < num_bytes; ++i) {
    5544:	464b      	mov	r3, r9
    5546:	2b00      	cmp	r3, #0
    5548:	dd15      	ble.n	5576 <uECC_sign_with_k_internal+0x396>
    554a:	9b04      	ldr	r3, [sp, #16]
    554c:	4640      	mov	r0, r8
    554e:	4698      	mov	r8, r3
        native[b / uECC_WORD_SIZE] |=
    5550:	4661      	mov	r1, ip
    5552:	0013      	movs	r3, r2
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5554:	4664      	mov	r4, ip
        native[b / uECC_WORD_SIZE] |=
    5556:	438b      	bics	r3, r1
    5558:	a910      	add	r1, sp, #64	; 0x40
    555a:	4689      	mov	r9, r1
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    555c:	4014      	ands	r4, r2
    555e:	7801      	ldrb	r1, [r0, #0]
    5560:	00e4      	lsls	r4, r4, #3
    5562:	40a1      	lsls	r1, r4
        native[b / uECC_WORD_SIZE] |=
    5564:	444b      	add	r3, r9
    5566:	681c      	ldr	r4, [r3, #0]
    5568:	3001      	adds	r0, #1
    556a:	4321      	orrs	r1, r4
    556c:	6019      	str	r1, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
    556e:	3a01      	subs	r2, #1
    5570:	d2ee      	bcs.n	5550 <uECC_sign_with_k_internal+0x370>
    5572:	4643      	mov	r3, r8
    5574:	9304      	str	r3, [sp, #16]
    s[num_n_words - 1] = 0;
    5576:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5578:	2030      	movs	r0, #48	; 0x30
    557a:	0023      	movs	r3, r4
    557c:	2200      	movs	r2, #0
    557e:	3b01      	subs	r3, #1
    5580:	a90c      	add	r1, sp, #48	; 0x30
    5582:	1809      	adds	r1, r1, r0
    5584:	009b      	lsls	r3, r3, #2
    5586:	50ca      	str	r2, [r1, r3]
    5588:	f246 733f 	movw	r3, #26431	; 0x673f
    558c:	9a04      	ldr	r2, [sp, #16]
    558e:	a920      	add	r1, sp, #128	; 0x80
    5590:	f2c0 0300 	movt	r3, #0
    5594:	a818      	add	r0, sp, #96	; 0x60
    5596:	4798      	blx	r3
    uECC_vli_mult(product, left, right, num_words);
    5598:	0023      	movs	r3, r4
    559a:	aa18      	add	r2, sp, #96	; 0x60
    559c:	a910      	add	r1, sp, #64	; 0x40
    559e:	9803      	ldr	r0, [sp, #12]
    55a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    55a2:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    55a4:	0025      	movs	r5, r4
    55a6:	0023      	movs	r3, r4
    bits2int(tmp, message_hash, hash_size, curve);
    55a8:	f641 044d 	movw	r4, #6221	; 0x184d
    uECC_vli_mmod(result, product, mod, num_words);
    55ac:	9a08      	ldr	r2, [sp, #32]
    55ae:	9903      	ldr	r1, [sp, #12]
    55b0:	a818      	add	r0, sp, #96	; 0x60
    55b2:	4690      	mov	r8, r2
    bits2int(tmp, message_hash, hash_size, curve);
    55b4:	f2c0 0400 	movt	r4, #0
    uECC_vli_mmod(result, product, mod, num_words);
    55b8:	47d8      	blx	fp
    bits2int(tmp, message_hash, hash_size, curve);
    55ba:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    55bc:	9a07      	ldr	r2, [sp, #28]
    55be:	9906      	ldr	r1, [sp, #24]
    55c0:	a810      	add	r0, sp, #64	; 0x40
    55c2:	47a0      	blx	r4
    uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
    55c4:	f641 2411 	movw	r4, #6673	; 0x1a11
    55c8:	aa18      	add	r2, sp, #96	; 0x60
    55ca:	0010      	movs	r0, r2
    55cc:	4643      	mov	r3, r8
    55ce:	a910      	add	r1, sp, #64	; 0x40
    55d0:	f2c0 0400 	movt	r4, #0
    55d4:	9500      	str	r5, [sp, #0]
    55d6:	47a0      	blx	r4
    uECC_vli_mult(product, left, right, num_words);
    55d8:	002c      	movs	r4, r5
    55da:	0032      	movs	r2, r6
    55dc:	9e03      	ldr	r6, [sp, #12]
    55de:	002b      	movs	r3, r5
    55e0:	a918      	add	r1, sp, #96	; 0x60
    55e2:	0030      	movs	r0, r6
    55e4:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    55e6:	0023      	movs	r3, r4
    55e8:	4642      	mov	r2, r8
    55ea:	0031      	movs	r1, r6
    55ec:	a818      	add	r0, sp, #96	; 0x60
    55ee:	47d8      	blx	fp
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    55f0:	4653      	mov	r3, sl
    55f2:	466a      	mov	r2, sp
    55f4:	7313      	strb	r3, [r2, #12]
    55f6:	7b13      	ldrb	r3, [r2, #12]
    55f8:	b25b      	sxtb	r3, r3
    55fa:	2b00      	cmp	r3, #0
    55fc:	da04      	bge.n	5608 <uECC_sign_with_k_internal+0x428>
    55fe:	e00b      	b.n	5618 <uECC_sign_with_k_internal+0x438>
    5600:	3b01      	subs	r3, #1
    5602:	b25b      	sxtb	r3, r3
    5604:	1c5a      	adds	r2, r3, #1
    5606:	d03f      	beq.n	5688 <uECC_sign_with_k_internal+0x4a8>
    5608:	a940      	add	r1, sp, #256	; 0x100
    560a:	468c      	mov	ip, r1
    560c:	009a      	lsls	r2, r3, #2
    560e:	4462      	add	r2, ip
    5610:	3aa0      	subs	r2, #160	; 0xa0
    5612:	6812      	ldr	r2, [r2, #0]
    5614:	2a00      	cmp	r2, #0
    5616:	d0f3      	beq.n	5600 <uECC_sign_with_k_internal+0x420>
    return (i + 1);
    5618:	3301      	adds	r3, #1
    561a:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
    561c:	2100      	movs	r1, #0
    561e:	b193      	cbz	r3, 5646 <uECC_sign_with_k_internal+0x466>
    digit = vli[num_digits - 1];
    5620:	a940      	add	r1, sp, #256	; 0x100
    5622:	468c      	mov	ip, r1
    5624:	4a2f      	ldr	r2, [pc, #188]	; (56e4 <uECC_sign_with_k_internal+0x504>)
    for (i = 0; digit; ++i) {
    5626:	2100      	movs	r1, #0
    digit = vli[num_digits - 1];
    5628:	189a      	adds	r2, r3, r2
    562a:	0092      	lsls	r2, r2, #2
    562c:	4462      	add	r2, ip
    562e:	3aa0      	subs	r2, #160	; 0xa0
    5630:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    5632:	b122      	cbz	r2, 563e <uECC_sign_with_k_internal+0x45e>
        digit >>= 1;
    5634:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    5636:	3101      	adds	r1, #1
    5638:	2a00      	cmp	r2, #0
    563a:	d1fb      	bne.n	5634 <uECC_sign_with_k_internal+0x454>
    563c:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    563e:	3b01      	subs	r3, #1
    5640:	015b      	lsls	r3, r3, #5
    5642:	18c9      	adds	r1, r1, r3
    5644:	b209      	sxth	r1, r1
    if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
    5646:	2401      	movs	r4, #1
    5648:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    564a:	571c      	ldrsb	r4, [r3, r4]
    564c:	00e3      	lsls	r3, r4, #3
    564e:	428b      	cmp	r3, r1
    5650:	da00      	bge.n	5654 <uECC_sign_with_k_internal+0x474>
    5652:	e5ea      	b.n	522a <uECC_sign_with_k_internal+0x4a>
    for (i = 0; i < num_bytes; ++i) {
    5654:	2c00      	cmp	r4, #0
    5656:	dd13      	ble.n	5680 <uECC_sign_with_k_internal+0x4a0>
    5658:	2200      	movs	r2, #0
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    565a:	2003      	movs	r0, #3
    565c:	46a4      	mov	ip, r4
    565e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5660:	1e66      	subs	r6, r4, #1
    5662:	191d      	adds	r5, r3, r4
    5664:	1ab3      	subs	r3, r6, r2
    5666:	0019      	movs	r1, r3
    5668:	2430      	movs	r4, #48	; 0x30
    566a:	af0c      	add	r7, sp, #48	; 0x30
    566c:	4381      	bics	r1, r0
    566e:	193f      	adds	r7, r7, r4
    5670:	4003      	ands	r3, r0
    5672:	5879      	ldr	r1, [r7, r1]
    5674:	00db      	lsls	r3, r3, #3
    5676:	40d9      	lsrs	r1, r3
    5678:	54a9      	strb	r1, [r5, r2]
    for (i = 0; i < num_bytes; ++i) {
    567a:	3201      	adds	r2, #1
    567c:	4594      	cmp	ip, r2
    567e:	dcf1      	bgt.n	5664 <uECC_sign_with_k_internal+0x484>
    return 1;
    5680:	2001      	movs	r0, #1
    5682:	e5d3      	b.n	522c <uECC_sign_with_k_internal+0x4c>
    for (i = 0; i < num_words; ++i) {
    5684:	2300      	movs	r3, #0
    5686:	e613      	b.n	52b0 <uECC_sign_with_k_internal+0xd0>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5688:	2100      	movs	r1, #0
    568a:	e7dc      	b.n	5646 <uECC_sign_with_k_internal+0x466>
    uECC_word_t *initial_Z = 0;
    568c:	2300      	movs	r3, #0
    568e:	001d      	movs	r5, r3
    5690:	e68f      	b.n	53b2 <uECC_sign_with_k_internal+0x1d2>
    5692:	f246 7375 	movw	r3, #26485	; 0x6775
    5696:	2100      	movs	r1, #0
    5698:	0030      	movs	r0, r6
    569a:	f2c0 0300 	movt	r3, #0
    569e:	4798      	blx	r3
    56a0:	e6fb      	b.n	549a <uECC_sign_with_k_internal+0x2ba>
    for (i = 0; i < num_words; ++i) {
    56a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    56a4:	2b00      	cmp	r3, #0
    56a6:	dd17      	ble.n	56d8 <uECC_sign_with_k_internal+0x4f8>
        vli[i] = 0;
    56a8:	2301      	movs	r3, #1
    56aa:	2128      	movs	r1, #40	; 0x28
    56ac:	466a      	mov	r2, sp
    56ae:	425b      	negs	r3, r3
    56b0:	4443      	add	r3, r8
    56b2:	1852      	adds	r2, r2, r1
    56b4:	7013      	strb	r3, [r2, #0]
    56b6:	469a      	mov	sl, r3
    56b8:	2228      	movs	r2, #40	; 0x28
    56ba:	466b      	mov	r3, sp
    56bc:	189b      	adds	r3, r3, r2
    56be:	781a      	ldrb	r2, [r3, #0]
    56c0:	f246 7375 	movw	r3, #26485	; 0x6775
    56c4:	3201      	adds	r2, #1
    56c6:	0092      	lsls	r2, r2, #2
    56c8:	2100      	movs	r1, #0
    56ca:	a810      	add	r0, sp, #64	; 0x40
    56cc:	f2c0 0300 	movt	r3, #0
    56d0:	4798      	blx	r3
        tmp[0] = 1;
    56d2:	2301      	movs	r3, #1
    56d4:	9310      	str	r3, [sp, #64]	; 0x40
    56d6:	e6a7      	b.n	5428 <uECC_sign_with_k_internal+0x248>
    56d8:	2301      	movs	r3, #1
    56da:	425b      	negs	r3, r3
    56dc:	4443      	add	r3, r8
    56de:	469a      	mov	sl, r3
    56e0:	e7f7      	b.n	56d2 <uECC_sign_with_k_internal+0x4f2>
    56e2:	46c0      	nop			; (mov r8, r8)
    56e4:	3fffffff 	.word	0x3fffffff
	...

000056f0 <double_jacobian_default>:
                                    uECC_Curve curve) {
    56f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56f2:	464e      	mov	r6, r9
    56f4:	4657      	mov	r7, sl
    56f6:	4645      	mov	r5, r8
    56f8:	46de      	mov	lr, fp
    56fa:	b5e0      	push	{r5, r6, r7, lr}
    56fc:	001f      	movs	r7, r3
    wordcount_t num_words = curve->num_words;
    56fe:	781b      	ldrb	r3, [r3, #0]
                                    uECC_Curve curve) {
    5700:	b0a9      	sub	sp, #164	; 0xa4
    wordcount_t num_words = curve->num_words;
    5702:	b25b      	sxtb	r3, r3
                                    uECC_Curve curve) {
    5704:	0006      	movs	r6, r0
    5706:	4689      	mov	r9, r1
    5708:	0014      	movs	r4, r2
    wordcount_t num_words = curve->num_words;
    570a:	4698      	mov	r8, r3
    for (i = 0; i < num_words; ++i) {
    570c:	2b00      	cmp	r3, #0
    570e:	dd10      	ble.n	5732 <double_jacobian_default+0x42>
    5710:	0013      	movs	r3, r2
    5712:	4642      	mov	r2, r8
    5714:	1e55      	subs	r5, r2, #1
    5716:	b2ed      	uxtb	r5, r5
    5718:	3501      	adds	r5, #1
    571a:	00aa      	lsls	r2, r5, #2
    571c:	0015      	movs	r5, r2
    571e:	18a0      	adds	r0, r4, r2
    5720:	2200      	movs	r2, #0
        bits |= vli[i];
    5722:	cb02      	ldmia	r3!, {r1}
    5724:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    5726:	4298      	cmp	r0, r3
    5728:	d1fb      	bne.n	5722 <double_jacobian_default+0x32>
    572a:	9504      	str	r5, [sp, #16]
    572c:	9602      	str	r6, [sp, #8]
    572e:	9703      	str	r7, [sp, #12]
    if (uECC_vli_isZero(Z1, num_words)) {
    5730:	b932      	cbnz	r2, 5740 <double_jacobian_default+0x50>
}
    5732:	b029      	add	sp, #164	; 0xa4
    5734:	bc3c      	pop	{r2, r3, r4, r5}
    5736:	4690      	mov	r8, r2
    5738:	4699      	mov	r9, r3
    573a:	46a2      	mov	sl, r4
    573c:	46ab      	mov	fp, r5
    573e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_vli_mult(product, left, right, curve->num_words);
    5740:	f240 7bed 	movw	fp, #2029	; 0x7ed
    5744:	464a      	mov	r2, r9
    5746:	f2c0 0b00 	movt	fp, #0
    574a:	4643      	mov	r3, r8
    574c:	4649      	mov	r1, r9
    574e:	a818      	add	r0, sp, #96	; 0x60
    5750:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5752:	23b0      	movs	r3, #176	; 0xb0
    5754:	9f03      	ldr	r7, [sp, #12]
    5756:	a918      	add	r1, sp, #96	; 0x60
    5758:	58fb      	ldr	r3, [r7, r3]
    575a:	a808      	add	r0, sp, #32
    575c:	9305      	str	r3, [sp, #20]
    575e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5760:	2300      	movs	r3, #0
    5762:	9d02      	ldr	r5, [sp, #8]
    5764:	56fb      	ldrsb	r3, [r7, r3]
    5766:	aa08      	add	r2, sp, #32
    5768:	0029      	movs	r1, r5
    576a:	a818      	add	r0, sp, #96	; 0x60
    576c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    576e:	23b0      	movs	r3, #176	; 0xb0
    5770:	58fb      	ldr	r3, [r7, r3]
    5772:	a918      	add	r1, sp, #96	; 0x60
    5774:	a810      	add	r0, sp, #64	; 0x40
    5776:	9302      	str	r3, [sp, #8]
    5778:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    577a:	2300      	movs	r3, #0
    577c:	aa08      	add	r2, sp, #32
    577e:	0011      	movs	r1, r2
    5780:	56fb      	ldrsb	r3, [r7, r3]
    5782:	a818      	add	r0, sp, #96	; 0x60
    5784:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5786:	23b0      	movs	r3, #176	; 0xb0
    5788:	58fb      	ldr	r3, [r7, r3]
    578a:	a918      	add	r1, sp, #96	; 0x60
    578c:	a808      	add	r0, sp, #32
    578e:	9302      	str	r3, [sp, #8]
    5790:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5792:	2300      	movs	r3, #0
    5794:	0022      	movs	r2, r4
    5796:	56fb      	ldrsb	r3, [r7, r3]
    5798:	4649      	mov	r1, r9
    579a:	a818      	add	r0, sp, #96	; 0x60
    579c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    579e:	23b0      	movs	r3, #176	; 0xb0
    57a0:	58fb      	ldr	r3, [r7, r3]
    57a2:	a918      	add	r1, sp, #96	; 0x60
    57a4:	4648      	mov	r0, r9
    57a6:	9302      	str	r3, [sp, #8]
    57a8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    57aa:	2300      	movs	r3, #0
    57ac:	0022      	movs	r2, r4
    57ae:	56fb      	ldrsb	r3, [r7, r3]
    57b0:	0021      	movs	r1, r4
    57b2:	a818      	add	r0, sp, #96	; 0x60
    57b4:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    57b6:	23b0      	movs	r3, #176	; 0xb0
    57b8:	58fb      	ldr	r3, [r7, r3]
    57ba:	a918      	add	r1, sp, #96	; 0x60
    57bc:	0020      	movs	r0, r4
    57be:	9302      	str	r3, [sp, #8]
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    57c0:	f641 2a11 	movw	sl, #6673	; 0x1a11
    57c4:	4798      	blx	r3
    57c6:	003b      	movs	r3, r7
    57c8:	4642      	mov	r2, r8
    57ca:	3304      	adds	r3, #4
    57cc:	f2c0 0a00 	movt	sl, #0
    57d0:	0029      	movs	r1, r5
    57d2:	0028      	movs	r0, r5
    57d4:	9200      	str	r2, [sp, #0]
    57d6:	0022      	movs	r2, r4
    57d8:	001e      	movs	r6, r3
    57da:	9305      	str	r3, [sp, #20]
    57dc:	47d0      	blx	sl
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
    57de:	4642      	mov	r2, r8
    57e0:	0033      	movs	r3, r6
    57e2:	9200      	str	r2, [sp, #0]
    57e4:	0021      	movs	r1, r4
    57e6:	0022      	movs	r2, r4
    57e8:	0020      	movs	r0, r4
    57ea:	47d0      	blx	sl
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
    57ec:	0029      	movs	r1, r5
    57ee:	4642      	mov	r2, r8
    57f0:	9502      	str	r5, [sp, #8]
    57f2:	f641 1591 	movw	r5, #6545	; 0x1991
    57f6:	9200      	str	r2, [sp, #0]
    57f8:	f2c0 0500 	movt	r5, #0
    57fc:	0033      	movs	r3, r6
    57fe:	0022      	movs	r2, r4
    5800:	0020      	movs	r0, r4
    5802:	9506      	str	r5, [sp, #24]
    5804:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    5806:	783b      	ldrb	r3, [r7, #0]
    5808:	003d      	movs	r5, r7
    580a:	9f02      	ldr	r7, [sp, #8]
    580c:	b25b      	sxtb	r3, r3
    580e:	0022      	movs	r2, r4
    5810:	0039      	movs	r1, r7
    5812:	a818      	add	r0, sp, #96	; 0x60
    5814:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5816:	22b0      	movs	r2, #176	; 0xb0
    5818:	a918      	add	r1, sp, #96	; 0x60
    581a:	58ab      	ldr	r3, [r5, r2]
    581c:	0038      	movs	r0, r7
    581e:	4798      	blx	r3
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
    5820:	4642      	mov	r2, r8
    5822:	0033      	movs	r3, r6
    5824:	9200      	str	r2, [sp, #0]
    5826:	0039      	movs	r1, r7
    5828:	003a      	movs	r2, r7
    582a:	0020      	movs	r0, r4
    582c:	47d0      	blx	sl
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
    582e:	4642      	mov	r2, r8
    5830:	0033      	movs	r3, r6
    5832:	9200      	str	r2, [sp, #0]
    5834:	0039      	movs	r1, r7
    5836:	0022      	movs	r2, r4
    5838:	0038      	movs	r0, r7
    583a:	47d0      	blx	sl
    if (uECC_vli_testBit(X1, 0)) {
    583c:	683b      	ldr	r3, [r7, #0]
    583e:	07db      	lsls	r3, r3, #31
    5840:	d474      	bmi.n	592c <double_jacobian_default+0x23c>
    vli += num_words;
    5842:	9902      	ldr	r1, [sp, #8]
    5844:	4643      	mov	r3, r8
    5846:	468c      	mov	ip, r1
    5848:	009b      	lsls	r3, r3, #2
    584a:	4463      	add	r3, ip
    while (vli-- > end) {
    584c:	1f1a      	subs	r2, r3, #4
    584e:	4299      	cmp	r1, r3
    5850:	d218      	bcs.n	5884 <double_jacobian_default+0x194>
    5852:	1a50      	subs	r0, r2, r1
    5854:	3003      	adds	r0, #3
    5856:	0880      	lsrs	r0, r0, #2
    5858:	0080      	lsls	r0, r0, #2
    585a:	1a18      	subs	r0, r3, r0
    585c:	2300      	movs	r3, #0
    585e:	3808      	subs	r0, #8
    5860:	46a4      	mov	ip, r4
    5862:	000e      	movs	r6, r1
    5864:	0004      	movs	r4, r0
    5866:	0018      	movs	r0, r3
    5868:	9d04      	ldr	r5, [sp, #16]
    586a:	9f03      	ldr	r7, [sp, #12]
        uECC_word_t temp = *vli;
    586c:	6811      	ldr	r1, [r2, #0]
    while (vli-- > end) {
    586e:	3a04      	subs	r2, #4
        *vli = (temp >> 1) | carry;
    5870:	084b      	lsrs	r3, r1, #1
    5872:	4303      	orrs	r3, r0
    5874:	6053      	str	r3, [r2, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    5876:	07c8      	lsls	r0, r1, #31
    while (vli-- > end) {
    5878:	42a2      	cmp	r2, r4
    587a:	d1f7      	bne.n	586c <double_jacobian_default+0x17c>
    587c:	4664      	mov	r4, ip
    587e:	9504      	str	r5, [sp, #16]
    5880:	9602      	str	r6, [sp, #8]
    5882:	9703      	str	r7, [sp, #12]
    curve->mmod_fast(result, product);
    5884:	f240 0ab0 	movw	sl, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    5888:	9d03      	ldr	r5, [sp, #12]
    588a:	9e02      	ldr	r6, [sp, #8]
    588c:	782b      	ldrb	r3, [r5, #0]
    588e:	0032      	movs	r2, r6
    5890:	0031      	movs	r1, r6
    5892:	b25b      	sxtb	r3, r3
    5894:	a818      	add	r0, sp, #96	; 0x60
    5896:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5898:	4653      	mov	r3, sl
    589a:	a918      	add	r1, sp, #96	; 0x60
    589c:	58eb      	ldr	r3, [r5, r3]
    589e:	0020      	movs	r0, r4
    58a0:	9503      	str	r5, [sp, #12]
    58a2:	4798      	blx	r3
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
    58a4:	4643      	mov	r3, r8
    58a6:	9e05      	ldr	r6, [sp, #20]
    58a8:	9f06      	ldr	r7, [sp, #24]
    58aa:	9300      	str	r3, [sp, #0]
    58ac:	aa10      	add	r2, sp, #64	; 0x40
    58ae:	0033      	movs	r3, r6
    58b0:	0021      	movs	r1, r4
    58b2:	0020      	movs	r0, r4
    58b4:	47b8      	blx	r7
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
    58b6:	4643      	mov	r3, r8
    58b8:	aa10      	add	r2, sp, #64	; 0x40
    58ba:	9300      	str	r3, [sp, #0]
    58bc:	0021      	movs	r1, r4
    58be:	0033      	movs	r3, r6
    58c0:	0020      	movs	r0, r4
    58c2:	47b8      	blx	r7
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
    58c4:	4643      	mov	r3, r8
    58c6:	a910      	add	r1, sp, #64	; 0x40
    58c8:	0008      	movs	r0, r1
    58ca:	9300      	str	r3, [sp, #0]
    58cc:	0022      	movs	r2, r4
    58ce:	0033      	movs	r3, r6
    58d0:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, curve->num_words);
    58d2:	9d03      	ldr	r5, [sp, #12]
    58d4:	aa10      	add	r2, sp, #64	; 0x40
    58d6:	782b      	ldrb	r3, [r5, #0]
    58d8:	9902      	ldr	r1, [sp, #8]
    58da:	b25b      	sxtb	r3, r3
    58dc:	a818      	add	r0, sp, #96	; 0x60
    58de:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    58e0:	4652      	mov	r2, sl
    58e2:	58ab      	ldr	r3, [r5, r2]
    58e4:	9d02      	ldr	r5, [sp, #8]
    58e6:	a918      	add	r1, sp, #96	; 0x60
    58e8:	0028      	movs	r0, r5
    58ea:	4798      	blx	r3
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
    58ec:	4642      	mov	r2, r8
    58ee:	9200      	str	r2, [sp, #0]
    58f0:	aa08      	add	r2, sp, #32
    58f2:	0033      	movs	r3, r6
    58f4:	0029      	movs	r1, r5
    58f6:	0010      	movs	r0, r2
    58f8:	47b8      	blx	r7
    58fa:	2300      	movs	r3, #0
    58fc:	002e      	movs	r6, r5
    58fe:	9d04      	ldr	r5, [sp, #16]
        dest[i] = src[i];
    5900:	58e2      	ldr	r2, [r4, r3]
    5902:	50f2      	str	r2, [r6, r3]
    5904:	3304      	adds	r3, #4
    for (i = 0; i < num_words; ++i) {
    5906:	42ab      	cmp	r3, r5
    5908:	d1fa      	bne.n	5900 <double_jacobian_default+0x210>
    590a:	2300      	movs	r3, #0
    590c:	464a      	mov	r2, r9
        dest[i] = src[i];
    590e:	58d1      	ldr	r1, [r2, r3]
    5910:	50e1      	str	r1, [r4, r3]
    5912:	3304      	adds	r3, #4
    for (i = 0; i < num_words; ++i) {
    5914:	429d      	cmp	r5, r3
    5916:	d1fa      	bne.n	590e <double_jacobian_default+0x21e>
    5918:	4691      	mov	r9, r2
    591a:	f246 733f 	movw	r3, #26431	; 0x673f
    591e:	002a      	movs	r2, r5
    5920:	a908      	add	r1, sp, #32
    5922:	4648      	mov	r0, r9
    5924:	f2c0 0300 	movt	r3, #0
    5928:	4798      	blx	r3
    592a:	e702      	b.n	5732 <double_jacobian_default+0x42>
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    592c:	4642      	mov	r2, r8
    592e:	2308      	movs	r3, #8
    5930:	1a9b      	subs	r3, r3, r2
    __asm__ volatile (
    5932:	9a02      	ldr	r2, [sp, #8]
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    5934:	00db      	lsls	r3, r3, #3
    5936:	3301      	adds	r3, #1
    __asm__ volatile (
    5938:	4694      	mov	ip, r2
    593a:	9905      	ldr	r1, [sp, #20]
    593c:	0010      	movs	r0, r2
    593e:	2500      	movs	r5, #0
    5940:	a606      	add	r6, pc, #24	; (adr r6, 595c <double_jacobian_default+0x26c>)
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	46c0      	nop			; (mov r8, r8)
    5946:	46c0      	nop			; (mov r8, r8)
    5948:	46c0      	nop			; (mov r8, r8)
    594a:	46c0      	nop			; (mov r8, r8)
    594c:	46c0      	nop			; (mov r8, r8)
    594e:	46c0      	nop			; (mov r8, r8)
    5950:	199b      	adds	r3, r3, r6
    5952:	c840      	ldmia	r0!, {r6}
    5954:	c980      	ldmia	r1!, {r7}
    5956:	19f6      	adds	r6, r6, r7
    5958:	c240      	stmia	r2!, {r6}
    595a:	4718      	bx	r3
    595c:	c840      	ldmia	r0!, {r6}
    595e:	c980      	ldmia	r1!, {r7}
    5960:	417e      	adcs	r6, r7
    5962:	c240      	stmia	r2!, {r6}
    5964:	c840      	ldmia	r0!, {r6}
    5966:	c980      	ldmia	r1!, {r7}
    5968:	417e      	adcs	r6, r7
    596a:	c240      	stmia	r2!, {r6}
    596c:	c840      	ldmia	r0!, {r6}
    596e:	c980      	ldmia	r1!, {r7}
    5970:	417e      	adcs	r6, r7
    5972:	c240      	stmia	r2!, {r6}
    5974:	c840      	ldmia	r0!, {r6}
    5976:	c980      	ldmia	r1!, {r7}
    5978:	417e      	adcs	r6, r7
    597a:	c240      	stmia	r2!, {r6}
    597c:	c840      	ldmia	r0!, {r6}
    597e:	c980      	ldmia	r1!, {r7}
    5980:	417e      	adcs	r6, r7
    5982:	c240      	stmia	r2!, {r6}
    5984:	c840      	ldmia	r0!, {r6}
    5986:	c980      	ldmia	r1!, {r7}
    5988:	417e      	adcs	r6, r7
    598a:	c240      	stmia	r2!, {r6}
    598c:	c840      	ldmia	r0!, {r6}
    598e:	c980      	ldmia	r1!, {r7}
    5990:	417e      	adcs	r6, r7
    5992:	c240      	stmia	r2!, {r6}
    5994:	416d      	adcs	r5, r5
    vli += num_words;
    5996:	4643      	mov	r3, r8
    5998:	4660      	mov	r0, ip
    599a:	009b      	lsls	r3, r3, #2
    599c:	18c2      	adds	r2, r0, r3
    599e:	9507      	str	r5, [sp, #28]
    59a0:	469a      	mov	sl, r3
    while (vli-- > end) {
    59a2:	1f11      	subs	r1, r2, #4
    59a4:	4290      	cmp	r0, r2
    59a6:	d21b      	bcs.n	59e0 <double_jacobian_default+0x2f0>
    59a8:	9e02      	ldr	r6, [sp, #8]
    59aa:	9d04      	ldr	r5, [sp, #16]
    59ac:	1b8b      	subs	r3, r1, r6
    59ae:	3303      	adds	r3, #3
    59b0:	089b      	lsrs	r3, r3, #2
    59b2:	009b      	lsls	r3, r3, #2
    59b4:	1ad3      	subs	r3, r2, r3
    59b6:	2208      	movs	r2, #8
    59b8:	4252      	negs	r2, r2
    59ba:	4694      	mov	ip, r2
    59bc:	449c      	add	ip, r3
    59be:	2300      	movs	r3, #0
    59c0:	4660      	mov	r0, ip
    59c2:	46a4      	mov	ip, r4
    59c4:	001c      	movs	r4, r3
    59c6:	9f03      	ldr	r7, [sp, #12]
        uECC_word_t temp = *vli;
    59c8:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    59ca:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    59cc:	0853      	lsrs	r3, r2, #1
    59ce:	4323      	orrs	r3, r4
    59d0:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    59d2:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    59d4:	4281      	cmp	r1, r0
    59d6:	d1f7      	bne.n	59c8 <double_jacobian_default+0x2d8>
    59d8:	4664      	mov	r4, ip
    59da:	9504      	str	r5, [sp, #16]
    59dc:	9602      	str	r6, [sp, #8]
    59de:	9703      	str	r7, [sp, #12]
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
    59e0:	9a02      	ldr	r2, [sp, #8]
    59e2:	4653      	mov	r3, sl
    59e4:	4694      	mov	ip, r2
    59e6:	3b04      	subs	r3, #4
    59e8:	4463      	add	r3, ip
    59ea:	9a07      	ldr	r2, [sp, #28]
    59ec:	6819      	ldr	r1, [r3, #0]
    59ee:	07d2      	lsls	r2, r2, #31
    59f0:	430a      	orrs	r2, r1
    59f2:	601a      	str	r2, [r3, #0]
    59f4:	e746      	b.n	5884 <double_jacobian_default+0x194>
    59f6:	46c0      	nop			; (mov r8, r8)

000059f8 <uECC_secp256r1>:
uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
    59f8:	f646 4058 	movw	r0, #27736	; 0x6c58
    59fc:	f2c0 0000 	movt	r0, #0
    5a00:	3050      	adds	r0, #80	; 0x50
    5a02:	4770      	bx	lr

00005a04 <uECC_sign>:

int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve) {
    5a04:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a06:	4657      	mov	r7, sl
    5a08:	464e      	mov	r6, r9
    5a0a:	4645      	mov	r5, r8
    5a0c:	46de      	mov	lr, fp
    5a0e:	b5e0      	push	{r5, r6, r7, lr}
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
            return 0;
        }

        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a10:	f245 17e1 	movw	r7, #20961	; 0x51e1
              uECC_Curve curve) {
    5a14:	b08d      	sub	sp, #52	; 0x34
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a16:	f2c0 0700 	movt	r7, #0
    5a1a:	f240 0924 	movw	r9, #36	; 0x24
    5a1e:	f640 06a5 	movw	r6, #2213	; 0x8a5
              uECC_Curve curve) {
    5a22:	9303      	str	r3, [sp, #12]
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a24:	003b      	movs	r3, r7
              uECC_Curve curve) {
    5a26:	9d16      	ldr	r5, [sp, #88]	; 0x58
    5a28:	f2c0 0600 	movt	r6, #0
    5a2c:	44a9      	add	r9, r5
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a2e:	0037      	movs	r7, r6
              uECC_Curve curve) {
    5a30:	4683      	mov	fp, r0
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a32:	464e      	mov	r6, r9
              uECC_Curve curve) {
    5a34:	468a      	mov	sl, r1
    5a36:	9202      	str	r2, [sp, #8]
    5a38:	2440      	movs	r4, #64	; 0x40
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    5a3a:	f240 081f 	movw	r8, #31
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    5a3e:	4699      	mov	r9, r3
    5a40:	e00a      	b.n	5a58 <uECC_sign+0x54>
    5a42:	9b03      	ldr	r3, [sp, #12]
    5a44:	9501      	str	r5, [sp, #4]
    5a46:	9300      	str	r3, [sp, #0]
    5a48:	9a02      	ldr	r2, [sp, #8]
    5a4a:	ab04      	add	r3, sp, #16
    5a4c:	4651      	mov	r1, sl
    5a4e:	4658      	mov	r0, fp
    5a50:	47c8      	blx	r9
    5a52:	b9b8      	cbnz	r0, 5a84 <uECC_sign+0x80>
    5a54:	3c01      	subs	r4, #1
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    5a56:	b16c      	cbz	r4, 5a74 <uECC_sign+0x70>
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    5a58:	4641      	mov	r1, r8
    5a5a:	2202      	movs	r2, #2
    5a5c:	5eab      	ldrsh	r3, [r5, r2]
    5a5e:	a804      	add	r0, sp, #16
    5a60:	331f      	adds	r3, #31
    5a62:	17da      	asrs	r2, r3, #31
    5a64:	400a      	ands	r2, r1
    5a66:	18d2      	adds	r2, r2, r3
    5a68:	1152      	asrs	r2, r2, #5
    5a6a:	b252      	sxtb	r2, r2
    5a6c:	0031      	movs	r1, r6
    5a6e:	47b8      	blx	r7
    5a70:	2800      	cmp	r0, #0
    5a72:	d1e6      	bne.n	5a42 <uECC_sign+0x3e>
            return 0;
    5a74:	2000      	movs	r0, #0
            return 1;
        }
    }
    return 0;
}
    5a76:	b00d      	add	sp, #52	; 0x34
    5a78:	bc3c      	pop	{r2, r3, r4, r5}
    5a7a:	4690      	mov	r8, r2
    5a7c:	4699      	mov	r9, r3
    5a7e:	46a2      	mov	sl, r4
    5a80:	46ab      	mov	fp, r5
    5a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
    5a84:	2001      	movs	r0, #1
    5a86:	e7f6      	b.n	5a76 <uECC_sign+0x72>

00005a88 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
    5a88:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a8a:	464e      	mov	r6, r9
    5a8c:	4645      	mov	r5, r8
    5a8e:	46de      	mov	lr, fp
    5a90:	4657      	mov	r7, sl
    5a92:	b5e0      	push	{r5, r6, r7, lr}
    5a94:	4cb2      	ldr	r4, [pc, #712]	; (5d60 <uECC_verify+0x2d8>)
    5a96:	4698      	mov	r8, r3
    5a98:	44a5      	add	sp, r4
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    5a9a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
                uECC_Curve curve) {
    5a9c:	910a      	str	r1, [sp, #40]	; 0x28
    wordcount_t num_words = curve->num_words;
    5a9e:	781b      	ldrb	r3, [r3, #0]
                uECC_Curve curve) {
    5aa0:	920b      	str	r2, [sp, #44]	; 0x2c
    wordcount_t num_words = curve->num_words;
    5aa2:	b25b      	sxtb	r3, r3
    5aa4:	9304      	str	r3, [sp, #16]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5aa6:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
                uECC_Curve curve) {
    5aa8:	4681      	mov	r9, r0
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5aaa:	2202      	movs	r2, #2
    5aac:	5e9a      	ldrsh	r2, [r3, r2]
    5aae:	231f      	movs	r3, #31
    5ab0:	321f      	adds	r2, #31
    5ab2:	17d1      	asrs	r1, r2, #31
    5ab4:	400b      	ands	r3, r1
    5ab6:	189b      	adds	r3, r3, r2
    5ab8:	115b      	asrs	r3, r3, #5
    5aba:	9307      	str	r3, [sp, #28]
    5abc:	b25b      	sxtb	r3, r3
    5abe:	9309      	str	r3, [sp, #36]	; 0x24

    rx[num_n_words - 1] = 0;
    5ac0:	3b01      	subs	r3, #1
    5ac2:	009b      	lsls	r3, r3, #2
    5ac4:	2078      	movs	r0, #120	; 0x78
    5ac6:	001a      	movs	r2, r3
    5ac8:	930c      	str	r3, [sp, #48]	; 0x30
    5aca:	2300      	movs	r3, #0

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5acc:	2401      	movs	r4, #1
    rx[num_n_words - 1] = 0;
    5ace:	a910      	add	r1, sp, #64	; 0x40
    5ad0:	1809      	adds	r1, r1, r0
    5ad2:	508b      	str	r3, [r1, r2]
    r[num_n_words - 1] = 0;
    5ad4:	ae56      	add	r6, sp, #344	; 0x158
    s[num_n_words - 1] = 0;
    5ad6:	a95e      	add	r1, sp, #376	; 0x178
    5ad8:	508b      	str	r3, [r1, r2]
    r[num_n_words - 1] = 0;
    5ada:	50b3      	str	r3, [r6, r2]
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5adc:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    s[num_n_words - 1] = 0;
    5ade:	9102      	str	r1, [sp, #8]
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5ae0:	571c      	ldrsb	r4, [r3, r4]
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    5ae2:	2303      	movs	r3, #3
    5ae4:	1ce2      	adds	r2, r4, #3
    5ae6:	17d1      	asrs	r1, r2, #31
    5ae8:	400b      	ands	r3, r1
    5aea:	189b      	adds	r3, r3, r2
    5aec:	109b      	asrs	r3, r3, #2
    5aee:	b25a      	sxtb	r2, r3
    5af0:	9303      	str	r3, [sp, #12]
    5af2:	9206      	str	r2, [sp, #24]
    for (i = 0; i < num_words; ++i) {
    5af4:	2b00      	cmp	r3, #0
    5af6:	dc00      	bgt.n	5afa <uECC_verify+0x72>
    5af8:	e114      	b.n	5d24 <uECC_verify+0x29c>
    5afa:	f246 7b75 	movw	fp, #26485	; 0x6775
        vli[i] = 0;
    5afe:	3b01      	subs	r3, #1
    5b00:	b2da      	uxtb	r2, r3
    5b02:	3201      	adds	r2, #1
    5b04:	ab7e      	add	r3, sp, #504	; 0x1f8
    5b06:	0092      	lsls	r2, r2, #2
    5b08:	2100      	movs	r1, #0
    5b0a:	0018      	movs	r0, r3
    5b0c:	f2c0 0b00 	movt	fp, #0
    5b10:	469a      	mov	sl, r3
    5b12:	47d8      	blx	fp
    5b14:	1e65      	subs	r5, r4, #1
    5b16:	46ac      	mov	ip, r5
    for (i = 0; i < num_bytes; ++i) {
    5b18:	2200      	movs	r2, #0
        native[b / uECC_WORD_SIZE] |=
    5b1a:	2003      	movs	r0, #3
    5b1c:	1e25      	subs	r5, r4, #0
    for (i = 0; i < num_bytes; ++i) {
    5b1e:	dc00      	bgt.n	5b22 <uECC_verify+0x9a>
    5b20:	e103      	b.n	5d2a <uECC_verify+0x2a2>
    5b22:	4663      	mov	r3, ip
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b24:	464c      	mov	r4, r9
    5b26:	1a9b      	subs	r3, r3, r2
        native[b / uECC_WORD_SIZE] |=
    5b28:	0019      	movs	r1, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b2a:	5ca4      	ldrb	r4, [r4, r2]
    5b2c:	4003      	ands	r3, r0
    5b2e:	00db      	lsls	r3, r3, #3
    5b30:	409c      	lsls	r4, r3
        native[b / uECC_WORD_SIZE] |=
    5b32:	4381      	bics	r1, r0
    5b34:	4451      	add	r1, sl
    5b36:	680b      	ldr	r3, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5b38:	3201      	adds	r2, #1
        native[b / uECC_WORD_SIZE] |=
    5b3a:	431c      	orrs	r4, r3
    5b3c:	600c      	str	r4, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5b3e:	4295      	cmp	r5, r2
    5b40:	dcef      	bgt.n	5b22 <uECC_verify+0x9a>
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    5b42:	9b04      	ldr	r3, [sp, #16]
    5b44:	002c      	movs	r4, r5
    5b46:	009b      	lsls	r3, r3, #2
    5b48:	9308      	str	r3, [sp, #32]
    uECC_vli_bytesToNative(
    5b4a:	4453      	add	r3, sl
    5b4c:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    5b4e:	9b03      	ldr	r3, [sp, #12]
    5b50:	4665      	mov	r5, ip
    5b52:	2b00      	cmp	r3, #0
    5b54:	dd0e      	ble.n	5b74 <uECC_verify+0xec>
    5b56:	f246 7b75 	movw	fp, #26485	; 0x6775
        vli[i] = 0;
    5b5a:	3b01      	subs	r3, #1
    5b5c:	b2da      	uxtb	r2, r3
    5b5e:	3201      	adds	r2, #1
    5b60:	0092      	lsls	r2, r2, #2
    5b62:	2100      	movs	r1, #0
    5b64:	9805      	ldr	r0, [sp, #20]
    5b66:	f2c0 0b00 	movt	fp, #0
    5b6a:	001f      	movs	r7, r3
    5b6c:	1e65      	subs	r5, r4, #1
    5b6e:	47d8      	blx	fp
    for (i = 0; i < num_bytes; ++i) {
    5b70:	2c00      	cmp	r4, #0
    5b72:	dd21      	ble.n	5bb8 <uECC_verify+0x130>
    5b74:	2100      	movs	r1, #0
        native[b / uECC_WORD_SIZE] |=
    5b76:	f240 0c03 	movw	ip, #3
    5b7a:	46ab      	mov	fp, r5
    5b7c:	9d05      	ldr	r5, [sp, #20]
    5b7e:	44a1      	add	r9, r4
    5b80:	465b      	mov	r3, fp
    5b82:	1a5b      	subs	r3, r3, r1
    5b84:	001a      	movs	r2, r3
    5b86:	4660      	mov	r0, ip
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b88:	4667      	mov	r7, ip
        native[b / uECC_WORD_SIZE] |=
    5b8a:	4382      	bics	r2, r0
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b8c:	4648      	mov	r0, r9
    5b8e:	403b      	ands	r3, r7
    5b90:	5c40      	ldrb	r0, [r0, r1]
    5b92:	00db      	lsls	r3, r3, #3
    5b94:	4098      	lsls	r0, r3
        native[b / uECC_WORD_SIZE] |=
    5b96:	18aa      	adds	r2, r5, r2
    5b98:	6813      	ldr	r3, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5b9a:	3101      	adds	r1, #1
        native[b / uECC_WORD_SIZE] |=
    5b9c:	4318      	orrs	r0, r3
    5b9e:	6010      	str	r0, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5ba0:	428c      	cmp	r4, r1
    5ba2:	dced      	bgt.n	5b80 <uECC_verify+0xf8>
    for (i = 0; i < num_words; ++i) {
    5ba4:	9b03      	ldr	r3, [sp, #12]
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	dc00      	bgt.n	5bac <uECC_verify+0x124>
    5baa:	e0c7      	b.n	5d3c <uECC_verify+0x2b4>
    5bac:	3b01      	subs	r3, #1
    5bae:	f246 7b75 	movw	fp, #26485	; 0x6775
    5bb2:	001f      	movs	r7, r3
    5bb4:	f2c0 0b00 	movt	fp, #0
        vli[i] = 0;
    5bb8:	b2fd      	uxtb	r5, r7
    5bba:	3501      	adds	r5, #1
    5bbc:	00ad      	lsls	r5, r5, #2
    5bbe:	002a      	movs	r2, r5
    5bc0:	2100      	movs	r1, #0
    5bc2:	0030      	movs	r0, r6
    5bc4:	47d8      	blx	fp
    for (i = 0; i < num_bytes; ++i) {
    5bc6:	2c00      	cmp	r4, #0
    5bc8:	dc00      	bgt.n	5bcc <uECC_verify+0x144>
    5bca:	e0bb      	b.n	5d44 <uECC_verify+0x2bc>
    5bcc:	1e65      	subs	r5, r4, #1
        native[b / uECC_WORD_SIZE] |=
    5bce:	46ac      	mov	ip, r5
    for (i = 0; i < num_bytes; ++i) {
    5bd0:	2200      	movs	r2, #0
        native[b / uECC_WORD_SIZE] |=
    5bd2:	2003      	movs	r0, #3
    5bd4:	4645      	mov	r5, r8
    5bd6:	4663      	mov	r3, ip
    5bd8:	1a9b      	subs	r3, r3, r2
    5bda:	0019      	movs	r1, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5bdc:	5caf      	ldrb	r7, [r5, r2]
    5bde:	4003      	ands	r3, r0
    5be0:	00db      	lsls	r3, r3, #3
    5be2:	409f      	lsls	r7, r3
    5be4:	003b      	movs	r3, r7
        native[b / uECC_WORD_SIZE] |=
    5be6:	4381      	bics	r1, r0
    5be8:	1871      	adds	r1, r6, r1
    5bea:	680f      	ldr	r7, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5bec:	3201      	adds	r2, #1
        native[b / uECC_WORD_SIZE] |=
    5bee:	433b      	orrs	r3, r7
    5bf0:	600b      	str	r3, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5bf2:	4294      	cmp	r4, r2
    5bf4:	dcef      	bgt.n	5bd6 <uECC_verify+0x14e>
    for (i = 0; i < num_words; ++i) {
    5bf6:	9b03      	ldr	r3, [sp, #12]
    5bf8:	46a8      	mov	r8, r5
    5bfa:	4665      	mov	r5, ip
    5bfc:	2b00      	cmp	r3, #0
    5bfe:	dd0f      	ble.n	5c20 <uECC_verify+0x198>
        vli[i] = 0;
    5c00:	9b06      	ldr	r3, [sp, #24]
    5c02:	2b00      	cmp	r3, #0
    5c04:	dc00      	bgt.n	5c08 <uECC_verify+0x180>
    5c06:	e072      	b.n	5cee <uECC_verify+0x266>
    5c08:	9a03      	ldr	r2, [sp, #12]
    5c0a:	3a01      	subs	r2, #1
    5c0c:	b2d2      	uxtb	r2, r2
    5c0e:	3201      	adds	r2, #1
    5c10:	0092      	lsls	r2, r2, #2
    5c12:	f246 7b75 	movw	fp, #26485	; 0x6775
    5c16:	2100      	movs	r1, #0
    5c18:	9802      	ldr	r0, [sp, #8]
    5c1a:	f2c0 0b00 	movt	fp, #0
    5c1e:	47d8      	blx	fp
    5c20:	44a0      	add	r8, r4
    for (i = 0; i < num_bytes; ++i) {
    5c22:	2100      	movs	r1, #0
        native[b / uECC_WORD_SIZE] |=
    5c24:	f240 0c03 	movw	ip, #3
    5c28:	4640      	mov	r0, r8
    5c2a:	1a6b      	subs	r3, r5, r1
    5c2c:	001a      	movs	r2, r3
    5c2e:	4667      	mov	r7, ip
    5c30:	43ba      	bics	r2, r7
    5c32:	9f02      	ldr	r7, [sp, #8]
    5c34:	46b8      	mov	r8, r7
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5c36:	5c47      	ldrb	r7, [r0, r1]
        native[b / uECC_WORD_SIZE] |=
    5c38:	4442      	add	r2, r8
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5c3a:	46b8      	mov	r8, r7
    5c3c:	4667      	mov	r7, ip
    5c3e:	403b      	ands	r3, r7
    5c40:	4647      	mov	r7, r8
    5c42:	00db      	lsls	r3, r3, #3
    5c44:	409f      	lsls	r7, r3
    5c46:	003b      	movs	r3, r7
        native[b / uECC_WORD_SIZE] |=
    5c48:	6817      	ldr	r7, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5c4a:	3101      	adds	r1, #1
        native[b / uECC_WORD_SIZE] |=
    5c4c:	433b      	orrs	r3, r7
    5c4e:	6013      	str	r3, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5c50:	428c      	cmp	r4, r1
    5c52:	dcea      	bgt.n	5c2a <uECC_verify+0x1a2>
    for (i = 0; i < num_words; ++i) {
    5c54:	9b04      	ldr	r3, [sp, #16]
    5c56:	2b00      	cmp	r3, #0
    5c58:	dd3e      	ble.n	5cd8 <uECC_verify+0x250>
    5c5a:	3b01      	subs	r3, #1
    5c5c:	b2db      	uxtb	r3, r3
    5c5e:	1c59      	adds	r1, r3, #1
    5c60:	9303      	str	r3, [sp, #12]
    5c62:	2200      	movs	r2, #0
    5c64:	2300      	movs	r3, #0
    5c66:	0089      	lsls	r1, r1, #2
        bits |= vli[i];
    5c68:	58f0      	ldr	r0, [r6, r3]
    5c6a:	3304      	adds	r3, #4
    5c6c:	4302      	orrs	r2, r0
    for (i = 0; i < num_words; ++i) {
    5c6e:	428b      	cmp	r3, r1
    5c70:	d1fa      	bne.n	5c68 <uECC_verify+0x1e0>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    5c72:	b38a      	cbz	r2, 5cd8 <uECC_verify+0x250>
    5c74:	2400      	movs	r4, #0
    5c76:	2200      	movs	r2, #0
        bits |= vli[i];
    5c78:	9902      	ldr	r1, [sp, #8]
    5c7a:	5909      	ldr	r1, [r1, r4]
    5c7c:	3404      	adds	r4, #4
    5c7e:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    5c80:	42a3      	cmp	r3, r4
    5c82:	d1f9      	bne.n	5c78 <uECC_verify+0x1f0>
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    5c84:	b342      	cbz	r2, 5cd8 <uECC_verify+0x250>
    for (i = num_words - 1; i >= 0; --i) {
    5c86:	9807      	ldr	r0, [sp, #28]
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    5c88:	9da8      	ldr	r5, [sp, #672]	; 0x2a0
    for (i = num_words - 1; i >= 0; --i) {
    5c8a:	3801      	subs	r0, #1
    5c8c:	b2c0      	uxtb	r0, r0
    5c8e:	b243      	sxtb	r3, r0
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    5c90:	3524      	adds	r5, #36	; 0x24
    for (i = num_words - 1; i >= 0; --i) {
    5c92:	4699      	mov	r9, r3
    5c94:	2b00      	cmp	r3, #0
    5c96:	db1f      	blt.n	5cd8 <uECC_verify+0x250>
        if (left[i] > right[i]) {
    5c98:	009b      	lsls	r3, r3, #2
    5c9a:	18ea      	adds	r2, r5, r3
    5c9c:	9207      	str	r2, [sp, #28]
    5c9e:	6812      	ldr	r2, [r2, #0]
    5ca0:	4694      	mov	ip, r2
    5ca2:	aa9e      	add	r2, sp, #632	; 0x278
    5ca4:	4690      	mov	r8, r2
    5ca6:	4443      	add	r3, r8
    5ca8:	9306      	str	r3, [sp, #24]
    5caa:	3b21      	subs	r3, #33	; 0x21
    5cac:	3bff      	subs	r3, #255	; 0xff
    5cae:	681b      	ldr	r3, [r3, #0]
    5cb0:	4563      	cmp	r3, ip
    5cb2:	d31e      	bcc.n	5cf2 <uECC_verify+0x26a>
        } else if (left[i] < right[i]) {
    5cb4:	d810      	bhi.n	5cd8 <uECC_verify+0x250>
    5cb6:	464a      	mov	r2, r9
    5cb8:	e00a      	b.n	5cd0 <uECC_verify+0x248>
        if (left[i] > right[i]) {
    5cba:	af9e      	add	r7, sp, #632	; 0x278
    5cbc:	46b8      	mov	r8, r7
    5cbe:	0093      	lsls	r3, r2, #2
    5cc0:	58e9      	ldr	r1, [r5, r3]
    5cc2:	4443      	add	r3, r8
    5cc4:	3b21      	subs	r3, #33	; 0x21
    5cc6:	3bff      	subs	r3, #255	; 0xff
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	4299      	cmp	r1, r3
    5ccc:	d811      	bhi.n	5cf2 <uECC_verify+0x26a>
        } else if (left[i] < right[i]) {
    5cce:	d303      	bcc.n	5cd8 <uECC_verify+0x250>
    5cd0:	3a01      	subs	r2, #1
    5cd2:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    5cd4:	1c53      	adds	r3, r2, #1
    5cd6:	d1f0      	bne.n	5cba <uECC_verify+0x232>
        return 0;
    5cd8:	2200      	movs	r2, #0
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
}
    5cda:	0010      	movs	r0, r2
    5cdc:	f240 237c 	movw	r3, #636	; 0x27c
    5ce0:	449d      	add	sp, r3
    5ce2:	bc3c      	pop	{r2, r3, r4, r5}
    5ce4:	4690      	mov	r8, r2
    5ce6:	4699      	mov	r9, r3
    5ce8:	46a2      	mov	sl, r4
    5cea:	46ab      	mov	fp, r5
    5cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli[i] = 0;
    5cee:	2204      	movs	r2, #4
    5cf0:	e78f      	b.n	5c12 <uECC_verify+0x18a>
        if (left[i] > right[i]) {
    5cf2:	9b06      	ldr	r3, [sp, #24]
    5cf4:	3b01      	subs	r3, #1
    5cf6:	3bff      	subs	r3, #255	; 0xff
    5cf8:	681b      	ldr	r3, [r3, #0]
    5cfa:	459c      	cmp	ip, r3
    5cfc:	d832      	bhi.n	5d64 <uECC_verify+0x2dc>
        } else if (left[i] < right[i]) {
    5cfe:	d3eb      	bcc.n	5cd8 <uECC_verify+0x250>
    5d00:	464a      	mov	r2, r9
    5d02:	e00a      	b.n	5d1a <uECC_verify+0x292>
        if (left[i] > right[i]) {
    5d04:	af9e      	add	r7, sp, #632	; 0x278
    5d06:	46bc      	mov	ip, r7
    5d08:	0093      	lsls	r3, r2, #2
    5d0a:	58e9      	ldr	r1, [r5, r3]
    5d0c:	4463      	add	r3, ip
    5d0e:	3b01      	subs	r3, #1
    5d10:	3bff      	subs	r3, #255	; 0xff
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	4299      	cmp	r1, r3
    5d16:	d825      	bhi.n	5d64 <uECC_verify+0x2dc>
        } else if (left[i] < right[i]) {
    5d18:	d3de      	bcc.n	5cd8 <uECC_verify+0x250>
    5d1a:	3a01      	subs	r2, #1
    5d1c:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    5d1e:	1c53      	adds	r3, r2, #1
    5d20:	d1f0      	bne.n	5d04 <uECC_verify+0x27c>
    5d22:	e7d9      	b.n	5cd8 <uECC_verify+0x250>
    5d24:	ab7e      	add	r3, sp, #504	; 0x1f8
    5d26:	469a      	mov	sl, r3
    5d28:	e6f4      	b.n	5b14 <uECC_verify+0x8c>
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    5d2a:	9b04      	ldr	r3, [sp, #16]
    5d2c:	009b      	lsls	r3, r3, #2
    5d2e:	9308      	str	r3, [sp, #32]
    uECC_vli_bytesToNative(
    5d30:	4453      	add	r3, sl
    5d32:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    5d34:	9b03      	ldr	r3, [sp, #12]
    5d36:	2b00      	cmp	r3, #0
    5d38:	dd00      	ble.n	5d3c <uECC_verify+0x2b4>
    5d3a:	e70c      	b.n	5b56 <uECC_verify+0xce>
    for (i = 0; i < num_bytes; ++i) {
    5d3c:	2c00      	cmp	r4, #0
    5d3e:	dd00      	ble.n	5d42 <uECC_verify+0x2ba>
    5d40:	e744      	b.n	5bcc <uECC_verify+0x144>
    5d42:	e787      	b.n	5c54 <uECC_verify+0x1cc>
    for (i = 0; i < num_words; ++i) {
    5d44:	9b03      	ldr	r3, [sp, #12]
    5d46:	2b00      	cmp	r3, #0
    5d48:	dc00      	bgt.n	5d4c <uECC_verify+0x2c4>
    5d4a:	e783      	b.n	5c54 <uECC_verify+0x1cc>
        vli[i] = 0;
    5d4c:	9b06      	ldr	r3, [sp, #24]
    5d4e:	2b00      	cmp	r3, #0
    5d50:	dc00      	bgt.n	5d54 <uECC_verify+0x2cc>
    5d52:	e2d5      	b.n	6300 <uECC_verify+0x878>
    5d54:	002a      	movs	r2, r5
    5d56:	2100      	movs	r1, #0
    5d58:	9802      	ldr	r0, [sp, #8]
    5d5a:	47d8      	blx	fp
    5d5c:	e77a      	b.n	5c54 <uECC_verify+0x1cc>
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	fffffd84 	.word	0xfffffd84
    for (i = 0; i < num_words; ++i) {
    5d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d66:	2b00      	cmp	r3, #0
    5d68:	dc00      	bgt.n	5d6c <uECC_verify+0x2e4>
    5d6a:	e2c2      	b.n	62f2 <uECC_verify+0x86a>
    5d6c:	2200      	movs	r2, #0
    5d6e:	2300      	movs	r3, #0
    5d70:	3001      	adds	r0, #1
    5d72:	0080      	lsls	r0, r0, #2
        bits |= vli[i];
    5d74:	9902      	ldr	r1, [sp, #8]
    5d76:	5889      	ldr	r1, [r1, r2]
    5d78:	3204      	adds	r2, #4
    5d7a:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
    5d7c:	4282      	cmp	r2, r0
    5d7e:	d1f9      	bne.n	5d74 <uECC_verify+0x2ec>
    if (uECC_vli_isZero(input, num_words)) {
    5d80:	2b00      	cmp	r3, #0
    5d82:	d100      	bne.n	5d86 <uECC_verify+0x2fe>
    5d84:	e2a7      	b.n	62d6 <uECC_verify+0x84e>
    5d86:	ab26      	add	r3, sp, #152	; 0x98
    5d88:	4698      	mov	r8, r3
    5d8a:	f643 1711 	movw	r7, #14609	; 0x3911
    5d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d90:	002a      	movs	r2, r5
    5d92:	9902      	ldr	r1, [sp, #8]
    5d94:	4640      	mov	r0, r8
    5d96:	f2c0 0700 	movt	r7, #0
    5d9a:	f246 7b75 	movw	fp, #26485	; 0x6775
    5d9e:	47b8      	blx	r7
    5da0:	f2c0 0b00 	movt	fp, #0
    u1[num_n_words - 1] = 0;
    5da4:	2018      	movs	r0, #24
    5da6:	2300      	movs	r3, #0
    bits2int(u1, message_hash, hash_size, curve);
    5da8:	f641 074d 	movw	r7, #6221	; 0x184d
    u1[num_n_words - 1] = 0;
    5dac:	990c      	ldr	r1, [sp, #48]	; 0x30
    5dae:	aa10      	add	r2, sp, #64	; 0x40
    5db0:	1812      	adds	r2, r2, r0
    5db2:	5053      	str	r3, [r2, r1]
    bits2int(u1, message_hash, hash_size, curve);
    5db4:	a816      	add	r0, sp, #88	; 0x58
    5db6:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5db8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5dba:	990a      	ldr	r1, [sp, #40]	; 0x28
    5dbc:	f2c0 0700 	movt	r7, #0
    5dc0:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, num_words);
    5dc2:	f240 77ed 	movw	r7, #2029	; 0x7ed
    5dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dc8:	f2c0 0700 	movt	r7, #0
    5dcc:	4642      	mov	r2, r8
    5dce:	a916      	add	r1, sp, #88	; 0x58
    5dd0:	a88e      	add	r0, sp, #568	; 0x238
    5dd2:	970c      	str	r7, [sp, #48]	; 0x30
    5dd4:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    5dd6:	f640 17cd 	movw	r7, #2509	; 0x9cd
    5dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ddc:	f2c0 0700 	movt	r7, #0
    5de0:	002a      	movs	r2, r5
    5de2:	a98e      	add	r1, sp, #568	; 0x238
    5de4:	a816      	add	r0, sp, #88	; 0x58
    5de6:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, num_words);
    5de8:	0031      	movs	r1, r6
    5dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dec:	4642      	mov	r2, r8
    5dee:	a88e      	add	r0, sp, #568	; 0x238
    5df0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5df2:	47b0      	blx	r6
    uECC_vli_mmod(result, product, mod, num_words);
    5df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5df6:	002a      	movs	r2, r5
    5df8:	a98e      	add	r1, sp, #568	; 0x238
    5dfa:	a81e      	add	r0, sp, #120	; 0x78
    5dfc:	47b8      	blx	r7
    5dfe:	f246 733f 	movw	r3, #26431	; 0x673f
    5e02:	af6e      	add	r7, sp, #440	; 0x1b8
    5e04:	f2c0 0300 	movt	r3, #0
    5e08:	0022      	movs	r2, r4
    5e0a:	4651      	mov	r1, sl
    5e0c:	0038      	movs	r0, r7
    5e0e:	001e      	movs	r6, r3
    5e10:	9302      	str	r3, [sp, #8]
    5e12:	4798      	blx	r3
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
    5e14:	9b08      	ldr	r3, [sp, #32]
    5e16:	0022      	movs	r2, r4
    5e18:	469c      	mov	ip, r3
    5e1a:	44bc      	add	ip, r7
    5e1c:	4663      	mov	r3, ip
    5e1e:	9905      	ldr	r1, [sp, #20]
    5e20:	4660      	mov	r0, ip
    5e22:	930e      	str	r3, [sp, #56]	; 0x38
    5e24:	47b0      	blx	r6
    uECC_vli_set(tx, curve->G, num_words);
    5e26:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e28:	0022      	movs	r2, r4
    5e2a:	3344      	adds	r3, #68	; 0x44
    5e2c:	0019      	movs	r1, r3
    5e2e:	a83e      	add	r0, sp, #248	; 0xf8
    5e30:	930f      	str	r3, [sp, #60]	; 0x3c
    5e32:	47b0      	blx	r6
        dest[i] = src[i];
    5e34:	9b04      	ldr	r3, [sp, #16]
    5e36:	2b00      	cmp	r3, #0
    5e38:	dc00      	bgt.n	5e3c <uECC_verify+0x3b4>
    5e3a:	e256      	b.n	62ea <uECC_verify+0x862>
    5e3c:	0022      	movs	r2, r4
    5e3e:	940d      	str	r4, [sp, #52]	; 0x34
    5e40:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    5e42:	f641 1691 	movw	r6, #6545	; 0x1991
        dest[i] = src[i];
    5e46:	469c      	mov	ip, r3
    5e48:	9908      	ldr	r1, [sp, #32]
    5e4a:	9b02      	ldr	r3, [sp, #8]
    5e4c:	3144      	adds	r1, #68	; 0x44
    5e4e:	4461      	add	r1, ip
    5e50:	a846      	add	r0, sp, #280	; 0x118
    5e52:	4798      	blx	r3
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    5e54:	9a04      	ldr	r2, [sp, #16]
    5e56:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e58:	f2c0 0600 	movt	r6, #0
    5e5c:	3304      	adds	r3, #4
    5e5e:	9200      	str	r2, [sp, #0]
    5e60:	0039      	movs	r1, r7
    5e62:	aa3e      	add	r2, sp, #248	; 0xf8
    5e64:	4640      	mov	r0, r8
    5e66:	9305      	str	r3, [sp, #20]
    5e68:	960a      	str	r6, [sp, #40]	; 0x28
    5e6a:	47b0      	blx	r6
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
    5e6c:	f640 567d 	movw	r6, #3453	; 0xd7d
    5e70:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e72:	003a      	movs	r2, r7
    5e74:	9300      	str	r3, [sp, #0]
    5e76:	a946      	add	r1, sp, #280	; 0x118
    5e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5e7a:	f2c0 0600 	movt	r6, #0
    5e7e:	a83e      	add	r0, sp, #248	; 0xf8
    5e80:	960b      	str	r6, [sp, #44]	; 0x2c
    5e82:	47b0      	blx	r6
    5e84:	2200      	movs	r2, #0
    5e86:	2300      	movs	r3, #0
    5e88:	4641      	mov	r1, r8
        bits |= vli[i];
    5e8a:	5888      	ldr	r0, [r1, r2]
    5e8c:	3204      	adds	r2, #4
    5e8e:	4303      	orrs	r3, r0
    for (i = 0; i < num_words; ++i) {
    5e90:	4294      	cmp	r4, r2
    5e92:	d1fa      	bne.n	5e8a <uECC_verify+0x402>
    5e94:	4688      	mov	r8, r1
    if (uECC_vli_isZero(input, num_words)) {
    5e96:	2b00      	cmp	r3, #0
    5e98:	d100      	bne.n	5e9c <uECC_verify+0x414>
    5e9a:	e212      	b.n	62c2 <uECC_verify+0x83a>
    5e9c:	f643 1611 	movw	r6, #14609	; 0x3911
    5ea0:	9b04      	ldr	r3, [sp, #16]
    5ea2:	9a05      	ldr	r2, [sp, #20]
    5ea4:	4641      	mov	r1, r8
    5ea6:	4640      	mov	r0, r8
    5ea8:	f2c0 0600 	movt	r6, #0
    5eac:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    5eae:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5eb0:	4642      	mov	r2, r8
    5eb2:	781b      	ldrb	r3, [r3, #0]
    5eb4:	4641      	mov	r1, r8
    5eb6:	b25b      	sxtb	r3, r3
    5eb8:	a88e      	add	r0, sp, #568	; 0x238
    5eba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5ebc:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5ebe:	22b0      	movs	r2, #176	; 0xb0
    5ec0:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5ec2:	a98e      	add	r1, sp, #568	; 0x238
    5ec4:	589b      	ldr	r3, [r3, r2]
    5ec6:	a866      	add	r0, sp, #408	; 0x198
    5ec8:	9310      	str	r3, [sp, #64]	; 0x40
    5eca:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5ecc:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5ece:	aa66      	add	r2, sp, #408	; 0x198
    5ed0:	781b      	ldrb	r3, [r3, #0]
    5ed2:	0039      	movs	r1, r7
    5ed4:	b25b      	sxtb	r3, r3
    5ed6:	a88e      	add	r0, sp, #568	; 0x238
    5ed8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5eda:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5edc:	22b0      	movs	r2, #176	; 0xb0
    5ede:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5ee0:	a98e      	add	r1, sp, #568	; 0x238
    5ee2:	589b      	ldr	r3, [r3, r2]
    5ee4:	0038      	movs	r0, r7
    5ee6:	9310      	str	r3, [sp, #64]	; 0x40
    5ee8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5eea:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5eec:	4642      	mov	r2, r8
    5eee:	781b      	ldrb	r3, [r3, #0]
    5ef0:	a966      	add	r1, sp, #408	; 0x198
    5ef2:	b25b      	sxtb	r3, r3
    5ef4:	a88e      	add	r0, sp, #568	; 0x238
    5ef6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5ef8:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5efa:	22b0      	movs	r2, #176	; 0xb0
    5efc:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5efe:	a98e      	add	r1, sp, #568	; 0x238
    5f00:	589b      	ldr	r3, [r3, r2]
    5f02:	a866      	add	r0, sp, #408	; 0x198
    5f04:	9310      	str	r3, [sp, #64]	; 0x40
    5f06:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5f08:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5f0a:	aa66      	add	r2, sp, #408	; 0x198
    5f0c:	781b      	ldrb	r3, [r3, #0]
    5f0e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5f10:	b25b      	sxtb	r3, r3
    5f12:	a88e      	add	r0, sp, #568	; 0x238
    5f14:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5f16:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5f18:	22b0      	movs	r2, #176	; 0xb0
    5f1a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5f1c:	a98e      	add	r1, sp, #568	; 0x238
    5f1e:	589b      	ldr	r3, [r3, r2]
    5f20:	980e      	ldr	r0, [sp, #56]	; 0x38
    5f22:	4798      	blx	r3
    points[0] = 0;
    5f24:	2300      	movs	r3, #0
    5f26:	9312      	str	r3, [sp, #72]	; 0x48
    points[1] = curve->G;
    5f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f2a:	4ad4      	ldr	r2, [pc, #848]	; (627c <uECC_verify+0x7f4>)
    points[1] = curve->G;
    5f2c:	9313      	str	r3, [sp, #76]	; 0x4c
    points[2] = _public;
    5f2e:	4653      	mov	r3, sl
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f30:	4694      	mov	ip, r2
    points[2] = _public;
    5f32:	9314      	str	r3, [sp, #80]	; 0x50
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f34:	9b06      	ldr	r3, [sp, #24]
    points[3] = sum;
    5f36:	9715      	str	r7, [sp, #84]	; 0x54
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f38:	4463      	add	r3, ip
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	2b00      	cmp	r3, #0
    5f3e:	d000      	beq.n	5f42 <uECC_verify+0x4ba>
    5f40:	e17f      	b.n	6242 <uECC_verify+0x7ba>
    5f42:	464b      	mov	r3, r9
    5f44:	e00a      	b.n	5f5c <uECC_verify+0x4d4>
    5f46:	a99e      	add	r1, sp, #632	; 0x278
    5f48:	468c      	mov	ip, r1
    5f4a:	49cc      	ldr	r1, [pc, #816]	; (627c <uECC_verify+0x7f4>)
    5f4c:	009a      	lsls	r2, r3, #2
    5f4e:	4462      	add	r2, ip
    5f50:	468c      	mov	ip, r1
    5f52:	4462      	add	r2, ip
    5f54:	6812      	ldr	r2, [r2, #0]
    5f56:	2a00      	cmp	r2, #0
    5f58:	d000      	beq.n	5f5c <uECC_verify+0x4d4>
    5f5a:	e173      	b.n	6244 <uECC_verify+0x7bc>
    5f5c:	3b01      	subs	r3, #1
    5f5e:	b25b      	sxtb	r3, r3
    5f60:	1c5a      	adds	r2, r3, #1
    5f62:	d1f0      	bne.n	5f46 <uECC_verify+0x4be>
        return 0;
    5f64:	2100      	movs	r1, #0
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f66:	4ac6      	ldr	r2, [pc, #792]	; (6280 <uECC_verify+0x7f8>)
    5f68:	9b06      	ldr	r3, [sp, #24]
    5f6a:	4694      	mov	ip, r2
    5f6c:	4463      	add	r3, ip
    5f6e:	681b      	ldr	r3, [r3, #0]
    5f70:	2b00      	cmp	r3, #0
    5f72:	d000      	beq.n	5f76 <uECC_verify+0x4ee>
    5f74:	e188      	b.n	6288 <uECC_verify+0x800>
    5f76:	464b      	mov	r3, r9
    5f78:	e00a      	b.n	5f90 <uECC_verify+0x508>
    5f7a:	a89e      	add	r0, sp, #632	; 0x278
    5f7c:	4684      	mov	ip, r0
    5f7e:	48c0      	ldr	r0, [pc, #768]	; (6280 <uECC_verify+0x7f8>)
    5f80:	009a      	lsls	r2, r3, #2
    5f82:	4462      	add	r2, ip
    5f84:	4684      	mov	ip, r0
    5f86:	4462      	add	r2, ip
    5f88:	6812      	ldr	r2, [r2, #0]
    5f8a:	2a00      	cmp	r2, #0
    5f8c:	d000      	beq.n	5f90 <uECC_verify+0x508>
    5f8e:	e17c      	b.n	628a <uECC_verify+0x802>
    5f90:	3b01      	subs	r3, #1
    5f92:	b25b      	sxtb	r3, r3
    5f94:	1c5a      	adds	r2, r3, #1
    5f96:	d1f0      	bne.n	5f7a <uECC_verify+0x4f2>
        return 0;
    5f98:	2000      	movs	r0, #0
    return (a > b ? a : b);
    5f9a:	1c06      	adds	r6, r0, #0
    5f9c:	4288      	cmp	r0, r1
    5f9e:	da00      	bge.n	5fa2 <uECC_verify+0x51a>
    5fa0:	1c0e      	adds	r6, r1, #0
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5fa2:	2701      	movs	r7, #1
    5fa4:	221f      	movs	r2, #31
    5fa6:	0038      	movs	r0, r7
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5fa8:	b2b3      	uxth	r3, r6
    5faa:	469a      	mov	sl, r3
    5fac:	3b01      	subs	r3, #1
    5fae:	b29b      	uxth	r3, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5fb0:	b219      	sxth	r1, r3
    5fb2:	4013      	ands	r3, r2
    5fb4:	4098      	lsls	r0, r3
    5fb6:	ab9e      	add	r3, sp, #632	; 0x278
    5fb8:	469c      	mov	ip, r3
    5fba:	1149      	asrs	r1, r1, #5
    5fbc:	0089      	lsls	r1, r1, #2
    5fbe:	4baf      	ldr	r3, [pc, #700]	; (627c <uECC_verify+0x7f4>)
    5fc0:	4461      	add	r1, ip
    5fc2:	18cb      	adds	r3, r1, r3
    5fc4:	681b      	ldr	r3, [r3, #0]
    5fc6:	4003      	ands	r3, r0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5fc8:	001a      	movs	r2, r3
    5fca:	1e53      	subs	r3, r2, #1
    5fcc:	419a      	sbcs	r2, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5fce:	4bac      	ldr	r3, [pc, #688]	; (6280 <uECC_verify+0x7f8>)
    5fd0:	469c      	mov	ip, r3
    5fd2:	4461      	add	r1, ip
    5fd4:	680b      	ldr	r3, [r1, #0]
    5fd6:	4003      	ands	r3, r0
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    5fd8:	1e59      	subs	r1, r3, #1
    5fda:	418b      	sbcs	r3, r1
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5fdc:	2108      	movs	r1, #8
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    5fde:	005b      	lsls	r3, r3, #1
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5fe0:	4313      	orrs	r3, r2
    5fe2:	aa10      	add	r2, sp, #64	; 0x40
    5fe4:	1852      	adds	r2, r2, r1
    5fe6:	009b      	lsls	r3, r3, #2
    5fe8:	58d6      	ldr	r6, [r2, r3]
    5fea:	a82e      	add	r0, sp, #184	; 0xb8
    5fec:	0031      	movs	r1, r6
    5fee:	0022      	movs	r2, r4
    5ff0:	9b02      	ldr	r3, [sp, #8]
    5ff2:	4798      	blx	r3
    5ff4:	9a08      	ldr	r2, [sp, #32]
    5ff6:	9b02      	ldr	r3, [sp, #8]
    5ff8:	18b1      	adds	r1, r6, r2
    5ffa:	a836      	add	r0, sp, #216	; 0xd8
    5ffc:	0022      	movs	r2, r4
    5ffe:	4798      	blx	r3
    6000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6002:	2100      	movs	r1, #0
    6004:	4640      	mov	r0, r8
    6006:	47d8      	blx	fp
    for (i = num_bits - 2; i >= 0; --i) {
    6008:	4652      	mov	r2, sl
    600a:	1e96      	subs	r6, r2, #2
    600c:	b236      	sxth	r6, r6
    z[0] = 1;
    600e:	9726      	str	r7, [sp, #152]	; 0x98
    for (i = num_bits - 2; i >= 0; --i) {
    6010:	2e00      	cmp	r6, #0
    6012:	da00      	bge.n	6016 <uECC_verify+0x58e>
    6014:	e090      	b.n	6138 <uECC_verify+0x6b0>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    6016:	464a      	mov	r2, r9
    6018:	9210      	str	r2, [sp, #64]	; 0x40
    601a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    601c:	9b02      	ldr	r3, [sp, #8]
    601e:	4691      	mov	r9, r2
    6020:	465a      	mov	r2, fp
    6022:	9211      	str	r2, [sp, #68]	; 0x44
    6024:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6026:	950e      	str	r5, [sp, #56]	; 0x38
    6028:	4647      	mov	r7, r8
        curve->double_jacobian(rx, ry, z, curve);
    602a:	f240 0aa4 	movw	sl, #164	; 0xa4
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    602e:	0035      	movs	r5, r6
    6030:	4690      	mov	r8, r2
    6032:	469b      	mov	fp, r3
    6034:	940f      	str	r4, [sp, #60]	; 0x3c
    6036:	9ca8      	ldr	r4, [sp, #672]	; 0x2a0
        curve->double_jacobian(rx, ry, z, curve);
    6038:	4656      	mov	r6, sl
    603a:	0023      	movs	r3, r4
    603c:	003a      	movs	r2, r7
    603e:	a936      	add	r1, sp, #216	; 0xd8
    6040:	a82e      	add	r0, sp, #184	; 0xb8
    6042:	59a6      	ldr	r6, [r4, r6]
    6044:	47b0      	blx	r6
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    6046:	231f      	movs	r3, #31
    6048:	2001      	movs	r0, #1
    604a:	b2aa      	uxth	r2, r5
    604c:	4013      	ands	r3, r2
    604e:	4098      	lsls	r0, r3
    6050:	ab9e      	add	r3, sp, #632	; 0x278
    6052:	469c      	mov	ip, r3
    6054:	1169      	asrs	r1, r5, #5
    6056:	0089      	lsls	r1, r1, #2
    6058:	4b88      	ldr	r3, [pc, #544]	; (627c <uECC_verify+0x7f4>)
    605a:	4461      	add	r1, ip
    605c:	18cb      	adds	r3, r1, r3
    605e:	681b      	ldr	r3, [r3, #0]
    6060:	9202      	str	r2, [sp, #8]
    6062:	4003      	ands	r3, r0
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    6064:	001a      	movs	r2, r3
    6066:	1e53      	subs	r3, r2, #1
    6068:	419a      	sbcs	r2, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    606a:	4b85      	ldr	r3, [pc, #532]	; (6280 <uECC_verify+0x7f8>)
    606c:	469c      	mov	ip, r3
    606e:	4461      	add	r1, ip
    6070:	680b      	ldr	r3, [r1, #0]
    6072:	4003      	ands	r3, r0
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    6074:	1e59      	subs	r1, r3, #1
    6076:	418b      	sbcs	r3, r1
        point = points[index];
    6078:	2108      	movs	r1, #8
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    607a:	005b      	lsls	r3, r3, #1
    607c:	4313      	orrs	r3, r2
        point = points[index];
    607e:	aa10      	add	r2, sp, #64	; 0x40
    6080:	009b      	lsls	r3, r3, #2
    6082:	1852      	adds	r2, r2, r1
    6084:	58d6      	ldr	r6, [r2, r3]
        if (point) {
    6086:	2e00      	cmp	r6, #0
    6088:	d04a      	beq.n	6120 <uECC_verify+0x698>
    608a:	0031      	movs	r1, r6
    608c:	464a      	mov	r2, r9
    608e:	a83e      	add	r0, sp, #248	; 0xf8
    6090:	47d8      	blx	fp
    6092:	9b08      	ldr	r3, [sp, #32]
    6094:	464a      	mov	r2, r9
    6096:	18f1      	adds	r1, r6, r3
    6098:	a846      	add	r0, sp, #280	; 0x118
    609a:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
    609c:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    609e:	26b0      	movs	r6, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    60a0:	003a      	movs	r2, r7
    60a2:	56e3      	ldrsb	r3, [r4, r3]
    60a4:	0039      	movs	r1, r7
    60a6:	a88e      	add	r0, sp, #568	; 0x238
    60a8:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60aa:	a98e      	add	r1, sp, #568	; 0x238
    60ac:	a866      	add	r0, sp, #408	; 0x198
    60ae:	59a3      	ldr	r3, [r4, r6]
    60b0:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    60b2:	2300      	movs	r3, #0
    60b4:	aa66      	add	r2, sp, #408	; 0x198
    60b6:	56e3      	ldrsb	r3, [r4, r3]
    60b8:	a93e      	add	r1, sp, #248	; 0xf8
    60ba:	a88e      	add	r0, sp, #568	; 0x238
    60bc:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60be:	a98e      	add	r1, sp, #568	; 0x238
    60c0:	a83e      	add	r0, sp, #248	; 0xf8
    60c2:	59a3      	ldr	r3, [r4, r6]
    60c4:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    60c6:	2300      	movs	r3, #0
    60c8:	003a      	movs	r2, r7
    60ca:	56e3      	ldrsb	r3, [r4, r3]
    60cc:	a966      	add	r1, sp, #408	; 0x198
    60ce:	a88e      	add	r0, sp, #568	; 0x238
    60d0:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60d2:	a98e      	add	r1, sp, #568	; 0x238
    60d4:	a866      	add	r0, sp, #408	; 0x198
    60d6:	59a3      	ldr	r3, [r4, r6]
    60d8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    60da:	2300      	movs	r3, #0
    60dc:	aa66      	add	r2, sp, #408	; 0x198
    60de:	56e3      	ldrsb	r3, [r4, r3]
    60e0:	a946      	add	r1, sp, #280	; 0x118
    60e2:	a88e      	add	r0, sp, #568	; 0x238
    60e4:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60e6:	a98e      	add	r1, sp, #568	; 0x238
    60e8:	a846      	add	r0, sp, #280	; 0x118
    60ea:	59a3      	ldr	r3, [r4, r6]
    60ec:	4798      	blx	r3
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
    60ee:	9b04      	ldr	r3, [sp, #16]
    60f0:	aa3e      	add	r2, sp, #248	; 0xf8
    60f2:	9300      	str	r3, [sp, #0]
    60f4:	a92e      	add	r1, sp, #184	; 0xb8
    60f6:	9b05      	ldr	r3, [sp, #20]
    60f8:	a84e      	add	r0, sp, #312	; 0x138
    60fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    60fc:	47a8      	blx	r5
            XYcZ_add(tx, ty, rx, ry, curve);
    60fe:	ab36      	add	r3, sp, #216	; 0xd8
    6100:	aa2e      	add	r2, sp, #184	; 0xb8
    6102:	a946      	add	r1, sp, #280	; 0x118
    6104:	a83e      	add	r0, sp, #248	; 0xf8
    6106:	9400      	str	r4, [sp, #0]
    6108:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    610a:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    610c:	2300      	movs	r3, #0
    610e:	0039      	movs	r1, r7
    6110:	56e3      	ldrsb	r3, [r4, r3]
    6112:	a88e      	add	r0, sp, #568	; 0x238
    6114:	aa4e      	add	r2, sp, #312	; 0x138
    6116:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    6118:	59a3      	ldr	r3, [r4, r6]
    611a:	a98e      	add	r1, sp, #568	; 0x238
    611c:	0038      	movs	r0, r7
    611e:	4798      	blx	r3
    6120:	9d02      	ldr	r5, [sp, #8]
    6122:	3d01      	subs	r5, #1
    6124:	b22d      	sxth	r5, r5
    for (i = num_bits - 2; i >= 0; --i) {
    6126:	1c6b      	adds	r3, r5, #1
    6128:	d186      	bne.n	6038 <uECC_verify+0x5b0>
    612a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    612c:	46b8      	mov	r8, r7
    612e:	4699      	mov	r9, r3
    6130:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6132:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    6134:	469b      	mov	fp, r3
    6136:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    6138:	2200      	movs	r2, #0
    613a:	2300      	movs	r3, #0
    613c:	4641      	mov	r1, r8
        bits |= vli[i];
    613e:	5888      	ldr	r0, [r1, r2]
    6140:	3204      	adds	r2, #4
    6142:	4303      	orrs	r3, r0
    for (i = 0; i < num_words; ++i) {
    6144:	4294      	cmp	r4, r2
    6146:	d1fa      	bne.n	613e <uECC_verify+0x6b6>
    6148:	4688      	mov	r8, r1
    if (uECC_vli_isZero(input, num_words)) {
    614a:	2b00      	cmp	r3, #0
    614c:	d100      	bne.n	6150 <uECC_verify+0x6c8>
    614e:	e0bd      	b.n	62cc <uECC_verify+0x844>
    6150:	f643 1411 	movw	r4, #14609	; 0x3911
    6154:	9b04      	ldr	r3, [sp, #16]
    6156:	9a05      	ldr	r2, [sp, #20]
    6158:	4641      	mov	r1, r8
    615a:	4640      	mov	r0, r8
    615c:	f2c0 0400 	movt	r4, #0
    6160:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    6162:	24b0      	movs	r4, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    6164:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6166:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6168:	781b      	ldrb	r3, [r3, #0]
    616a:	4642      	mov	r2, r8
    616c:	b25b      	sxtb	r3, r3
    616e:	4641      	mov	r1, r8
    6170:	a88e      	add	r0, sp, #568	; 0x238
    6172:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    6174:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6176:	a98e      	add	r1, sp, #568	; 0x238
    6178:	591b      	ldr	r3, [r3, r4]
    617a:	a866      	add	r0, sp, #408	; 0x198
    617c:	9302      	str	r3, [sp, #8]
    617e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    6180:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6182:	aa66      	add	r2, sp, #408	; 0x198
    6184:	781b      	ldrb	r3, [r3, #0]
    6186:	a92e      	add	r1, sp, #184	; 0xb8
    6188:	b25b      	sxtb	r3, r3
    618a:	a88e      	add	r0, sp, #568	; 0x238
    618c:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    618e:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6190:	a98e      	add	r1, sp, #568	; 0x238
    6192:	591b      	ldr	r3, [r3, r4]
    6194:	a82e      	add	r0, sp, #184	; 0xb8
    6196:	9302      	str	r3, [sp, #8]
    6198:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    619a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    619c:	4642      	mov	r2, r8
    619e:	781b      	ldrb	r3, [r3, #0]
    61a0:	a966      	add	r1, sp, #408	; 0x198
    61a2:	b25b      	sxtb	r3, r3
    61a4:	a88e      	add	r0, sp, #568	; 0x238
    61a6:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    61a8:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    61aa:	a98e      	add	r1, sp, #568	; 0x238
    61ac:	591b      	ldr	r3, [r3, r4]
    61ae:	a866      	add	r0, sp, #408	; 0x198
    61b0:	9302      	str	r3, [sp, #8]
    61b2:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    61b4:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    61b6:	aa66      	add	r2, sp, #408	; 0x198
    61b8:	781b      	ldrb	r3, [r3, #0]
    61ba:	a936      	add	r1, sp, #216	; 0xd8
    61bc:	b25b      	sxtb	r3, r3
    61be:	a88e      	add	r0, sp, #568	; 0x238
    61c0:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    61c2:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    61c4:	a98e      	add	r1, sp, #568	; 0x238
    61c6:	591b      	ldr	r3, [r3, r4]
    61c8:	a836      	add	r0, sp, #216	; 0xd8
    61ca:	4798      	blx	r3
        if (left[i] > right[i]) {
    61cc:	9b07      	ldr	r3, [sp, #28]
    61ce:	681a      	ldr	r2, [r3, #0]
    61d0:	9b06      	ldr	r3, [sp, #24]
    61d2:	3bc1      	subs	r3, #193	; 0xc1
    61d4:	3bff      	subs	r3, #255	; 0xff
    61d6:	681b      	ldr	r3, [r3, #0]
    61d8:	429a      	cmp	r2, r3
    61da:	d81a      	bhi.n	6212 <uECC_verify+0x78a>
        } else if (left[i] < right[i]) {
    61dc:	d310      	bcc.n	6200 <uECC_verify+0x778>
    61de:	464a      	mov	r2, r9
    61e0:	e00a      	b.n	61f8 <uECC_verify+0x770>
        if (left[i] > right[i]) {
    61e2:	a89e      	add	r0, sp, #632	; 0x278
    61e4:	4684      	mov	ip, r0
    61e6:	0093      	lsls	r3, r2, #2
    61e8:	58e9      	ldr	r1, [r5, r3]
    61ea:	4463      	add	r3, ip
    61ec:	3bc1      	subs	r3, #193	; 0xc1
    61ee:	3bff      	subs	r3, #255	; 0xff
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	4299      	cmp	r1, r3
    61f4:	d80d      	bhi.n	6212 <uECC_verify+0x78a>
        } else if (left[i] < right[i]) {
    61f6:	d303      	bcc.n	6200 <uECC_verify+0x778>
    61f8:	3a01      	subs	r2, #1
    61fa:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    61fc:	1c53      	adds	r3, r2, #1
    61fe:	d1f0      	bne.n	61e2 <uECC_verify+0x75a>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    6200:	f240 7491 	movw	r4, #1937	; 0x791
    6204:	a92e      	add	r1, sp, #184	; 0xb8
    6206:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6208:	002a      	movs	r2, r5
    620a:	0008      	movs	r0, r1
    620c:	f2c0 0400 	movt	r4, #0
    6210:	47a0      	blx	r4
    for (i = num_words - 1; i >= 0; --i) {
    6212:	466b      	mov	r3, sp
    6214:	220c      	movs	r2, #12
    6216:	2000      	movs	r0, #0
    6218:	569a      	ldrsb	r2, [r3, r2]
        diff |= (left[i] ^ right[i]);
    621a:	a99e      	add	r1, sp, #632	; 0x278
    621c:	468c      	mov	ip, r1
    621e:	0093      	lsls	r3, r2, #2
    6220:	4463      	add	r3, ip
    6222:	0019      	movs	r1, r3
    6224:	3b21      	subs	r3, #33	; 0x21
    6226:	39c1      	subs	r1, #193	; 0xc1
    6228:	39ff      	subs	r1, #255	; 0xff
    622a:	3bff      	subs	r3, #255	; 0xff
    622c:	6809      	ldr	r1, [r1, #0]
    622e:	681b      	ldr	r3, [r3, #0]
    6230:	3a01      	subs	r2, #1
    6232:	404b      	eors	r3, r1
    6234:	b252      	sxtb	r2, r2
    6236:	4318      	orrs	r0, r3
    for (i = num_words - 1; i >= 0; --i) {
    6238:	1c53      	adds	r3, r2, #1
    623a:	d1ee      	bne.n	621a <uECC_verify+0x792>
    623c:	4242      	negs	r2, r0
    623e:	4142      	adcs	r2, r0
    return (int)(uECC_vli_equal(rx, r, num_words));
    6240:	e54b      	b.n	5cda <uECC_verify+0x252>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    6242:	464b      	mov	r3, r9
    return (i + 1);
    6244:	3301      	adds	r3, #1
    6246:	b25b      	sxtb	r3, r3
        return 0;
    6248:	2100      	movs	r1, #0
    if (num_digits == 0) {
    624a:	2b00      	cmp	r3, #0
    624c:	d100      	bne.n	6250 <uECC_verify+0x7c8>
    624e:	e68a      	b.n	5f66 <uECC_verify+0x4de>
    digit = vli[num_digits - 1];
    6250:	a99e      	add	r1, sp, #632	; 0x278
    6252:	468c      	mov	ip, r1
    6254:	4a0b      	ldr	r2, [pc, #44]	; (6284 <uECC_verify+0x7fc>)
    6256:	4909      	ldr	r1, [pc, #36]	; (627c <uECC_verify+0x7f4>)
    6258:	189a      	adds	r2, r3, r2
    625a:	0092      	lsls	r2, r2, #2
    625c:	4462      	add	r2, ip
    625e:	468c      	mov	ip, r1
    6260:	4462      	add	r2, ip
    6262:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    6264:	2100      	movs	r1, #0
    6266:	b122      	cbz	r2, 6272 <uECC_verify+0x7ea>
        digit >>= 1;
    6268:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    626a:	3101      	adds	r1, #1
    626c:	2a00      	cmp	r2, #0
    626e:	d1fb      	bne.n	6268 <uECC_verify+0x7e0>
    6270:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    6272:	3b01      	subs	r3, #1
    6274:	015b      	lsls	r3, r3, #5
    6276:	18c9      	adds	r1, r1, r3
    6278:	b209      	sxth	r1, r1
    627a:	e674      	b.n	5f66 <uECC_verify+0x4de>
    627c:	fffffde0 	.word	0xfffffde0
    6280:	fffffe00 	.word	0xfffffe00
    6284:	3fffffff 	.word	0x3fffffff
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    6288:	464b      	mov	r3, r9
    return (i + 1);
    628a:	3301      	adds	r3, #1
    628c:	b25b      	sxtb	r3, r3
        return 0;
    628e:	2000      	movs	r0, #0
    if (num_digits == 0) {
    6290:	2b00      	cmp	r3, #0
    6292:	d100      	bne.n	6296 <uECC_verify+0x80e>
    6294:	e681      	b.n	5f9a <uECC_verify+0x512>
    digit = vli[num_digits - 1];
    6296:	a89e      	add	r0, sp, #632	; 0x278
    6298:	4684      	mov	ip, r0
    629a:	4a1a      	ldr	r2, [pc, #104]	; (6304 <uECC_verify+0x87c>)
    629c:	481a      	ldr	r0, [pc, #104]	; (6308 <uECC_verify+0x880>)
    629e:	189a      	adds	r2, r3, r2
    62a0:	0092      	lsls	r2, r2, #2
    62a2:	4462      	add	r2, ip
    62a4:	4684      	mov	ip, r0
    62a6:	4462      	add	r2, ip
    62a8:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    62aa:	2000      	movs	r0, #0
    62ac:	b122      	cbz	r2, 62b8 <uECC_verify+0x830>
        digit >>= 1;
    62ae:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    62b0:	3001      	adds	r0, #1
    62b2:	2a00      	cmp	r2, #0
    62b4:	d1fb      	bne.n	62ae <uECC_verify+0x826>
    62b6:	b280      	uxth	r0, r0
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    62b8:	3b01      	subs	r3, #1
    62ba:	015b      	lsls	r3, r3, #5
    62bc:	18c0      	adds	r0, r0, r3
    62be:	b200      	sxth	r0, r0
    62c0:	e66b      	b.n	5f9a <uECC_verify+0x512>
    62c2:	0022      	movs	r2, r4
    62c4:	2100      	movs	r1, #0
    62c6:	4640      	mov	r0, r8
    62c8:	47d8      	blx	fp
    62ca:	e5f0      	b.n	5eae <uECC_verify+0x426>
    62cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    62ce:	2100      	movs	r1, #0
    62d0:	4640      	mov	r0, r8
    62d2:	47d8      	blx	fp
    62d4:	e745      	b.n	6162 <uECC_verify+0x6da>
    62d6:	f246 7b75 	movw	fp, #26485	; 0x6775
    62da:	ab26      	add	r3, sp, #152	; 0x98
    62dc:	2100      	movs	r1, #0
    62de:	0018      	movs	r0, r3
    62e0:	f2c0 0b00 	movt	fp, #0
    62e4:	4698      	mov	r8, r3
    62e6:	47d8      	blx	fp
    62e8:	e55c      	b.n	5da4 <uECC_verify+0x31c>
        dest[i] = src[i];
    62ea:	2304      	movs	r3, #4
    62ec:	930d      	str	r3, [sp, #52]	; 0x34
    62ee:	001a      	movs	r2, r3
    62f0:	e5a6      	b.n	5e40 <uECC_verify+0x3b8>
    62f2:	f246 7b75 	movw	fp, #26485	; 0x6775
    62f6:	ab26      	add	r3, sp, #152	; 0x98
    62f8:	f2c0 0b00 	movt	fp, #0
    62fc:	4698      	mov	r8, r3
    62fe:	e551      	b.n	5da4 <uECC_verify+0x31c>
        vli[i] = 0;
    6300:	2204      	movs	r2, #4
    6302:	e528      	b.n	5d56 <uECC_verify+0x2ce>
    6304:	3fffffff 	.word	0x3fffffff
    6308:	fffffe00 	.word	0xfffffe00

0000630c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    630c:	e7fe      	b.n	630c <Dummy_Handler>
    630e:	46c0      	nop			; (mov r8, r8)

00006310 <Oak_Handler>:
        while (1) {
        }
}

void Oak_Handler(void)
{
    6310:	e7fe      	b.n	6310 <Oak_Handler>
    6312:	46c0      	nop			; (mov r8, r8)

00006314 <Reset_Handler>:
        if (pSrc != pDest) {
    6314:	f646 517c 	movw	r1, #28028	; 0x6d7c
    6318:	f240 0000 	movw	r0, #0
    631c:	f2c0 0100 	movt	r1, #0
    6320:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    6324:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    6326:	4281      	cmp	r1, r0
    6328:	d00f      	beq.n	634a <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    632a:	f240 03ec 	movw	r3, #236	; 0xec
    632e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6332:	4298      	cmp	r0, r3
    6334:	d209      	bcs.n	634a <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    6336:	43c2      	mvns	r2, r0
    6338:	18d2      	adds	r2, r2, r3
    633a:	f246 733f 	movw	r3, #26431	; 0x673f
    633e:	0892      	lsrs	r2, r2, #2
    6340:	3201      	adds	r2, #1
    6342:	0092      	lsls	r2, r2, #2
    6344:	f2c0 0300 	movt	r3, #0
    6348:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    634a:	f240 00ec 	movw	r0, #236	; 0xec
    634e:	f240 1320 	movw	r3, #288	; 0x120
    6352:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6356:	f2c2 0300 	movt	r3, #8192	; 0x2000
    635a:	4298      	cmp	r0, r3
    635c:	d20a      	bcs.n	6374 <Reset_Handler+0x60>
                *pDest++ = 0;
    635e:	43c2      	mvns	r2, r0
    6360:	18d2      	adds	r2, r2, r3
    6362:	f246 7375 	movw	r3, #26485	; 0x6775
    6366:	0892      	lsrs	r2, r2, #2
    6368:	3201      	adds	r2, #1
    636a:	0092      	lsls	r2, r2, #2
    636c:	2100      	movs	r1, #0
    636e:	f2c0 0300 	movt	r3, #0
    6372:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6374:	f240 0300 	movw	r3, #0
    6378:	227f      	movs	r2, #127	; 0x7f
    637a:	f2c0 0300 	movt	r3, #0
    637e:	4393      	bics	r3, r2
    6380:	f64e 5200 	movw	r2, #60672	; 0xed00
    6384:	f2ce 0200 	movt	r2, #57344	; 0xe000
    6388:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    638a:	f246 63bd 	movw	r3, #26301	; 0x66bd
    638e:	f2c0 0300 	movt	r3, #0
    6392:	4798      	blx	r3
        main();
    6394:	f246 33b5 	movw	r3, #25525	; 0x63b5
    6398:	f2c0 0300 	movt	r3, #0
    639c:	4798      	blx	r3
    639e:	e7fe      	b.n	639e <Reset_Handler+0x8a>

000063a0 <SystemInit>:
    63a0:	f240 0304 	movw	r3, #4
    63a4:	f640 1200 	movw	r2, #2304	; 0x900
    63a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63ac:	f2c0 023d 	movt	r2, #61	; 0x3d
    63b0:	601a      	str	r2, [r3, #0]
    63b2:	4770      	bx	lr

000063b4 <main>:
int main(void)
{
	funcptr_void NonSecure_ResetHandler;
  	
	/* Initialize the SAM system */
    SystemInit();
    63b4:	f246 33a1 	movw	r3, #25505	; 0x63a1
{
    63b8:	b510      	push	{r4, lr}
    SystemInit();
    63ba:	f2c0 0300 	movt	r3, #0
    63be:	4798      	blx	r3
	
	// Switch to 16MHz clock (disable prescaler)
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL_OSC16MCTRL_ENABLE | OSCCTRL_OSC16MCTRL_FSEL_16;
    63c0:	f241 0300 	movw	r3, #4096	; 0x1000
    63c4:	220e      	movs	r2, #14
    63c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    63ca:	761a      	strb	r2, [r3, #24]
	
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
    63cc:	f243 2300 	movw	r3, #12800	; 0x3200
    63d0:	f240 32a0 	movw	r2, #928	; 0x3a0
    63d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    63d8:	f2c0 3240 	movt	r2, #832	; 0x340
    63dc:	66da      	str	r2, [r3, #108]	; 0x6c
	NVMCTRL_SEC->NONSEC.bit.WRITE = 1;
    63de:	f245 0300 	movw	r3, #20480	; 0x5000
    63e2:	2101      	movs	r1, #1
    63e4:	f2c4 1300 	movt	r3, #16640	; 0x4100
    63e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    63ea:	430a      	orrs	r2, r1
    63ec:	641a      	str	r2, [r3, #64]	; 0x40

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
    63ee:	f24e 1300 	movw	r3, #57600	; 0xe100
    63f2:	f240 2280 	movw	r2, #640	; 0x280
    63f6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    63fa:	3103      	adds	r1, #3
    63fc:	5099      	str	r1, [r3, r2]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
    63fe:	3104      	adds	r1, #4
    6400:	3204      	adds	r2, #4
    6402:	5099      	str	r1, [r3, r2]

	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(TZ_START_NS)));
    6404:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    6408:	681b      	ldr	r3, [r3, #0]
    640a:	f383 8888 	msr	MSP_NS, r3
  
	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((TZ_START_NS) + 4U)));
    640e:	f248 0304 	movw	r3, #32772	; 0x8004
  
	/* Start non-secure state software application */
	NonSecure_ResetHandler();
    6412:	681c      	ldr	r4, [r3, #0]
    6414:	0864      	lsrs	r4, r4, #1
    6416:	0064      	lsls	r4, r4, #1
    6418:	0020      	movs	r0, r4
    641a:	0021      	movs	r1, r4
    641c:	0022      	movs	r2, r4
    641e:	0023      	movs	r3, r4
    6420:	f000 f904 	bl	662c <__gnu_cmse_nonsecure_call>
    while (1) 
    {
		edsign_sign(nsig, pk, sk, m, 10);
		__NOP();
    }*/
}
    6424:	2000      	movs	r0, #0
    6426:	bd10      	pop	{r4, pc}

00006428 <_sbrk>:
caddr_t _sbrk( int incr )
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	
	if (heap == NULL) {
    6428:	f240 1308 	movw	r3, #264	; 0x108
    642c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6430:	681a      	ldr	r2, [r3, #0]
    6432:	b11a      	cbz	r2, 643c <_sbrk+0x14>
		heap = (unsigned char *) &(_sheap);
	}
	prev_heap = heap;
	heap += incr;
    6434:	1810      	adds	r0, r2, r0
    6436:	6018      	str	r0, [r3, #0]
	
	return (caddr_t) prev_heap;
}
    6438:	0010      	movs	r0, r2
    643a:	4770      	bx	lr
    643c:	f240 1220 	movw	r2, #288	; 0x120
    6440:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6444:	e7f6      	b.n	6434 <_sbrk+0xc>
    6446:	46c0      	nop			; (mov r8, r8)

00006448 <setState>:
uint8_t secure_state[32] = {0x01, 0xba, 0x47, 0x19, 0xc8, 0x0b, 0x6f, 0xe9, 0x11, 0xb0, 0x91, 0xa7, 0xc0, 0x51, 
	0x24, 0xb6, 0x4e, 0xee, 0xce, 0x96, 0x4e, 0x09, 0xc0, 0x58, 0xef, 0x8f, 0x98, 0x05, 0xda, 0xca, 0x54, 0x6b};
uint8_t exec = 0, stateUsed = 0, stateChecked = 0;

int setState(uint8_t *state, int state_size) {
	if(stateChecked != 1 || exec != 1) return 0;
    6448:	f240 1308 	movw	r3, #264	; 0x108
int setState(uint8_t *state, int state_size) {
    644c:	b570      	push	{r4, r5, r6, lr}
	if(stateChecked != 1 || exec != 1) return 0;
    644e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6452:	791a      	ldrb	r2, [r3, #4]
int setState(uint8_t *state, int state_size) {
    6454:	0005      	movs	r5, r0
    6456:	b0a2      	sub	sp, #136	; 0x88
    6458:	000e      	movs	r6, r1
	if(stateChecked != 1 || exec != 1) return 0;
    645a:	2000      	movs	r0, #0
    645c:	2a01      	cmp	r2, #1
    645e:	d001      	beq.n	6464 <setState+0x1c>
	//else {
	//	memset(secure_state, 0, 32);
	//	memcpy(secure_state, state, state_size);
	//}
	return 1;
}
    6460:	b022      	add	sp, #136	; 0x88
    6462:	bd70      	pop	{r4, r5, r6, pc}
	if(stateChecked != 1 || exec != 1) return 0;
    6464:	795b      	ldrb	r3, [r3, #5]
    6466:	2b01      	cmp	r3, #1
    6468:	d1fa      	bne.n	6460 <setState+0x18>
		sha256_initialize(&hash);
    646a:	f240 13cd 	movw	r3, #461	; 0x1cd
    646e:	4668      	mov	r0, sp
    6470:	f2c0 0300 	movt	r3, #0
    6474:	4798      	blx	r3
		sha256_finalize(&hash, state, state_size);
    6476:	f240 6395 	movw	r3, #1685	; 0x695
    647a:	0029      	movs	r1, r5
    647c:	4668      	mov	r0, sp
    647e:	0032      	movs	r2, r6
    6480:	f2c0 0300 	movt	r3, #0
    6484:	4798      	blx	r3
		memcpy(secure_state, hash.hash, 32);
    6486:	f240 0208 	movw	r2, #8
    648a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    648e:	0013      	movs	r3, r2
		sha256_initialize(&hash);
    6490:	466c      	mov	r4, sp
		memcpy(secure_state, hash.hash, 32);
    6492:	cc07      	ldmia	r4!, {r0, r1, r2}
    6494:	c307      	stmia	r3!, {r0, r1, r2}
    6496:	cc07      	ldmia	r4!, {r0, r1, r2}
    6498:	c307      	stmia	r3!, {r0, r1, r2}
	return 1;
    649a:	2001      	movs	r0, #1
		memcpy(secure_state, hash.hash, 32);
    649c:	cc06      	ldmia	r4!, {r1, r2}
    649e:	c306      	stmia	r3!, {r1, r2}
	return 1;
    64a0:	e7de      	b.n	6460 <setState+0x18>
    64a2:	46c0      	nop			; (mov r8, r8)

000064a4 <checkState>:

int checkState(uint8_t *state, int state_size) {
	sha256 hash;
	sha256_initialize(&hash);
    64a4:	f240 13cd 	movw	r3, #461	; 0x1cd
int checkState(uint8_t *state, int state_size) {
    64a8:	b530      	push	{r4, r5, lr}
    64aa:	b0a3      	sub	sp, #140	; 0x8c
    64ac:	0004      	movs	r4, r0
	sha256_initialize(&hash);
    64ae:	f2c0 0300 	movt	r3, #0
    64b2:	4668      	mov	r0, sp
int checkState(uint8_t *state, int state_size) {
    64b4:	000d      	movs	r5, r1
	sha256_initialize(&hash);
    64b6:	4798      	blx	r3
	sha256_finalize(&hash, state, state_size);
    64b8:	f240 6395 	movw	r3, #1685	; 0x695
    64bc:	002a      	movs	r2, r5
    64be:	0021      	movs	r1, r4
    64c0:	4668      	mov	r0, sp
    64c2:	f2c0 0300 	movt	r3, #0
    64c6:	4798      	blx	r3
	uint8_t cmp = (uint8_t) memcmp(secure_state, hash.hash, 32);
    64c8:	f240 0008 	movw	r0, #8
    64cc:	f246 7321 	movw	r3, #26401	; 0x6721
    64d0:	2220      	movs	r2, #32
    64d2:	4669      	mov	r1, sp
    64d4:	f2c0 0300 	movt	r3, #0
    64d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    64dc:	4798      	blx	r3
	stateChecked = (cmp == 0);
    64de:	f240 1308 	movw	r3, #264	; 0x108
    64e2:	b2c0      	uxtb	r0, r0
    64e4:	4242      	negs	r2, r0
    64e6:	4150      	adcs	r0, r2
	stateUsed = 1;
    64e8:	2201      	movs	r2, #1
	stateChecked = (cmp == 0);
    64ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    64ee:	7118      	strb	r0, [r3, #4]
	stateUsed = 1;
    64f0:	719a      	strb	r2, [r3, #6]
}
    64f2:	b023      	add	sp, #140	; 0x8c
    64f4:	bd30      	pop	{r4, r5, pc}
    64f6:	46c0      	nop			; (mov r8, r8)

000064f8 <pox>:
int optrand_rng( unsigned char *target, size_t num_bytes ) {
	memcpy( target, optrand_buffer, num_bytes );
	return 1;
}
	
void pox(pox_call_t *pox_fn, uint8_t *pox_token) {
    64f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    64fa:	464e      	mov	r6, r9
    64fc:	46de      	mov	lr, fp
    64fe:	4657      	mov	r7, sl
    6500:	4645      	mov	r5, r8
    6502:	b5e0      	push	{r5, r6, r7, lr}
    6504:	b0a7      	sub	sp, #156	; 0x9c
    6506:	0006      	movs	r6, r0
    6508:	9102      	str	r1, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
    650a:	b672      	cpsid	i
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
    650c:	f240 1508 	movw	r5, #264	; 0x108
    6510:	f2c2 0500 	movt	r5, #8192	; 0x2000
    6514:	6943      	ldr	r3, [r0, #20]
    6516:	68aa      	ldr	r2, [r5, #8]
    6518:	4293      	cmp	r3, r2
    651a:	d968      	bls.n	65ee <pox+0xf6>
	sha256_initialize(&hash);
    651c:	f240 18cd 	movw	r8, #461	; 0x1cd
    6520:	a804      	add	r0, sp, #16
    6522:	f2c0 0800 	movt	r8, #0
    6526:	47c0      	blx	r8
	sha256_update(&hash, &(pox_fn->counter), 4);
    6528:	f240 0c14 	movw	ip, #20
    652c:	f240 243d 	movw	r4, #573	; 0x23d
    6530:	44b4      	add	ip, r6
    6532:	4663      	mov	r3, ip
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6534:	f240 6a95 	movw	sl, #1685	; 0x695
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    6538:	f645 19f9 	movw	r9, #23033	; 0x59f9
	sha256_update(&hash, &(pox_fn->counter), 4);
    653c:	4661      	mov	r1, ip
    653e:	2204      	movs	r2, #4
    6540:	a804      	add	r0, sp, #16
    6542:	f2c0 0400 	movt	r4, #0
    6546:	9303      	str	r3, [sp, #12]
    6548:	47a0      	blx	r4
	sha256_update(&hash, &(pox_fn->addr), 4);
    654a:	2204      	movs	r2, #4
    654c:	0031      	movs	r1, r6
    654e:	a804      	add	r0, sp, #16
    6550:	47a0      	blx	r4
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6552:	f2c0 0a00 	movt	sl, #0
    6556:	68b2      	ldr	r2, [r6, #8]
    6558:	6871      	ldr	r1, [r6, #4]
    655a:	a804      	add	r0, sp, #16
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    655c:	f2c0 0900 	movt	r9, #0
	success = uECC_verify(vrf_pk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    6560:	f240 0b08 	movw	fp, #8
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6564:	47d0      	blx	sl
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    6566:	47c8      	blx	r9
	success = uECC_verify(vrf_pk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    6568:	f2c2 0b00 	movt	fp, #8192	; 0x2000
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    656c:	0003      	movs	r3, r0
	success = uECC_verify(vrf_pk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    656e:	f645 2789 	movw	r7, #23177	; 0x5a89
    6572:	4658      	mov	r0, fp
    6574:	9300      	str	r3, [sp, #0]
    6576:	3020      	adds	r0, #32
    6578:	9b02      	ldr	r3, [sp, #8]
    657a:	2220      	movs	r2, #32
    657c:	a904      	add	r1, sp, #16
    657e:	f2c0 0700 	movt	r7, #0
    6582:	47b8      	blx	r7
	if(success == 1) pox_fn->output[0] = 0xaa;
    6584:	2801      	cmp	r0, #1
    6586:	d04c      	beq.n	6622 <pox+0x12a>
	else pox_fn->output[0] = 0xff;
    6588:	23ff      	movs	r3, #255	; 0xff
    658a:	68f2      	ldr	r2, [r6, #12]
    658c:	7013      	strb	r3, [r2, #0]
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
    658e:	b370      	cbz	r0, 65ee <pox+0xf6>
	// Verify request
	if(check_request(pox_fn, pox_token) == 0) {
		return;
	}
	
	my_counter = pox_fn->counter;
    6590:	6973      	ldr	r3, [r6, #20]
	init_flags();
		
	// h <- Hash(PMEM, F, I, c)
	
	sha256 hash;
	sha256_initialize(&hash);
    6592:	a804      	add	r0, sp, #16
	my_counter = pox_fn->counter;
    6594:	60ab      	str	r3, [r5, #8]
	exec = 1; stateUsed = 0; stateChecked = 0;
    6596:	2301      	movs	r3, #1
    6598:	716b      	strb	r3, [r5, #5]
    659a:	2300      	movs	r3, #0
    659c:	71ab      	strb	r3, [r5, #6]
    659e:	712b      	strb	r3, [r5, #4]
	sha256_initialize(&hash);
    65a0:	47c0      	blx	r8
	sha256_update(&hash, &(pox_fn->counter), 4);
    65a2:	9903      	ldr	r1, [sp, #12]
    65a4:	a804      	add	r0, sp, #16
    65a6:	2204      	movs	r2, #4
    65a8:	47a0      	blx	r4
	sha256_update(&hash, &(pox_fn->addr), 4);
    65aa:	0031      	movs	r1, r6
    65ac:	a804      	add	r0, sp, #16
    65ae:	2204      	movs	r2, #4
    65b0:	47a0      	blx	r4
	sha256_update(&hash, pox_fn->input, pox_fn->input_size);
    65b2:	68b2      	ldr	r2, [r6, #8]
    65b4:	6871      	ldr	r1, [r6, #4]
    65b6:	a804      	add	r0, sp, #16
    65b8:	47a0      	blx	r4
	sha256_update(&hash, mem, mem_len);
    65ba:	f248 0200 	movw	r2, #32768	; 0x8000
    65be:	f248 0100 	movw	r1, #32768	; 0x8000
    65c2:	a804      	add	r0, sp, #16
    65c4:	47a0      	blx	r4
    65c6:	b672      	cpsid	i
	
	
	__disable_irq();
	void_function fn = (void_function)(pox_fn->addr);
	fn();
    65c8:	6834      	ldr	r4, [r6, #0]
    65ca:	0864      	lsrs	r4, r4, #1
    65cc:	0064      	lsls	r4, r4, #1
    65ce:	0020      	movs	r0, r4
    65d0:	0021      	movs	r1, r4
    65d2:	0022      	movs	r2, r4
    65d4:	0023      	movs	r3, r4
    65d6:	f000 f829 	bl	662c <__gnu_cmse_nonsecure_call>
	
	if(exec && stateUsed && !stateChecked) {
    65da:	796b      	ldrb	r3, [r5, #5]
    65dc:	b173      	cbz	r3, 65fc <pox+0x104>
    65de:	79ab      	ldrb	r3, [r5, #6]
    65e0:	b163      	cbz	r3, 65fc <pox+0x104>
    65e2:	792b      	ldrb	r3, [r5, #4]
    65e4:	b953      	cbnz	r3, 65fc <pox+0x104>
	exec = 0; stateUsed = 0; stateChecked = 0;
    65e6:	716b      	strb	r3, [r5, #5]
    65e8:	71ab      	strb	r3, [r5, #6]
    65ea:	712b      	strb	r3, [r5, #4]
  __ASM volatile ("cpsie i" : : : "memory");
    65ec:	b662      	cpsie	i
	#ifdef BENCHMARK_STACK
	uint32_t *out = (uint32_t*) (pox_fn->output);
	out[0] = stack_used();
	//out[0] = stack_pointer;
	#endif
}
    65ee:	b027      	add	sp, #156	; 0x9c
    65f0:	bc3c      	pop	{r2, r3, r4, r5}
    65f2:	4690      	mov	r8, r2
    65f4:	4699      	mov	r9, r3
    65f6:	46a2      	mov	sl, r4
    65f8:	46ab      	mov	fp, r5
    65fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sha256_finalize(&hash, pox_fn->output, pox_fn->output_size);
    65fc:	6932      	ldr	r2, [r6, #16]
    65fe:	68f1      	ldr	r1, [r6, #12]
    6600:	a804      	add	r0, sp, #16
    6602:	47d0      	blx	sl
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    6604:	47c8      	blx	r9
	uECC_sign(prv_sk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    6606:	f645 2405 	movw	r4, #23045	; 0x5a05
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    660a:	0003      	movs	r3, r0
	uECC_sign(prv_sk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    660c:	4658      	mov	r0, fp
    660e:	9300      	str	r3, [sp, #0]
    6610:	3060      	adds	r0, #96	; 0x60
    6612:	9b02      	ldr	r3, [sp, #8]
    6614:	2220      	movs	r2, #32
    6616:	a904      	add	r1, sp, #16
    6618:	f2c0 0400 	movt	r4, #0
    661c:	47a0      	blx	r4
	exec = 0; stateUsed = 0; stateChecked = 0;
    661e:	2300      	movs	r3, #0
    6620:	e7e1      	b.n	65e6 <pox+0xee>
	if(success == 1) pox_fn->output[0] = 0xaa;
    6622:	23aa      	movs	r3, #170	; 0xaa
    6624:	68f2      	ldr	r2, [r6, #12]
    6626:	7013      	strb	r3, [r2, #0]
    6628:	e7b2      	b.n	6590 <pox+0x98>
    662a:	46c0      	nop			; (mov r8, r8)

0000662c <__gnu_cmse_nonsecure_call>:
    662c:	b5e0      	push	{r5, r6, r7, lr}
    662e:	4645      	mov	r5, r8
    6630:	464e      	mov	r6, r9
    6632:	4657      	mov	r7, sl
    6634:	b4e0      	push	{r5, r6, r7}
    6636:	465d      	mov	r5, fp
    6638:	b420      	push	{r5}
    663a:	4625      	mov	r5, r4
    663c:	4626      	mov	r6, r4
    663e:	4627      	mov	r7, r4
    6640:	46a0      	mov	r8, r4
    6642:	46a1      	mov	r9, r4
    6644:	46a2      	mov	sl, r4
    6646:	46a3      	mov	fp, r4
    6648:	46a4      	mov	ip, r4
    664a:	f384 8800 	msr	CPSR_f, r4
    664e:	47a4      	blxns	r4
    6650:	bc20      	pop	{r5}
    6652:	46ab      	mov	fp, r5
    6654:	bce0      	pop	{r5, r6, r7}
    6656:	46ba      	mov	sl, r7
    6658:	46b1      	mov	r9, r6
    665a:	46a8      	mov	r8, r5
    665c:	bde0      	pop	{r5, r6, r7, pc}
	...

00006660 <__aeabi_lmul>:
    6660:	b5f0      	push	{r4, r5, r6, r7, lr}
    6662:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6666:	46ce      	mov	lr, r9
    6668:	4647      	mov	r7, r8
    666a:	002c      	movs	r4, r5
    666c:	4015      	ands	r5, r2
    666e:	4699      	mov	r9, r3
    6670:	002b      	movs	r3, r5
    6672:	4004      	ands	r4, r0
    6674:	0c16      	lsrs	r6, r2, #16
    6676:	b580      	push	{r7, lr}
    6678:	0c07      	lsrs	r7, r0, #16
    667a:	4363      	muls	r3, r4
    667c:	437d      	muls	r5, r7
    667e:	4377      	muls	r7, r6
    6680:	4366      	muls	r6, r4
    6682:	0c1c      	lsrs	r4, r3, #16
    6684:	1976      	adds	r6, r6, r5
    6686:	19a4      	adds	r4, r4, r6
    6688:	469c      	mov	ip, r3
    668a:	42a5      	cmp	r5, r4
    668c:	d903      	bls.n	6696 <__aeabi_lmul+0x36>
    668e:	2380      	movs	r3, #128	; 0x80
    6690:	025b      	lsls	r3, r3, #9
    6692:	4698      	mov	r8, r3
    6694:	4447      	add	r7, r8
    6696:	0c25      	lsrs	r5, r4, #16
    6698:	19ef      	adds	r7, r5, r7
    669a:	4663      	mov	r3, ip
    669c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    66a0:	401d      	ands	r5, r3
    66a2:	464b      	mov	r3, r9
    66a4:	4351      	muls	r1, r2
    66a6:	4343      	muls	r3, r0
    66a8:	0424      	lsls	r4, r4, #16
    66aa:	1964      	adds	r4, r4, r5
    66ac:	1859      	adds	r1, r3, r1
    66ae:	19c9      	adds	r1, r1, r7
    66b0:	0020      	movs	r0, r4
    66b2:	bc0c      	pop	{r2, r3}
    66b4:	4690      	mov	r8, r2
    66b6:	4699      	mov	r9, r3
    66b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66ba:	46c0      	nop			; (mov r8, r8)

000066bc <__libc_init_array>:
    66bc:	b570      	push	{r4, r5, r6, lr}
    66be:	2500      	movs	r5, #0
    66c0:	4b0e      	ldr	r3, [pc, #56]	; (66fc <__libc_init_array+0x40>)
    66c2:	4c0f      	ldr	r4, [pc, #60]	; (6700 <__libc_init_array+0x44>)
    66c4:	1ae4      	subs	r4, r4, r3
    66c6:	10a4      	asrs	r4, r4, #2
    66c8:	42a5      	cmp	r5, r4
    66ca:	d109      	bne.n	66e0 <__libc_init_array+0x24>
    66cc:	2500      	movs	r5, #0
    66ce:	f000 fb45 	bl	6d5c <_init>
    66d2:	4c0c      	ldr	r4, [pc, #48]	; (6704 <__libc_init_array+0x48>)
    66d4:	4b0c      	ldr	r3, [pc, #48]	; (6708 <__libc_init_array+0x4c>)
    66d6:	1ae4      	subs	r4, r4, r3
    66d8:	10a4      	asrs	r4, r4, #2
    66da:	42a5      	cmp	r5, r4
    66dc:	d107      	bne.n	66ee <__libc_init_array+0x32>
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	4a06      	ldr	r2, [pc, #24]	; (66fc <__libc_init_array+0x40>)
    66e2:	00ab      	lsls	r3, r5, #2
    66e4:	189b      	adds	r3, r3, r2
    66e6:	681b      	ldr	r3, [r3, #0]
    66e8:	4798      	blx	r3
    66ea:	3501      	adds	r5, #1
    66ec:	e7ec      	b.n	66c8 <__libc_init_array+0xc>
    66ee:	4a06      	ldr	r2, [pc, #24]	; (6708 <__libc_init_array+0x4c>)
    66f0:	00ab      	lsls	r3, r5, #2
    66f2:	189b      	adds	r3, r3, r2
    66f4:	681b      	ldr	r3, [r3, #0]
    66f6:	4798      	blx	r3
    66f8:	3501      	adds	r5, #1
    66fa:	e7ee      	b.n	66da <__libc_init_array+0x1e>
    66fc:	00006d68 	.word	0x00006d68
    6700:	00006d68 	.word	0x00006d68
    6704:	00006d6c 	.word	0x00006d6c
    6708:	00006d68 	.word	0x00006d68

0000670c <malloc>:
    670c:	b510      	push	{r4, lr}
    670e:	4b03      	ldr	r3, [pc, #12]	; (671c <malloc+0x10>)
    6710:	0001      	movs	r1, r0
    6712:	6818      	ldr	r0, [r3, #0]
    6714:	f000 f836 	bl	6784 <_malloc_r>
    6718:	bd10      	pop	{r4, pc}
    671a:	46c0      	nop			; (mov r8, r8)
    671c:	20000088 	.word	0x20000088

00006720 <memcmp>:
    6720:	b530      	push	{r4, r5, lr}
    6722:	2400      	movs	r4, #0
    6724:	42a2      	cmp	r2, r4
    6726:	d101      	bne.n	672c <memcmp+0xc>
    6728:	2000      	movs	r0, #0
    672a:	e005      	b.n	6738 <memcmp+0x18>
    672c:	5d03      	ldrb	r3, [r0, r4]
    672e:	1c65      	adds	r5, r4, #1
    6730:	5d0c      	ldrb	r4, [r1, r4]
    6732:	42a3      	cmp	r3, r4
    6734:	d001      	beq.n	673a <memcmp+0x1a>
    6736:	1b18      	subs	r0, r3, r4
    6738:	bd30      	pop	{r4, r5, pc}
    673a:	002c      	movs	r4, r5
    673c:	e7f2      	b.n	6724 <memcmp+0x4>

0000673e <memcpy>:
    673e:	2300      	movs	r3, #0
    6740:	b510      	push	{r4, lr}
    6742:	429a      	cmp	r2, r3
    6744:	d100      	bne.n	6748 <memcpy+0xa>
    6746:	bd10      	pop	{r4, pc}
    6748:	5ccc      	ldrb	r4, [r1, r3]
    674a:	54c4      	strb	r4, [r0, r3]
    674c:	3301      	adds	r3, #1
    674e:	e7f8      	b.n	6742 <memcpy+0x4>

00006750 <memmove>:
    6750:	b510      	push	{r4, lr}
    6752:	4288      	cmp	r0, r1
    6754:	d902      	bls.n	675c <memmove+0xc>
    6756:	188b      	adds	r3, r1, r2
    6758:	4298      	cmp	r0, r3
    675a:	d308      	bcc.n	676e <memmove+0x1e>
    675c:	2300      	movs	r3, #0
    675e:	429a      	cmp	r2, r3
    6760:	d007      	beq.n	6772 <memmove+0x22>
    6762:	5ccc      	ldrb	r4, [r1, r3]
    6764:	54c4      	strb	r4, [r0, r3]
    6766:	3301      	adds	r3, #1
    6768:	e7f9      	b.n	675e <memmove+0xe>
    676a:	5c8b      	ldrb	r3, [r1, r2]
    676c:	5483      	strb	r3, [r0, r2]
    676e:	3a01      	subs	r2, #1
    6770:	d2fb      	bcs.n	676a <memmove+0x1a>
    6772:	bd10      	pop	{r4, pc}

00006774 <memset>:
    6774:	0003      	movs	r3, r0
    6776:	1882      	adds	r2, r0, r2
    6778:	4293      	cmp	r3, r2
    677a:	d100      	bne.n	677e <memset+0xa>
    677c:	4770      	bx	lr
    677e:	7019      	strb	r1, [r3, #0]
    6780:	3301      	adds	r3, #1
    6782:	e7f9      	b.n	6778 <memset+0x4>

00006784 <_malloc_r>:
    6784:	2303      	movs	r3, #3
    6786:	b570      	push	{r4, r5, r6, lr}
    6788:	1ccd      	adds	r5, r1, #3
    678a:	439d      	bics	r5, r3
    678c:	3508      	adds	r5, #8
    678e:	0006      	movs	r6, r0
    6790:	2d0c      	cmp	r5, #12
    6792:	d21c      	bcs.n	67ce <_malloc_r+0x4a>
    6794:	250c      	movs	r5, #12
    6796:	42a9      	cmp	r1, r5
    6798:	d81b      	bhi.n	67d2 <_malloc_r+0x4e>
    679a:	0030      	movs	r0, r6
    679c:	f000 f89a 	bl	68d4 <__malloc_lock>
    67a0:	4a25      	ldr	r2, [pc, #148]	; (6838 <_malloc_r+0xb4>)
    67a2:	6814      	ldr	r4, [r2, #0]
    67a4:	0021      	movs	r1, r4
    67a6:	b9c1      	cbnz	r1, 67da <_malloc_r+0x56>
    67a8:	4c24      	ldr	r4, [pc, #144]	; (683c <_malloc_r+0xb8>)
    67aa:	6823      	ldr	r3, [r4, #0]
    67ac:	b91b      	cbnz	r3, 67b6 <_malloc_r+0x32>
    67ae:	0030      	movs	r0, r6
    67b0:	f000 f880 	bl	68b4 <_sbrk_r>
    67b4:	6020      	str	r0, [r4, #0]
    67b6:	0029      	movs	r1, r5
    67b8:	0030      	movs	r0, r6
    67ba:	f000 f87b 	bl	68b4 <_sbrk_r>
    67be:	1c43      	adds	r3, r0, #1
    67c0:	d12d      	bne.n	681e <_malloc_r+0x9a>
    67c2:	230c      	movs	r3, #12
    67c4:	0030      	movs	r0, r6
    67c6:	6033      	str	r3, [r6, #0]
    67c8:	f000 f885 	bl	68d6 <__malloc_unlock>
    67cc:	e003      	b.n	67d6 <_malloc_r+0x52>
    67ce:	2d00      	cmp	r5, #0
    67d0:	dae1      	bge.n	6796 <_malloc_r+0x12>
    67d2:	230c      	movs	r3, #12
    67d4:	6033      	str	r3, [r6, #0]
    67d6:	2000      	movs	r0, #0
    67d8:	bd70      	pop	{r4, r5, r6, pc}
    67da:	680b      	ldr	r3, [r1, #0]
    67dc:	1b5b      	subs	r3, r3, r5
    67de:	d41b      	bmi.n	6818 <_malloc_r+0x94>
    67e0:	2b0b      	cmp	r3, #11
    67e2:	d903      	bls.n	67ec <_malloc_r+0x68>
    67e4:	600b      	str	r3, [r1, #0]
    67e6:	18cc      	adds	r4, r1, r3
    67e8:	6025      	str	r5, [r4, #0]
    67ea:	e003      	b.n	67f4 <_malloc_r+0x70>
    67ec:	428c      	cmp	r4, r1
    67ee:	d10f      	bne.n	6810 <_malloc_r+0x8c>
    67f0:	6863      	ldr	r3, [r4, #4]
    67f2:	6013      	str	r3, [r2, #0]
    67f4:	0030      	movs	r0, r6
    67f6:	f000 f86e 	bl	68d6 <__malloc_unlock>
    67fa:	0020      	movs	r0, r4
    67fc:	2207      	movs	r2, #7
    67fe:	300b      	adds	r0, #11
    6800:	1d23      	adds	r3, r4, #4
    6802:	4390      	bics	r0, r2
    6804:	1ac3      	subs	r3, r0, r3
    6806:	2b00      	cmp	r3, #0
    6808:	d0e6      	beq.n	67d8 <_malloc_r+0x54>
    680a:	425a      	negs	r2, r3
    680c:	50e2      	str	r2, [r4, r3]
    680e:	e7e3      	b.n	67d8 <_malloc_r+0x54>
    6810:	684b      	ldr	r3, [r1, #4]
    6812:	6063      	str	r3, [r4, #4]
    6814:	000c      	movs	r4, r1
    6816:	e7ed      	b.n	67f4 <_malloc_r+0x70>
    6818:	000c      	movs	r4, r1
    681a:	6849      	ldr	r1, [r1, #4]
    681c:	e7c3      	b.n	67a6 <_malloc_r+0x22>
    681e:	2303      	movs	r3, #3
    6820:	1cc4      	adds	r4, r0, #3
    6822:	439c      	bics	r4, r3
    6824:	42a0      	cmp	r0, r4
    6826:	d0df      	beq.n	67e8 <_malloc_r+0x64>
    6828:	1a21      	subs	r1, r4, r0
    682a:	0030      	movs	r0, r6
    682c:	f000 f842 	bl	68b4 <_sbrk_r>
    6830:	1c43      	adds	r3, r0, #1
    6832:	d1d9      	bne.n	67e8 <_malloc_r+0x64>
    6834:	e7c5      	b.n	67c2 <_malloc_r+0x3e>
    6836:	46c0      	nop			; (mov r8, r8)
    6838:	20000114 	.word	0x20000114
    683c:	20000118 	.word	0x20000118

00006840 <rand>:
    6840:	4b16      	ldr	r3, [pc, #88]	; (689c <rand+0x5c>)
    6842:	b510      	push	{r4, lr}
    6844:	681c      	ldr	r4, [r3, #0]
    6846:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6848:	b9bb      	cbnz	r3, 687a <rand+0x3a>
    684a:	2018      	movs	r0, #24
    684c:	f7ff ff5e 	bl	670c <malloc>
    6850:	f243 330e 	movw	r3, #13070	; 0x330e
    6854:	63a0      	str	r0, [r4, #56]	; 0x38
    6856:	8003      	strh	r3, [r0, #0]
    6858:	4b11      	ldr	r3, [pc, #68]	; (68a0 <rand+0x60>)
    685a:	2201      	movs	r2, #1
    685c:	8043      	strh	r3, [r0, #2]
    685e:	f241 2334 	movw	r3, #4660	; 0x1234
    6862:	8083      	strh	r3, [r0, #4]
    6864:	4b0f      	ldr	r3, [pc, #60]	; (68a4 <rand+0x64>)
    6866:	80c3      	strh	r3, [r0, #6]
    6868:	4b0f      	ldr	r3, [pc, #60]	; (68a8 <rand+0x68>)
    686a:	8103      	strh	r3, [r0, #8]
    686c:	2305      	movs	r3, #5
    686e:	8143      	strh	r3, [r0, #10]
    6870:	3306      	adds	r3, #6
    6872:	8183      	strh	r3, [r0, #12]
    6874:	2300      	movs	r3, #0
    6876:	6102      	str	r2, [r0, #16]
    6878:	6143      	str	r3, [r0, #20]
    687a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    687c:	4a0b      	ldr	r2, [pc, #44]	; (68ac <rand+0x6c>)
    687e:	6920      	ldr	r0, [r4, #16]
    6880:	6961      	ldr	r1, [r4, #20]
    6882:	4b0b      	ldr	r3, [pc, #44]	; (68b0 <rand+0x70>)
    6884:	f7ff feec 	bl	6660 <__aeabi_lmul>
    6888:	2201      	movs	r2, #1
    688a:	2300      	movs	r3, #0
    688c:	1880      	adds	r0, r0, r2
    688e:	4159      	adcs	r1, r3
    6890:	6120      	str	r0, [r4, #16]
    6892:	6161      	str	r1, [r4, #20]
    6894:	0048      	lsls	r0, r1, #1
    6896:	0840      	lsrs	r0, r0, #1
    6898:	bd10      	pop	{r4, pc}
    689a:	46c0      	nop			; (mov r8, r8)
    689c:	20000088 	.word	0x20000088
    68a0:	ffffabcd 	.word	0xffffabcd
    68a4:	ffffe66d 	.word	0xffffe66d
    68a8:	ffffdeec 	.word	0xffffdeec
    68ac:	4c957f2d 	.word	0x4c957f2d
    68b0:	5851f42d 	.word	0x5851f42d

000068b4 <_sbrk_r>:
    68b4:	2300      	movs	r3, #0
    68b6:	b570      	push	{r4, r5, r6, lr}
    68b8:	4c05      	ldr	r4, [pc, #20]	; (68d0 <_sbrk_r+0x1c>)
    68ba:	0005      	movs	r5, r0
    68bc:	0008      	movs	r0, r1
    68be:	6023      	str	r3, [r4, #0]
    68c0:	f7ff fdb2 	bl	6428 <_sbrk>
    68c4:	1c43      	adds	r3, r0, #1
    68c6:	d102      	bne.n	68ce <_sbrk_r+0x1a>
    68c8:	6823      	ldr	r3, [r4, #0]
    68ca:	b103      	cbz	r3, 68ce <_sbrk_r+0x1a>
    68cc:	602b      	str	r3, [r5, #0]
    68ce:	bd70      	pop	{r4, r5, r6, pc}
    68d0:	2000011c 	.word	0x2000011c

000068d4 <__malloc_lock>:
    68d4:	4770      	bx	lr

000068d6 <__malloc_unlock>:
    68d6:	4770      	bx	lr
    68d8:	428a2f98 	.word	0x428a2f98
    68dc:	71374491 	.word	0x71374491
    68e0:	b5c0fbcf 	.word	0xb5c0fbcf
    68e4:	e9b5dba5 	.word	0xe9b5dba5
    68e8:	3956c25b 	.word	0x3956c25b
    68ec:	59f111f1 	.word	0x59f111f1
    68f0:	923f82a4 	.word	0x923f82a4
    68f4:	ab1c5ed5 	.word	0xab1c5ed5
    68f8:	d807aa98 	.word	0xd807aa98
    68fc:	12835b01 	.word	0x12835b01
    6900:	243185be 	.word	0x243185be
    6904:	550c7dc3 	.word	0x550c7dc3
    6908:	72be5d74 	.word	0x72be5d74
    690c:	80deb1fe 	.word	0x80deb1fe
    6910:	9bdc06a7 	.word	0x9bdc06a7
    6914:	c19bf174 	.word	0xc19bf174
    6918:	e49b69c1 	.word	0xe49b69c1
    691c:	efbe4786 	.word	0xefbe4786
    6920:	0fc19dc6 	.word	0x0fc19dc6
    6924:	240ca1cc 	.word	0x240ca1cc
    6928:	2de92c6f 	.word	0x2de92c6f
    692c:	4a7484aa 	.word	0x4a7484aa
    6930:	5cb0a9dc 	.word	0x5cb0a9dc
    6934:	76f988da 	.word	0x76f988da
    6938:	983e5152 	.word	0x983e5152
    693c:	a831c66d 	.word	0xa831c66d
    6940:	b00327c8 	.word	0xb00327c8
    6944:	bf597fc7 	.word	0xbf597fc7
    6948:	c6e00bf3 	.word	0xc6e00bf3
    694c:	d5a79147 	.word	0xd5a79147
    6950:	06ca6351 	.word	0x06ca6351
    6954:	14292967 	.word	0x14292967
    6958:	27b70a85 	.word	0x27b70a85
    695c:	2e1b2138 	.word	0x2e1b2138
    6960:	4d2c6dfc 	.word	0x4d2c6dfc
    6964:	53380d13 	.word	0x53380d13
    6968:	650a7354 	.word	0x650a7354
    696c:	766a0abb 	.word	0x766a0abb
    6970:	81c2c92e 	.word	0x81c2c92e
    6974:	92722c85 	.word	0x92722c85
    6978:	a2bfe8a1 	.word	0xa2bfe8a1
    697c:	a81a664b 	.word	0xa81a664b
    6980:	c24b8b70 	.word	0xc24b8b70
    6984:	c76c51a3 	.word	0xc76c51a3
    6988:	d192e819 	.word	0xd192e819
    698c:	d6990624 	.word	0xd6990624
    6990:	f40e3585 	.word	0xf40e3585
    6994:	106aa070 	.word	0x106aa070
    6998:	19a4c116 	.word	0x19a4c116
    699c:	1e376c08 	.word	0x1e376c08
    69a0:	2748774c 	.word	0x2748774c
    69a4:	34b0bcb5 	.word	0x34b0bcb5
    69a8:	391c0cb3 	.word	0x391c0cb3
    69ac:	4ed8aa4a 	.word	0x4ed8aa4a
    69b0:	5b9cca4f 	.word	0x5b9cca4f
    69b4:	682e6ff3 	.word	0x682e6ff3
    69b8:	748f82ee 	.word	0x748f82ee
    69bc:	78a5636f 	.word	0x78a5636f
    69c0:	84c87814 	.word	0x84c87814
    69c4:	8cc70208 	.word	0x8cc70208
    69c8:	90befffa 	.word	0x90befffa
    69cc:	a4506ceb 	.word	0xa4506ceb
    69d0:	bef9a3f7 	.word	0xbef9a3f7
    69d4:	c67178f2 	.word	0xc67178f2

000069d8 <curve_secp224r1>:
    69d8:	00e01c07 00000001 00000000 00000000     ................
    69e8:	ffffffff ffffffff ffffffff ffffffff     ................
    69f8:	00000000 5c5c2a3d 13dd2945 e0b8f03e     ....=*\\E)..>...
    6a08:	ffff16a2 ffffffff ffffffff ffffffff     ................
    6a18:	00000000 115c1d21 343280d6 56c21122     ....!.\...24"..V
    6a28:	4a03c1d3 321390b9 6bb4bf7f b70e0cbd     ...J...2...k....
    6a38:	85007e34 44d58199 5a074764 cd4375a0     4~.....DdG.Z.uC.
    6a48:	4c22dfe6 b5f723fb bd376388 00000000     .."L.#...c7.....
    6a58:	00000000 2355ffb4 270b3943 d7bfd8ba     ......U#C9.'....
    6a68:	5044b0b7 f5413256 0c04b3ab b4050a85     ..DPV2A.........
    6a78:	00000000 000056f1 000042e1 00001e21     .....V...B..!...
    6a88:	00000f31                                1...

00006a8c <curve_secp160r1>:
    6a8c:	00a11405 7fffffff ffffffff ffffffff     ................
    6a9c:	ffffffff ffffffff 00000000 00000000     ................
    6aac:	00000000 ca752257 f927aed3 0001f4c8     ....W"u...'.....
	...
    6ac4:	00000001 00000000 00000000 13cbfc82     ................
    6ad4:	68c38bb9 46646989 8ef57328 4a96b568     ...h.idF(s..h..J
    6ae4:	7ac5fb32 04235137 59dcc912 3168947d     2..z7Q#....Y}.h1
    6af4:	23a62855 00000000 00000000 00000000     U(.#............
	...
    6b10:	c565fa45 81d4d4ad 65acf89f 54bd7a8b     E.e........e.z.T
    6b20:	1c97befc 00000000 00000000 00000000     ................
    6b30:	000056f1 00001685 00001e21 00001ac1     .V......!.......

00006b40 <curve_secp192r1>:
    6b40:	00c01806 ffffffff ffffffff fffffffe     ................
    6b50:	ffffffff ffffffff ffffffff 00000000     ................
    6b60:	00000000 b4d22831 146bc9b1 99def836     ....1(....k.6...
    6b70:	ffffffff ffffffff ffffffff 00000000     ................
    6b80:	00000000 82ff1012 f4ff0afd 43a18800     ...............C
    6b90:	7cbf20eb b03090f6 188da80e 1e794811     . .|..0......Hy.
    6ba0:	73f977a1 6b24cdd5 631011ed ffc8da78     .w.s..$k...cx...
    6bb0:	07192b95 00000000 00000000 00000000     .+..............
    6bc0:	00000000 c146b9b1 feb8deec 72243049     ......F.....I0$r
    6bd0:	0fa7e9ab e59c80e7 64210519 00000000     ..........!d....
    6be0:	00000000 000056f1 00001685 00001e21     .....V......!...
    6bf0:	000020d1                                . ..

00006bf4 <curve_secp256k1>:
    6bf4:	01002008 fffffc2f fffffffe ffffffff     . ../...........
    6c04:	ffffffff ffffffff ffffffff ffffffff     ................
    6c14:	ffffffff d0364141 bfd25e8c af48a03b     ....AA6..^..;.H.
    6c24:	baaedce6 fffffffe ffffffff ffffffff     ................
    6c34:	ffffffff 16f81798 59f2815b 2dce28d9     ........[..Y.(.-
    6c44:	029bfcdb ce870b07 55a06295 f9dcbbac     .........b.U....
    6c54:	79be667e fb10d4b8 9c47d08f a6855419     ~f.y......G..T..
    6c64:	fd17b448 0e1108a8 5da4fbfc 26a3c465     H..........]e..&
    6c74:	483ada77 00000007 00000000 00000000     w.:H............
	...
    6c98:	000038dd 00001685 00001f61 00002311     .8......a....#..

00006ca8 <curve_secp256r1>:
    6ca8:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
    6cc4:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
    6cd4:	a7179e84 bce6faad ffffffff ffffffff     ................
    6ce4:	00000000 ffffffff d898c296 f4a13945     ............E9..
    6cf4:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
    6d04:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
    6d14:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
    6d24:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
    6d34:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
    6d44:	aa3a93e7 5ac635d8 000056f1 00001685     ..:..5.Z.V......
    6d54:	00001e21 00002b31                       !...1+..

00006d5c <_init>:
    6d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d5e:	46c0      	nop			; (mov r8, r8)
    6d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d62:	bc08      	pop	{r3}
    6d64:	469e      	mov	lr, r3
    6d66:	4770      	bx	lr

00006d68 <__init_array_start>:
    6d68:	0000018d 	.word	0x0000018d

00006d6c <_fini>:
    6d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d6e:	46c0      	nop			; (mov r8, r8)
    6d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6d72:	bc08      	pop	{r3}
    6d74:	469e      	mov	lr, r3
    6d76:	4770      	bx	lr

00006d78 <__fini_array_start>:
    6d78:	00000161 	.word	0x00000161

Disassembly of section .gnu.sgstubs:

00007c00 <secure_pox>:
    7c00:	e97f e97f 	sg
    7c04:	f7f8 ba9a 	b.w	13c <__acle_se_secure_pox>

00007c08 <secure_checkState>:
    7c08:	e97f e97f 	sg
    7c0c:	f7f8 ba72 	b.w	f4 <__acle_se_secure_checkState>

00007c10 <secure_setState>:
    7c10:	e97f e97f 	sg
    7c14:	f7f8 ba80 	b.w	118 <__acle_se_secure_setState>
	...
