
NonSecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000175c  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000975c  0000975c  0000975c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000068  20002000  00009764  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000046c  20002068  000097d0  00012068  2**3
                  ALLOC
  4 .heap         00000204  200024d4  00009c3c  00012068  2**0
                  ALLOC
  5 .stack        00001000  200026d8  00009e40  00012068  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  00012068  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00012094  2**0
                  CONTENTS, READONLY
  8 .debug_info   00008eaa  00000000  00000000  000120ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000e9a  00000000  00000000  0001af97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010b4  00000000  00000000  0001be31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000160  00000000  00000000  0001cee5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  0001d045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00014b8a  00000000  00000000  0001d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002a8c  00000000  00000000  00032047  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008595c  00000000  00000000  00034ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000082c  00000000  00000000  000ba430  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      000000df  00000000  00000000  000bac5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	d8 36 00 20 65 81 00 00 61 81 00 00 61 81 00 00     .6. e...a...a...
	...
    802c:	61 81 00 00 00 00 00 00 00 00 00 00 61 81 00 00     a...........a...
    803c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    804c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    805c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    806c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    807c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    808c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    809c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80ac:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80bc:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80cc:	6d 82 00 00 61 81 00 00 61 81 00 00 61 81 00 00     m...a...a...a...
    80dc:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80ec:	61 81 00 00 61 81 00 00                             a...a...

000080f4 <__do_global_dtors_aux>:
    80f4:	b510      	push	{r4, lr}
    80f6:	f242 0468 	movw	r4, #8296	; 0x2068
    80fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
    80fe:	7823      	ldrb	r3, [r4, #0]
    8100:	b963      	cbnz	r3, 811c <__do_global_dtors_aux+0x28>
    8102:	f240 0300 	movw	r3, #0
    8106:	f2c0 0300 	movt	r3, #0
    810a:	b12b      	cbz	r3, 8118 <__do_global_dtors_aux+0x24>
    810c:	f249 7064 	movw	r0, #38756	; 0x9764
    8110:	f2c0 0000 	movt	r0, #0
    8114:	e000      	b.n	8118 <__do_global_dtors_aux+0x24>
    8116:	bf00      	nop
    8118:	2301      	movs	r3, #1
    811a:	7023      	strb	r3, [r4, #0]
    811c:	bd10      	pop	{r4, pc}
    811e:	46c0      	nop			; (mov r8, r8)

00008120 <frame_dummy>:
    8120:	f240 0300 	movw	r3, #0
    8124:	f2c0 0300 	movt	r3, #0
    8128:	b510      	push	{r4, lr}
    812a:	b14b      	cbz	r3, 8140 <frame_dummy+0x20>
    812c:	f242 016c 	movw	r1, #8300	; 0x206c
    8130:	f249 7064 	movw	r0, #38756	; 0x9764
    8134:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8138:	f2c0 0000 	movt	r0, #0
    813c:	e000      	b.n	8140 <frame_dummy+0x20>
    813e:	bf00      	nop
    8140:	f249 7064 	movw	r0, #38756	; 0x9764
    8144:	f2c0 0000 	movt	r0, #0
    8148:	6803      	ldr	r3, [r0, #0]
    814a:	b903      	cbnz	r3, 814e <frame_dummy+0x2e>
    814c:	bd10      	pop	{r4, pc}
    814e:	f240 0300 	movw	r3, #0
    8152:	f2c0 0300 	movt	r3, #0
    8156:	2b00      	cmp	r3, #0
    8158:	d0f8      	beq.n	814c <frame_dummy+0x2c>
    815a:	4798      	blx	r3
    815c:	e7f6      	b.n	814c <frame_dummy+0x2c>
    815e:	46c0      	nop			; (mov r8, r8)

00008160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8160:	e7fe      	b.n	8160 <Dummy_Handler>
    8162:	46c0      	nop			; (mov r8, r8)

00008164 <Reset_Handler>:
        if (pSrc != pDest) {
    8164:	f249 7164 	movw	r1, #38756	; 0x9764
    8168:	f242 0000 	movw	r0, #8192	; 0x2000
    816c:	f2c0 0100 	movt	r1, #0
    8170:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    8174:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8176:	4281      	cmp	r1, r0
    8178:	d00f      	beq.n	819a <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    817a:	f242 0368 	movw	r3, #8296	; 0x2068
    817e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8182:	4298      	cmp	r0, r3
    8184:	d209      	bcs.n	819a <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    8186:	43c2      	mvns	r2, r0
    8188:	18d2      	adds	r2, r2, r3
    818a:	f648 537d 	movw	r3, #36221	; 0x8d7d
    818e:	0892      	lsrs	r2, r2, #2
    8190:	3201      	adds	r2, #1
    8192:	0092      	lsls	r2, r2, #2
    8194:	f2c0 0300 	movt	r3, #0
    8198:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    819a:	f242 0068 	movw	r0, #8296	; 0x2068
    819e:	f242 43d4 	movw	r3, #9428	; 0x24d4
    81a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    81a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81aa:	4298      	cmp	r0, r3
    81ac:	d20a      	bcs.n	81c4 <Reset_Handler+0x60>
                *pDest++ = 0;
    81ae:	43c2      	mvns	r2, r0
    81b0:	18d2      	adds	r2, r2, r3
    81b2:	f648 538f 	movw	r3, #36239	; 0x8d8f
    81b6:	0892      	lsrs	r2, r2, #2
    81b8:	3201      	adds	r2, #1
    81ba:	0092      	lsls	r2, r2, #2
    81bc:	2100      	movs	r1, #0
    81be:	f2c0 0300 	movt	r3, #0
    81c2:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    81c4:	f248 0300 	movw	r3, #32768	; 0x8000
    81c8:	227f      	movs	r2, #127	; 0x7f
    81ca:	f2c0 0300 	movt	r3, #0
    81ce:	4393      	bics	r3, r2
    81d0:	f64e 5200 	movw	r2, #60672	; 0xed00
    81d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    81d8:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    81da:	f648 532d 	movw	r3, #36141	; 0x8d2d
    81de:	f2c0 0300 	movt	r3, #0
    81e2:	4798      	blx	r3
        main();
    81e4:	f248 639d 	movw	r3, #34461	; 0x869d
    81e8:	f2c0 0300 	movt	r3, #0
    81ec:	4798      	blx	r3
    81ee:	e7fe      	b.n	81ee <Reset_Handler+0x8a>

000081f0 <timer_init>:
}

//-----------------------------------------------------------------------------
void timer_init(int period)
{
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    81f0:	f640 0300 	movw	r3, #2048	; 0x800
    81f4:	2120      	movs	r1, #32
{
    81f6:	b510      	push	{r4, lr}
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    81f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    81fc:	69da      	ldr	r2, [r3, #28]

	GCLK->PCHCTRL[TC1_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
	while (0 == (GCLK->PCHCTRL[TC1_GCLK_ID].reg & GCLK_PCHCTRL_CHEN));
    81fe:	24b8      	movs	r4, #184	; 0xb8
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    8200:	430a      	orrs	r2, r1
    8202:	61da      	str	r2, [r3, #28]
	GCLK->PCHCTRL[TC1_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    8204:	f641 4200 	movw	r2, #7168	; 0x1c00
    8208:	23b8      	movs	r3, #184	; 0xb8
    820a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    820e:	3120      	adds	r1, #32
    8210:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[TC1_GCLK_ID].reg & GCLK_PCHCTRL_CHEN));
    8212:	5913      	ldr	r3, [r2, r4]
    8214:	4219      	tst	r1, r3
    8216:	d0fc      	beq.n	8212 <timer_init+0x22>

	TC1->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_PRESCALER_DIV256 |
    8218:	f241 4300 	movw	r3, #5120	; 0x1400
    821c:	f240 6220 	movw	r2, #1568	; 0x620
    8220:	f2c4 2300 	movt	r3, #16896	; 0x4200
    8224:	601a      	str	r2, [r3, #0]
	TC_CTRLA_PRESCSYNC_RESYNC;

	TC1->COUNT16.WAVE.reg = TC_WAVE_WAVEGEN_MFRQ;
    8226:	2201      	movs	r2, #1
    8228:	731a      	strb	r2, [r3, #12]

	TC1->COUNT16.COUNT.reg = 0xfecd;
    822a:	4a0f      	ldr	r2, [pc, #60]	; (8268 <timer_init+0x78>)

	timer_set_period(period);

	TC1->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    822c:	2102      	movs	r1, #2
	TC1->COUNT16.COUNT.reg = 0xfecd;
    822e:	829a      	strh	r2, [r3, #20]
	TC1->COUNT16.CC[0].reg = (F_CPU / 1000ul / 256) * i;
    8230:	0142      	lsls	r2, r0, #5
    8232:	1a12      	subs	r2, r2, r0
    8234:	0052      	lsls	r2, r2, #1
    8236:	b292      	uxth	r2, r2
    8238:	839a      	strh	r2, [r3, #28]
	TC1->COUNT16.COUNT.reg = 0;
    823a:	2200      	movs	r2, #0
    823c:	829a      	strh	r2, [r3, #20]
	TC1->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    823e:	681a      	ldr	r2, [r3, #0]
    8240:	430a      	orrs	r2, r1
    8242:	601a      	str	r2, [r3, #0]

	TC1->COUNT16.INTENSET.reg = TC_INTENSET_MC(1);
    8244:	2210      	movs	r2, #16
    8246:	725a      	strb	r2, [r3, #9]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8248:	f24e 1300 	movw	r3, #57600	; 0xe100
    824c:	3a08      	subs	r2, #8
    824e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    8252:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(TC1_IRQn);
	
	cur_period = period;
    8254:	f242 0388 	movw	r3, #8328	; 0x2088
    8258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825c:	6018      	str	r0, [r3, #0]
	num_overflows = 0;
    825e:	2100      	movs	r1, #0
    8260:	2000      	movs	r0, #0
    8262:	6098      	str	r0, [r3, #8]
    8264:	60d9      	str	r1, [r3, #12]
}
    8266:	bd10      	pop	{r4, pc}
    8268:	fffffecd 	.word	0xfffffecd

0000826c <TC1_Handler>:

void TC1_Handler(void)
{
	num_overflows++;
    826c:	f242 0388 	movw	r3, #8328	; 0x2088
    8270:	2001      	movs	r0, #1
    8272:	2100      	movs	r1, #0
    8274:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    8278:	b530      	push	{r4, r5, lr}
	num_overflows++;
    827a:	689c      	ldr	r4, [r3, #8]
    827c:	68dd      	ldr	r5, [r3, #12]
    827e:	1900      	adds	r0, r0, r4
    8280:	4169      	adcs	r1, r5
    8282:	6098      	str	r0, [r3, #8]
    8284:	60d9      	str	r1, [r3, #12]
	if (TC1->COUNT16.INTFLAG.reg & TC_INTFLAG_MC(1))
    8286:	f241 4300 	movw	r3, #5120	; 0x1400
    828a:	2210      	movs	r2, #16
    828c:	f2c4 2300 	movt	r3, #16896	; 0x4200
    8290:	7a99      	ldrb	r1, [r3, #10]
    8292:	420a      	tst	r2, r1
    8294:	d000      	beq.n	8298 <TC1_Handler+0x2c>
	{
		//HAL_GPIO_LED_toggle();
		TC1->COUNT16.INTFLAG.reg = TC_INTFLAG_MC(1);
    8296:	729a      	strb	r2, [r3, #10]
	}
}
    8298:	bd30      	pop	{r4, r5, pc}
    829a:	46c0      	nop			; (mov r8, r8)

0000829c <timer_reset>:
	return TC1->COUNT16.COUNT.reg;
}

void timer_reset()
{
	num_overflows = 0;	
    829c:	f242 0388 	movw	r3, #8328	; 0x2088
    82a0:	2000      	movs	r0, #0
    82a2:	2100      	movs	r1, #0
    82a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82a8:	6098      	str	r0, [r3, #8]
    82aa:	60d9      	str	r1, [r3, #12]
    82ac:	4770      	bx	lr
    82ae:	46c0      	nop			; (mov r8, r8)

000082b0 <uart_init>:
 */ 

#include "uart.h"

void uart_init(uint32_t baud)
{
    82b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint64_t br = (uint64_t)65536 * (F_CPU - 16 * baud) / F_CPU;
    82b2:	f242 4300 	movw	r3, #9216	; 0x2400
    82b6:	f2c0 03f4 	movt	r3, #244	; 0xf4
    82ba:	469c      	mov	ip, r3
    82bc:	f648 04f9 	movw	r4, #35065	; 0x88f9
    82c0:	f242 4200 	movw	r2, #9216	; 0x2400
    82c4:	0100      	lsls	r0, r0, #4
    82c6:	4240      	negs	r0, r0
    82c8:	4460      	add	r0, ip
    82ca:	0c01      	lsrs	r1, r0, #16
    82cc:	f2c0 0400 	movt	r4, #0
    82d0:	f2c0 02f4 	movt	r2, #244	; 0xf4
    82d4:	2300      	movs	r3, #0
    82d6:	0400      	lsls	r0, r0, #16
    82d8:	47a0      	blx	r4
  {										\
    PORT->Group[HAL_GPIO_PORT##port].PINCFG[pin].reg &= ~PORT_PINCFG_PMUXEN;\
    (void)HAL_GPIO_##name##_pmuxdis;						\
  }										\

  HAL_GPIO_PIN(UART_TX,  A, 24)
    82da:	f243 0300 	movw	r3, #12288	; 0x3000
    82de:	2280      	movs	r2, #128	; 0x80
    82e0:	2158      	movs	r1, #88	; 0x58
    82e2:	2402      	movs	r4, #2
    82e4:	2701      	movs	r7, #1
    82e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    82ea:	0452      	lsls	r2, r2, #17
    82ec:	609a      	str	r2, [r3, #8]
    82ee:	5c5a      	ldrb	r2, [r3, r1]
    82f0:	263c      	movs	r6, #60	; 0x3c
    82f2:	4322      	orrs	r2, r4
    82f4:	b2d2      	uxtb	r2, r2
    82f6:	545a      	strb	r2, [r3, r1]
    82f8:	5c5a      	ldrb	r2, [r3, r1]
    82fa:	433a      	orrs	r2, r7
    82fc:	b2d2      	uxtb	r2, r2
    82fe:	545a      	strb	r2, [r3, r1]
    8300:	220f      	movs	r2, #15
    8302:	5d99      	ldrb	r1, [r3, r6]
    8304:	4391      	bics	r1, r2
    8306:	4321      	orrs	r1, r4
    8308:	5599      	strb	r1, [r3, r6]
  HAL_GPIO_PIN(UART_RX,  A, 25)
    830a:	2180      	movs	r1, #128	; 0x80
    830c:	0489      	lsls	r1, r1, #18
    830e:	6059      	str	r1, [r3, #4]
    8310:	2159      	movs	r1, #89	; 0x59
    8312:	5c5d      	ldrb	r5, [r3, r1]
    8314:	4325      	orrs	r5, r4
    8316:	b2ed      	uxtb	r5, r5
    8318:	545d      	strb	r5, [r3, r1]
    831a:	2504      	movs	r5, #4
    831c:	5c5c      	ldrb	r4, [r3, r1]
    831e:	43ac      	bics	r4, r5
    8320:	545c      	strb	r4, [r3, r1]
    8322:	5c5c      	ldrb	r4, [r3, r1]
    8324:	433c      	orrs	r4, r7
    8326:	b2e4      	uxtb	r4, r4
    8328:	545c      	strb	r4, [r3, r1]
    832a:	5d99      	ldrb	r1, [r3, r6]
	HAL_GPIO_UART_RX_pmuxen(HAL_GPIO_PMUX_C);

	MCLK->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;

	GCLK->PCHCTRL[SERCOM0_GCLK_ID_CORE].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
	while (0 == (GCLK->PCHCTRL[SERCOM0_GCLK_ID_CORE].reg & GCLK_PCHCTRL_CHEN));
    832c:	24ac      	movs	r4, #172	; 0xac
    832e:	400a      	ands	r2, r1
    8330:	2120      	movs	r1, #32
    8332:	430a      	orrs	r2, r1
    8334:	559a      	strb	r2, [r3, r6]
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
    8336:	f640 0300 	movw	r3, #2048	; 0x800
    833a:	2102      	movs	r1, #2
    833c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8340:	69da      	ldr	r2, [r3, #28]
    8342:	430a      	orrs	r2, r1
    8344:	61da      	str	r2, [r3, #28]
	GCLK->PCHCTRL[SERCOM0_GCLK_ID_CORE].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    8346:	f641 4200 	movw	r2, #7168	; 0x1c00
    834a:	23ac      	movs	r3, #172	; 0xac
    834c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    8350:	313e      	adds	r1, #62	; 0x3e
    8352:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[SERCOM0_GCLK_ID_CORE].reg & GCLK_PCHCTRL_CHEN));
    8354:	5913      	ldr	r3, [r2, r4]
    8356:	4219      	tst	r1, r3
    8358:	d0fc      	beq.n	8354 <uart_init+0xa4>

	SERCOM0->USART.CTRLA.reg =
    835a:	f240 4200 	movw	r2, #1024	; 0x400
    835e:	2304      	movs	r3, #4
    8360:	f2c4 2200 	movt	r2, #16896	; 0x4200
    8364:	f2c4 0331 	movt	r3, #16433	; 0x4031
    8368:	6013      	str	r3, [r2, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE(1/*USART_INT_CLK*/) |
	SERCOM_USART_CTRLA_RXPO(3/*PAD3*/) | SERCOM_USART_CTRLA_TXPO(1/*PAD2*/);

	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    836a:	23c0      	movs	r3, #192	; 0xc0
	SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);

	SERCOM0->USART.BAUD.reg = (uint16_t)br;

	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    836c:	2102      	movs	r1, #2
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    836e:	029b      	lsls	r3, r3, #10
	SERCOM0->USART.BAUD.reg = (uint16_t)br;
    8370:	b280      	uxth	r0, r0
	SERCOM0->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    8372:	6053      	str	r3, [r2, #4]
	SERCOM0->USART.BAUD.reg = (uint16_t)br;
    8374:	8190      	strh	r0, [r2, #12]
	SERCOM0->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8376:	6813      	ldr	r3, [r2, #0]
    8378:	430b      	orrs	r3, r1
    837a:	6013      	str	r3, [r2, #0]
	
	while (SERCOM0->USART.SYNCBUSY.reg & SERCOM_USART_SYNCBUSY_ENABLE);
    837c:	69d3      	ldr	r3, [r2, #28]
    837e:	4219      	tst	r1, r3
    8380:	d1fc      	bne.n	837c <uart_init+0xcc>
}
    8382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008384 <uart_puts>:
	SERCOM0->USART.DATA.reg = c;
}

//-----------------------------------------------------------------------------
void uart_puts(char *s)
{
    8384:	b510      	push	{r4, lr}
	while (*s)
    8386:	7804      	ldrb	r4, [r0, #0]
    8388:	b16c      	cbz	r4, 83a6 <uart_puts+0x22>
	while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    838a:	f240 4200 	movw	r2, #1024	; 0x400
    838e:	2101      	movs	r1, #1
    8390:	f2c4 2200 	movt	r2, #16896	; 0x4200
	uart_putc(*s++);
    8394:	3001      	adds	r0, #1
	while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    8396:	7e13      	ldrb	r3, [r2, #24]
    8398:	4219      	tst	r1, r3
    839a:	d0fc      	beq.n	8396 <uart_puts+0x12>
	SERCOM0->USART.DATA.reg = c;
    839c:	b2a4      	uxth	r4, r4
    839e:	8514      	strh	r4, [r2, #40]	; 0x28
	while (*s)
    83a0:	7804      	ldrb	r4, [r0, #0]
    83a2:	2c00      	cmp	r4, #0
    83a4:	d1f6      	bne.n	8394 <uart_puts+0x10>
}
    83a6:	bd10      	pop	{r4, pc}

000083a8 <uart_puti>:
void uart_puti(int i)
{
	char s[11];
	int last = 0;
	do {
		s[last] = i%10 + '0';
    83a8:	220a      	movs	r2, #10
    83aa:	fb90 f1f2 	sdiv	r1, r0, r2
{
    83ae:	b530      	push	{r4, r5, lr}
		s[last] = i%10 + '0';
    83b0:	008c      	lsls	r4, r1, #2
    83b2:	1864      	adds	r4, r4, r1
    83b4:	0064      	lsls	r4, r4, #1
{
    83b6:	b085      	sub	sp, #20
		s[last] = i%10 + '0';
    83b8:	1b04      	subs	r4, r0, r4
    83ba:	ab01      	add	r3, sp, #4
    83bc:	3430      	adds	r4, #48	; 0x30
    83be:	701c      	strb	r4, [r3, #0]
		i = i/10;
		last++;
	} while(i > 0);
    83c0:	2900      	cmp	r1, #0
    83c2:	dc00      	bgt.n	83c6 <uart_puti+0x1e>
    83c4:	e08f      	b.n	84e6 <uart_puti+0x13e>
		s[last] = i%10 + '0';
    83c6:	fb91 f5f2 	sdiv	r5, r1, r2
    83ca:	00ac      	lsls	r4, r5, #2
    83cc:	1964      	adds	r4, r4, r5
    83ce:	0064      	lsls	r4, r4, #1
    83d0:	1b09      	subs	r1, r1, r4
    83d2:	3130      	adds	r1, #48	; 0x30
    83d4:	7059      	strb	r1, [r3, #1]
		i = i/10;
    83d6:	2164      	movs	r1, #100	; 0x64
    83d8:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    83dc:	2900      	cmp	r1, #0
    83de:	d100      	bne.n	83e2 <uart_puti+0x3a>
    83e0:	e083      	b.n	84ea <uart_puti+0x142>
		s[last] = i%10 + '0';
    83e2:	fb91 f5f2 	sdiv	r5, r1, r2
    83e6:	00ac      	lsls	r4, r5, #2
    83e8:	1964      	adds	r4, r4, r5
    83ea:	0064      	lsls	r4, r4, #1
    83ec:	1b09      	subs	r1, r1, r4
    83ee:	3130      	adds	r1, #48	; 0x30
    83f0:	7099      	strb	r1, [r3, #2]
		i = i/10;
    83f2:	f240 31e8 	movw	r1, #1000	; 0x3e8
    83f6:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    83fa:	2900      	cmp	r1, #0
    83fc:	d100      	bne.n	8400 <uart_puti+0x58>
    83fe:	e076      	b.n	84ee <uart_puti+0x146>
		s[last] = i%10 + '0';
    8400:	fb91 f5f2 	sdiv	r5, r1, r2
    8404:	00ac      	lsls	r4, r5, #2
    8406:	1964      	adds	r4, r4, r5
    8408:	0064      	lsls	r4, r4, #1
    840a:	1b09      	subs	r1, r1, r4
    840c:	3130      	adds	r1, #48	; 0x30
    840e:	70d9      	strb	r1, [r3, #3]
		i = i/10;
    8410:	f242 7110 	movw	r1, #10000	; 0x2710
    8414:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8418:	2900      	cmp	r1, #0
    841a:	d06a      	beq.n	84f2 <uart_puti+0x14a>
		s[last] = i%10 + '0';
    841c:	fb91 f5f2 	sdiv	r5, r1, r2
    8420:	00ac      	lsls	r4, r5, #2
    8422:	1964      	adds	r4, r4, r5
    8424:	0064      	lsls	r4, r4, #1
    8426:	1b09      	subs	r1, r1, r4
    8428:	3130      	adds	r1, #48	; 0x30
    842a:	7119      	strb	r1, [r3, #4]
		i = i/10;
    842c:	f248 61a0 	movw	r1, #34464	; 0x86a0
    8430:	f2c0 0101 	movt	r1, #1
    8434:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8438:	2900      	cmp	r1, #0
    843a:	d05c      	beq.n	84f6 <uart_puti+0x14e>
		s[last] = i%10 + '0';
    843c:	fb91 f5f2 	sdiv	r5, r1, r2
    8440:	00ac      	lsls	r4, r5, #2
    8442:	1964      	adds	r4, r4, r5
    8444:	0064      	lsls	r4, r4, #1
    8446:	1b09      	subs	r1, r1, r4
    8448:	3130      	adds	r1, #48	; 0x30
    844a:	7159      	strb	r1, [r3, #5]
		i = i/10;
    844c:	f244 2140 	movw	r1, #16960	; 0x4240
    8450:	f2c0 010f 	movt	r1, #15
    8454:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8458:	2900      	cmp	r1, #0
    845a:	d04e      	beq.n	84fa <uart_puti+0x152>
		s[last] = i%10 + '0';
    845c:	fb91 f5f2 	sdiv	r5, r1, r2
    8460:	00ac      	lsls	r4, r5, #2
    8462:	1964      	adds	r4, r4, r5
    8464:	0064      	lsls	r4, r4, #1
    8466:	1b09      	subs	r1, r1, r4
    8468:	3130      	adds	r1, #48	; 0x30
    846a:	7199      	strb	r1, [r3, #6]
		i = i/10;
    846c:	f249 6180 	movw	r1, #38528	; 0x9680
    8470:	f2c0 0198 	movt	r1, #152	; 0x98
    8474:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8478:	2900      	cmp	r1, #0
    847a:	d040      	beq.n	84fe <uart_puti+0x156>
		s[last] = i%10 + '0';
    847c:	fb91 f5f2 	sdiv	r5, r1, r2
    8480:	00ac      	lsls	r4, r5, #2
    8482:	1964      	adds	r4, r4, r5
    8484:	0064      	lsls	r4, r4, #1
    8486:	1b09      	subs	r1, r1, r4
    8488:	3130      	adds	r1, #48	; 0x30
    848a:	71d9      	strb	r1, [r3, #7]
		i = i/10;
    848c:	f24e 1100 	movw	r1, #57600	; 0xe100
    8490:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
    8494:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8498:	2900      	cmp	r1, #0
    849a:	d032      	beq.n	8502 <uart_puti+0x15a>
		s[last] = i%10 + '0';
    849c:	fb91 f2f2 	sdiv	r2, r1, r2
    84a0:	0094      	lsls	r4, r2, #2
    84a2:	18a2      	adds	r2, r4, r2
    84a4:	0052      	lsls	r2, r2, #1
    84a6:	1a89      	subs	r1, r1, r2
		i = i/10;
    84a8:	f64c 2200 	movw	r2, #51712	; 0xca00
    84ac:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    84b0:	fb90 f0f2 	sdiv	r0, r0, r2
		s[last] = i%10 + '0';
    84b4:	3130      	adds	r1, #48	; 0x30
    84b6:	7219      	strb	r1, [r3, #8]
	} while(i > 0);
    84b8:	b328      	cbz	r0, 8506 <uart_puti+0x15e>
		s[last] = i%10 + '0';
    84ba:	3030      	adds	r0, #48	; 0x30
    84bc:	7258      	strb	r0, [r3, #9]
		last++;
    84be:	2009      	movs	r0, #9
    84c0:	1818      	adds	r0, r3, r0
	while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    84c2:	f240 4200 	movw	r2, #1024	; 0x400
    84c6:	466b      	mov	r3, sp
    84c8:	2101      	movs	r1, #1
    84ca:	1cdd      	adds	r5, r3, #3
    84cc:	f2c4 2200 	movt	r2, #16896	; 0x4200
	
	for(int j=last-1; j>=0; j--) {
		uart_putc(s[j]);
    84d0:	7804      	ldrb	r4, [r0, #0]
	while (!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    84d2:	7e13      	ldrb	r3, [r2, #24]
    84d4:	4219      	tst	r1, r3
    84d6:	d0fc      	beq.n	84d2 <uart_puti+0x12a>
	SERCOM0->USART.DATA.reg = c;
    84d8:	b2a4      	uxth	r4, r4
    84da:	3801      	subs	r0, #1
    84dc:	8514      	strh	r4, [r2, #40]	; 0x28
	for(int j=last-1; j>=0; j--) {
    84de:	42a8      	cmp	r0, r5
    84e0:	d1f6      	bne.n	84d0 <uart_puti+0x128>
	}
}
    84e2:	b005      	add	sp, #20
    84e4:	bd30      	pop	{r4, r5, pc}
	int last = 0;
    84e6:	2000      	movs	r0, #0
    84e8:	e7ea      	b.n	84c0 <uart_puti+0x118>
		last++;
    84ea:	2001      	movs	r0, #1
    84ec:	e7e8      	b.n	84c0 <uart_puti+0x118>
    84ee:	2002      	movs	r0, #2
    84f0:	e7e6      	b.n	84c0 <uart_puti+0x118>
    84f2:	2003      	movs	r0, #3
    84f4:	e7e4      	b.n	84c0 <uart_puti+0x118>
    84f6:	2004      	movs	r0, #4
    84f8:	e7e2      	b.n	84c0 <uart_puti+0x118>
    84fa:	2005      	movs	r0, #5
    84fc:	e7e0      	b.n	84c0 <uart_puti+0x118>
    84fe:	2006      	movs	r0, #6
    8500:	e7de      	b.n	84c0 <uart_puti+0x118>
    8502:	2007      	movs	r0, #7
    8504:	e7dc      	b.n	84c0 <uart_puti+0x118>
    8506:	2008      	movs	r0, #8
    8508:	e7da      	b.n	84c0 <uart_puti+0x118>
    850a:	46c0      	nop			; (mov r8, r8)

0000850c <uart_get_bytes>:
		s[idx] = c;
		idx++;
	}
}

void uart_get_bytes(uint8_t* output, int size){
    850c:	b530      	push	{r4, r5, lr}
    850e:	1844      	adds	r4, r0, r1
	for (int i = 0; i < size; i++)
    8510:	2900      	cmp	r1, #0
    8512:	dd13      	ble.n	853c <uart_get_bytes+0x30>
	while(!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    8514:	f240 4200 	movw	r2, #1024	; 0x400
			SERCOM0->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8518:	2580      	movs	r5, #128	; 0x80
	while(!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    851a:	f2c4 2200 	movt	r2, #16896	; 0x4200
    851e:	2104      	movs	r1, #4
			SERCOM0->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8520:	426d      	negs	r5, r5
    8522:	e003      	b.n	852c <uart_get_bytes+0x20>
		if(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR)
    8524:	7e13      	ldrb	r3, [r2, #24]
    8526:	b25b      	sxtb	r3, r3
    8528:	2b00      	cmp	r3, #0
    852a:	db08      	blt.n	853e <uart_get_bytes+0x32>
	while(!(SERCOM0->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    852c:	7e13      	ldrb	r3, [r2, #24]
    852e:	4219      	tst	r1, r3
    8530:	d0f8      	beq.n	8524 <uart_get_bytes+0x18>
	rx = (uint8_t)SERCOM0->USART.DATA.reg;
    8532:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8534:	7003      	strb	r3, [r0, #0]
    8536:	3001      	adds	r0, #1
	for (int i = 0; i < size; i++)
    8538:	42a0      	cmp	r0, r4
    853a:	d1f7      	bne.n	852c <uart_get_bytes+0x20>
	{
		output[i] = uart_getc();
	}
}
    853c:	bd30      	pop	{r4, r5, pc}
			SERCOM0->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    853e:	7e13      	ldrb	r3, [r2, #24]
    8540:	432b      	orrs	r3, r5
    8542:	b2db      	uxtb	r3, r3
    8544:	7613      	strb	r3, [r2, #24]
	rx = (uint8_t)SERCOM0->USART.DATA.reg;
    8546:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8548:	7003      	strb	r3, [r0, #0]
    854a:	3001      	adds	r0, #1
	for (int i = 0; i < size; i++)
    854c:	42a0      	cmp	r0, r4
    854e:	d1ed      	bne.n	852c <uart_get_bytes+0x20>
    8550:	e7f4      	b.n	853c <uart_get_bytes+0x30>
    8552:	46c0      	nop			; (mov r8, r8)

00008554 <get_sphinc_sig>:
	#endif
}

extern uint8_t buffer[ 1024 ];
extern unsigned numSigs;
static uint8_t *get_sphinc_sig() {
    8554:	b570      	push	{r4, r5, r6, lr}
	uart_puts("SPHINCSPHINC\n");
    8556:	f249 50c8 	movw	r0, #38344	; 0x95c8
    855a:	f248 3585 	movw	r5, #33669	; 0x8385
    855e:	f2c0 0000 	movt	r0, #0
    8562:	f2c0 0500 	movt	r5, #0
    8566:	47a8      	blx	r5
	unsigned n = 0;
	int rem = 17088-numSigs;
    8568:	f242 03a0 	movw	r3, #8352	; 0x20a0
    856c:	f244 24c0 	movw	r4, #17088	; 0x42c0
    8570:	f240 4100 	movw	r1, #1024	; 0x400
    8574:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8578:	681a      	ldr	r2, [r3, #0]
    857a:	1aa4      	subs	r4, r4, r2
    857c:	428c      	cmp	r4, r1
    857e:	d901      	bls.n	8584 <get_sphinc_sig+0x30>
    8580:	f240 4400 	movw	r4, #1024	; 0x400
	if(rem > sizeof buffer) n = sizeof buffer;
	else n = rem;
	numSigs += n;
    8584:	1912      	adds	r2, r2, r4
    8586:	601a      	str	r2, [r3, #0]
	uart_get_bytes(buffer, n);
    8588:	f242 00b0 	movw	r0, #8368	; 0x20b0
    858c:	f248 530d 	movw	r3, #34061	; 0x850d
    8590:	0021      	movs	r1, r4
    8592:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8596:	f2c0 0300 	movt	r3, #0
    859a:	4798      	blx	r3
	//out = buffer;
	uart_puti(n);
    859c:	f248 33a9 	movw	r3, #33705	; 0x83a9
    85a0:	0020      	movs	r0, r4
    85a2:	f2c0 0300 	movt	r3, #0
    85a6:	4798      	blx	r3
	uart_puts("\n");
    85a8:	f249 6098 	movw	r0, #38552	; 0x9698
    85ac:	f2c0 0000 	movt	r0, #0
    85b0:	47a8      	blx	r5
	return buffer;
}
    85b2:	f242 00b0 	movw	r0, #8368	; 0x20b0
    85b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    85ba:	bd70      	pop	{r4, r5, r6, pc}

000085bc <wrapper_test>:
static void wrapper_test() {
    85bc:	b570      	push	{r4, r5, r6, lr}
	secure_checkState(&sum, 1);
    85be:	f242 0000 	movw	r0, #8192	; 0x2000
	test(pox_input[0]);
    85c2:	f242 0498 	movw	r4, #8344	; 0x2098
	secure_checkState(&sum, 1);
    85c6:	f647 4309 	movw	r3, #31753	; 0x7c09
	test(pox_input[0]);
    85ca:	f2c2 0400 	movt	r4, #8192	; 0x2000
	secure_checkState(&sum, 1);
    85ce:	f2c0 0300 	movt	r3, #0
    85d2:	2101      	movs	r1, #1
    85d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
	test(pox_input[0]);
    85d8:	7825      	ldrb	r5, [r4, #0]
	secure_checkState(&sum, 1);
    85da:	4798      	blx	r3
  }										\

  HAL_GPIO_PIN(UART_TX,  A, 24)
  HAL_GPIO_PIN(UART_RX,  A, 25)

  HAL_GPIO_PIN(LED,      A, 7)
    85dc:	f243 0300 	movw	r3, #12288	; 0x3000
    85e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    85e4:	6a1b      	ldr	r3, [r3, #32]
	if(val == 0) out = HAL_GPIO_LED_read();
    85e6:	b335      	cbz	r5, 8636 <wrapper_test+0x7a>
  HAL_GPIO_PIN(DHT,      A, 8)

  HAL_GPIO_PIN(BUTTON,   A, 27)
    85e8:	011b      	lsls	r3, r3, #4
	else out = HAL_GPIO_BUTTON_read();
    85ea:	0fdb      	lsrs	r3, r3, #31
	sum += out;
    85ec:	f242 0500 	movw	r5, #8192	; 0x2000
    85f0:	f2c2 0500 	movt	r5, #8192	; 0x2000
    85f4:	782a      	ldrb	r2, [r5, #0]
	uart_puts("\n PoX: ");
    85f6:	f249 50d8 	movw	r0, #38360	; 0x95d8
	sum += out;
    85fa:	189b      	adds	r3, r3, r2
    85fc:	b2db      	uxtb	r3, r3
	pox_output[0] = sum;
    85fe:	7123      	strb	r3, [r4, #4]
	uart_puts("\n PoX: ");
    8600:	f248 3485 	movw	r4, #33669	; 0x8385
    8604:	f2c0 0000 	movt	r0, #0
    8608:	f2c0 0400 	movt	r4, #0
	sum += out;
    860c:	702b      	strb	r3, [r5, #0]
	uart_puts("\n PoX: ");
    860e:	47a0      	blx	r4
	uart_puti(sum);
    8610:	f248 33a9 	movw	r3, #33705	; 0x83a9
    8614:	7828      	ldrb	r0, [r5, #0]
    8616:	f2c0 0300 	movt	r3, #0
    861a:	4798      	blx	r3
	uart_puts("\n");
    861c:	f249 6098 	movw	r0, #38552	; 0x9698
    8620:	f2c0 0000 	movt	r0, #0
    8624:	47a0      	blx	r4
	secure_setState(&sum, 1);
    8626:	f647 4311 	movw	r3, #31761	; 0x7c11
    862a:	0028      	movs	r0, r5
    862c:	2101      	movs	r1, #1
    862e:	f2c0 0300 	movt	r3, #0
    8632:	4798      	blx	r3
}
    8634:	bd70      	pop	{r4, r5, r6, pc}
  HAL_GPIO_PIN(LED,      A, 7)
    8636:	061b      	lsls	r3, r3, #24
	if(val == 0) out = HAL_GPIO_LED_read();
    8638:	0fdb      	lsrs	r3, r3, #31
    863a:	e7d7      	b.n	85ec <wrapper_test+0x30>

0000863c <print_token>:
	char hex[3]={0};
    863c:	f648 538f 	movw	r3, #36239	; 0x8d8f
void print_token(uint8_t *token, int size) {
    8640:	b5f0      	push	{r4, r5, r6, r7, lr}
    8642:	b083      	sub	sp, #12
    8644:	000e      	movs	r6, r1
    8646:	0004      	movs	r4, r0
	char hex[3]={0};
    8648:	2203      	movs	r2, #3
    864a:	2100      	movs	r1, #0
    864c:	a801      	add	r0, sp, #4
    864e:	f2c0 0300 	movt	r3, #0
    8652:	4798      	blx	r3
	uart_puts("0x");
    8654:	f248 3585 	movw	r5, #33669	; 0x8385
    8658:	f249 50e0 	movw	r0, #38368	; 0x95e0
    865c:	f2c0 0500 	movt	r5, #0
    8660:	f2c0 0000 	movt	r0, #0
    8664:	47a8      	blx	r5
	for(int i=0; i<size; i++) {
    8666:	2e00      	cmp	r6, #0
    8668:	dd10      	ble.n	868c <print_token+0x50>
    866a:	f648 7711 	movw	r7, #36625	; 0x8f11
    866e:	19a6      	adds	r6, r4, r6
    8670:	f2c0 0700 	movt	r7, #0
		sprintf(hex, "%.2x", token[i]);
    8674:	f249 51e4 	movw	r1, #38372	; 0x95e4
    8678:	7822      	ldrb	r2, [r4, #0]
    867a:	f2c0 0100 	movt	r1, #0
    867e:	a801      	add	r0, sp, #4
    8680:	47b8      	blx	r7
    8682:	3401      	adds	r4, #1
		uart_puts(hex);
    8684:	a801      	add	r0, sp, #4
    8686:	47a8      	blx	r5
	for(int i=0; i<size; i++) {
    8688:	42b4      	cmp	r4, r6
    868a:	d1f3      	bne.n	8674 <print_token+0x38>
	uart_puts("\n");
    868c:	f249 6098 	movw	r0, #38552	; 0x9698
    8690:	f2c0 0000 	movt	r0, #0
    8694:	47a8      	blx	r5
}
    8696:	b003      	add	sp, #12
    8698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    869a:	46c0      	nop			; (mov r8, r8)

0000869c <main>:

/* Non-Secure main() */
int main(void)
{
    869c:	b5f0      	push	{r4, r5, r6, r7, lr}
    869e:	46d6      	mov	lr, sl
    86a0:	4646      	mov	r6, r8
    86a2:	464f      	mov	r7, r9
	
	//__disable_irq();
	timer_init(PERIOD_1S);
    86a4:	f248 13f1 	movw	r3, #33265	; 0x81f1
{
    86a8:	b5c0      	push	{r6, r7, lr}
	timer_init(PERIOD_1S);
    86aa:	f240 10f4 	movw	r0, #500	; 0x1f4
{
    86ae:	b0a2      	sub	sp, #136	; 0x88
	timer_init(PERIOD_1S);
    86b0:	f2c0 0300 	movt	r3, #0
    86b4:	4798      	blx	r3
	
	uart_init(115200);
    86b6:	20e1      	movs	r0, #225	; 0xe1
    86b8:	f248 23b1 	movw	r3, #33457	; 0x82b1
    86bc:	0240      	lsls	r0, r0, #9
    86be:	f2c0 0300 	movt	r3, #0
    86c2:	4798      	blx	r3
	uart_puts("A lot of helloooooo\n");
    86c4:	f248 3585 	movw	r5, #33669	; 0x8385
    86c8:	f249 50ec 	movw	r0, #38380	; 0x95ec
    86cc:	f2c0 0500 	movt	r5, #0
    86d0:	f2c0 0000 	movt	r0, #0
    86d4:	47a8      	blx	r5
	test(pox_input[0]);
    86d6:	f242 0498 	movw	r4, #8344	; 0x2098
	secure_checkState(&sum, 1);
    86da:	f242 0000 	movw	r0, #8192	; 0x2000
    86de:	f647 4309 	movw	r3, #31753	; 0x7c09
	test(pox_input[0]);
    86e2:	f2c2 0400 	movt	r4, #8192	; 0x2000
	secure_checkState(&sum, 1);
    86e6:	f2c0 0300 	movt	r3, #0
    86ea:	2101      	movs	r1, #1
    86ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
	test(pox_input[0]);
    86f0:	7826      	ldrb	r6, [r4, #0]
	secure_checkState(&sum, 1);
    86f2:	4798      	blx	r3
    86f4:	f243 0300 	movw	r3, #12288	; 0x3000
    86f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    86fc:	6a1b      	ldr	r3, [r3, #32]
	if(val == 0) out = HAL_GPIO_LED_read();
    86fe:	2e00      	cmp	r6, #0
    8700:	d100      	bne.n	8704 <main+0x68>
    8702:	e0f6      	b.n	88f2 <main+0x256>
  HAL_GPIO_PIN(BUTTON,   A, 27)
    8704:	011b      	lsls	r3, r3, #4
	else out = HAL_GPIO_BUTTON_read();
    8706:	0fdb      	lsrs	r3, r3, #31
	sum += out;
    8708:	f242 0600 	movw	r6, #8192	; 0x2000
	uart_puts("\n PoX: ");
    870c:	f249 50d8 	movw	r0, #38360	; 0x95d8
	uart_puti(sum);
    8710:	f248 38a9 	movw	r8, #33705	; 0x83a9
	sum += out;
    8714:	f2c2 0600 	movt	r6, #8192	; 0x2000
    8718:	7832      	ldrb	r2, [r6, #0]
	uart_puts("\n PoX: ");
    871a:	f2c0 0000 	movt	r0, #0
	sum += out;
    871e:	189b      	adds	r3, r3, r2
    8720:	b2db      	uxtb	r3, r3
	pox_output[0] = sum;
    8722:	7123      	strb	r3, [r4, #4]
	uart_puti(sum);
    8724:	f2c0 0800 	movt	r8, #0
	sum += out;
    8728:	7033      	strb	r3, [r6, #0]
	uart_puts("\n PoX: ");
    872a:	47a8      	blx	r5
	uart_puti(sum);
    872c:	7830      	ldrb	r0, [r6, #0]
    872e:	47c0      	blx	r8
	uart_puts("\n");
    8730:	f249 6098 	movw	r0, #38552	; 0x9698
    8734:	f2c0 0000 	movt	r0, #0
    8738:	47a8      	blx	r5
	secure_setState(&sum, 1);
    873a:	f647 4311 	movw	r3, #31761	; 0x7c11
    873e:	0030      	movs	r0, r6
    8740:	2101      	movs	r1, #1
    8742:	f2c0 0300 	movt	r3, #0
    8746:	4798      	blx	r3
  HAL_GPIO_PIN(LED,      A, 7)
    8748:	f243 0300 	movw	r3, #12288	; 0x3000
    874c:	2280      	movs	r2, #128	; 0x80
    874e:	2147      	movs	r1, #71	; 0x47
    8750:	2002      	movs	r0, #2
    8752:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8756:	609a      	str	r2, [r3, #8]
    8758:	5c5a      	ldrb	r2, [r3, r1]
	wrapper_test();
	HAL_GPIO_LED_out();
	timer_reset();
	
	
	uint8_t req[100]={};
    875a:	f648 568f 	movw	r6, #36239	; 0x8d8f
    875e:	4302      	orrs	r2, r0
    8760:	545a      	strb	r2, [r3, r1]
	timer_reset();
    8762:	f248 239d 	movw	r3, #33437	; 0x829d
    8766:	f2c0 0300 	movt	r3, #0
    876a:	4798      	blx	r3
	uint8_t req[100]={};
    876c:	f2c0 0600 	movt	r6, #0
    8770:	2264      	movs	r2, #100	; 0x64
    8772:	2100      	movs	r1, #0
    8774:	a809      	add	r0, sp, #36	; 0x24
    8776:	47b0      	blx	r6
	uart_puts("Hi\n");
    8778:	f249 6004 	movw	r0, #38404	; 0x9604
    877c:	f2c0 0000 	movt	r0, #0
    8780:	47a8      	blx	r5
	uart_get_bytes(req, TOKEN_SIZE+9);
    8782:	f248 530d 	movw	r3, #34061	; 0x850d
    8786:	2149      	movs	r1, #73	; 0x49
    8788:	f2c0 0300 	movt	r3, #0
    878c:	a809      	add	r0, sp, #36	; 0x24
    878e:	4798      	blx	r3
	
	uart_puts("Receive: ");
    8790:	f249 6008 	movw	r0, #38408	; 0x9608
    8794:	f2c0 0000 	movt	r0, #0
    8798:	47a8      	blx	r5
	uint32_t f, c;
	uint8_t i;
	c = *(uint32_t*)(req);
    879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	f = *(uint32_t*)(req+4);
	i = *(uint32_t*)(req+8);
    879c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	c = *(uint32_t*)(req);
    879e:	469a      	mov	sl, r3
	f = *(uint32_t*)(req+4);
    87a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	uart_puti(c);
    87a2:	4650      	mov	r0, sl
	f = *(uint32_t*)(req+4);
    87a4:	4699      	mov	r9, r3
	uart_puti(c);
    87a6:	47c0      	blx	r8
	uart_puts(" ");
    87a8:	f249 6010 	movw	r0, #38416	; 0x9610
    87ac:	f2c0 0000 	movt	r0, #0
    87b0:	47a8      	blx	r5
	uart_puti(f);
    87b2:	4648      	mov	r0, r9
    87b4:	47c0      	blx	r8
	uart_puts(" ");
    87b6:	f249 6010 	movw	r0, #38416	; 0x9610
    87ba:	f2c0 0000 	movt	r0, #0
    87be:	47a8      	blx	r5
	uart_puti(i);
    87c0:	20ff      	movs	r0, #255	; 0xff
    87c2:	4038      	ands	r0, r7
    87c4:	47c0      	blx	r8
	uint8_t *token = (uint8_t*) (req+9);
	
	uart_puts("\n");
    87c6:	f249 6098 	movw	r0, #38552	; 0x9698
    87ca:	f2c0 0000 	movt	r0, #0
    87ce:	47a8      	blx	r5
	uart_puts("get_sphinc_sig at: ");
    87d0:	f249 6014 	movw	r0, #38420	; 0x9614
    87d4:	f2c0 0000 	movt	r0, #0
    87d8:	47a8      	blx	r5
	uart_puti(&get_sphinc_sig);
    87da:	f248 5055 	movw	r0, #34133	; 0x8555
    87de:	f2c0 0000 	movt	r0, #0
    87e2:	47c0      	blx	r8
	uart_puts("\n");
    87e4:	f249 6098 	movw	r0, #38552	; 0x9698
    87e8:	f2c0 0000 	movt	r0, #0
    87ec:	47a8      	blx	r5
	uart_puts("\n");
    87ee:	f249 6098 	movw	r0, #38552	; 0x9698
    87f2:	f2c0 0000 	movt	r0, #0
    87f6:	47a8      	blx	r5
	uart_puts("Wrapper test at: ");
    87f8:	f249 6028 	movw	r0, #38440	; 0x9628
    87fc:	f2c0 0000 	movt	r0, #0
    8800:	47a8      	blx	r5
	uart_puti(&wrapper_test);
    8802:	f248 50bd 	movw	r0, #34237	; 0x85bd
    8806:	f2c0 0000 	movt	r0, #0
    880a:	47c0      	blx	r8
	uart_puts("\n");
    880c:	f249 6098 	movw	r0, #38552	; 0x9698
    8810:	f2c0 0000 	movt	r0, #0
    8814:	47a8      	blx	r5
	
	uart_puts("Start running sphincs\n");
    8816:	f249 603c 	movw	r0, #38460	; 0x963c
    881a:	f2c0 0000 	movt	r0, #0
    881e:	47a8      	blx	r5
	
	pox_call_t pc;
	pc.counter = c;
    8820:	4653      	mov	r3, sl
    8822:	9308      	str	r3, [sp, #32]
	pc.addr = f;
    8824:	464b      	mov	r3, r9
	pc.input = pox_input;
	pc.input_size = 1;
	pc.output = pox_output;
	pc.output_size = 4;
	
	uart_puts("\n");
    8826:	f249 6098 	movw	r0, #38552	; 0x9698
	pc.addr = f;
    882a:	9303      	str	r3, [sp, #12]
	pc.input_size = 1;
    882c:	2301      	movs	r3, #1
	pox_input[0] = i;
    882e:	7027      	strb	r7, [r4, #0]
	pc.input = pox_input;
    8830:	9404      	str	r4, [sp, #16]
	pc.input_size = 1;
    8832:	9305      	str	r3, [sp, #20]
	pc.output = pox_output;
    8834:	3404      	adds	r4, #4
	pc.output_size = 4;
    8836:	3303      	adds	r3, #3
	uart_puts("\n");
    8838:	f2c0 0000 	movt	r0, #0
	pc.output = pox_output;
    883c:	9406      	str	r4, [sp, #24]
	pc.output_size = 4;
    883e:	9307      	str	r3, [sp, #28]
	uart_puts("\n");
    8840:	47a8      	blx	r5
	uart_puts("\n");*/
	
	#ifdef CRYPTO_SPHINCS
	uart_puts("SPHINCSTART\n");
	#endif
	secure_pox(&pc, token);
    8842:	aa02      	add	r2, sp, #8
    8844:	4694      	mov	ip, r2
    8846:	2325      	movs	r3, #37	; 0x25
    8848:	4463      	add	r3, ip
    884a:	0019      	movs	r1, r3
    884c:	f647 4301 	movw	r3, #31745	; 0x7c01
    8850:	a803      	add	r0, sp, #12
    8852:	f2c0 0300 	movt	r3, #0
    8856:	4798      	blx	r3
	
	uart_puts("=========== Output ===========\n");
    8858:	f249 6054 	movw	r0, #38484	; 0x9654
    885c:	f2c0 0000 	movt	r0, #0
    8860:	47a8      	blx	r5
	print_token(pc.output, pc.output_size);
    8862:	9b07      	ldr	r3, [sp, #28]
    8864:	2765      	movs	r7, #101	; 0x65
    8866:	9300      	str	r3, [sp, #0]
    8868:	9b06      	ldr	r3, [sp, #24]
    886a:	9900      	ldr	r1, [sp, #0]
    886c:	0018      	movs	r0, r3
    886e:	9301      	str	r3, [sp, #4]
    8870:	f248 633d 	movw	r3, #34365	; 0x863d
    8874:	f2c0 0300 	movt	r3, #0
    8878:	4798      	blx	r3
	
	uart_puts("=========== Output token ===========\n");
    887a:	f249 6074 	movw	r0, #38516	; 0x9674
    887e:	f2c0 0000 	movt	r0, #0
    8882:	47a8      	blx	r5
	char hex[3]={0};
    8884:	2203      	movs	r2, #3
    8886:	2100      	movs	r1, #0
    8888:	a802      	add	r0, sp, #8
    888a:	47b0      	blx	r6
	uart_puts("0x");
    888c:	f249 50e0 	movw	r0, #38368	; 0x95e0
    8890:	f2c0 0000 	movt	r0, #0
    8894:	47a8      	blx	r5
    8896:	aa02      	add	r2, sp, #8
    8898:	4694      	mov	ip, r2
    889a:	2325      	movs	r3, #37	; 0x25
    889c:	f648 7611 	movw	r6, #36625	; 0x8f11
    88a0:	4463      	add	r3, ip
    88a2:	001c      	movs	r4, r3
    88a4:	4467      	add	r7, ip
    88a6:	f2c0 0600 	movt	r6, #0
		sprintf(hex, "%.2x", token[i]);
    88aa:	f249 51e4 	movw	r1, #38372	; 0x95e4
    88ae:	7822      	ldrb	r2, [r4, #0]
    88b0:	f2c0 0100 	movt	r1, #0
    88b4:	a802      	add	r0, sp, #8
    88b6:	47b0      	blx	r6
    88b8:	3401      	adds	r4, #1
		uart_puts(hex);
    88ba:	a802      	add	r0, sp, #8
    88bc:	47a8      	blx	r5
	for(int i=0; i<size; i++) {
    88be:	42bc      	cmp	r4, r7
    88c0:	d1f3      	bne.n	88aa <main+0x20e>
	uart_puts("\n");
    88c2:	f249 6098 	movw	r0, #38552	; 0x9698
    88c6:	f2c0 0000 	movt	r0, #0
    88ca:	47a8      	blx	r5
	print_token(token, TOKEN_SIZE);
	
	uart_puts("Stack used\n");
    88cc:	f249 609c 	movw	r0, #38556	; 0x969c
    88d0:	f2c0 0000 	movt	r0, #0
    88d4:	47a8      	blx	r5
	uart_puti(*(uint32_t*)(pc.output));
    88d6:	9b06      	ldr	r3, [sp, #24]
    88d8:	6818      	ldr	r0, [r3, #0]
    88da:	47c0      	blx	r8
	
	uart_puts("\n");
    88dc:	f249 6098 	movw	r0, #38552	; 0x9698
    88e0:	f2c0 0000 	movt	r0, #0
    88e4:	47a8      	blx	r5
	return;
	
	
}
    88e6:	b022      	add	sp, #136	; 0x88
    88e8:	bc1c      	pop	{r2, r3, r4}
    88ea:	4690      	mov	r8, r2
    88ec:	4699      	mov	r9, r3
    88ee:	46a2      	mov	sl, r4
    88f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88f2:	061b      	lsls	r3, r3, #24
	if(val == 0) out = HAL_GPIO_LED_read();
    88f4:	0fdb      	lsrs	r3, r3, #31
    88f6:	e707      	b.n	8708 <main+0x6c>

000088f8 <__aeabi_uldivmod>:
    88f8:	2b00      	cmp	r3, #0
    88fa:	d111      	bne.n	8920 <__aeabi_uldivmod+0x28>
    88fc:	2a00      	cmp	r2, #0
    88fe:	d10f      	bne.n	8920 <__aeabi_uldivmod+0x28>
    8900:	2900      	cmp	r1, #0
    8902:	d100      	bne.n	8906 <__aeabi_uldivmod+0xe>
    8904:	2800      	cmp	r0, #0
    8906:	d002      	beq.n	890e <__aeabi_uldivmod+0x16>
    8908:	2100      	movs	r1, #0
    890a:	43c9      	mvns	r1, r1
    890c:	1c08      	adds	r0, r1, #0
    890e:	b407      	push	{r0, r1, r2}
    8910:	4802      	ldr	r0, [pc, #8]	; (891c <__aeabi_uldivmod+0x24>)
    8912:	a102      	add	r1, pc, #8	; (adr r1, 891c <__aeabi_uldivmod+0x24>)
    8914:	1840      	adds	r0, r0, r1
    8916:	9002      	str	r0, [sp, #8]
    8918:	bd03      	pop	{r0, r1, pc}
    891a:	46c0      	nop			; (mov r8, r8)
    891c:	000003d1 	.word	0x000003d1
    8920:	b403      	push	{r0, r1}
    8922:	4668      	mov	r0, sp
    8924:	b501      	push	{r0, lr}
    8926:	9802      	ldr	r0, [sp, #8]
    8928:	f000 f806 	bl	8938 <__udivmoddi4>
    892c:	9b01      	ldr	r3, [sp, #4]
    892e:	469e      	mov	lr, r3
    8930:	b002      	add	sp, #8
    8932:	bc0c      	pop	{r2, r3}
    8934:	4770      	bx	lr
    8936:	46c0      	nop			; (mov r8, r8)

00008938 <__udivmoddi4>:
    8938:	b5f0      	push	{r4, r5, r6, r7, lr}
    893a:	4657      	mov	r7, sl
    893c:	4645      	mov	r5, r8
    893e:	46de      	mov	lr, fp
    8940:	464e      	mov	r6, r9
    8942:	4698      	mov	r8, r3
    8944:	b5e0      	push	{r5, r6, r7, lr}
    8946:	b083      	sub	sp, #12
    8948:	0017      	movs	r7, r2
    894a:	9201      	str	r2, [sp, #4]
    894c:	0016      	movs	r6, r2
    894e:	4642      	mov	r2, r8
    8950:	0005      	movs	r5, r0
    8952:	000c      	movs	r4, r1
    8954:	4683      	mov	fp, r0
    8956:	468a      	mov	sl, r1
    8958:	2a00      	cmp	r2, #0
    895a:	d14c      	bne.n	89f6 <__udivmoddi4+0xbe>
    895c:	428f      	cmp	r7, r1
    895e:	d800      	bhi.n	8962 <__udivmoddi4+0x2a>
    8960:	e078      	b.n	8a54 <__udivmoddi4+0x11c>
    8962:	0038      	movs	r0, r7
    8964:	f000 f9c4 	bl	8cf0 <__clzsi2>
    8968:	b150      	cbz	r0, 8980 <__udivmoddi4+0x48>
    896a:	2320      	movs	r3, #32
    896c:	002a      	movs	r2, r5
    896e:	1a1b      	subs	r3, r3, r0
    8970:	40da      	lsrs	r2, r3
    8972:	4084      	lsls	r4, r0
    8974:	0013      	movs	r3, r2
    8976:	4085      	lsls	r5, r0
    8978:	4323      	orrs	r3, r4
    897a:	4086      	lsls	r6, r0
    897c:	469a      	mov	sl, r3
    897e:	46ab      	mov	fp, r5
    8980:	0c37      	lsrs	r7, r6, #16
    8982:	fbba f2f7 	udiv	r2, sl, r7
    8986:	0039      	movs	r1, r7
    8988:	4653      	mov	r3, sl
    898a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    898e:	4351      	muls	r1, r2
    8990:	0015      	movs	r5, r2
    8992:	1a59      	subs	r1, r3, r1
    8994:	465b      	mov	r3, fp
    8996:	4034      	ands	r4, r6
    8998:	4365      	muls	r5, r4
    899a:	0409      	lsls	r1, r1, #16
    899c:	0c1b      	lsrs	r3, r3, #16
    899e:	430b      	orrs	r3, r1
    89a0:	429d      	cmp	r5, r3
    89a2:	d909      	bls.n	89b8 <__udivmoddi4+0x80>
    89a4:	199b      	adds	r3, r3, r6
    89a6:	1e51      	subs	r1, r2, #1
    89a8:	429e      	cmp	r6, r3
    89aa:	d900      	bls.n	89ae <__udivmoddi4+0x76>
    89ac:	e17c      	b.n	8ca8 <__udivmoddi4+0x370>
    89ae:	429d      	cmp	r5, r3
    89b0:	d800      	bhi.n	89b4 <__udivmoddi4+0x7c>
    89b2:	e179      	b.n	8ca8 <__udivmoddi4+0x370>
    89b4:	3a02      	subs	r2, #2
    89b6:	199b      	adds	r3, r3, r6
    89b8:	1b59      	subs	r1, r3, r5
    89ba:	fbb1 f3f7 	udiv	r3, r1, r7
    89be:	435c      	muls	r4, r3
    89c0:	435f      	muls	r7, r3
    89c2:	0025      	movs	r5, r4
    89c4:	1bc9      	subs	r1, r1, r7
    89c6:	f64f 74ff 	movw	r4, #65535	; 0xffff
    89ca:	465f      	mov	r7, fp
    89cc:	0409      	lsls	r1, r1, #16
    89ce:	403c      	ands	r4, r7
    89d0:	430c      	orrs	r4, r1
    89d2:	42a5      	cmp	r5, r4
    89d4:	d900      	bls.n	89d8 <__udivmoddi4+0xa0>
    89d6:	e15c      	b.n	8c92 <__udivmoddi4+0x35a>
    89d8:	0412      	lsls	r2, r2, #16
    89da:	4313      	orrs	r3, r2
    89dc:	2200      	movs	r2, #0
    89de:	1b64      	subs	r4, r4, r5
    89e0:	9201      	str	r2, [sp, #4]
    89e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    89e4:	b12a      	cbz	r2, 89f2 <__udivmoddi4+0xba>
    89e6:	40c4      	lsrs	r4, r0
    89e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    89ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    89ec:	6014      	str	r4, [r2, #0]
    89ee:	2200      	movs	r2, #0
    89f0:	6042      	str	r2, [r0, #4]
    89f2:	0018      	movs	r0, r3
    89f4:	e00a      	b.n	8a0c <__udivmoddi4+0xd4>
    89f6:	4588      	cmp	r8, r1
    89f8:	d910      	bls.n	8a1c <__udivmoddi4+0xe4>
    89fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    89fc:	2b00      	cmp	r3, #0
    89fe:	d100      	bne.n	8a02 <__udivmoddi4+0xca>
    8a00:	e170      	b.n	8ce4 <__udivmoddi4+0x3ac>
    8a02:	6018      	str	r0, [r3, #0]
    8a04:	6059      	str	r1, [r3, #4]
    8a06:	2300      	movs	r3, #0
    8a08:	2000      	movs	r0, #0
    8a0a:	9301      	str	r3, [sp, #4]
    8a0c:	9901      	ldr	r1, [sp, #4]
    8a0e:	b003      	add	sp, #12
    8a10:	bc3c      	pop	{r2, r3, r4, r5}
    8a12:	4690      	mov	r8, r2
    8a14:	4699      	mov	r9, r3
    8a16:	46a2      	mov	sl, r4
    8a18:	46ab      	mov	fp, r5
    8a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8a1c:	4640      	mov	r0, r8
    8a1e:	f000 f967 	bl	8cf0 <__clzsi2>
    8a22:	9001      	str	r0, [sp, #4]
    8a24:	2800      	cmp	r0, #0
    8a26:	d000      	beq.n	8a2a <__udivmoddi4+0xf2>
    8a28:	e0a3      	b.n	8b72 <__udivmoddi4+0x23a>
    8a2a:	45a0      	cmp	r8, r4
    8a2c:	d302      	bcc.n	8a34 <__udivmoddi4+0xfc>
    8a2e:	42af      	cmp	r7, r5
    8a30:	d900      	bls.n	8a34 <__udivmoddi4+0xfc>
    8a32:	e151      	b.n	8cd8 <__udivmoddi4+0x3a0>
    8a34:	1bef      	subs	r7, r5, r7
    8a36:	4643      	mov	r3, r8
    8a38:	42bd      	cmp	r5, r7
    8a3a:	41ad      	sbcs	r5, r5
    8a3c:	1ae4      	subs	r4, r4, r3
    8a3e:	426d      	negs	r5, r5
    8a40:	1b63      	subs	r3, r4, r5
    8a42:	469a      	mov	sl, r3
    8a44:	2001      	movs	r0, #1
    8a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8a48:	2b00      	cmp	r3, #0
    8a4a:	d0df      	beq.n	8a0c <__udivmoddi4+0xd4>
    8a4c:	4652      	mov	r2, sl
    8a4e:	601f      	str	r7, [r3, #0]
    8a50:	605a      	str	r2, [r3, #4]
    8a52:	e7db      	b.n	8a0c <__udivmoddi4+0xd4>
    8a54:	b917      	cbnz	r7, 8a5c <__udivmoddi4+0x124>
    8a56:	3601      	adds	r6, #1
    8a58:	fbb6 f6f7 	udiv	r6, r6, r7
    8a5c:	0030      	movs	r0, r6
    8a5e:	f000 f947 	bl	8cf0 <__clzsi2>
    8a62:	bbb8      	cbnz	r0, 8ad4 <__udivmoddi4+0x19c>
    8a64:	f64f 77ff 	movw	r7, #65535	; 0xffff
    8a68:	2301      	movs	r3, #1
    8a6a:	1ba5      	subs	r5, r4, r6
    8a6c:	4037      	ands	r7, r6
    8a6e:	0c34      	lsrs	r4, r6, #16
    8a70:	9301      	str	r3, [sp, #4]
    8a72:	fbb5 f3f4 	udiv	r3, r5, r4
    8a76:	003a      	movs	r2, r7
    8a78:	435a      	muls	r2, r3
    8a7a:	4694      	mov	ip, r2
    8a7c:	0022      	movs	r2, r4
    8a7e:	435a      	muls	r2, r3
    8a80:	1aaa      	subs	r2, r5, r2
    8a82:	465d      	mov	r5, fp
    8a84:	0412      	lsls	r2, r2, #16
    8a86:	0c2d      	lsrs	r5, r5, #16
    8a88:	432a      	orrs	r2, r5
    8a8a:	4594      	cmp	ip, r2
    8a8c:	d907      	bls.n	8a9e <__udivmoddi4+0x166>
    8a8e:	1992      	adds	r2, r2, r6
    8a90:	1e5d      	subs	r5, r3, #1
    8a92:	4296      	cmp	r6, r2
    8a94:	d802      	bhi.n	8a9c <__udivmoddi4+0x164>
    8a96:	4594      	cmp	ip, r2
    8a98:	d900      	bls.n	8a9c <__udivmoddi4+0x164>
    8a9a:	e120      	b.n	8cde <__udivmoddi4+0x3a6>
    8a9c:	002b      	movs	r3, r5
    8a9e:	4665      	mov	r5, ip
    8aa0:	1b52      	subs	r2, r2, r5
    8aa2:	fbb2 f5f4 	udiv	r5, r2, r4
    8aa6:	436c      	muls	r4, r5
    8aa8:	4659      	mov	r1, fp
    8aaa:	1b12      	subs	r2, r2, r4
    8aac:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8ab0:	436f      	muls	r7, r5
    8ab2:	0412      	lsls	r2, r2, #16
    8ab4:	400c      	ands	r4, r1
    8ab6:	4314      	orrs	r4, r2
    8ab8:	42a7      	cmp	r7, r4
    8aba:	d907      	bls.n	8acc <__udivmoddi4+0x194>
    8abc:	19a4      	adds	r4, r4, r6
    8abe:	1e6a      	subs	r2, r5, #1
    8ac0:	42a6      	cmp	r6, r4
    8ac2:	d802      	bhi.n	8aca <__udivmoddi4+0x192>
    8ac4:	42a7      	cmp	r7, r4
    8ac6:	d900      	bls.n	8aca <__udivmoddi4+0x192>
    8ac8:	e103      	b.n	8cd2 <__udivmoddi4+0x39a>
    8aca:	0015      	movs	r5, r2
    8acc:	041b      	lsls	r3, r3, #16
    8ace:	1be4      	subs	r4, r4, r7
    8ad0:	432b      	orrs	r3, r5
    8ad2:	e786      	b.n	89e2 <__udivmoddi4+0xaa>
    8ad4:	2120      	movs	r1, #32
    8ad6:	002a      	movs	r2, r5
    8ad8:	0023      	movs	r3, r4
    8ada:	1a09      	subs	r1, r1, r0
    8adc:	4086      	lsls	r6, r0
    8ade:	4084      	lsls	r4, r0
    8ae0:	40ca      	lsrs	r2, r1
    8ae2:	40cb      	lsrs	r3, r1
    8ae4:	4322      	orrs	r2, r4
    8ae6:	0c34      	lsrs	r4, r6, #16
    8ae8:	fbb3 f1f4 	udiv	r1, r3, r4
    8aec:	4085      	lsls	r5, r0
    8aee:	f64f 77ff 	movw	r7, #65535	; 0xffff
    8af2:	46ab      	mov	fp, r5
    8af4:	000d      	movs	r5, r1
    8af6:	4037      	ands	r7, r6
    8af8:	437d      	muls	r5, r7
    8afa:	46ac      	mov	ip, r5
    8afc:	0025      	movs	r5, r4
    8afe:	434d      	muls	r5, r1
    8b00:	1b5d      	subs	r5, r3, r5
    8b02:	042d      	lsls	r5, r5, #16
    8b04:	0c13      	lsrs	r3, r2, #16
    8b06:	4691      	mov	r9, r2
    8b08:	432b      	orrs	r3, r5
    8b0a:	459c      	cmp	ip, r3
    8b0c:	d909      	bls.n	8b22 <__udivmoddi4+0x1ea>
    8b0e:	199b      	adds	r3, r3, r6
    8b10:	1e4d      	subs	r5, r1, #1
    8b12:	429e      	cmp	r6, r3
    8b14:	d900      	bls.n	8b18 <__udivmoddi4+0x1e0>
    8b16:	e0da      	b.n	8cce <__udivmoddi4+0x396>
    8b18:	459c      	cmp	ip, r3
    8b1a:	d800      	bhi.n	8b1e <__udivmoddi4+0x1e6>
    8b1c:	e0d7      	b.n	8cce <__udivmoddi4+0x396>
    8b1e:	3902      	subs	r1, #2
    8b20:	199b      	adds	r3, r3, r6
    8b22:	4662      	mov	r2, ip
    8b24:	1a9b      	subs	r3, r3, r2
    8b26:	fbb3 fcf4 	udiv	ip, r3, r4
    8b2a:	4662      	mov	r2, ip
    8b2c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    8b30:	4362      	muls	r2, r4
    8b32:	1a9b      	subs	r3, r3, r2
    8b34:	041b      	lsls	r3, r3, #16
    8b36:	469a      	mov	sl, r3
    8b38:	4642      	mov	r2, r8
    8b3a:	464b      	mov	r3, r9
    8b3c:	4665      	mov	r5, ip
    8b3e:	401a      	ands	r2, r3
    8b40:	4653      	mov	r3, sl
    8b42:	437d      	muls	r5, r7
    8b44:	4313      	orrs	r3, r2
    8b46:	429d      	cmp	r5, r3
    8b48:	d90d      	bls.n	8b66 <__udivmoddi4+0x22e>
    8b4a:	4662      	mov	r2, ip
    8b4c:	199b      	adds	r3, r3, r6
    8b4e:	3a01      	subs	r2, #1
    8b50:	429e      	cmp	r6, r3
    8b52:	d900      	bls.n	8b56 <__udivmoddi4+0x21e>
    8b54:	e0b7      	b.n	8cc6 <__udivmoddi4+0x38e>
    8b56:	429d      	cmp	r5, r3
    8b58:	d800      	bhi.n	8b5c <__udivmoddi4+0x224>
    8b5a:	e0b4      	b.n	8cc6 <__udivmoddi4+0x38e>
    8b5c:	2202      	movs	r2, #2
    8b5e:	4252      	negs	r2, r2
    8b60:	4690      	mov	r8, r2
    8b62:	199b      	adds	r3, r3, r6
    8b64:	44c4      	add	ip, r8
    8b66:	1b5d      	subs	r5, r3, r5
    8b68:	4663      	mov	r3, ip
    8b6a:	0409      	lsls	r1, r1, #16
    8b6c:	4319      	orrs	r1, r3
    8b6e:	9101      	str	r1, [sp, #4]
    8b70:	e77f      	b.n	8a72 <__udivmoddi4+0x13a>
    8b72:	2320      	movs	r3, #32
    8b74:	9801      	ldr	r0, [sp, #4]
    8b76:	003a      	movs	r2, r7
    8b78:	1a1b      	subs	r3, r3, r0
    8b7a:	469c      	mov	ip, r3
    8b7c:	4643      	mov	r3, r8
    8b7e:	4661      	mov	r1, ip
    8b80:	4083      	lsls	r3, r0
    8b82:	40ca      	lsrs	r2, r1
    8b84:	4313      	orrs	r3, r2
    8b86:	002a      	movs	r2, r5
    8b88:	0026      	movs	r6, r4
    8b8a:	40ca      	lsrs	r2, r1
    8b8c:	4084      	lsls	r4, r0
    8b8e:	40ce      	lsrs	r6, r1
    8b90:	4322      	orrs	r2, r4
    8b92:	0c1c      	lsrs	r4, r3, #16
    8b94:	4087      	lsls	r7, r0
    8b96:	4085      	lsls	r5, r0
    8b98:	fbb6 f0f4 	udiv	r0, r6, r4
    8b9c:	4691      	mov	r9, r2
    8b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8ba2:	0001      	movs	r1, r0
    8ba4:	401a      	ands	r2, r3
    8ba6:	4351      	muls	r1, r2
    8ba8:	4688      	mov	r8, r1
    8baa:	0021      	movs	r1, r4
    8bac:	4341      	muls	r1, r0
    8bae:	1a76      	subs	r6, r6, r1
    8bb0:	4649      	mov	r1, r9
    8bb2:	0436      	lsls	r6, r6, #16
    8bb4:	0c09      	lsrs	r1, r1, #16
    8bb6:	430e      	orrs	r6, r1
    8bb8:	45b0      	cmp	r8, r6
    8bba:	d909      	bls.n	8bd0 <__udivmoddi4+0x298>
    8bbc:	1e41      	subs	r1, r0, #1
    8bbe:	18f6      	adds	r6, r6, r3
    8bc0:	468a      	mov	sl, r1
    8bc2:	42b3      	cmp	r3, r6
    8bc4:	d900      	bls.n	8bc8 <__udivmoddi4+0x290>
    8bc6:	e080      	b.n	8cca <__udivmoddi4+0x392>
    8bc8:	45b0      	cmp	r8, r6
    8bca:	d97e      	bls.n	8cca <__udivmoddi4+0x392>
    8bcc:	3802      	subs	r0, #2
    8bce:	18f6      	adds	r6, r6, r3
    8bd0:	4641      	mov	r1, r8
    8bd2:	1a76      	subs	r6, r6, r1
    8bd4:	fbb6 f8f4 	udiv	r8, r6, r4
    8bd8:	4641      	mov	r1, r8
    8bda:	434c      	muls	r4, r1
    8bdc:	434a      	muls	r2, r1
    8bde:	1b36      	subs	r6, r6, r4
    8be0:	4649      	mov	r1, r9
    8be2:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8be6:	0436      	lsls	r6, r6, #16
    8be8:	400c      	ands	r4, r1
    8bea:	4334      	orrs	r4, r6
    8bec:	42a2      	cmp	r2, r4
    8bee:	d90b      	bls.n	8c08 <__udivmoddi4+0x2d0>
    8bf0:	4641      	mov	r1, r8
    8bf2:	18e4      	adds	r4, r4, r3
    8bf4:	1e4e      	subs	r6, r1, #1
    8bf6:	42a3      	cmp	r3, r4
    8bf8:	d863      	bhi.n	8cc2 <__udivmoddi4+0x38a>
    8bfa:	42a2      	cmp	r2, r4
    8bfc:	d961      	bls.n	8cc2 <__udivmoddi4+0x38a>
    8bfe:	2102      	movs	r1, #2
    8c00:	4249      	negs	r1, r1
    8c02:	4689      	mov	r9, r1
    8c04:	18e4      	adds	r4, r4, r3
    8c06:	44c8      	add	r8, r9
    8c08:	4641      	mov	r1, r8
    8c0a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    8c0e:	0400      	lsls	r0, r0, #16
    8c10:	4308      	orrs	r0, r1
    8c12:	0031      	movs	r1, r6
    8c14:	4001      	ands	r1, r0
    8c16:	468a      	mov	sl, r1
    8c18:	0c01      	lsrs	r1, r0, #16
    8c1a:	4688      	mov	r8, r1
    8c1c:	4651      	mov	r1, sl
    8c1e:	403e      	ands	r6, r7
    8c20:	4371      	muls	r1, r6
    8c22:	4689      	mov	r9, r1
    8c24:	4641      	mov	r1, r8
    8c26:	1aa2      	subs	r2, r4, r2
    8c28:	0c3c      	lsrs	r4, r7, #16
    8c2a:	434e      	muls	r6, r1
    8c2c:	4361      	muls	r1, r4
    8c2e:	4688      	mov	r8, r1
    8c30:	4651      	mov	r1, sl
    8c32:	434c      	muls	r4, r1
    8c34:	4649      	mov	r1, r9
    8c36:	0c09      	lsrs	r1, r1, #16
    8c38:	468a      	mov	sl, r1
    8c3a:	19a4      	adds	r4, r4, r6
    8c3c:	4454      	add	r4, sl
    8c3e:	42a6      	cmp	r6, r4
    8c40:	d903      	bls.n	8c4a <__udivmoddi4+0x312>
    8c42:	2180      	movs	r1, #128	; 0x80
    8c44:	0249      	lsls	r1, r1, #9
    8c46:	468a      	mov	sl, r1
    8c48:	44d0      	add	r8, sl
    8c4a:	0c26      	lsrs	r6, r4, #16
    8c4c:	4446      	add	r6, r8
    8c4e:	f64f 78ff 	movw	r8, #65535	; 0xffff
    8c52:	0421      	lsls	r1, r4, #16
    8c54:	468a      	mov	sl, r1
    8c56:	464c      	mov	r4, r9
    8c58:	4641      	mov	r1, r8
    8c5a:	4021      	ands	r1, r4
    8c5c:	4689      	mov	r9, r1
    8c5e:	4654      	mov	r4, sl
    8c60:	444c      	add	r4, r9
    8c62:	42b2      	cmp	r2, r6
    8c64:	d324      	bcc.n	8cb0 <__udivmoddi4+0x378>
    8c66:	d021      	beq.n	8cac <__udivmoddi4+0x374>
    8c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c6a:	b183      	cbz	r3, 8c8e <__udivmoddi4+0x356>
    8c6c:	1b2c      	subs	r4, r5, r4
    8c6e:	42a5      	cmp	r5, r4
    8c70:	41ad      	sbcs	r5, r5
    8c72:	1b92      	subs	r2, r2, r6
    8c74:	426d      	negs	r5, r5
    8c76:	1b52      	subs	r2, r2, r5
    8c78:	0013      	movs	r3, r2
    8c7a:	4661      	mov	r1, ip
    8c7c:	408b      	lsls	r3, r1
    8c7e:	9901      	ldr	r1, [sp, #4]
    8c80:	40cc      	lsrs	r4, r1
    8c82:	40ca      	lsrs	r2, r1
    8c84:	431c      	orrs	r4, r3
    8c86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8c88:	601c      	str	r4, [r3, #0]
    8c8a:	605a      	str	r2, [r3, #4]
    8c8c:	2300      	movs	r3, #0
    8c8e:	9301      	str	r3, [sp, #4]
    8c90:	e6bc      	b.n	8a0c <__udivmoddi4+0xd4>
    8c92:	19a4      	adds	r4, r4, r6
    8c94:	1e59      	subs	r1, r3, #1
    8c96:	42a6      	cmp	r6, r4
    8c98:	d804      	bhi.n	8ca4 <__udivmoddi4+0x36c>
    8c9a:	42a5      	cmp	r5, r4
    8c9c:	d902      	bls.n	8ca4 <__udivmoddi4+0x36c>
    8c9e:	3b02      	subs	r3, #2
    8ca0:	19a4      	adds	r4, r4, r6
    8ca2:	e699      	b.n	89d8 <__udivmoddi4+0xa0>
    8ca4:	000b      	movs	r3, r1
    8ca6:	e697      	b.n	89d8 <__udivmoddi4+0xa0>
    8ca8:	000a      	movs	r2, r1
    8caa:	e685      	b.n	89b8 <__udivmoddi4+0x80>
    8cac:	42a5      	cmp	r5, r4
    8cae:	d2db      	bcs.n	8c68 <__udivmoddi4+0x330>
    8cb0:	1be7      	subs	r7, r4, r7
    8cb2:	1af3      	subs	r3, r6, r3
    8cb4:	42bc      	cmp	r4, r7
    8cb6:	41b6      	sbcs	r6, r6
    8cb8:	4276      	negs	r6, r6
    8cba:	3801      	subs	r0, #1
    8cbc:	1b9e      	subs	r6, r3, r6
    8cbe:	003c      	movs	r4, r7
    8cc0:	e7d2      	b.n	8c68 <__udivmoddi4+0x330>
    8cc2:	46b0      	mov	r8, r6
    8cc4:	e7a0      	b.n	8c08 <__udivmoddi4+0x2d0>
    8cc6:	4694      	mov	ip, r2
    8cc8:	e74d      	b.n	8b66 <__udivmoddi4+0x22e>
    8cca:	4650      	mov	r0, sl
    8ccc:	e780      	b.n	8bd0 <__udivmoddi4+0x298>
    8cce:	0029      	movs	r1, r5
    8cd0:	e727      	b.n	8b22 <__udivmoddi4+0x1ea>
    8cd2:	3d02      	subs	r5, #2
    8cd4:	19a4      	adds	r4, r4, r6
    8cd6:	e6f9      	b.n	8acc <__udivmoddi4+0x194>
    8cd8:	2000      	movs	r0, #0
    8cda:	002f      	movs	r7, r5
    8cdc:	e6b3      	b.n	8a46 <__udivmoddi4+0x10e>
    8cde:	3b02      	subs	r3, #2
    8ce0:	1992      	adds	r2, r2, r6
    8ce2:	e6dc      	b.n	8a9e <__udivmoddi4+0x166>
    8ce4:	2300      	movs	r3, #0
    8ce6:	2000      	movs	r0, #0
    8ce8:	9301      	str	r3, [sp, #4]
    8cea:	e68f      	b.n	8a0c <__udivmoddi4+0xd4>

00008cec <__aeabi_idiv0>:
    8cec:	4770      	bx	lr
    8cee:	46c0      	nop			; (mov r8, r8)

00008cf0 <__clzsi2>:
    8cf0:	211c      	movs	r1, #28
    8cf2:	2301      	movs	r3, #1
    8cf4:	041b      	lsls	r3, r3, #16
    8cf6:	4298      	cmp	r0, r3
    8cf8:	d301      	bcc.n	8cfe <__clzsi2+0xe>
    8cfa:	0c00      	lsrs	r0, r0, #16
    8cfc:	3910      	subs	r1, #16
    8cfe:	0a1b      	lsrs	r3, r3, #8
    8d00:	4298      	cmp	r0, r3
    8d02:	d301      	bcc.n	8d08 <__clzsi2+0x18>
    8d04:	0a00      	lsrs	r0, r0, #8
    8d06:	3908      	subs	r1, #8
    8d08:	091b      	lsrs	r3, r3, #4
    8d0a:	4298      	cmp	r0, r3
    8d0c:	d301      	bcc.n	8d12 <__clzsi2+0x22>
    8d0e:	0900      	lsrs	r0, r0, #4
    8d10:	3904      	subs	r1, #4
    8d12:	a202      	add	r2, pc, #8	; (adr r2, 8d1c <__clzsi2+0x2c>)
    8d14:	5c10      	ldrb	r0, [r2, r0]
    8d16:	1840      	adds	r0, r0, r1
    8d18:	4770      	bx	lr
    8d1a:	46c0      	nop			; (mov r8, r8)
    8d1c:	02020304 	.word	0x02020304
    8d20:	01010101 	.word	0x01010101
	...

00008d2c <__libc_init_array>:
    8d2c:	b570      	push	{r4, r5, r6, lr}
    8d2e:	2500      	movs	r5, #0
    8d30:	4b0e      	ldr	r3, [pc, #56]	; (8d6c <__libc_init_array+0x40>)
    8d32:	4c0f      	ldr	r4, [pc, #60]	; (8d70 <__libc_init_array+0x44>)
    8d34:	1ae4      	subs	r4, r4, r3
    8d36:	10a4      	asrs	r4, r4, #2
    8d38:	42a5      	cmp	r5, r4
    8d3a:	d109      	bne.n	8d50 <__libc_init_array+0x24>
    8d3c:	2500      	movs	r5, #0
    8d3e:	f000 fcfd 	bl	973c <_init>
    8d42:	4c0c      	ldr	r4, [pc, #48]	; (8d74 <__libc_init_array+0x48>)
    8d44:	4b0c      	ldr	r3, [pc, #48]	; (8d78 <__libc_init_array+0x4c>)
    8d46:	1ae4      	subs	r4, r4, r3
    8d48:	10a4      	asrs	r4, r4, #2
    8d4a:	42a5      	cmp	r5, r4
    8d4c:	d107      	bne.n	8d5e <__libc_init_array+0x32>
    8d4e:	bd70      	pop	{r4, r5, r6, pc}
    8d50:	4a06      	ldr	r2, [pc, #24]	; (8d6c <__libc_init_array+0x40>)
    8d52:	00ab      	lsls	r3, r5, #2
    8d54:	189b      	adds	r3, r3, r2
    8d56:	681b      	ldr	r3, [r3, #0]
    8d58:	4798      	blx	r3
    8d5a:	3501      	adds	r5, #1
    8d5c:	e7ec      	b.n	8d38 <__libc_init_array+0xc>
    8d5e:	4a06      	ldr	r2, [pc, #24]	; (8d78 <__libc_init_array+0x4c>)
    8d60:	00ab      	lsls	r3, r5, #2
    8d62:	189b      	adds	r3, r3, r2
    8d64:	681b      	ldr	r3, [r3, #0]
    8d66:	4798      	blx	r3
    8d68:	3501      	adds	r5, #1
    8d6a:	e7ee      	b.n	8d4a <__libc_init_array+0x1e>
    8d6c:	00009748 	.word	0x00009748
    8d70:	00009748 	.word	0x00009748
    8d74:	0000974c 	.word	0x0000974c
    8d78:	00009748 	.word	0x00009748

00008d7c <memcpy>:
    8d7c:	2300      	movs	r3, #0
    8d7e:	b510      	push	{r4, lr}
    8d80:	429a      	cmp	r2, r3
    8d82:	d100      	bne.n	8d86 <memcpy+0xa>
    8d84:	bd10      	pop	{r4, pc}
    8d86:	5ccc      	ldrb	r4, [r1, r3]
    8d88:	54c4      	strb	r4, [r0, r3]
    8d8a:	3301      	adds	r3, #1
    8d8c:	e7f8      	b.n	8d80 <memcpy+0x4>

00008d8e <memset>:
    8d8e:	0003      	movs	r3, r0
    8d90:	1882      	adds	r2, r0, r2
    8d92:	4293      	cmp	r3, r2
    8d94:	d100      	bne.n	8d98 <memset+0xa>
    8d96:	4770      	bx	lr
    8d98:	7019      	strb	r1, [r3, #0]
    8d9a:	3301      	adds	r3, #1
    8d9c:	e7f9      	b.n	8d92 <memset+0x4>
	...

00008da0 <_free_r>:
    8da0:	b570      	push	{r4, r5, r6, lr}
    8da2:	0005      	movs	r5, r0
    8da4:	b181      	cbz	r1, 8dc8 <_free_r+0x28>
    8da6:	1f0c      	subs	r4, r1, #4
    8da8:	6823      	ldr	r3, [r4, #0]
    8daa:	2b00      	cmp	r3, #0
    8dac:	da00      	bge.n	8db0 <_free_r+0x10>
    8dae:	18e4      	adds	r4, r4, r3
    8db0:	0028      	movs	r0, r5
    8db2:	f000 f8cf 	bl	8f54 <__malloc_lock>
    8db6:	4a1e      	ldr	r2, [pc, #120]	; (8e30 <_free_r+0x90>)
    8db8:	6813      	ldr	r3, [r2, #0]
    8dba:	0011      	movs	r1, r2
    8dbc:	b92b      	cbnz	r3, 8dca <_free_r+0x2a>
    8dbe:	6063      	str	r3, [r4, #4]
    8dc0:	6014      	str	r4, [r2, #0]
    8dc2:	0028      	movs	r0, r5
    8dc4:	f000 f8c7 	bl	8f56 <__malloc_unlock>
    8dc8:	bd70      	pop	{r4, r5, r6, pc}
    8dca:	42a3      	cmp	r3, r4
    8dcc:	d90b      	bls.n	8de6 <_free_r+0x46>
    8dce:	6822      	ldr	r2, [r4, #0]
    8dd0:	18a0      	adds	r0, r4, r2
    8dd2:	4283      	cmp	r3, r0
    8dd4:	d103      	bne.n	8dde <_free_r+0x3e>
    8dd6:	6818      	ldr	r0, [r3, #0]
    8dd8:	685b      	ldr	r3, [r3, #4]
    8dda:	1882      	adds	r2, r0, r2
    8ddc:	6022      	str	r2, [r4, #0]
    8dde:	6063      	str	r3, [r4, #4]
    8de0:	600c      	str	r4, [r1, #0]
    8de2:	e7ee      	b.n	8dc2 <_free_r+0x22>
    8de4:	0013      	movs	r3, r2
    8de6:	685a      	ldr	r2, [r3, #4]
    8de8:	b10a      	cbz	r2, 8dee <_free_r+0x4e>
    8dea:	42a2      	cmp	r2, r4
    8dec:	d9fa      	bls.n	8de4 <_free_r+0x44>
    8dee:	6819      	ldr	r1, [r3, #0]
    8df0:	1858      	adds	r0, r3, r1
    8df2:	42a0      	cmp	r0, r4
    8df4:	d10b      	bne.n	8e0e <_free_r+0x6e>
    8df6:	6820      	ldr	r0, [r4, #0]
    8df8:	1809      	adds	r1, r1, r0
    8dfa:	1858      	adds	r0, r3, r1
    8dfc:	6019      	str	r1, [r3, #0]
    8dfe:	4282      	cmp	r2, r0
    8e00:	d1df      	bne.n	8dc2 <_free_r+0x22>
    8e02:	6810      	ldr	r0, [r2, #0]
    8e04:	6852      	ldr	r2, [r2, #4]
    8e06:	1841      	adds	r1, r0, r1
    8e08:	6019      	str	r1, [r3, #0]
    8e0a:	605a      	str	r2, [r3, #4]
    8e0c:	e7d9      	b.n	8dc2 <_free_r+0x22>
    8e0e:	42a0      	cmp	r0, r4
    8e10:	d902      	bls.n	8e18 <_free_r+0x78>
    8e12:	230c      	movs	r3, #12
    8e14:	602b      	str	r3, [r5, #0]
    8e16:	e7d4      	b.n	8dc2 <_free_r+0x22>
    8e18:	6821      	ldr	r1, [r4, #0]
    8e1a:	1860      	adds	r0, r4, r1
    8e1c:	4282      	cmp	r2, r0
    8e1e:	d103      	bne.n	8e28 <_free_r+0x88>
    8e20:	6810      	ldr	r0, [r2, #0]
    8e22:	6852      	ldr	r2, [r2, #4]
    8e24:	1841      	adds	r1, r0, r1
    8e26:	6021      	str	r1, [r4, #0]
    8e28:	6062      	str	r2, [r4, #4]
    8e2a:	605c      	str	r4, [r3, #4]
    8e2c:	e7c9      	b.n	8dc2 <_free_r+0x22>
    8e2e:	46c0      	nop			; (mov r8, r8)
    8e30:	200020a4 	.word	0x200020a4

00008e34 <_malloc_r>:
    8e34:	2303      	movs	r3, #3
    8e36:	b570      	push	{r4, r5, r6, lr}
    8e38:	1ccd      	adds	r5, r1, #3
    8e3a:	439d      	bics	r5, r3
    8e3c:	3508      	adds	r5, #8
    8e3e:	0006      	movs	r6, r0
    8e40:	2d0c      	cmp	r5, #12
    8e42:	d21c      	bcs.n	8e7e <_malloc_r+0x4a>
    8e44:	250c      	movs	r5, #12
    8e46:	42a9      	cmp	r1, r5
    8e48:	d81b      	bhi.n	8e82 <_malloc_r+0x4e>
    8e4a:	0030      	movs	r0, r6
    8e4c:	f000 f882 	bl	8f54 <__malloc_lock>
    8e50:	4a25      	ldr	r2, [pc, #148]	; (8ee8 <_malloc_r+0xb4>)
    8e52:	6814      	ldr	r4, [r2, #0]
    8e54:	0021      	movs	r1, r4
    8e56:	b9c1      	cbnz	r1, 8e8a <_malloc_r+0x56>
    8e58:	4c24      	ldr	r4, [pc, #144]	; (8eec <_malloc_r+0xb8>)
    8e5a:	6823      	ldr	r3, [r4, #0]
    8e5c:	b91b      	cbnz	r3, 8e66 <_malloc_r+0x32>
    8e5e:	0030      	movs	r0, r6
    8e60:	f000 f846 	bl	8ef0 <_sbrk_r>
    8e64:	6020      	str	r0, [r4, #0]
    8e66:	0029      	movs	r1, r5
    8e68:	0030      	movs	r0, r6
    8e6a:	f000 f841 	bl	8ef0 <_sbrk_r>
    8e6e:	1c43      	adds	r3, r0, #1
    8e70:	d12d      	bne.n	8ece <_malloc_r+0x9a>
    8e72:	230c      	movs	r3, #12
    8e74:	0030      	movs	r0, r6
    8e76:	6033      	str	r3, [r6, #0]
    8e78:	f000 f86d 	bl	8f56 <__malloc_unlock>
    8e7c:	e003      	b.n	8e86 <_malloc_r+0x52>
    8e7e:	2d00      	cmp	r5, #0
    8e80:	dae1      	bge.n	8e46 <_malloc_r+0x12>
    8e82:	230c      	movs	r3, #12
    8e84:	6033      	str	r3, [r6, #0]
    8e86:	2000      	movs	r0, #0
    8e88:	bd70      	pop	{r4, r5, r6, pc}
    8e8a:	680b      	ldr	r3, [r1, #0]
    8e8c:	1b5b      	subs	r3, r3, r5
    8e8e:	d41b      	bmi.n	8ec8 <_malloc_r+0x94>
    8e90:	2b0b      	cmp	r3, #11
    8e92:	d903      	bls.n	8e9c <_malloc_r+0x68>
    8e94:	600b      	str	r3, [r1, #0]
    8e96:	18cc      	adds	r4, r1, r3
    8e98:	6025      	str	r5, [r4, #0]
    8e9a:	e003      	b.n	8ea4 <_malloc_r+0x70>
    8e9c:	428c      	cmp	r4, r1
    8e9e:	d10f      	bne.n	8ec0 <_malloc_r+0x8c>
    8ea0:	6863      	ldr	r3, [r4, #4]
    8ea2:	6013      	str	r3, [r2, #0]
    8ea4:	0030      	movs	r0, r6
    8ea6:	f000 f856 	bl	8f56 <__malloc_unlock>
    8eaa:	0020      	movs	r0, r4
    8eac:	2207      	movs	r2, #7
    8eae:	300b      	adds	r0, #11
    8eb0:	1d23      	adds	r3, r4, #4
    8eb2:	4390      	bics	r0, r2
    8eb4:	1ac3      	subs	r3, r0, r3
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d0e6      	beq.n	8e88 <_malloc_r+0x54>
    8eba:	425a      	negs	r2, r3
    8ebc:	50e2      	str	r2, [r4, r3]
    8ebe:	e7e3      	b.n	8e88 <_malloc_r+0x54>
    8ec0:	684b      	ldr	r3, [r1, #4]
    8ec2:	6063      	str	r3, [r4, #4]
    8ec4:	000c      	movs	r4, r1
    8ec6:	e7ed      	b.n	8ea4 <_malloc_r+0x70>
    8ec8:	000c      	movs	r4, r1
    8eca:	6849      	ldr	r1, [r1, #4]
    8ecc:	e7c3      	b.n	8e56 <_malloc_r+0x22>
    8ece:	2303      	movs	r3, #3
    8ed0:	1cc4      	adds	r4, r0, #3
    8ed2:	439c      	bics	r4, r3
    8ed4:	42a0      	cmp	r0, r4
    8ed6:	d0df      	beq.n	8e98 <_malloc_r+0x64>
    8ed8:	1a21      	subs	r1, r4, r0
    8eda:	0030      	movs	r0, r6
    8edc:	f000 f808 	bl	8ef0 <_sbrk_r>
    8ee0:	1c43      	adds	r3, r0, #1
    8ee2:	d1d9      	bne.n	8e98 <_malloc_r+0x64>
    8ee4:	e7c5      	b.n	8e72 <_malloc_r+0x3e>
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	200020a4 	.word	0x200020a4
    8eec:	200020a8 	.word	0x200020a8

00008ef0 <_sbrk_r>:
    8ef0:	2300      	movs	r3, #0
    8ef2:	b570      	push	{r4, r5, r6, lr}
    8ef4:	4c05      	ldr	r4, [pc, #20]	; (8f0c <_sbrk_r+0x1c>)
    8ef6:	0005      	movs	r5, r0
    8ef8:	0008      	movs	r0, r1
    8efa:	6023      	str	r3, [r4, #0]
    8efc:	f000 fb54 	bl	95a8 <_sbrk>
    8f00:	1c43      	adds	r3, r0, #1
    8f02:	d102      	bne.n	8f0a <_sbrk_r+0x1a>
    8f04:	6823      	ldr	r3, [r4, #0]
    8f06:	b103      	cbz	r3, 8f0a <_sbrk_r+0x1a>
    8f08:	602b      	str	r3, [r5, #0]
    8f0a:	bd70      	pop	{r4, r5, r6, pc}
    8f0c:	200024d0 	.word	0x200024d0

00008f10 <siprintf>:
    8f10:	b40e      	push	{r1, r2, r3}
    8f12:	b510      	push	{r4, lr}
    8f14:	b09d      	sub	sp, #116	; 0x74
    8f16:	a902      	add	r1, sp, #8
    8f18:	9002      	str	r0, [sp, #8]
    8f1a:	6108      	str	r0, [r1, #16]
    8f1c:	480b      	ldr	r0, [pc, #44]	; (8f4c <siprintf+0x3c>)
    8f1e:	f240 2408 	movw	r4, #520	; 0x208
    8f22:	6088      	str	r0, [r1, #8]
    8f24:	6148      	str	r0, [r1, #20]
    8f26:	2001      	movs	r0, #1
    8f28:	4240      	negs	r0, r0
    8f2a:	ab1f      	add	r3, sp, #124	; 0x7c
    8f2c:	81c8      	strh	r0, [r1, #14]
    8f2e:	4808      	ldr	r0, [pc, #32]	; (8f50 <siprintf+0x40>)
    8f30:	cb04      	ldmia	r3!, {r2}
    8f32:	6800      	ldr	r0, [r0, #0]
    8f34:	9301      	str	r3, [sp, #4]
    8f36:	818c      	strh	r4, [r1, #12]
    8f38:	f000 f870 	bl	901c <_svfiprintf_r>
    8f3c:	2300      	movs	r3, #0
    8f3e:	9a02      	ldr	r2, [sp, #8]
    8f40:	7013      	strb	r3, [r2, #0]
    8f42:	b01d      	add	sp, #116	; 0x74
    8f44:	bc10      	pop	{r4}
    8f46:	bc08      	pop	{r3}
    8f48:	b003      	add	sp, #12
    8f4a:	4718      	bx	r3
    8f4c:	7fffffff 	.word	0x7fffffff
    8f50:	20002004 	.word	0x20002004

00008f54 <__malloc_lock>:
    8f54:	4770      	bx	lr

00008f56 <__malloc_unlock>:
    8f56:	4770      	bx	lr

00008f58 <__ssputs_r>:
    8f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f5a:	688e      	ldr	r6, [r1, #8]
    8f5c:	b085      	sub	sp, #20
    8f5e:	0007      	movs	r7, r0
    8f60:	000c      	movs	r4, r1
    8f62:	9203      	str	r2, [sp, #12]
    8f64:	9301      	str	r3, [sp, #4]
    8f66:	429e      	cmp	r6, r3
    8f68:	d839      	bhi.n	8fde <__ssputs_r+0x86>
    8f6a:	f240 4380 	movw	r3, #1152	; 0x480
    8f6e:	898a      	ldrh	r2, [r1, #12]
    8f70:	421a      	tst	r2, r3
    8f72:	d034      	beq.n	8fde <__ssputs_r+0x86>
    8f74:	2503      	movs	r5, #3
    8f76:	6909      	ldr	r1, [r1, #16]
    8f78:	6823      	ldr	r3, [r4, #0]
    8f7a:	1a5b      	subs	r3, r3, r1
    8f7c:	9302      	str	r3, [sp, #8]
    8f7e:	6963      	ldr	r3, [r4, #20]
    8f80:	9802      	ldr	r0, [sp, #8]
    8f82:	435d      	muls	r5, r3
    8f84:	0feb      	lsrs	r3, r5, #31
    8f86:	195d      	adds	r5, r3, r5
    8f88:	9b01      	ldr	r3, [sp, #4]
    8f8a:	106d      	asrs	r5, r5, #1
    8f8c:	3301      	adds	r3, #1
    8f8e:	181b      	adds	r3, r3, r0
    8f90:	42ab      	cmp	r3, r5
    8f92:	d900      	bls.n	8f96 <__ssputs_r+0x3e>
    8f94:	001d      	movs	r5, r3
    8f96:	0553      	lsls	r3, r2, #21
    8f98:	d532      	bpl.n	9000 <__ssputs_r+0xa8>
    8f9a:	0029      	movs	r1, r5
    8f9c:	0038      	movs	r0, r7
    8f9e:	f7ff ff49 	bl	8e34 <_malloc_r>
    8fa2:	0006      	movs	r6, r0
    8fa4:	b948      	cbnz	r0, 8fba <__ssputs_r+0x62>
    8fa6:	230c      	movs	r3, #12
    8fa8:	603b      	str	r3, [r7, #0]
    8faa:	2340      	movs	r3, #64	; 0x40
    8fac:	2001      	movs	r0, #1
    8fae:	89a2      	ldrh	r2, [r4, #12]
    8fb0:	4240      	negs	r0, r0
    8fb2:	4313      	orrs	r3, r2
    8fb4:	81a3      	strh	r3, [r4, #12]
    8fb6:	b005      	add	sp, #20
    8fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fba:	9a02      	ldr	r2, [sp, #8]
    8fbc:	6921      	ldr	r1, [r4, #16]
    8fbe:	f7ff fedd 	bl	8d7c <memcpy>
    8fc2:	89a3      	ldrh	r3, [r4, #12]
    8fc4:	4a14      	ldr	r2, [pc, #80]	; (9018 <__ssputs_r+0xc0>)
    8fc6:	401a      	ands	r2, r3
    8fc8:	2380      	movs	r3, #128	; 0x80
    8fca:	4313      	orrs	r3, r2
    8fcc:	81a3      	strh	r3, [r4, #12]
    8fce:	9b02      	ldr	r3, [sp, #8]
    8fd0:	6126      	str	r6, [r4, #16]
    8fd2:	18f6      	adds	r6, r6, r3
    8fd4:	6026      	str	r6, [r4, #0]
    8fd6:	6165      	str	r5, [r4, #20]
    8fd8:	9e01      	ldr	r6, [sp, #4]
    8fda:	1aed      	subs	r5, r5, r3
    8fdc:	60a5      	str	r5, [r4, #8]
    8fde:	9b01      	ldr	r3, [sp, #4]
    8fe0:	42b3      	cmp	r3, r6
    8fe2:	d200      	bcs.n	8fe6 <__ssputs_r+0x8e>
    8fe4:	001e      	movs	r6, r3
    8fe6:	0032      	movs	r2, r6
    8fe8:	9903      	ldr	r1, [sp, #12]
    8fea:	6820      	ldr	r0, [r4, #0]
    8fec:	f000 fa9d 	bl	952a <memmove>
    8ff0:	68a3      	ldr	r3, [r4, #8]
    8ff2:	2000      	movs	r0, #0
    8ff4:	1b9b      	subs	r3, r3, r6
    8ff6:	60a3      	str	r3, [r4, #8]
    8ff8:	6823      	ldr	r3, [r4, #0]
    8ffa:	199e      	adds	r6, r3, r6
    8ffc:	6026      	str	r6, [r4, #0]
    8ffe:	e7da      	b.n	8fb6 <__ssputs_r+0x5e>
    9000:	002a      	movs	r2, r5
    9002:	0038      	movs	r0, r7
    9004:	f000 faa3 	bl	954e <_realloc_r>
    9008:	0006      	movs	r6, r0
    900a:	2800      	cmp	r0, #0
    900c:	d1df      	bne.n	8fce <__ssputs_r+0x76>
    900e:	6921      	ldr	r1, [r4, #16]
    9010:	0038      	movs	r0, r7
    9012:	f7ff fec5 	bl	8da0 <_free_r>
    9016:	e7c6      	b.n	8fa6 <__ssputs_r+0x4e>
    9018:	fffffb7f 	.word	0xfffffb7f

0000901c <_svfiprintf_r>:
    901c:	b5f0      	push	{r4, r5, r6, r7, lr}
    901e:	b09f      	sub	sp, #124	; 0x7c
    9020:	9002      	str	r0, [sp, #8]
    9022:	9305      	str	r3, [sp, #20]
    9024:	898b      	ldrh	r3, [r1, #12]
    9026:	000f      	movs	r7, r1
    9028:	0016      	movs	r6, r2
    902a:	061b      	lsls	r3, r3, #24
    902c:	d50f      	bpl.n	904e <_svfiprintf_r+0x32>
    902e:	690b      	ldr	r3, [r1, #16]
    9030:	b96b      	cbnz	r3, 904e <_svfiprintf_r+0x32>
    9032:	2140      	movs	r1, #64	; 0x40
    9034:	f7ff fefe 	bl	8e34 <_malloc_r>
    9038:	6038      	str	r0, [r7, #0]
    903a:	6138      	str	r0, [r7, #16]
    903c:	b928      	cbnz	r0, 904a <_svfiprintf_r+0x2e>
    903e:	230c      	movs	r3, #12
    9040:	9a02      	ldr	r2, [sp, #8]
    9042:	3801      	subs	r0, #1
    9044:	6013      	str	r3, [r2, #0]
    9046:	b01f      	add	sp, #124	; 0x7c
    9048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    904a:	2340      	movs	r3, #64	; 0x40
    904c:	617b      	str	r3, [r7, #20]
    904e:	2300      	movs	r3, #0
    9050:	ad06      	add	r5, sp, #24
    9052:	616b      	str	r3, [r5, #20]
    9054:	3320      	adds	r3, #32
    9056:	766b      	strb	r3, [r5, #25]
    9058:	3310      	adds	r3, #16
    905a:	76ab      	strb	r3, [r5, #26]
    905c:	0034      	movs	r4, r6
    905e:	7823      	ldrb	r3, [r4, #0]
    9060:	2b00      	cmp	r3, #0
    9062:	d146      	bne.n	90f2 <_svfiprintf_r+0xd6>
    9064:	1ba3      	subs	r3, r4, r6
    9066:	9304      	str	r3, [sp, #16]
    9068:	b16b      	cbz	r3, 9086 <_svfiprintf_r+0x6a>
    906a:	1ba3      	subs	r3, r4, r6
    906c:	0032      	movs	r2, r6
    906e:	0039      	movs	r1, r7
    9070:	9802      	ldr	r0, [sp, #8]
    9072:	f7ff ff71 	bl	8f58 <__ssputs_r>
    9076:	1c43      	adds	r3, r0, #1
    9078:	d100      	bne.n	907c <_svfiprintf_r+0x60>
    907a:	e0b3      	b.n	91e4 <_svfiprintf_r+0x1c8>
    907c:	696a      	ldr	r2, [r5, #20]
    907e:	9b04      	ldr	r3, [sp, #16]
    9080:	4694      	mov	ip, r2
    9082:	4463      	add	r3, ip
    9084:	616b      	str	r3, [r5, #20]
    9086:	7823      	ldrb	r3, [r4, #0]
    9088:	2b00      	cmp	r3, #0
    908a:	d100      	bne.n	908e <_svfiprintf_r+0x72>
    908c:	e0aa      	b.n	91e4 <_svfiprintf_r+0x1c8>
    908e:	2201      	movs	r2, #1
    9090:	2300      	movs	r3, #0
    9092:	4252      	negs	r2, r2
    9094:	606a      	str	r2, [r5, #4]
    9096:	a902      	add	r1, sp, #8
    9098:	3254      	adds	r2, #84	; 0x54
    909a:	1852      	adds	r2, r2, r1
    909c:	3401      	adds	r4, #1
    909e:	602b      	str	r3, [r5, #0]
    90a0:	60eb      	str	r3, [r5, #12]
    90a2:	60ab      	str	r3, [r5, #8]
    90a4:	7013      	strb	r3, [r2, #0]
    90a6:	65ab      	str	r3, [r5, #88]	; 0x58
    90a8:	4e57      	ldr	r6, [pc, #348]	; (9208 <_svfiprintf_r+0x1ec>)
    90aa:	2205      	movs	r2, #5
    90ac:	7821      	ldrb	r1, [r4, #0]
    90ae:	0030      	movs	r0, r6
    90b0:	f000 fa30 	bl	9514 <memchr>
    90b4:	1c62      	adds	r2, r4, #1
    90b6:	bb00      	cbnz	r0, 90fa <_svfiprintf_r+0xde>
    90b8:	6829      	ldr	r1, [r5, #0]
    90ba:	06cb      	lsls	r3, r1, #27
    90bc:	d504      	bpl.n	90c8 <_svfiprintf_r+0xac>
    90be:	2353      	movs	r3, #83	; 0x53
    90c0:	ae02      	add	r6, sp, #8
    90c2:	3020      	adds	r0, #32
    90c4:	199b      	adds	r3, r3, r6
    90c6:	7018      	strb	r0, [r3, #0]
    90c8:	070b      	lsls	r3, r1, #28
    90ca:	d504      	bpl.n	90d6 <_svfiprintf_r+0xba>
    90cc:	2353      	movs	r3, #83	; 0x53
    90ce:	202b      	movs	r0, #43	; 0x2b
    90d0:	ae02      	add	r6, sp, #8
    90d2:	199b      	adds	r3, r3, r6
    90d4:	7018      	strb	r0, [r3, #0]
    90d6:	7823      	ldrb	r3, [r4, #0]
    90d8:	2b2a      	cmp	r3, #42	; 0x2a
    90da:	d016      	beq.n	910a <_svfiprintf_r+0xee>
    90dc:	2100      	movs	r1, #0
    90de:	200a      	movs	r0, #10
    90e0:	2601      	movs	r6, #1
    90e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    90e4:	7822      	ldrb	r2, [r4, #0]
    90e6:	3a30      	subs	r2, #48	; 0x30
    90e8:	2a09      	cmp	r2, #9
    90ea:	d952      	bls.n	9192 <_svfiprintf_r+0x176>
    90ec:	b1a9      	cbz	r1, 911a <_svfiprintf_r+0xfe>
    90ee:	9309      	str	r3, [sp, #36]	; 0x24
    90f0:	e013      	b.n	911a <_svfiprintf_r+0xfe>
    90f2:	2b25      	cmp	r3, #37	; 0x25
    90f4:	d0b6      	beq.n	9064 <_svfiprintf_r+0x48>
    90f6:	3401      	adds	r4, #1
    90f8:	e7b1      	b.n	905e <_svfiprintf_r+0x42>
    90fa:	2301      	movs	r3, #1
    90fc:	1b80      	subs	r0, r0, r6
    90fe:	4083      	lsls	r3, r0
    9100:	6829      	ldr	r1, [r5, #0]
    9102:	0014      	movs	r4, r2
    9104:	430b      	orrs	r3, r1
    9106:	602b      	str	r3, [r5, #0]
    9108:	e7ce      	b.n	90a8 <_svfiprintf_r+0x8c>
    910a:	9b05      	ldr	r3, [sp, #20]
    910c:	1d18      	adds	r0, r3, #4
    910e:	681b      	ldr	r3, [r3, #0]
    9110:	9005      	str	r0, [sp, #20]
    9112:	2b00      	cmp	r3, #0
    9114:	db37      	blt.n	9186 <_svfiprintf_r+0x16a>
    9116:	9309      	str	r3, [sp, #36]	; 0x24
    9118:	0014      	movs	r4, r2
    911a:	7823      	ldrb	r3, [r4, #0]
    911c:	2b2e      	cmp	r3, #46	; 0x2e
    911e:	d10b      	bne.n	9138 <_svfiprintf_r+0x11c>
    9120:	7863      	ldrb	r3, [r4, #1]
    9122:	1c62      	adds	r2, r4, #1
    9124:	2b2a      	cmp	r3, #42	; 0x2a
    9126:	d13c      	bne.n	91a2 <_svfiprintf_r+0x186>
    9128:	9b05      	ldr	r3, [sp, #20]
    912a:	3402      	adds	r4, #2
    912c:	1d1a      	adds	r2, r3, #4
    912e:	681b      	ldr	r3, [r3, #0]
    9130:	9205      	str	r2, [sp, #20]
    9132:	2b00      	cmp	r3, #0
    9134:	db32      	blt.n	919c <_svfiprintf_r+0x180>
    9136:	9307      	str	r3, [sp, #28]
    9138:	4e34      	ldr	r6, [pc, #208]	; (920c <_svfiprintf_r+0x1f0>)
    913a:	7821      	ldrb	r1, [r4, #0]
    913c:	2203      	movs	r2, #3
    913e:	0030      	movs	r0, r6
    9140:	f000 f9e8 	bl	9514 <memchr>
    9144:	b130      	cbz	r0, 9154 <_svfiprintf_r+0x138>
    9146:	2340      	movs	r3, #64	; 0x40
    9148:	1b80      	subs	r0, r0, r6
    914a:	4083      	lsls	r3, r0
    914c:	682a      	ldr	r2, [r5, #0]
    914e:	3401      	adds	r4, #1
    9150:	4313      	orrs	r3, r2
    9152:	602b      	str	r3, [r5, #0]
    9154:	7821      	ldrb	r1, [r4, #0]
    9156:	2206      	movs	r2, #6
    9158:	482d      	ldr	r0, [pc, #180]	; (9210 <_svfiprintf_r+0x1f4>)
    915a:	1c66      	adds	r6, r4, #1
    915c:	7629      	strb	r1, [r5, #24]
    915e:	f000 f9d9 	bl	9514 <memchr>
    9162:	2800      	cmp	r0, #0
    9164:	d046      	beq.n	91f4 <_svfiprintf_r+0x1d8>
    9166:	4b2b      	ldr	r3, [pc, #172]	; (9214 <_svfiprintf_r+0x1f8>)
    9168:	bb83      	cbnz	r3, 91cc <_svfiprintf_r+0x1b0>
    916a:	6829      	ldr	r1, [r5, #0]
    916c:	9b05      	ldr	r3, [sp, #20]
    916e:	2207      	movs	r2, #7
    9170:	05c9      	lsls	r1, r1, #23
    9172:	d529      	bpl.n	91c8 <_svfiprintf_r+0x1ac>
    9174:	189b      	adds	r3, r3, r2
    9176:	4393      	bics	r3, r2
    9178:	3308      	adds	r3, #8
    917a:	9305      	str	r3, [sp, #20]
    917c:	696b      	ldr	r3, [r5, #20]
    917e:	9a03      	ldr	r2, [sp, #12]
    9180:	189b      	adds	r3, r3, r2
    9182:	616b      	str	r3, [r5, #20]
    9184:	e76a      	b.n	905c <_svfiprintf_r+0x40>
    9186:	425b      	negs	r3, r3
    9188:	60eb      	str	r3, [r5, #12]
    918a:	2302      	movs	r3, #2
    918c:	430b      	orrs	r3, r1
    918e:	602b      	str	r3, [r5, #0]
    9190:	e7c2      	b.n	9118 <_svfiprintf_r+0xfc>
    9192:	4343      	muls	r3, r0
    9194:	3401      	adds	r4, #1
    9196:	189b      	adds	r3, r3, r2
    9198:	0031      	movs	r1, r6
    919a:	e7a3      	b.n	90e4 <_svfiprintf_r+0xc8>
    919c:	2301      	movs	r3, #1
    919e:	425b      	negs	r3, r3
    91a0:	e7c9      	b.n	9136 <_svfiprintf_r+0x11a>
    91a2:	2300      	movs	r3, #0
    91a4:	0014      	movs	r4, r2
    91a6:	200a      	movs	r0, #10
    91a8:	001a      	movs	r2, r3
    91aa:	2601      	movs	r6, #1
    91ac:	606b      	str	r3, [r5, #4]
    91ae:	7821      	ldrb	r1, [r4, #0]
    91b0:	3930      	subs	r1, #48	; 0x30
    91b2:	2909      	cmp	r1, #9
    91b4:	d903      	bls.n	91be <_svfiprintf_r+0x1a2>
    91b6:	2b00      	cmp	r3, #0
    91b8:	d0be      	beq.n	9138 <_svfiprintf_r+0x11c>
    91ba:	9207      	str	r2, [sp, #28]
    91bc:	e7bc      	b.n	9138 <_svfiprintf_r+0x11c>
    91be:	4342      	muls	r2, r0
    91c0:	3401      	adds	r4, #1
    91c2:	1852      	adds	r2, r2, r1
    91c4:	0033      	movs	r3, r6
    91c6:	e7f2      	b.n	91ae <_svfiprintf_r+0x192>
    91c8:	3307      	adds	r3, #7
    91ca:	e7d4      	b.n	9176 <_svfiprintf_r+0x15a>
    91cc:	ab05      	add	r3, sp, #20
    91ce:	9300      	str	r3, [sp, #0]
    91d0:	003a      	movs	r2, r7
    91d2:	4b11      	ldr	r3, [pc, #68]	; (9218 <_svfiprintf_r+0x1fc>)
    91d4:	0029      	movs	r1, r5
    91d6:	9802      	ldr	r0, [sp, #8]
    91d8:	e000      	b.n	91dc <_svfiprintf_r+0x1c0>
    91da:	bf00      	nop
    91dc:	9003      	str	r0, [sp, #12]
    91de:	9b03      	ldr	r3, [sp, #12]
    91e0:	3301      	adds	r3, #1
    91e2:	d1cb      	bne.n	917c <_svfiprintf_r+0x160>
    91e4:	89bb      	ldrh	r3, [r7, #12]
    91e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    91e8:	065b      	lsls	r3, r3, #25
    91ea:	d400      	bmi.n	91ee <_svfiprintf_r+0x1d2>
    91ec:	e72b      	b.n	9046 <_svfiprintf_r+0x2a>
    91ee:	2001      	movs	r0, #1
    91f0:	4240      	negs	r0, r0
    91f2:	e728      	b.n	9046 <_svfiprintf_r+0x2a>
    91f4:	ab05      	add	r3, sp, #20
    91f6:	9300      	str	r3, [sp, #0]
    91f8:	003a      	movs	r2, r7
    91fa:	4b07      	ldr	r3, [pc, #28]	; (9218 <_svfiprintf_r+0x1fc>)
    91fc:	0029      	movs	r1, r5
    91fe:	9802      	ldr	r0, [sp, #8]
    9200:	f000 f878 	bl	92f4 <_printf_i>
    9204:	e7ea      	b.n	91dc <_svfiprintf_r+0x1c0>
    9206:	46c0      	nop			; (mov r8, r8)
    9208:	000096a8 	.word	0x000096a8
    920c:	000096ae 	.word	0x000096ae
    9210:	000096b2 	.word	0x000096b2
    9214:	00000000 	.word	0x00000000
    9218:	00008f59 	.word	0x00008f59

0000921c <_printf_common>:
    921c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    921e:	0015      	movs	r5, r2
    9220:	9301      	str	r3, [sp, #4]
    9222:	688a      	ldr	r2, [r1, #8]
    9224:	690b      	ldr	r3, [r1, #16]
    9226:	9000      	str	r0, [sp, #0]
    9228:	000c      	movs	r4, r1
    922a:	4293      	cmp	r3, r2
    922c:	da00      	bge.n	9230 <_printf_common+0x14>
    922e:	0013      	movs	r3, r2
    9230:	0022      	movs	r2, r4
    9232:	602b      	str	r3, [r5, #0]
    9234:	3243      	adds	r2, #67	; 0x43
    9236:	7812      	ldrb	r2, [r2, #0]
    9238:	b10a      	cbz	r2, 923e <_printf_common+0x22>
    923a:	3301      	adds	r3, #1
    923c:	602b      	str	r3, [r5, #0]
    923e:	6823      	ldr	r3, [r4, #0]
    9240:	069b      	lsls	r3, r3, #26
    9242:	d502      	bpl.n	924a <_printf_common+0x2e>
    9244:	682b      	ldr	r3, [r5, #0]
    9246:	3302      	adds	r3, #2
    9248:	602b      	str	r3, [r5, #0]
    924a:	2706      	movs	r7, #6
    924c:	6823      	ldr	r3, [r4, #0]
    924e:	401f      	ands	r7, r3
    9250:	b33f      	cbz	r7, 92a2 <_printf_common+0x86>
    9252:	0023      	movs	r3, r4
    9254:	3343      	adds	r3, #67	; 0x43
    9256:	781b      	ldrb	r3, [r3, #0]
    9258:	1e5a      	subs	r2, r3, #1
    925a:	4193      	sbcs	r3, r2
    925c:	6822      	ldr	r2, [r4, #0]
    925e:	0692      	lsls	r2, r2, #26
    9260:	d430      	bmi.n	92c4 <_printf_common+0xa8>
    9262:	0022      	movs	r2, r4
    9264:	9901      	ldr	r1, [sp, #4]
    9266:	3243      	adds	r2, #67	; 0x43
    9268:	9800      	ldr	r0, [sp, #0]
    926a:	9e08      	ldr	r6, [sp, #32]
    926c:	47b0      	blx	r6
    926e:	1c43      	adds	r3, r0, #1
    9270:	d025      	beq.n	92be <_printf_common+0xa2>
    9272:	2306      	movs	r3, #6
    9274:	6820      	ldr	r0, [r4, #0]
    9276:	682a      	ldr	r2, [r5, #0]
    9278:	68e1      	ldr	r1, [r4, #12]
    927a:	4003      	ands	r3, r0
    927c:	2500      	movs	r5, #0
    927e:	2b04      	cmp	r3, #4
    9280:	d103      	bne.n	928a <_printf_common+0x6e>
    9282:	1a8d      	subs	r5, r1, r2
    9284:	43eb      	mvns	r3, r5
    9286:	17db      	asrs	r3, r3, #31
    9288:	401d      	ands	r5, r3
    928a:	68a3      	ldr	r3, [r4, #8]
    928c:	6922      	ldr	r2, [r4, #16]
    928e:	4293      	cmp	r3, r2
    9290:	dd01      	ble.n	9296 <_printf_common+0x7a>
    9292:	1a9b      	subs	r3, r3, r2
    9294:	18ed      	adds	r5, r5, r3
    9296:	2700      	movs	r7, #0
    9298:	42bd      	cmp	r5, r7
    929a:	d120      	bne.n	92de <_printf_common+0xc2>
    929c:	2000      	movs	r0, #0
    929e:	e010      	b.n	92c2 <_printf_common+0xa6>
    92a0:	3701      	adds	r7, #1
    92a2:	68e3      	ldr	r3, [r4, #12]
    92a4:	682a      	ldr	r2, [r5, #0]
    92a6:	1a9b      	subs	r3, r3, r2
    92a8:	429f      	cmp	r7, r3
    92aa:	dad2      	bge.n	9252 <_printf_common+0x36>
    92ac:	0022      	movs	r2, r4
    92ae:	2301      	movs	r3, #1
    92b0:	3219      	adds	r2, #25
    92b2:	9901      	ldr	r1, [sp, #4]
    92b4:	9800      	ldr	r0, [sp, #0]
    92b6:	9e08      	ldr	r6, [sp, #32]
    92b8:	47b0      	blx	r6
    92ba:	1c43      	adds	r3, r0, #1
    92bc:	d1f0      	bne.n	92a0 <_printf_common+0x84>
    92be:	2001      	movs	r0, #1
    92c0:	4240      	negs	r0, r0
    92c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    92c4:	2030      	movs	r0, #48	; 0x30
    92c6:	18e1      	adds	r1, r4, r3
    92c8:	3143      	adds	r1, #67	; 0x43
    92ca:	7008      	strb	r0, [r1, #0]
    92cc:	0021      	movs	r1, r4
    92ce:	1c5a      	adds	r2, r3, #1
    92d0:	3145      	adds	r1, #69	; 0x45
    92d2:	7809      	ldrb	r1, [r1, #0]
    92d4:	18a2      	adds	r2, r4, r2
    92d6:	3243      	adds	r2, #67	; 0x43
    92d8:	3302      	adds	r3, #2
    92da:	7011      	strb	r1, [r2, #0]
    92dc:	e7c1      	b.n	9262 <_printf_common+0x46>
    92de:	0022      	movs	r2, r4
    92e0:	2301      	movs	r3, #1
    92e2:	321a      	adds	r2, #26
    92e4:	9901      	ldr	r1, [sp, #4]
    92e6:	9800      	ldr	r0, [sp, #0]
    92e8:	9e08      	ldr	r6, [sp, #32]
    92ea:	47b0      	blx	r6
    92ec:	1c43      	adds	r3, r0, #1
    92ee:	d0e6      	beq.n	92be <_printf_common+0xa2>
    92f0:	3701      	adds	r7, #1
    92f2:	e7d1      	b.n	9298 <_printf_common+0x7c>

000092f4 <_printf_i>:
    92f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92f6:	000e      	movs	r6, r1
    92f8:	b089      	sub	sp, #36	; 0x24
    92fa:	9305      	str	r3, [sp, #20]
    92fc:	9003      	str	r0, [sp, #12]
    92fe:	9204      	str	r2, [sp, #16]
    9300:	7e0a      	ldrb	r2, [r1, #24]
    9302:	000c      	movs	r4, r1
    9304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9306:	3643      	adds	r6, #67	; 0x43
    9308:	2a6e      	cmp	r2, #110	; 0x6e
    930a:	d100      	bne.n	930e <_printf_i+0x1a>
    930c:	e08b      	b.n	9426 <_printf_i+0x132>
    930e:	d817      	bhi.n	9340 <_printf_i+0x4c>
    9310:	2a63      	cmp	r2, #99	; 0x63
    9312:	d02c      	beq.n	936e <_printf_i+0x7a>
    9314:	d808      	bhi.n	9328 <_printf_i+0x34>
    9316:	2a00      	cmp	r2, #0
    9318:	d100      	bne.n	931c <_printf_i+0x28>
    931a:	e095      	b.n	9448 <_printf_i+0x154>
    931c:	2a58      	cmp	r2, #88	; 0x58
    931e:	d065      	beq.n	93ec <_printf_i+0xf8>
    9320:	0025      	movs	r5, r4
    9322:	3542      	adds	r5, #66	; 0x42
    9324:	702a      	strb	r2, [r5, #0]
    9326:	e029      	b.n	937c <_printf_i+0x88>
    9328:	2a64      	cmp	r2, #100	; 0x64
    932a:	d001      	beq.n	9330 <_printf_i+0x3c>
    932c:	2a69      	cmp	r2, #105	; 0x69
    932e:	d1f7      	bne.n	9320 <_printf_i+0x2c>
    9330:	6821      	ldr	r1, [r4, #0]
    9332:	681a      	ldr	r2, [r3, #0]
    9334:	0608      	lsls	r0, r1, #24
    9336:	d523      	bpl.n	9380 <_printf_i+0x8c>
    9338:	1d11      	adds	r1, r2, #4
    933a:	6019      	str	r1, [r3, #0]
    933c:	6813      	ldr	r3, [r2, #0]
    933e:	e025      	b.n	938c <_printf_i+0x98>
    9340:	2a73      	cmp	r2, #115	; 0x73
    9342:	d100      	bne.n	9346 <_printf_i+0x52>
    9344:	e084      	b.n	9450 <_printf_i+0x15c>
    9346:	d808      	bhi.n	935a <_printf_i+0x66>
    9348:	2a6f      	cmp	r2, #111	; 0x6f
    934a:	d027      	beq.n	939c <_printf_i+0xa8>
    934c:	2a70      	cmp	r2, #112	; 0x70
    934e:	d1e7      	bne.n	9320 <_printf_i+0x2c>
    9350:	2220      	movs	r2, #32
    9352:	6809      	ldr	r1, [r1, #0]
    9354:	430a      	orrs	r2, r1
    9356:	6022      	str	r2, [r4, #0]
    9358:	e003      	b.n	9362 <_printf_i+0x6e>
    935a:	2a75      	cmp	r2, #117	; 0x75
    935c:	d01e      	beq.n	939c <_printf_i+0xa8>
    935e:	2a78      	cmp	r2, #120	; 0x78
    9360:	d1de      	bne.n	9320 <_printf_i+0x2c>
    9362:	0022      	movs	r2, r4
    9364:	2178      	movs	r1, #120	; 0x78
    9366:	3245      	adds	r2, #69	; 0x45
    9368:	7011      	strb	r1, [r2, #0]
    936a:	4968      	ldr	r1, [pc, #416]	; (950c <_printf_i+0x218>)
    936c:	e041      	b.n	93f2 <_printf_i+0xfe>
    936e:	000d      	movs	r5, r1
    9370:	681a      	ldr	r2, [r3, #0]
    9372:	3542      	adds	r5, #66	; 0x42
    9374:	1d11      	adds	r1, r2, #4
    9376:	6019      	str	r1, [r3, #0]
    9378:	6813      	ldr	r3, [r2, #0]
    937a:	702b      	strb	r3, [r5, #0]
    937c:	2301      	movs	r3, #1
    937e:	e074      	b.n	946a <_printf_i+0x176>
    9380:	0649      	lsls	r1, r1, #25
    9382:	d5d9      	bpl.n	9338 <_printf_i+0x44>
    9384:	1d11      	adds	r1, r2, #4
    9386:	6019      	str	r1, [r3, #0]
    9388:	2300      	movs	r3, #0
    938a:	5ed3      	ldrsh	r3, [r2, r3]
    938c:	2b00      	cmp	r3, #0
    938e:	da02      	bge.n	9396 <_printf_i+0xa2>
    9390:	222d      	movs	r2, #45	; 0x2d
    9392:	425b      	negs	r3, r3
    9394:	7032      	strb	r2, [r6, #0]
    9396:	495e      	ldr	r1, [pc, #376]	; (9510 <_printf_i+0x21c>)
    9398:	220a      	movs	r2, #10
    939a:	e015      	b.n	93c8 <_printf_i+0xd4>
    939c:	6820      	ldr	r0, [r4, #0]
    939e:	6819      	ldr	r1, [r3, #0]
    93a0:	0605      	lsls	r5, r0, #24
    93a2:	d503      	bpl.n	93ac <_printf_i+0xb8>
    93a4:	1d08      	adds	r0, r1, #4
    93a6:	6018      	str	r0, [r3, #0]
    93a8:	680b      	ldr	r3, [r1, #0]
    93aa:	e005      	b.n	93b8 <_printf_i+0xc4>
    93ac:	0640      	lsls	r0, r0, #25
    93ae:	d5f9      	bpl.n	93a4 <_printf_i+0xb0>
    93b0:	1d08      	adds	r0, r1, #4
    93b2:	6018      	str	r0, [r3, #0]
    93b4:	680b      	ldr	r3, [r1, #0]
    93b6:	b29b      	uxth	r3, r3
    93b8:	4955      	ldr	r1, [pc, #340]	; (9510 <_printf_i+0x21c>)
    93ba:	2a6f      	cmp	r2, #111	; 0x6f
    93bc:	d131      	bne.n	9422 <_printf_i+0x12e>
    93be:	3a67      	subs	r2, #103	; 0x67
    93c0:	0020      	movs	r0, r4
    93c2:	2500      	movs	r5, #0
    93c4:	3043      	adds	r0, #67	; 0x43
    93c6:	7005      	strb	r5, [r0, #0]
    93c8:	6860      	ldr	r0, [r4, #4]
    93ca:	60a0      	str	r0, [r4, #8]
    93cc:	2800      	cmp	r0, #0
    93ce:	db72      	blt.n	94b6 <_printf_i+0x1c2>
    93d0:	2504      	movs	r5, #4
    93d2:	6827      	ldr	r7, [r4, #0]
    93d4:	43af      	bics	r7, r5
    93d6:	6027      	str	r7, [r4, #0]
    93d8:	2b00      	cmp	r3, #0
    93da:	d16e      	bne.n	94ba <_printf_i+0x1c6>
    93dc:	0035      	movs	r5, r6
    93de:	2800      	cmp	r0, #0
    93e0:	d077      	beq.n	94d2 <_printf_i+0x1de>
    93e2:	0025      	movs	r5, r4
    93e4:	780b      	ldrb	r3, [r1, #0]
    93e6:	3542      	adds	r5, #66	; 0x42
    93e8:	702b      	strb	r3, [r5, #0]
    93ea:	e072      	b.n	94d2 <_printf_i+0x1de>
    93ec:	3145      	adds	r1, #69	; 0x45
    93ee:	700a      	strb	r2, [r1, #0]
    93f0:	4947      	ldr	r1, [pc, #284]	; (9510 <_printf_i+0x21c>)
    93f2:	681a      	ldr	r2, [r3, #0]
    93f4:	6820      	ldr	r0, [r4, #0]
    93f6:	1d15      	adds	r5, r2, #4
    93f8:	601d      	str	r5, [r3, #0]
    93fa:	6813      	ldr	r3, [r2, #0]
    93fc:	0605      	lsls	r5, r0, #24
    93fe:	d50c      	bpl.n	941a <_printf_i+0x126>
    9400:	07c2      	lsls	r2, r0, #31
    9402:	d502      	bpl.n	940a <_printf_i+0x116>
    9404:	2220      	movs	r2, #32
    9406:	4310      	orrs	r0, r2
    9408:	6020      	str	r0, [r4, #0]
    940a:	2210      	movs	r2, #16
    940c:	2b00      	cmp	r3, #0
    940e:	d1d7      	bne.n	93c0 <_printf_i+0xcc>
    9410:	2020      	movs	r0, #32
    9412:	6825      	ldr	r5, [r4, #0]
    9414:	4385      	bics	r5, r0
    9416:	6025      	str	r5, [r4, #0]
    9418:	e7d2      	b.n	93c0 <_printf_i+0xcc>
    941a:	0645      	lsls	r5, r0, #25
    941c:	d5f0      	bpl.n	9400 <_printf_i+0x10c>
    941e:	b29b      	uxth	r3, r3
    9420:	e7ee      	b.n	9400 <_printf_i+0x10c>
    9422:	220a      	movs	r2, #10
    9424:	e7cc      	b.n	93c0 <_printf_i+0xcc>
    9426:	6809      	ldr	r1, [r1, #0]
    9428:	681a      	ldr	r2, [r3, #0]
    942a:	0608      	lsls	r0, r1, #24
    942c:	d505      	bpl.n	943a <_printf_i+0x146>
    942e:	1d11      	adds	r1, r2, #4
    9430:	6019      	str	r1, [r3, #0]
    9432:	6813      	ldr	r3, [r2, #0]
    9434:	6962      	ldr	r2, [r4, #20]
    9436:	601a      	str	r2, [r3, #0]
    9438:	e006      	b.n	9448 <_printf_i+0x154>
    943a:	0649      	lsls	r1, r1, #25
    943c:	d5f7      	bpl.n	942e <_printf_i+0x13a>
    943e:	1d11      	adds	r1, r2, #4
    9440:	6019      	str	r1, [r3, #0]
    9442:	6813      	ldr	r3, [r2, #0]
    9444:	8aa2      	ldrh	r2, [r4, #20]
    9446:	801a      	strh	r2, [r3, #0]
    9448:	2300      	movs	r3, #0
    944a:	0035      	movs	r5, r6
    944c:	6123      	str	r3, [r4, #16]
    944e:	e04e      	b.n	94ee <_printf_i+0x1fa>
    9450:	681a      	ldr	r2, [r3, #0]
    9452:	1d11      	adds	r1, r2, #4
    9454:	6019      	str	r1, [r3, #0]
    9456:	6815      	ldr	r5, [r2, #0]
    9458:	2100      	movs	r1, #0
    945a:	6862      	ldr	r2, [r4, #4]
    945c:	0028      	movs	r0, r5
    945e:	f000 f859 	bl	9514 <memchr>
    9462:	b108      	cbz	r0, 9468 <_printf_i+0x174>
    9464:	1b40      	subs	r0, r0, r5
    9466:	6060      	str	r0, [r4, #4]
    9468:	6863      	ldr	r3, [r4, #4]
    946a:	6123      	str	r3, [r4, #16]
    946c:	2300      	movs	r3, #0
    946e:	7033      	strb	r3, [r6, #0]
    9470:	e03d      	b.n	94ee <_printf_i+0x1fa>
    9472:	6923      	ldr	r3, [r4, #16]
    9474:	002a      	movs	r2, r5
    9476:	9904      	ldr	r1, [sp, #16]
    9478:	9803      	ldr	r0, [sp, #12]
    947a:	9d05      	ldr	r5, [sp, #20]
    947c:	47a8      	blx	r5
    947e:	1c43      	adds	r3, r0, #1
    9480:	d03f      	beq.n	9502 <_printf_i+0x20e>
    9482:	6823      	ldr	r3, [r4, #0]
    9484:	2500      	movs	r5, #0
    9486:	079b      	lsls	r3, r3, #30
    9488:	d40f      	bmi.n	94aa <_printf_i+0x1b6>
    948a:	9b07      	ldr	r3, [sp, #28]
    948c:	68e0      	ldr	r0, [r4, #12]
    948e:	4298      	cmp	r0, r3
    9490:	da39      	bge.n	9506 <_printf_i+0x212>
    9492:	0018      	movs	r0, r3
    9494:	e037      	b.n	9506 <_printf_i+0x212>
    9496:	0022      	movs	r2, r4
    9498:	2301      	movs	r3, #1
    949a:	3219      	adds	r2, #25
    949c:	9904      	ldr	r1, [sp, #16]
    949e:	9803      	ldr	r0, [sp, #12]
    94a0:	9e05      	ldr	r6, [sp, #20]
    94a2:	47b0      	blx	r6
    94a4:	1c43      	adds	r3, r0, #1
    94a6:	d02c      	beq.n	9502 <_printf_i+0x20e>
    94a8:	3501      	adds	r5, #1
    94aa:	68e3      	ldr	r3, [r4, #12]
    94ac:	9a07      	ldr	r2, [sp, #28]
    94ae:	1a9b      	subs	r3, r3, r2
    94b0:	429d      	cmp	r5, r3
    94b2:	dbf0      	blt.n	9496 <_printf_i+0x1a2>
    94b4:	e7e9      	b.n	948a <_printf_i+0x196>
    94b6:	2b00      	cmp	r3, #0
    94b8:	d093      	beq.n	93e2 <_printf_i+0xee>
    94ba:	0035      	movs	r5, r6
    94bc:	fbb3 f0f2 	udiv	r0, r3, r2
    94c0:	0017      	movs	r7, r2
    94c2:	4347      	muls	r7, r0
    94c4:	1bdb      	subs	r3, r3, r7
    94c6:	5ccb      	ldrb	r3, [r1, r3]
    94c8:	3d01      	subs	r5, #1
    94ca:	702b      	strb	r3, [r5, #0]
    94cc:	0003      	movs	r3, r0
    94ce:	2800      	cmp	r0, #0
    94d0:	d1f4      	bne.n	94bc <_printf_i+0x1c8>
    94d2:	2a08      	cmp	r2, #8
    94d4:	d109      	bne.n	94ea <_printf_i+0x1f6>
    94d6:	6823      	ldr	r3, [r4, #0]
    94d8:	07db      	lsls	r3, r3, #31
    94da:	d506      	bpl.n	94ea <_printf_i+0x1f6>
    94dc:	6863      	ldr	r3, [r4, #4]
    94de:	6922      	ldr	r2, [r4, #16]
    94e0:	4293      	cmp	r3, r2
    94e2:	dc02      	bgt.n	94ea <_printf_i+0x1f6>
    94e4:	2330      	movs	r3, #48	; 0x30
    94e6:	3d01      	subs	r5, #1
    94e8:	702b      	strb	r3, [r5, #0]
    94ea:	1b76      	subs	r6, r6, r5
    94ec:	6126      	str	r6, [r4, #16]
    94ee:	9b05      	ldr	r3, [sp, #20]
    94f0:	aa07      	add	r2, sp, #28
    94f2:	9300      	str	r3, [sp, #0]
    94f4:	0021      	movs	r1, r4
    94f6:	9b04      	ldr	r3, [sp, #16]
    94f8:	9803      	ldr	r0, [sp, #12]
    94fa:	f7ff fe8f 	bl	921c <_printf_common>
    94fe:	1c43      	adds	r3, r0, #1
    9500:	d1b7      	bne.n	9472 <_printf_i+0x17e>
    9502:	2001      	movs	r0, #1
    9504:	4240      	negs	r0, r0
    9506:	b009      	add	sp, #36	; 0x24
    9508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    950a:	46c0      	nop			; (mov r8, r8)
    950c:	000096ca 	.word	0x000096ca
    9510:	000096b9 	.word	0x000096b9

00009514 <memchr>:
    9514:	b2c9      	uxtb	r1, r1
    9516:	1882      	adds	r2, r0, r2
    9518:	4290      	cmp	r0, r2
    951a:	d101      	bne.n	9520 <memchr+0xc>
    951c:	2000      	movs	r0, #0
    951e:	4770      	bx	lr
    9520:	7803      	ldrb	r3, [r0, #0]
    9522:	428b      	cmp	r3, r1
    9524:	d0fb      	beq.n	951e <memchr+0xa>
    9526:	3001      	adds	r0, #1
    9528:	e7f6      	b.n	9518 <memchr+0x4>

0000952a <memmove>:
    952a:	b510      	push	{r4, lr}
    952c:	4288      	cmp	r0, r1
    952e:	d902      	bls.n	9536 <memmove+0xc>
    9530:	188b      	adds	r3, r1, r2
    9532:	4298      	cmp	r0, r3
    9534:	d308      	bcc.n	9548 <memmove+0x1e>
    9536:	2300      	movs	r3, #0
    9538:	429a      	cmp	r2, r3
    953a:	d007      	beq.n	954c <memmove+0x22>
    953c:	5ccc      	ldrb	r4, [r1, r3]
    953e:	54c4      	strb	r4, [r0, r3]
    9540:	3301      	adds	r3, #1
    9542:	e7f9      	b.n	9538 <memmove+0xe>
    9544:	5c8b      	ldrb	r3, [r1, r2]
    9546:	5483      	strb	r3, [r0, r2]
    9548:	3a01      	subs	r2, #1
    954a:	d2fb      	bcs.n	9544 <memmove+0x1a>
    954c:	bd10      	pop	{r4, pc}

0000954e <_realloc_r>:
    954e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9550:	0007      	movs	r7, r0
    9552:	000d      	movs	r5, r1
    9554:	0016      	movs	r6, r2
    9556:	b929      	cbnz	r1, 9564 <_realloc_r+0x16>
    9558:	0011      	movs	r1, r2
    955a:	f7ff fc6b 	bl	8e34 <_malloc_r>
    955e:	0004      	movs	r4, r0
    9560:	0020      	movs	r0, r4
    9562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9564:	b91a      	cbnz	r2, 956e <_realloc_r+0x20>
    9566:	f7ff fc1b 	bl	8da0 <_free_r>
    956a:	0034      	movs	r4, r6
    956c:	e7f8      	b.n	9560 <_realloc_r+0x12>
    956e:	f000 f813 	bl	9598 <_malloc_usable_size_r>
    9572:	002c      	movs	r4, r5
    9574:	4286      	cmp	r6, r0
    9576:	d9f3      	bls.n	9560 <_realloc_r+0x12>
    9578:	0031      	movs	r1, r6
    957a:	0038      	movs	r0, r7
    957c:	f7ff fc5a 	bl	8e34 <_malloc_r>
    9580:	0004      	movs	r4, r0
    9582:	2800      	cmp	r0, #0
    9584:	d0ec      	beq.n	9560 <_realloc_r+0x12>
    9586:	0029      	movs	r1, r5
    9588:	0032      	movs	r2, r6
    958a:	f7ff fbf7 	bl	8d7c <memcpy>
    958e:	0029      	movs	r1, r5
    9590:	0038      	movs	r0, r7
    9592:	f7ff fc05 	bl	8da0 <_free_r>
    9596:	e7e3      	b.n	9560 <_realloc_r+0x12>

00009598 <_malloc_usable_size_r>:
    9598:	1f0b      	subs	r3, r1, #4
    959a:	681b      	ldr	r3, [r3, #0]
    959c:	1f18      	subs	r0, r3, #4
    959e:	2b00      	cmp	r3, #0
    95a0:	da01      	bge.n	95a6 <_malloc_usable_size_r+0xe>
    95a2:	580b      	ldr	r3, [r1, r0]
    95a4:	18c0      	adds	r0, r0, r3
    95a6:	4770      	bx	lr

000095a8 <_sbrk>:
    95a8:	f242 03ac 	movw	r3, #8364	; 0x20ac
    95ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b0:	681a      	ldr	r2, [r3, #0]
    95b2:	b11a      	cbz	r2, 95bc <_sbrk+0x14>
    95b4:	1810      	adds	r0, r2, r0
    95b6:	6018      	str	r0, [r3, #0]
    95b8:	0010      	movs	r0, r2
    95ba:	4770      	bx	lr
    95bc:	f242 42d8 	movw	r2, #9432	; 0x24d8
    95c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
    95c4:	e7f6      	b.n	95b4 <_sbrk+0xc>
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	49485053 	.word	0x49485053
    95cc:	5053434e 	.word	0x5053434e
    95d0:	434e4948 	.word	0x434e4948
    95d4:	0000000a 	.word	0x0000000a
    95d8:	6f50200a 	.word	0x6f50200a
    95dc:	00203a58 	.word	0x00203a58
    95e0:	00007830 	.word	0x00007830
    95e4:	78322e25 	.word	0x78322e25
    95e8:	00000000 	.word	0x00000000
    95ec:	6f6c2041 	.word	0x6f6c2041
    95f0:	666f2074 	.word	0x666f2074
    95f4:	6c656820 	.word	0x6c656820
    95f8:	6f6f6f6c 	.word	0x6f6f6f6c
    95fc:	0a6f6f6f 	.word	0x0a6f6f6f
    9600:	00000000 	.word	0x00000000
    9604:	000a6948 	.word	0x000a6948
    9608:	65636552 	.word	0x65636552
    960c:	3a657669 	.word	0x3a657669
    9610:	00000020 	.word	0x00000020
    9614:	5f746567 	.word	0x5f746567
    9618:	69687073 	.word	0x69687073
    961c:	735f636e 	.word	0x735f636e
    9620:	61206769 	.word	0x61206769
    9624:	00203a74 	.word	0x00203a74
    9628:	70617257 	.word	0x70617257
    962c:	20726570 	.word	0x20726570
    9630:	74736574 	.word	0x74736574
    9634:	3a746120 	.word	0x3a746120
    9638:	00000020 	.word	0x00000020
    963c:	72617453 	.word	0x72617453
    9640:	75722074 	.word	0x75722074
    9644:	6e696e6e 	.word	0x6e696e6e
    9648:	70732067 	.word	0x70732067
    964c:	636e6968 	.word	0x636e6968
    9650:	00000a73 	.word	0x00000a73
    9654:	3d3d3d3d 	.word	0x3d3d3d3d
    9658:	3d3d3d3d 	.word	0x3d3d3d3d
    965c:	203d3d3d 	.word	0x203d3d3d
    9660:	7074754f 	.word	0x7074754f
    9664:	3d207475 	.word	0x3d207475
    9668:	3d3d3d3d 	.word	0x3d3d3d3d
    966c:	3d3d3d3d 	.word	0x3d3d3d3d
    9670:	000a3d3d 	.word	0x000a3d3d
    9674:	3d3d3d3d 	.word	0x3d3d3d3d
    9678:	3d3d3d3d 	.word	0x3d3d3d3d
    967c:	203d3d3d 	.word	0x203d3d3d
    9680:	7074754f 	.word	0x7074754f
    9684:	74207475 	.word	0x74207475
    9688:	6e656b6f 	.word	0x6e656b6f
    968c:	3d3d3d20 	.word	0x3d3d3d20
    9690:	3d3d3d3d 	.word	0x3d3d3d3d
    9694:	3d3d3d3d 	.word	0x3d3d3d3d
    9698:	0000000a 	.word	0x0000000a
    969c:	63617453 	.word	0x63617453
    96a0:	7375206b 	.word	0x7375206b
    96a4:	000a6465 	.word	0x000a6465
    96a8:	2b302d23 	.word	0x2b302d23
    96ac:	6c680020 	.word	0x6c680020
    96b0:	6665004c 	.word	0x6665004c
    96b4:	47464567 	.word	0x47464567
    96b8:	00          	.byte	0x00
    96b9:	30          	.byte	0x30
    96ba:	3231      	.short	0x3231
    96bc:	36353433 	.word	0x36353433
    96c0:	41393837 	.word	0x41393837
    96c4:	45444342 	.word	0x45444342
    96c8:	31300046 	.word	0x31300046
    96cc:	35343332 	.word	0x35343332
    96d0:	39383736 	.word	0x39383736
    96d4:	64636261 	.word	0x64636261
    96d8:	00006665 	.word	0x00006665

000096dc <__sf_fake_stderr>:
	...

000096fc <__sf_fake_stdin>:
	...

0000971c <__sf_fake_stdout>:
	...

0000973c <_init>:
    973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    973e:	46c0      	nop			; (mov r8, r8)
    9740:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9742:	bc08      	pop	{r3}
    9744:	469e      	mov	lr, r3
    9746:	4770      	bx	lr

00009748 <__init_array_start>:
    9748:	00008121 	.word	0x00008121

0000974c <_fini>:
    974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    974e:	46c0      	nop			; (mov r8, r8)
    9750:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9752:	bc08      	pop	{r3}
    9754:	469e      	mov	lr, r3
    9756:	4770      	bx	lr

00009758 <__fini_array_start>:
    9758:	000080f5 	.word	0x000080f5
