
TRACES_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dec  0c0001f8  0c0001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  0c004fe4  0c004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0051f8  0c0051f8  00008040  2**0
                  CONTENTS
  4 .ARM          00000008  0c0051f8  0c0051f8  000061f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c005200  0c005200  00008040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c005200  0c005200  00006200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c005204  0c005204  00006204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  30000000  0c005208  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000002bc  30000080  30000080  00008080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  3000033c  3000033c  00008080  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018628  00000000  00000000  00008076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af9  00000000  00000000  0002069e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00024198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001478  00000000  00000000  00025300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003478  00000000  00000000  00026778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1dd  00000000  00000000  00029bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e71b  00000000  00000000  00047dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001564e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c0  00000000  00000000  0015652c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000be46  00000000  00000000  001595ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  00165432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f8 <__do_global_dtors_aux>:
 c0001f8:	b510      	push	{r4, lr}
 c0001fa:	4c05      	ldr	r4, [pc, #20]	@ (c000210 <__do_global_dtors_aux+0x18>)
 c0001fc:	7823      	ldrb	r3, [r4, #0]
 c0001fe:	b933      	cbnz	r3, c00020e <__do_global_dtors_aux+0x16>
 c000200:	4b04      	ldr	r3, [pc, #16]	@ (c000214 <__do_global_dtors_aux+0x1c>)
 c000202:	b113      	cbz	r3, c00020a <__do_global_dtors_aux+0x12>
 c000204:	4804      	ldr	r0, [pc, #16]	@ (c000218 <__do_global_dtors_aux+0x20>)
 c000206:	f3af 8000 	nop.w
 c00020a:	2301      	movs	r3, #1
 c00020c:	7023      	strb	r3, [r4, #0]
 c00020e:	bd10      	pop	{r4, pc}
 c000210:	30000080 	.word	0x30000080
 c000214:	00000000 	.word	0x00000000
 c000218:	0c004fcc 	.word	0x0c004fcc

0c00021c <frame_dummy>:
 c00021c:	b508      	push	{r3, lr}
 c00021e:	4b03      	ldr	r3, [pc, #12]	@ (c00022c <frame_dummy+0x10>)
 c000220:	b11b      	cbz	r3, c00022a <frame_dummy+0xe>
 c000222:	4903      	ldr	r1, [pc, #12]	@ (c000230 <frame_dummy+0x14>)
 c000224:	4803      	ldr	r0, [pc, #12]	@ (c000234 <frame_dummy+0x18>)
 c000226:	f3af 8000 	nop.w
 c00022a:	bd08      	pop	{r3, pc}
 c00022c:	00000000 	.word	0x00000000
 c000230:	30000084 	.word	0x30000084
 c000234:	0c004fcc 	.word	0x0c004fcc

0c000238 <__gnu_cmse_nonsecure_call>:
 c000238:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00023c:	4627      	mov	r7, r4
 c00023e:	46a0      	mov	r8, r4
 c000240:	46a1      	mov	r9, r4
 c000242:	46a2      	mov	sl, r4
 c000244:	46a3      	mov	fp, r4
 c000246:	46a4      	mov	ip, r4
 c000248:	ed2d 8b10 	vpush	{d8-d15}
 c00024c:	f04f 0500 	mov.w	r5, #0
 c000250:	ec45 5b18 	vmov	d8, r5, r5
 c000254:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000258:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00025c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000260:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000264:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000268:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00026c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000270:	eef1 5a10 	vmrs	r5, fpscr
 c000274:	f64f 7660 	movw	r6, #65376	@ 0xff60
 c000278:	f6c0 76ff 	movt	r6, #4095	@ 0xfff
 c00027c:	4035      	ands	r5, r6
 c00027e:	eee1 5a10 	vmsr	fpscr, r5
 c000282:	f384 8800 	msr	CPSR_f, r4
 c000286:	4625      	mov	r5, r4
 c000288:	4626      	mov	r6, r4
 c00028a:	47a4      	blxns	r4
 c00028c:	ecbd 8b10 	vpop	{d8-d15}
 c000290:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000294 <__aeabi_uldivmod>:
 c000294:	b953      	cbnz	r3, c0002ac <__aeabi_uldivmod+0x18>
 c000296:	b94a      	cbnz	r2, c0002ac <__aeabi_uldivmod+0x18>
 c000298:	2900      	cmp	r1, #0
 c00029a:	bf08      	it	eq
 c00029c:	2800      	cmpeq	r0, #0
 c00029e:	bf1c      	itt	ne
 c0002a0:	f04f 31ff 	movne.w	r1, #4294967295
 c0002a4:	f04f 30ff 	movne.w	r0, #4294967295
 c0002a8:	f000 b97e 	b.w	c0005a8 <__aeabi_idiv0>
 c0002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 c0002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c0002b4:	f000 f806 	bl	c0002c4 <__udivmoddi4>
 c0002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0002c0:	b004      	add	sp, #16
 c0002c2:	4770      	bx	lr

0c0002c4 <__udivmoddi4>:
 c0002c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0002c8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 c0002ca:	460c      	mov	r4, r1
 c0002cc:	2b00      	cmp	r3, #0
 c0002ce:	d14d      	bne.n	c00036c <__udivmoddi4+0xa8>
 c0002d0:	428a      	cmp	r2, r1
 c0002d2:	460f      	mov	r7, r1
 c0002d4:	4684      	mov	ip, r0
 c0002d6:	4696      	mov	lr, r2
 c0002d8:	fab2 f382 	clz	r3, r2
 c0002dc:	d960      	bls.n	c0003a0 <__udivmoddi4+0xdc>
 c0002de:	b14b      	cbz	r3, c0002f4 <__udivmoddi4+0x30>
 c0002e0:	fa02 fe03 	lsl.w	lr, r2, r3
 c0002e4:	f1c3 0220 	rsb	r2, r3, #32
 c0002e8:	409f      	lsls	r7, r3
 c0002ea:	fa00 fc03 	lsl.w	ip, r0, r3
 c0002ee:	fa20 f202 	lsr.w	r2, r0, r2
 c0002f2:	4317      	orrs	r7, r2
 c0002f4:	ea4f 461e 	mov.w	r6, lr, lsr #16
 c0002f8:	fa1f f48e 	uxth.w	r4, lr
 c0002fc:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c000300:	fbb7 f1f6 	udiv	r1, r7, r6
 c000304:	fb06 7711 	mls	r7, r6, r1, r7
 c000308:	fb01 f004 	mul.w	r0, r1, r4
 c00030c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c000310:	4290      	cmp	r0, r2
 c000312:	d908      	bls.n	c000326 <__udivmoddi4+0x62>
 c000314:	eb1e 0202 	adds.w	r2, lr, r2
 c000318:	f101 37ff 	add.w	r7, r1, #4294967295
 c00031c:	d202      	bcs.n	c000324 <__udivmoddi4+0x60>
 c00031e:	4290      	cmp	r0, r2
 c000320:	f200 812d 	bhi.w	c00057e <__udivmoddi4+0x2ba>
 c000324:	4639      	mov	r1, r7
 c000326:	1a12      	subs	r2, r2, r0
 c000328:	fa1f fc8c 	uxth.w	ip, ip
 c00032c:	fbb2 f0f6 	udiv	r0, r2, r6
 c000330:	fb06 2210 	mls	r2, r6, r0, r2
 c000334:	fb00 f404 	mul.w	r4, r0, r4
 c000338:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c00033c:	4564      	cmp	r4, ip
 c00033e:	d908      	bls.n	c000352 <__udivmoddi4+0x8e>
 c000340:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000344:	f100 32ff 	add.w	r2, r0, #4294967295
 c000348:	d202      	bcs.n	c000350 <__udivmoddi4+0x8c>
 c00034a:	4564      	cmp	r4, ip
 c00034c:	f200 811a 	bhi.w	c000584 <__udivmoddi4+0x2c0>
 c000350:	4610      	mov	r0, r2
 c000352:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 c000356:	ebac 0c04 	sub.w	ip, ip, r4
 c00035a:	2100      	movs	r1, #0
 c00035c:	b125      	cbz	r5, c000368 <__udivmoddi4+0xa4>
 c00035e:	fa2c f303 	lsr.w	r3, ip, r3
 c000362:	2200      	movs	r2, #0
 c000364:	e9c5 3200 	strd	r3, r2, [r5]
 c000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00036c:	428b      	cmp	r3, r1
 c00036e:	d905      	bls.n	c00037c <__udivmoddi4+0xb8>
 c000370:	b10d      	cbz	r5, c000376 <__udivmoddi4+0xb2>
 c000372:	e9c5 0100 	strd	r0, r1, [r5]
 c000376:	2100      	movs	r1, #0
 c000378:	4608      	mov	r0, r1
 c00037a:	e7f5      	b.n	c000368 <__udivmoddi4+0xa4>
 c00037c:	fab3 f183 	clz	r1, r3
 c000380:	2900      	cmp	r1, #0
 c000382:	d14d      	bne.n	c000420 <__udivmoddi4+0x15c>
 c000384:	42a3      	cmp	r3, r4
 c000386:	f0c0 80f2 	bcc.w	c00056e <__udivmoddi4+0x2aa>
 c00038a:	4290      	cmp	r0, r2
 c00038c:	f080 80ef 	bcs.w	c00056e <__udivmoddi4+0x2aa>
 c000390:	4606      	mov	r6, r0
 c000392:	4623      	mov	r3, r4
 c000394:	4608      	mov	r0, r1
 c000396:	2d00      	cmp	r5, #0
 c000398:	d0e6      	beq.n	c000368 <__udivmoddi4+0xa4>
 c00039a:	e9c5 6300 	strd	r6, r3, [r5]
 c00039e:	e7e3      	b.n	c000368 <__udivmoddi4+0xa4>
 c0003a0:	2b00      	cmp	r3, #0
 c0003a2:	f040 80a2 	bne.w	c0004ea <__udivmoddi4+0x226>
 c0003a6:	1a8a      	subs	r2, r1, r2
 c0003a8:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c0003ac:	fa1f f68e 	uxth.w	r6, lr
 c0003b0:	2101      	movs	r1, #1
 c0003b2:	fbb2 f4f7 	udiv	r4, r2, r7
 c0003b6:	fb07 2014 	mls	r0, r7, r4, r2
 c0003ba:	ea4f 421c 	mov.w	r2, ip, lsr #16
 c0003be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 c0003c2:	fb06 f004 	mul.w	r0, r6, r4
 c0003c6:	4290      	cmp	r0, r2
 c0003c8:	d90f      	bls.n	c0003ea <__udivmoddi4+0x126>
 c0003ca:	eb1e 0202 	adds.w	r2, lr, r2
 c0003ce:	f104 38ff 	add.w	r8, r4, #4294967295
 c0003d2:	bf2c      	ite	cs
 c0003d4:	f04f 0901 	movcs.w	r9, #1
 c0003d8:	f04f 0900 	movcc.w	r9, #0
 c0003dc:	4290      	cmp	r0, r2
 c0003de:	d903      	bls.n	c0003e8 <__udivmoddi4+0x124>
 c0003e0:	f1b9 0f00 	cmp.w	r9, #0
 c0003e4:	f000 80c8 	beq.w	c000578 <__udivmoddi4+0x2b4>
 c0003e8:	4644      	mov	r4, r8
 c0003ea:	1a12      	subs	r2, r2, r0
 c0003ec:	fa1f fc8c 	uxth.w	ip, ip
 c0003f0:	fbb2 f0f7 	udiv	r0, r2, r7
 c0003f4:	fb07 2210 	mls	r2, r7, r0, r2
 c0003f8:	fb00 f606 	mul.w	r6, r0, r6
 c0003fc:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 c000400:	4566      	cmp	r6, ip
 c000402:	d908      	bls.n	c000416 <__udivmoddi4+0x152>
 c000404:	eb1e 0c0c 	adds.w	ip, lr, ip
 c000408:	f100 32ff 	add.w	r2, r0, #4294967295
 c00040c:	d202      	bcs.n	c000414 <__udivmoddi4+0x150>
 c00040e:	4566      	cmp	r6, ip
 c000410:	f200 80bb 	bhi.w	c00058a <__udivmoddi4+0x2c6>
 c000414:	4610      	mov	r0, r2
 c000416:	ebac 0c06 	sub.w	ip, ip, r6
 c00041a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 c00041e:	e79d      	b.n	c00035c <__udivmoddi4+0x98>
 c000420:	f1c1 0620 	rsb	r6, r1, #32
 c000424:	408b      	lsls	r3, r1
 c000426:	fa04 fe01 	lsl.w	lr, r4, r1
 c00042a:	fa22 f706 	lsr.w	r7, r2, r6
 c00042e:	fa20 fc06 	lsr.w	ip, r0, r6
 c000432:	40f4      	lsrs	r4, r6
 c000434:	408a      	lsls	r2, r1
 c000436:	431f      	orrs	r7, r3
 c000438:	ea4e 030c 	orr.w	r3, lr, ip
 c00043c:	fa00 fe01 	lsl.w	lr, r0, r1
 c000440:	ea4f 4817 	mov.w	r8, r7, lsr #16
 c000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 c000448:	fa1f fc87 	uxth.w	ip, r7
 c00044c:	fbb4 f0f8 	udiv	r0, r4, r8
 c000450:	fb08 4410 	mls	r4, r8, r0, r4
 c000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c000458:	fb00 f90c 	mul.w	r9, r0, ip
 c00045c:	45a1      	cmp	r9, r4
 c00045e:	d90e      	bls.n	c00047e <__udivmoddi4+0x1ba>
 c000460:	193c      	adds	r4, r7, r4
 c000462:	f100 3aff 	add.w	sl, r0, #4294967295
 c000466:	bf2c      	ite	cs
 c000468:	f04f 0b01 	movcs.w	fp, #1
 c00046c:	f04f 0b00 	movcc.w	fp, #0
 c000470:	45a1      	cmp	r9, r4
 c000472:	d903      	bls.n	c00047c <__udivmoddi4+0x1b8>
 c000474:	f1bb 0f00 	cmp.w	fp, #0
 c000478:	f000 8093 	beq.w	c0005a2 <__udivmoddi4+0x2de>
 c00047c:	4650      	mov	r0, sl
 c00047e:	eba4 0409 	sub.w	r4, r4, r9
 c000482:	fa1f f983 	uxth.w	r9, r3
 c000486:	fbb4 f3f8 	udiv	r3, r4, r8
 c00048a:	fb08 4413 	mls	r4, r8, r3, r4
 c00048e:	fb03 fc0c 	mul.w	ip, r3, ip
 c000492:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 c000496:	45a4      	cmp	ip, r4
 c000498:	d906      	bls.n	c0004a8 <__udivmoddi4+0x1e4>
 c00049a:	193c      	adds	r4, r7, r4
 c00049c:	f103 38ff 	add.w	r8, r3, #4294967295
 c0004a0:	d201      	bcs.n	c0004a6 <__udivmoddi4+0x1e2>
 c0004a2:	45a4      	cmp	ip, r4
 c0004a4:	d87a      	bhi.n	c00059c <__udivmoddi4+0x2d8>
 c0004a6:	4643      	mov	r3, r8
 c0004a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 c0004ac:	eba4 040c 	sub.w	r4, r4, ip
 c0004b0:	fba0 9802 	umull	r9, r8, r0, r2
 c0004b4:	4544      	cmp	r4, r8
 c0004b6:	46cc      	mov	ip, r9
 c0004b8:	4643      	mov	r3, r8
 c0004ba:	d302      	bcc.n	c0004c2 <__udivmoddi4+0x1fe>
 c0004bc:	d106      	bne.n	c0004cc <__udivmoddi4+0x208>
 c0004be:	45ce      	cmp	lr, r9
 c0004c0:	d204      	bcs.n	c0004cc <__udivmoddi4+0x208>
 c0004c2:	3801      	subs	r0, #1
 c0004c4:	ebb9 0c02 	subs.w	ip, r9, r2
 c0004c8:	eb68 0307 	sbc.w	r3, r8, r7
 c0004cc:	b15d      	cbz	r5, c0004e6 <__udivmoddi4+0x222>
 c0004ce:	ebbe 020c 	subs.w	r2, lr, ip
 c0004d2:	eb64 0403 	sbc.w	r4, r4, r3
 c0004d6:	fa04 f606 	lsl.w	r6, r4, r6
 c0004da:	fa22 f301 	lsr.w	r3, r2, r1
 c0004de:	40cc      	lsrs	r4, r1
 c0004e0:	431e      	orrs	r6, r3
 c0004e2:	e9c5 6400 	strd	r6, r4, [r5]
 c0004e6:	2100      	movs	r1, #0
 c0004e8:	e73e      	b.n	c000368 <__udivmoddi4+0xa4>
 c0004ea:	fa02 fe03 	lsl.w	lr, r2, r3
 c0004ee:	f1c3 0120 	rsb	r1, r3, #32
 c0004f2:	fa04 f203 	lsl.w	r2, r4, r3
 c0004f6:	fa00 fc03 	lsl.w	ip, r0, r3
 c0004fa:	40cc      	lsrs	r4, r1
 c0004fc:	ea4f 471e 	mov.w	r7, lr, lsr #16
 c000500:	fa20 f101 	lsr.w	r1, r0, r1
 c000504:	fa1f f68e 	uxth.w	r6, lr
 c000508:	fbb4 f0f7 	udiv	r0, r4, r7
 c00050c:	430a      	orrs	r2, r1
 c00050e:	fb07 4410 	mls	r4, r7, r0, r4
 c000512:	0c11      	lsrs	r1, r2, #16
 c000514:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 c000518:	fb00 f406 	mul.w	r4, r0, r6
 c00051c:	428c      	cmp	r4, r1
 c00051e:	d90e      	bls.n	c00053e <__udivmoddi4+0x27a>
 c000520:	eb1e 0101 	adds.w	r1, lr, r1
 c000524:	f100 38ff 	add.w	r8, r0, #4294967295
 c000528:	bf2c      	ite	cs
 c00052a:	f04f 0901 	movcs.w	r9, #1
 c00052e:	f04f 0900 	movcc.w	r9, #0
 c000532:	428c      	cmp	r4, r1
 c000534:	d902      	bls.n	c00053c <__udivmoddi4+0x278>
 c000536:	f1b9 0f00 	cmp.w	r9, #0
 c00053a:	d02c      	beq.n	c000596 <__udivmoddi4+0x2d2>
 c00053c:	4640      	mov	r0, r8
 c00053e:	1b09      	subs	r1, r1, r4
 c000540:	b292      	uxth	r2, r2
 c000542:	fbb1 f4f7 	udiv	r4, r1, r7
 c000546:	fb07 1114 	mls	r1, r7, r4, r1
 c00054a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 c00054e:	fb04 f106 	mul.w	r1, r4, r6
 c000552:	4291      	cmp	r1, r2
 c000554:	d907      	bls.n	c000566 <__udivmoddi4+0x2a2>
 c000556:	eb1e 0202 	adds.w	r2, lr, r2
 c00055a:	f104 38ff 	add.w	r8, r4, #4294967295
 c00055e:	d201      	bcs.n	c000564 <__udivmoddi4+0x2a0>
 c000560:	4291      	cmp	r1, r2
 c000562:	d815      	bhi.n	c000590 <__udivmoddi4+0x2cc>
 c000564:	4644      	mov	r4, r8
 c000566:	1a52      	subs	r2, r2, r1
 c000568:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 c00056c:	e721      	b.n	c0003b2 <__udivmoddi4+0xee>
 c00056e:	1a86      	subs	r6, r0, r2
 c000570:	eb64 0303 	sbc.w	r3, r4, r3
 c000574:	2001      	movs	r0, #1
 c000576:	e70e      	b.n	c000396 <__udivmoddi4+0xd2>
 c000578:	3c02      	subs	r4, #2
 c00057a:	4472      	add	r2, lr
 c00057c:	e735      	b.n	c0003ea <__udivmoddi4+0x126>
 c00057e:	3902      	subs	r1, #2
 c000580:	4472      	add	r2, lr
 c000582:	e6d0      	b.n	c000326 <__udivmoddi4+0x62>
 c000584:	44f4      	add	ip, lr
 c000586:	3802      	subs	r0, #2
 c000588:	e6e3      	b.n	c000352 <__udivmoddi4+0x8e>
 c00058a:	44f4      	add	ip, lr
 c00058c:	3802      	subs	r0, #2
 c00058e:	e742      	b.n	c000416 <__udivmoddi4+0x152>
 c000590:	3c02      	subs	r4, #2
 c000592:	4472      	add	r2, lr
 c000594:	e7e7      	b.n	c000566 <__udivmoddi4+0x2a2>
 c000596:	3802      	subs	r0, #2
 c000598:	4471      	add	r1, lr
 c00059a:	e7d0      	b.n	c00053e <__udivmoddi4+0x27a>
 c00059c:	3b02      	subs	r3, #2
 c00059e:	443c      	add	r4, r7
 c0005a0:	e782      	b.n	c0004a8 <__udivmoddi4+0x1e4>
 c0005a2:	3802      	subs	r0, #2
 c0005a4:	443c      	add	r4, r7
 c0005a6:	e76a      	b.n	c00047e <__udivmoddi4+0x1ba>

0c0005a8 <__aeabi_idiv0>:
 c0005a8:	4770      	bx	lr
 c0005aa:	bf00      	nop

0c0005ac <sha256_initialize>:
 c0005ac:	b510      	push	{r4, lr}
 c0005ae:	4604      	mov	r4, r0
 c0005b0:	2244      	movs	r2, #68	@ 0x44
 c0005b2:	2100      	movs	r1, #0
 c0005b4:	3020      	adds	r0, #32
 c0005b6:	f004 f93f 	bl	c004838 <memset>
 c0005ba:	2300      	movs	r3, #0
 c0005bc:	480a      	ldr	r0, [pc, #40]	@ (c0005e8 <sha256_initialize+0x3c>)
 c0005be:	4a0b      	ldr	r2, [pc, #44]	@ (c0005ec <sha256_initialize+0x40>)
 c0005c0:	490b      	ldr	r1, [pc, #44]	@ (c0005f0 <sha256_initialize+0x44>)
 c0005c2:	e9c4 0218 	strd	r0, r2, [r4, #96]	@ 0x60
 c0005c6:	4a0b      	ldr	r2, [pc, #44]	@ (c0005f4 <sha256_initialize+0x48>)
 c0005c8:	480b      	ldr	r0, [pc, #44]	@ (c0005f8 <sha256_initialize+0x4c>)
 c0005ca:	e9c4 121a 	strd	r1, r2, [r4, #104]	@ 0x68
 c0005ce:	4a0b      	ldr	r2, [pc, #44]	@ (c0005fc <sha256_initialize+0x50>)
 c0005d0:	490b      	ldr	r1, [pc, #44]	@ (c000600 <sha256_initialize+0x54>)
 c0005d2:	e9c4 021c 	strd	r0, r2, [r4, #112]	@ 0x70
 c0005d6:	4a0b      	ldr	r2, [pc, #44]	@ (c000604 <sha256_initialize+0x58>)
 c0005d8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 c0005dc:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 c0005e0:	e9c4 121e 	strd	r1, r2, [r4, #120]	@ 0x78
 c0005e4:	bd10      	pop	{r4, pc}
 c0005e6:	bf00      	nop
 c0005e8:	6a09e667 	.word	0x6a09e667
 c0005ec:	bb67ae85 	.word	0xbb67ae85
 c0005f0:	3c6ef372 	.word	0x3c6ef372
 c0005f4:	a54ff53a 	.word	0xa54ff53a
 c0005f8:	510e527f 	.word	0x510e527f
 c0005fc:	9b05688c 	.word	0x9b05688c
 c000600:	1f83d9ab 	.word	0x1f83d9ab
 c000604:	5be0cd19 	.word	0x5be0cd19

0c000608 <sha256_update>:
 c000608:	4603      	mov	r3, r0
 c00060a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c00060e:	00d7      	lsls	r7, r2, #3
 c000610:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 c000614:	f06f 0602 	mvn.w	r6, #2
 c000618:	2407      	movs	r4, #7
 c00061a:	e9cd 2001 	strd	r2, r0, [sp, #4]
 c00061e:	337f      	adds	r3, #127	@ 0x7f
 c000620:	fa5f fc87 	uxtb.w	ip, r7
 c000624:	e00e      	b.n	c000644 <sha256_update+0x3c>
 c000626:	2c02      	cmp	r4, #2
 c000628:	f340 81cb 	ble.w	c0009c2 <sha256_update+0x3ba>
 c00062c:	9801      	ldr	r0, [sp, #4]
 c00062e:	fa20 f506 	lsr.w	r5, r0, r6
 c000632:	fa52 f085 	uxtab	r0, r2, r5
 c000636:	28ff      	cmp	r0, #255	@ 0xff
 c000638:	dc0c      	bgt.n	c000654 <sha256_update+0x4c>
 c00063a:	442a      	add	r2, r5
 c00063c:	721a      	strb	r2, [r3, #8]
 c00063e:	3c01      	subs	r4, #1
 c000640:	3b01      	subs	r3, #1
 c000642:	3608      	adds	r6, #8
 c000644:	2c07      	cmp	r4, #7
 c000646:	7a1a      	ldrb	r2, [r3, #8]
 c000648:	d1ed      	bne.n	c000626 <sha256_update+0x1e>
 c00064a:	eb0c 0002 	add.w	r0, ip, r2
 c00064e:	28ff      	cmp	r0, #255	@ 0xff
 c000650:	463d      	mov	r5, r7
 c000652:	ddf2      	ble.n	c00063a <sha256_update+0x32>
 c000654:	79d8      	ldrb	r0, [r3, #7]
 c000656:	f100 0e01 	add.w	lr, r0, #1
 c00065a:	28ff      	cmp	r0, #255	@ 0xff
 c00065c:	f883 e007 	strb.w	lr, [r3, #7]
 c000660:	d13e      	bne.n	c0006e0 <sha256_update+0xd8>
 c000662:	7998      	ldrb	r0, [r3, #6]
 c000664:	f100 0e01 	add.w	lr, r0, #1
 c000668:	28ff      	cmp	r0, #255	@ 0xff
 c00066a:	f883 e006 	strb.w	lr, [r3, #6]
 c00066e:	d137      	bne.n	c0006e0 <sha256_update+0xd8>
 c000670:	2c02      	cmp	r4, #2
 c000672:	f000 8182 	beq.w	c00097a <sha256_update+0x372>
 c000676:	7958      	ldrb	r0, [r3, #5]
 c000678:	f100 0e01 	add.w	lr, r0, #1
 c00067c:	28ff      	cmp	r0, #255	@ 0xff
 c00067e:	f883 e005 	strb.w	lr, [r3, #5]
 c000682:	d12d      	bne.n	c0006e0 <sha256_update+0xd8>
 c000684:	2c03      	cmp	r4, #3
 c000686:	f000 817e 	beq.w	c000986 <sha256_update+0x37e>
 c00068a:	7918      	ldrb	r0, [r3, #4]
 c00068c:	f100 0e01 	add.w	lr, r0, #1
 c000690:	28ff      	cmp	r0, #255	@ 0xff
 c000692:	f883 e004 	strb.w	lr, [r3, #4]
 c000696:	d123      	bne.n	c0006e0 <sha256_update+0xd8>
 c000698:	2c04      	cmp	r4, #4
 c00069a:	f000 817a 	beq.w	c000992 <sha256_update+0x38a>
 c00069e:	78d8      	ldrb	r0, [r3, #3]
 c0006a0:	f100 0e01 	add.w	lr, r0, #1
 c0006a4:	28ff      	cmp	r0, #255	@ 0xff
 c0006a6:	f883 e003 	strb.w	lr, [r3, #3]
 c0006aa:	d119      	bne.n	c0006e0 <sha256_update+0xd8>
 c0006ac:	2c05      	cmp	r4, #5
 c0006ae:	f000 8176 	beq.w	c00099e <sha256_update+0x396>
 c0006b2:	7898      	ldrb	r0, [r3, #2]
 c0006b4:	f100 0e01 	add.w	lr, r0, #1
 c0006b8:	28ff      	cmp	r0, #255	@ 0xff
 c0006ba:	f883 e002 	strb.w	lr, [r3, #2]
 c0006be:	d10f      	bne.n	c0006e0 <sha256_update+0xd8>
 c0006c0:	2c06      	cmp	r4, #6
 c0006c2:	f000 8172 	beq.w	c0009aa <sha256_update+0x3a2>
 c0006c6:	7858      	ldrb	r0, [r3, #1]
 c0006c8:	f100 0e01 	add.w	lr, r0, #1
 c0006cc:	28ff      	cmp	r0, #255	@ 0xff
 c0006ce:	f883 e001 	strb.w	lr, [r3, #1]
 c0006d2:	d105      	bne.n	c0006e0 <sha256_update+0xd8>
 c0006d4:	2c07      	cmp	r4, #7
 c0006d6:	f000 816e 	beq.w	c0009b6 <sha256_update+0x3ae>
 c0006da:	7818      	ldrb	r0, [r3, #0]
 c0006dc:	3001      	adds	r0, #1
 c0006de:	7018      	strb	r0, [r3, #0]
 c0006e0:	442a      	add	r2, r5
 c0006e2:	3c01      	subs	r4, #1
 c0006e4:	721a      	strb	r2, [r3, #8]
 c0006e6:	1c62      	adds	r2, r4, #1
 c0006e8:	d1aa      	bne.n	c000640 <sha256_update+0x38>
 c0006ea:	9801      	ldr	r0, [sp, #4]
 c0006ec:	b340      	cbz	r0, c000740 <sha256_update+0x138>
 c0006ee:	468b      	mov	fp, r1
 c0006f0:	9b02      	ldr	r3, [sp, #8]
 c0006f2:	9d01      	ldr	r5, [sp, #4]
 c0006f4:	f893 2086 	ldrb.w	r2, [r3, #134]	@ 0x86
 c0006f8:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 c0006fc:	f002 0201 	and.w	r2, r2, #1
 c000700:	08db      	lsrs	r3, r3, #3
 c000702:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 c000706:	1a18      	subs	r0, r3, r0
 c000708:	9303      	str	r3, [sp, #12]
 c00070a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 c00070e:	9e02      	ldr	r6, [sp, #8]
 c000710:	e001      	b.n	c000716 <sha256_update+0x10e>
 c000712:	2840      	cmp	r0, #64	@ 0x40
 c000714:	d018      	beq.n	c000748 <sha256_update+0x140>
 c000716:	43c3      	mvns	r3, r0
 c000718:	f020 0203 	bic.w	r2, r0, #3
 c00071c:	f81b 4b01 	ldrb.w	r4, [fp], #1
 c000720:	4432      	add	r2, r6
 c000722:	f003 0303 	and.w	r3, r3, #3
 c000726:	6a11      	ldr	r1, [r2, #32]
 c000728:	00db      	lsls	r3, r3, #3
 c00072a:	fa04 f303 	lsl.w	r3, r4, r3
 c00072e:	4319      	orrs	r1, r3
 c000730:	3d01      	subs	r5, #1
 c000732:	f100 0001 	add.w	r0, r0, #1
 c000736:	6211      	str	r1, [r2, #32]
 c000738:	d1eb      	bne.n	c000712 <sha256_update+0x10a>
 c00073a:	2840      	cmp	r0, #64	@ 0x40
 c00073c:	9501      	str	r5, [sp, #4]
 c00073e:	d004      	beq.n	c00074a <sha256_update+0x142>
 c000740:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 c000744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000748:	9501      	str	r5, [sp, #4]
 c00074a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 c00074e:	499e      	ldr	r1, [pc, #632]	@ (c0009c8 <sha256_update+0x3c0>)
 c000750:	a84e      	add	r0, sp, #312	@ 0x138
 c000752:	f004 f8b5 	bl	c0048c0 <memcpy>
 c000756:	9902      	ldr	r1, [sp, #8]
 c000758:	2300      	movs	r3, #0
 c00075a:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 c00075c:	2710      	movs	r7, #16
 c00075e:	9200      	str	r2, [sp, #0]
 c000760:	e9d1 240b 	ldrd	r2, r4, [r1, #44]	@ 0x2c
 c000764:	9404      	str	r4, [sp, #16]
 c000766:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 c000768:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 c00076a:	9405      	str	r4, [sp, #20]
 c00076c:	6b8c      	ldr	r4, [r1, #56]	@ 0x38
 c00076e:	6a0e      	ldr	r6, [r1, #32]
 c000770:	9406      	str	r4, [sp, #24]
 c000772:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 c000774:	900f      	str	r0, [sp, #60]	@ 0x3c
 c000776:	9407      	str	r4, [sp, #28]
 c000778:	6c0c      	ldr	r4, [r1, #64]	@ 0x40
 c00077a:	9800      	ldr	r0, [sp, #0]
 c00077c:	9408      	str	r4, [sp, #32]
 c00077e:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 c000780:	960e      	str	r6, [sp, #56]	@ 0x38
 c000782:	9409      	str	r4, [sp, #36]	@ 0x24
 c000784:	6c8c      	ldr	r4, [r1, #72]	@ 0x48
 c000786:	ad0e      	add	r5, sp, #56	@ 0x38
 c000788:	940a      	str	r4, [sp, #40]	@ 0x28
 c00078a:	6ccc      	ldr	r4, [r1, #76]	@ 0x4c
 c00078c:	940b      	str	r4, [sp, #44]	@ 0x2c
 c00078e:	6d0c      	ldr	r4, [r1, #80]	@ 0x50
 c000790:	940c      	str	r4, [sp, #48]	@ 0x30
 c000792:	6d4c      	ldr	r4, [r1, #84]	@ 0x54
 c000794:	940d      	str	r4, [sp, #52]	@ 0x34
 c000796:	e9d1 1416 	ldrd	r1, r4, [r1, #88]	@ 0x58
 c00079a:	e9cd 0210 	strd	r0, r2, [sp, #64]	@ 0x40
 c00079e:	9804      	ldr	r0, [sp, #16]
 c0007a0:	9a02      	ldr	r2, [sp, #8]
 c0007a2:	9012      	str	r0, [sp, #72]	@ 0x48
 c0007a4:	9805      	ldr	r0, [sp, #20]
 c0007a6:	e9c2 3308 	strd	r3, r3, [r2, #32]
 c0007aa:	9013      	str	r0, [sp, #76]	@ 0x4c
 c0007ac:	9806      	ldr	r0, [sp, #24]
 c0007ae:	e9c2 330a 	strd	r3, r3, [r2, #40]	@ 0x28
 c0007b2:	9014      	str	r0, [sp, #80]	@ 0x50
 c0007b4:	9807      	ldr	r0, [sp, #28]
 c0007b6:	e9c2 330c 	strd	r3, r3, [r2, #48]	@ 0x30
 c0007ba:	9015      	str	r0, [sp, #84]	@ 0x54
 c0007bc:	9808      	ldr	r0, [sp, #32]
 c0007be:	e9c2 330e 	strd	r3, r3, [r2, #56]	@ 0x38
 c0007c2:	9016      	str	r0, [sp, #88]	@ 0x58
 c0007c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c0007c6:	941d      	str	r4, [sp, #116]	@ 0x74
 c0007c8:	9017      	str	r0, [sp, #92]	@ 0x5c
 c0007ca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 c0007cc:	9018      	str	r0, [sp, #96]	@ 0x60
 c0007ce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 c0007d0:	9019      	str	r0, [sp, #100]	@ 0x64
 c0007d2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 c0007d4:	901a      	str	r0, [sp, #104]	@ 0x68
 c0007d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 c0007d8:	e9cd 011b 	strd	r0, r1, [sp, #108]	@ 0x6c
 c0007dc:	e9c2 3310 	strd	r3, r3, [r2, #64]	@ 0x40
 c0007e0:	e9c2 3312 	strd	r3, r3, [r2, #72]	@ 0x48
 c0007e4:	e9c2 3314 	strd	r3, r3, [r2, #80]	@ 0x50
 c0007e8:	e9c2 3316 	strd	r3, r3, [r2, #88]	@ 0x58
 c0007ec:	ea4f 43f1 	mov.w	r3, r1, ror #19
 c0007f0:	ea83 4371 	eor.w	r3, r3, r1, ror #17
 c0007f4:	686a      	ldr	r2, [r5, #4]
 c0007f6:	ea83 2391 	eor.w	r3, r3, r1, lsr #10
 c0007fa:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 c0007fc:	3702      	adds	r7, #2
 c0007fe:	440b      	add	r3, r1
 c000800:	ea4f 41b2 	mov.w	r1, r2, ror #18
 c000804:	ea81 11f2 	eor.w	r1, r1, r2, ror #7
 c000808:	ea81 01d2 	eor.w	r1, r1, r2, lsr #3
 c00080c:	440b      	add	r3, r1
 c00080e:	1999      	adds	r1, r3, r6
 c000810:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 c000812:	68ae      	ldr	r6, [r5, #8]
 c000814:	441a      	add	r2, r3
 c000816:	ea4f 43f4 	mov.w	r3, r4, ror #19
 c00081a:	ea83 4374 	eor.w	r3, r3, r4, ror #17
 c00081e:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 c000822:	ea4f 44b6 	mov.w	r4, r6, ror #18
 c000826:	ea84 14f6 	eor.w	r4, r4, r6, ror #7
 c00082a:	4413      	add	r3, r2
 c00082c:	ea84 04d6 	eor.w	r4, r4, r6, lsr #3
 c000830:	441c      	add	r4, r3
 c000832:	2f3e      	cmp	r7, #62	@ 0x3e
 c000834:	6429      	str	r1, [r5, #64]	@ 0x40
 c000836:	646c      	str	r4, [r5, #68]	@ 0x44
 c000838:	f105 0508 	add.w	r5, r5, #8
 c00083c:	d1d6      	bne.n	c0007ec <sha256_update+0x1e4>
 c00083e:	e9dd 753d 	ldrd	r7, r5, [sp, #244]	@ 0xf4
 c000842:	9945      	ldr	r1, [sp, #276]	@ 0x114
 c000844:	ea4f 40b7 	mov.w	r0, r7, ror #18
 c000848:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 c00084a:	ea80 10f7 	eor.w	r0, r0, r7, ror #7
 c00084e:	ea80 00d7 	eor.w	r0, r0, r7, lsr #3
 c000852:	440b      	add	r3, r1
 c000854:	1819      	adds	r1, r3, r0
 c000856:	9e46      	ldr	r6, [sp, #280]	@ 0x118
 c000858:	ea4f 43b5 	mov.w	r3, r5, ror #18
 c00085c:	ea83 13f5 	eor.w	r3, r3, r5, ror #7
 c000860:	443e      	add	r6, r7
 c000862:	ea83 03d5 	eor.w	r3, r3, r5, lsr #3
 c000866:	e9dd 424a 	ldrd	r4, r2, [sp, #296]	@ 0x128
 c00086a:	18f0      	adds	r0, r6, r3
 c00086c:	ea4f 43f4 	mov.w	r3, r4, ror #19
 c000870:	ea83 4374 	eor.w	r3, r3, r4, ror #17
 c000874:	ea83 2394 	eor.w	r3, r3, r4, lsr #10
 c000878:	4419      	add	r1, r3
 c00087a:	ea4f 43f2 	mov.w	r3, r2, ror #19
 c00087e:	ea83 4372 	eor.w	r3, r3, r2, ror #17
 c000882:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
 c000886:	4403      	add	r3, r0
 c000888:	934d      	str	r3, [sp, #308]	@ 0x134
 c00088a:	9b02      	ldr	r3, [sp, #8]
 c00088c:	914c      	str	r1, [sp, #304]	@ 0x130
 c00088e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
 c000890:	6f5e      	ldr	r6, [r3, #116]	@ 0x74
 c000892:	e9d3 1218 	ldrd	r1, r2, [r3, #96]	@ 0x60
 c000896:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 c000898:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 c00089a:	6f9f      	ldr	r7, [r3, #120]	@ 0x78
 c00089c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 c00089e:	46b6      	mov	lr, r6
 c0008a0:	4699      	mov	r9, r3
 c0008a2:	9309      	str	r3, [sp, #36]	@ 0x24
 c0008a4:	ab0d      	add	r3, sp, #52	@ 0x34
 c0008a6:	46a0      	mov	r8, r4
 c0008a8:	9405      	str	r4, [sp, #20]
 c0008aa:	9607      	str	r6, [sp, #28]
 c0008ac:	460c      	mov	r4, r1
 c0008ae:	4616      	mov	r6, r2
 c0008b0:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 c0008b4:	9504      	str	r5, [sp, #16]
 c0008b6:	9006      	str	r0, [sp, #24]
 c0008b8:	9708      	str	r7, [sp, #32]
 c0008ba:	f50d 7c9a 	add.w	ip, sp, #308	@ 0x134
 c0008be:	9300      	str	r3, [sp, #0]
 c0008c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 c0008c4:	e005      	b.n	c0008d2 <sha256_update+0x2ca>
 c0008c6:	4677      	mov	r7, lr
 c0008c8:	4635      	mov	r5, r6
 c0008ca:	4686      	mov	lr, r0
 c0008cc:	4626      	mov	r6, r4
 c0008ce:	4650      	mov	r0, sl
 c0008d0:	461c      	mov	r4, r3
 c0008d2:	9900      	ldr	r1, [sp, #0]
 c0008d4:	f85c af04 	ldr.w	sl, [ip, #4]!
 c0008d8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 c0008dc:	ea4f 23f0 	mov.w	r3, r0, ror #11
 c0008e0:	ea83 13b0 	eor.w	r3, r3, r0, ror #6
 c0008e4:	4452      	add	r2, sl
 c0008e6:	ea83 6370 	eor.w	r3, r3, r0, ror #25
 c0008ea:	441a      	add	r2, r3
 c0008ec:	ea00 0a0e 	and.w	sl, r0, lr
 c0008f0:	ea27 0300 	bic.w	r3, r7, r0
 c0008f4:	ea83 030a 	eor.w	r3, r3, sl
 c0008f8:	4413      	add	r3, r2
 c0008fa:	9100      	str	r1, [sp, #0]
 c0008fc:	ea85 0206 	eor.w	r2, r5, r6
 c000900:	ea4f 3174 	mov.w	r1, r4, ror #13
 c000904:	ea81 01b4 	eor.w	r1, r1, r4, ror #2
 c000908:	4022      	ands	r2, r4
 c00090a:	ea05 0b06 	and.w	fp, r5, r6
 c00090e:	ea81 51b4 	eor.w	r1, r1, r4, ror #22
 c000912:	ea82 020b 	eor.w	r2, r2, fp
 c000916:	444b      	add	r3, r9
 c000918:	440a      	add	r2, r1
 c00091a:	eb03 0a08 	add.w	sl, r3, r8
 c00091e:	4413      	add	r3, r2
 c000920:	aa8d      	add	r2, sp, #564	@ 0x234
 c000922:	4562      	cmp	r2, ip
 c000924:	46b9      	mov	r9, r7
 c000926:	46a8      	mov	r8, r5
 c000928:	d1cd      	bne.n	c0008c6 <sha256_update+0x2be>
 c00092a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 c00092e:	4419      	add	r1, r3
 c000930:	9b04      	ldr	r3, [sp, #16]
 c000932:	4414      	add	r4, r2
 c000934:	4433      	add	r3, r6
 c000936:	469c      	mov	ip, r3
 c000938:	9b07      	ldr	r3, [sp, #28]
 c00093a:	9a05      	ldr	r2, [sp, #20]
 c00093c:	4403      	add	r3, r0
 c00093e:	4618      	mov	r0, r3
 c000940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 c000942:	442a      	add	r2, r5
 c000944:	443b      	add	r3, r7
 c000946:	461f      	mov	r7, r3
 c000948:	9b02      	ldr	r3, [sp, #8]
 c00094a:	9d06      	ldr	r5, [sp, #24]
 c00094c:	9e08      	ldr	r6, [sp, #32]
 c00094e:	e9c3 c21a 	strd	ip, r2, [r3, #104]	@ 0x68
 c000952:	9a01      	ldr	r2, [sp, #4]
 c000954:	4455      	add	r5, sl
 c000956:	4476      	add	r6, lr
 c000958:	e9c3 1418 	strd	r1, r4, [r3, #96]	@ 0x60
 c00095c:	e9c3 501c 	strd	r5, r0, [r3, #112]	@ 0x70
 c000960:	e9c3 671e 	strd	r6, r7, [r3, #120]	@ 0x78
 c000964:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 c000968:	2a00      	cmp	r2, #0
 c00096a:	f43f aee9 	beq.w	c000740 <sha256_update+0x138>
 c00096e:	9b03      	ldr	r3, [sp, #12]
 c000970:	4615      	mov	r5, r2
 c000972:	1a98      	subs	r0, r3, r2
 c000974:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 c000978:	e6c9      	b.n	c00070e <sha256_update+0x106>
 c00097a:	442a      	add	r2, r5
 c00097c:	721a      	strb	r2, [r3, #8]
 c00097e:	2401      	movs	r4, #1
 c000980:	3608      	adds	r6, #8
 c000982:	3b01      	subs	r3, #1
 c000984:	e65e      	b.n	c000644 <sha256_update+0x3c>
 c000986:	442a      	add	r2, r5
 c000988:	721a      	strb	r2, [r3, #8]
 c00098a:	2402      	movs	r4, #2
 c00098c:	3608      	adds	r6, #8
 c00098e:	3b01      	subs	r3, #1
 c000990:	e658      	b.n	c000644 <sha256_update+0x3c>
 c000992:	442a      	add	r2, r5
 c000994:	721a      	strb	r2, [r3, #8]
 c000996:	2403      	movs	r4, #3
 c000998:	3608      	adds	r6, #8
 c00099a:	3b01      	subs	r3, #1
 c00099c:	e652      	b.n	c000644 <sha256_update+0x3c>
 c00099e:	442a      	add	r2, r5
 c0009a0:	721a      	strb	r2, [r3, #8]
 c0009a2:	2404      	movs	r4, #4
 c0009a4:	3608      	adds	r6, #8
 c0009a6:	3b01      	subs	r3, #1
 c0009a8:	e64c      	b.n	c000644 <sha256_update+0x3c>
 c0009aa:	442a      	add	r2, r5
 c0009ac:	721a      	strb	r2, [r3, #8]
 c0009ae:	2405      	movs	r4, #5
 c0009b0:	3608      	adds	r6, #8
 c0009b2:	3b01      	subs	r3, #1
 c0009b4:	e646      	b.n	c000644 <sha256_update+0x3c>
 c0009b6:	442a      	add	r2, r5
 c0009b8:	721a      	strb	r2, [r3, #8]
 c0009ba:	2406      	movs	r4, #6
 c0009bc:	3608      	adds	r6, #8
 c0009be:	3b01      	subs	r3, #1
 c0009c0:	e640      	b.n	c000644 <sha256_update+0x3c>
 c0009c2:	2500      	movs	r5, #0
 c0009c4:	e68c      	b.n	c0006e0 <sha256_update+0xd8>
 c0009c6:	bf00      	nop
 c0009c8:	0c004fe4 	.word	0x0c004fe4

0c0009cc <sha256_finalize>:
 c0009cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0009ce:	4615      	mov	r5, r2
 c0009d0:	2780      	movs	r7, #128	@ 0x80
 c0009d2:	b093      	sub	sp, #76	@ 0x4c
 c0009d4:	4604      	mov	r4, r0
 c0009d6:	460e      	mov	r6, r1
 c0009d8:	2244      	movs	r2, #68	@ 0x44
 c0009da:	2100      	movs	r1, #0
 c0009dc:	a801      	add	r0, sp, #4
 c0009de:	9700      	str	r7, [sp, #0]
 c0009e0:	f003 ff2a 	bl	c004838 <memset>
 c0009e4:	bb7d      	cbnz	r5, c000a46 <sha256_finalize+0x7a>
 c0009e6:	f894 3086 	ldrb.w	r3, [r4, #134]	@ 0x86
 c0009ea:	f894 2087 	ldrb.w	r2, [r4, #135]	@ 0x87
 c0009ee:	f003 0301 	and.w	r3, r3, #1
 c0009f2:	f1c3 0302 	rsb	r3, r3, #2
 c0009f6:	08d2      	lsrs	r2, r2, #3
 c0009f8:	ebc2 1243 	rsb	r2, r2, r3, lsl #5
 c0009fc:	2a08      	cmp	r2, #8
 c0009fe:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 c000a02:	bfd8      	it	le
 c000a04:	3240      	addle	r2, #64	@ 0x40
 c000a06:	f1a2 0308 	sub.w	r3, r2, #8
 c000a0a:	f84d 1003 	str.w	r1, [sp, r3]
 c000a0e:	eb0d 0503 	add.w	r5, sp, r3
 c000a12:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 c000a16:	4620      	mov	r0, r4
 c000a18:	4669      	mov	r1, sp
 c000a1a:	606b      	str	r3, [r5, #4]
 c000a1c:	f7ff fdf4 	bl	c000608 <sha256_update>
 c000a20:	2200      	movs	r2, #0
 c000a22:	1e60      	subs	r0, r4, #1
 c000a24:	43d3      	mvns	r3, r2
 c000a26:	1091      	asrs	r1, r2, #2
 c000a28:	3118      	adds	r1, #24
 c000a2a:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 c000a2e:	f003 0303 	and.w	r3, r3, #3
 c000a32:	3201      	adds	r2, #1
 c000a34:	00db      	lsls	r3, r3, #3
 c000a36:	fa21 f303 	lsr.w	r3, r1, r3
 c000a3a:	2a20      	cmp	r2, #32
 c000a3c:	f800 3f01 	strb.w	r3, [r0, #1]!
 c000a40:	d1f0      	bne.n	c000a24 <sha256_finalize+0x58>
 c000a42:	b013      	add	sp, #76	@ 0x4c
 c000a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c000a46:	462a      	mov	r2, r5
 c000a48:	4631      	mov	r1, r6
 c000a4a:	4620      	mov	r0, r4
 c000a4c:	f7ff fddc 	bl	c000608 <sha256_update>
 c000a50:	e7c9      	b.n	c0009e6 <sha256_finalize+0x1a>
 c000a52:	bf00      	nop

0c000a54 <hmac_sha256_initialize>:
 c000a54:	2a40      	cmp	r2, #64	@ 0x40
 c000a56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c000a5a:	4604      	mov	r4, r0
 c000a5c:	4616      	mov	r6, r2
 c000a5e:	460d      	mov	r5, r1
 c000a60:	f100 0860 	add.w	r8, r0, #96	@ 0x60
 c000a64:	dc28      	bgt.n	c000ab8 <hmac_sha256_initialize+0x64>
 c000a66:	2a00      	cmp	r2, #0
 c000a68:	f340 80a3 	ble.w	c000bb2 <hmac_sha256_initialize+0x15e>
 c000a6c:	1e53      	subs	r3, r2, #1
 c000a6e:	2b04      	cmp	r3, #4
 c000a70:	f100 0720 	add.w	r7, r0, #32
 c000a74:	d904      	bls.n	c000a80 <hmac_sha256_initialize+0x2c>
 c000a76:	1c4b      	adds	r3, r1, #1
 c000a78:	1afb      	subs	r3, r7, r3
 c000a7a:	2b02      	cmp	r3, #2
 c000a7c:	f200 809d 	bhi.w	c000bba <hmac_sha256_initialize+0x166>
 c000a80:	1e69      	subs	r1, r5, #1
 c000a82:	f104 021f 	add.w	r2, r4, #31
 c000a86:	1988      	adds	r0, r1, r6
 c000a88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 c000a8c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 c000a90:	4288      	cmp	r0, r1
 c000a92:	f802 3f01 	strb.w	r3, [r2, #1]!
 c000a96:	d1f7      	bne.n	c000a88 <hmac_sha256_initialize+0x34>
 c000a98:	2e40      	cmp	r6, #64	@ 0x40
 c000a9a:	f000 810f 	beq.w	c000cbc <hmac_sha256_initialize+0x268>
 c000a9e:	f106 0020 	add.w	r0, r6, #32
 c000aa2:	2136      	movs	r1, #54	@ 0x36
 c000aa4:	f1c6 0240 	rsb	r2, r6, #64	@ 0x40
 c000aa8:	4420      	add	r0, r4
 c000aaa:	f003 fec5 	bl	c004838 <memset>
 c000aae:	f104 0980 	add.w	r9, r4, #128	@ 0x80
 c000ab2:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 c000ab6:	e051      	b.n	c000b5c <hmac_sha256_initialize+0x108>
 c000ab8:	f100 0980 	add.w	r9, r0, #128	@ 0x80
 c000abc:	2244      	movs	r2, #68	@ 0x44
 c000abe:	2100      	movs	r1, #0
 c000ac0:	4648      	mov	r0, r9
 c000ac2:	f003 feb9 	bl	c004838 <memset>
 c000ac6:	2300      	movs	r3, #0
 c000ac8:	4f80      	ldr	r7, [pc, #512]	@ (c000ccc <hmac_sha256_initialize+0x278>)
 c000aca:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 c000ace:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 c000ad2:	4b7f      	ldr	r3, [pc, #508]	@ (c000cd0 <hmac_sha256_initialize+0x27c>)
 c000ad4:	4629      	mov	r1, r5
 c000ad6:	e9c4 7334 	strd	r7, r3, [r4, #208]	@ 0xd0
 c000ada:	4b7e      	ldr	r3, [pc, #504]	@ (c000cd4 <hmac_sha256_initialize+0x280>)
 c000adc:	4d7e      	ldr	r5, [pc, #504]	@ (c000cd8 <hmac_sha256_initialize+0x284>)
 c000ade:	487f      	ldr	r0, [pc, #508]	@ (c000cdc <hmac_sha256_initialize+0x288>)
 c000ae0:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 c000ae4:	f103 5374 	add.w	r3, r3, #1023410176	@ 0x3d000000
 c000ae8:	4632      	mov	r2, r6
 c000aea:	e9c4 5030 	strd	r5, r0, [r4, #192]	@ 0xc0
 c000aee:	4e7c      	ldr	r6, [pc, #496]	@ (c000ce0 <hmac_sha256_initialize+0x28c>)
 c000af0:	487c      	ldr	r0, [pc, #496]	@ (c000ce4 <hmac_sha256_initialize+0x290>)
 c000af2:	f5a3 0323 	sub.w	r3, r3, #10682368	@ 0xa30000
 c000af6:	f6a3 4392 	subw	r3, r3, #3218	@ 0xc92
 c000afa:	e9c4 6032 	strd	r6, r0, [r4, #200]	@ 0xc8
 c000afe:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 c000b02:	4640      	mov	r0, r8
 c000b04:	f7ff ff62 	bl	c0009cc <sha256_finalize>
 c000b08:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	@ 0x60
 c000b0c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000b10:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000b14:	e9c4 2308 	strd	r2, r3, [r4, #32]
 c000b18:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 c000b1c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000b20:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000b24:	e9c4 230a 	strd	r2, r3, [r4, #40]	@ 0x28
 c000b28:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	@ 0x70
 c000b2c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000b30:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000b34:	e9c4 230c 	strd	r2, r3, [r4, #48]	@ 0x30
 c000b38:	e9d4 231e 	ldrd	r2, r3, [r4, #120]	@ 0x78
 c000b3c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000b40:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000b44:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 c000b48:	2136      	movs	r1, #54	@ 0x36
 c000b4a:	2220      	movs	r2, #32
 c000b4c:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 c000b50:	f003 fe72 	bl	c004838 <memset>
 c000b54:	f104 0720 	add.w	r7, r4, #32
 c000b58:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 c000b5c:	4648      	mov	r0, r9
 c000b5e:	2244      	movs	r2, #68	@ 0x44
 c000b60:	2100      	movs	r1, #0
 c000b62:	f003 fe69 	bl	c004838 <memset>
 c000b66:	4b5c      	ldr	r3, [pc, #368]	@ (c000cd8 <hmac_sha256_initialize+0x284>)
 c000b68:	f8df c174 	ldr.w	ip, [pc, #372]	@ c000ce0 <hmac_sha256_initialize+0x28c>
 c000b6c:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
 c000b70:	4b5a      	ldr	r3, [pc, #360]	@ (c000cdc <hmac_sha256_initialize+0x288>)
 c000b72:	f8df e158 	ldr.w	lr, [pc, #344]	@ c000ccc <hmac_sha256_initialize+0x278>
 c000b76:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 c000b7a:	4b5a      	ldr	r3, [pc, #360]	@ (c000ce4 <hmac_sha256_initialize+0x290>)
 c000b7c:	4639      	mov	r1, r7
 c000b7e:	e9c4 c332 	strd	ip, r3, [r4, #200]	@ 0xc8
 c000b82:	4b53      	ldr	r3, [pc, #332]	@ (c000cd0 <hmac_sha256_initialize+0x27c>)
 c000b84:	4640      	mov	r0, r8
 c000b86:	e9c4 e334 	strd	lr, r3, [r4, #208]	@ 0xd0
 c000b8a:	4b52      	ldr	r3, [pc, #328]	@ (c000cd4 <hmac_sha256_initialize+0x280>)
 c000b8c:	2240      	movs	r2, #64	@ 0x40
 c000b8e:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 c000b92:	f103 5374 	add.w	r3, r3, #1023410176	@ 0x3d000000
 c000b96:	f5a3 0323 	sub.w	r3, r3, #10682368	@ 0xa30000
 c000b9a:	f6a3 4392 	subw	r3, r3, #3218	@ 0xc92
 c000b9e:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 c000ba2:	2300      	movs	r3, #0
 c000ba4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 c000ba8:	606b      	str	r3, [r5, #4]
 c000baa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c000bae:	f7ff bd2b 	b.w	c000608 <sha256_update>
 c000bb2:	2600      	movs	r6, #0
 c000bb4:	f100 0720 	add.w	r7, r0, #32
 c000bb8:	e771      	b.n	c000a9e <hmac_sha256_initialize+0x4a>
 c000bba:	680b      	ldr	r3, [r1, #0]
 c000bbc:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000bc0:	6203      	str	r3, [r0, #32]
 c000bc2:	0893      	lsrs	r3, r2, #2
 c000bc4:	2b01      	cmp	r3, #1
 c000bc6:	d07e      	beq.n	c000cc6 <hmac_sha256_initialize+0x272>
 c000bc8:	684a      	ldr	r2, [r1, #4]
 c000bca:	2b02      	cmp	r3, #2
 c000bcc:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000bd0:	6242      	str	r2, [r0, #36]	@ 0x24
 c000bd2:	d052      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000bd4:	688a      	ldr	r2, [r1, #8]
 c000bd6:	2b03      	cmp	r3, #3
 c000bd8:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000bdc:	6282      	str	r2, [r0, #40]	@ 0x28
 c000bde:	d04c      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000be0:	68ca      	ldr	r2, [r1, #12]
 c000be2:	2b04      	cmp	r3, #4
 c000be4:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000be8:	62c2      	str	r2, [r0, #44]	@ 0x2c
 c000bea:	d046      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000bec:	690a      	ldr	r2, [r1, #16]
 c000bee:	2b05      	cmp	r3, #5
 c000bf0:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000bf4:	6302      	str	r2, [r0, #48]	@ 0x30
 c000bf6:	d040      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000bf8:	694a      	ldr	r2, [r1, #20]
 c000bfa:	2b06      	cmp	r3, #6
 c000bfc:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c00:	6342      	str	r2, [r0, #52]	@ 0x34
 c000c02:	d03a      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c04:	698a      	ldr	r2, [r1, #24]
 c000c06:	2b07      	cmp	r3, #7
 c000c08:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c0c:	6382      	str	r2, [r0, #56]	@ 0x38
 c000c0e:	d034      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c10:	69ca      	ldr	r2, [r1, #28]
 c000c12:	2b08      	cmp	r3, #8
 c000c14:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c18:	63c2      	str	r2, [r0, #60]	@ 0x3c
 c000c1a:	d02e      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c1c:	6a0a      	ldr	r2, [r1, #32]
 c000c1e:	2b09      	cmp	r3, #9
 c000c20:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c24:	6402      	str	r2, [r0, #64]	@ 0x40
 c000c26:	d028      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c28:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 c000c2a:	2b0a      	cmp	r3, #10
 c000c2c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c30:	6442      	str	r2, [r0, #68]	@ 0x44
 c000c32:	d022      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c34:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 c000c36:	2b0b      	cmp	r3, #11
 c000c38:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c3c:	6482      	str	r2, [r0, #72]	@ 0x48
 c000c3e:	d01c      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c40:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 c000c42:	2b0c      	cmp	r3, #12
 c000c44:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c48:	64c2      	str	r2, [r0, #76]	@ 0x4c
 c000c4a:	d016      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c4c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 c000c4e:	2b0d      	cmp	r3, #13
 c000c50:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c54:	6502      	str	r2, [r0, #80]	@ 0x50
 c000c56:	d010      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c58:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 c000c5a:	2b0e      	cmp	r3, #14
 c000c5c:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c60:	6542      	str	r2, [r0, #84]	@ 0x54
 c000c62:	d00a      	beq.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c64:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 c000c66:	2b10      	cmp	r3, #16
 c000c68:	f082 3236 	eor.w	r2, r2, #909522486	@ 0x36363636
 c000c6c:	6582      	str	r2, [r0, #88]	@ 0x58
 c000c6e:	d104      	bne.n	c000c7a <hmac_sha256_initialize+0x226>
 c000c70:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 c000c72:	f083 3336 	eor.w	r3, r3, #909522486	@ 0x36363636
 c000c76:	65c3      	str	r3, [r0, #92]	@ 0x5c
 c000c78:	e70e      	b.n	c000a98 <hmac_sha256_initialize+0x44>
 c000c7a:	f026 0303 	bic.w	r3, r6, #3
 c000c7e:	429e      	cmp	r6, r3
 c000c80:	461a      	mov	r2, r3
 c000c82:	f43f af09 	beq.w	c000a98 <hmac_sha256_initialize+0x44>
 c000c86:	5caa      	ldrb	r2, [r5, r2]
 c000c88:	18e1      	adds	r1, r4, r3
 c000c8a:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 c000c8e:	f881 2020 	strb.w	r2, [r1, #32]
 c000c92:	1c5a      	adds	r2, r3, #1
 c000c94:	42b2      	cmp	r2, r6
 c000c96:	f6bf aeff 	bge.w	c000a98 <hmac_sha256_initialize+0x44>
 c000c9a:	5ca9      	ldrb	r1, [r5, r2]
 c000c9c:	3302      	adds	r3, #2
 c000c9e:	4422      	add	r2, r4
 c000ca0:	f081 0136 	eor.w	r1, r1, #54	@ 0x36
 c000ca4:	429e      	cmp	r6, r3
 c000ca6:	f882 1020 	strb.w	r1, [r2, #32]
 c000caa:	f77f aef5 	ble.w	c000a98 <hmac_sha256_initialize+0x44>
 c000cae:	5cea      	ldrb	r2, [r5, r3]
 c000cb0:	4423      	add	r3, r4
 c000cb2:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 c000cb6:	f883 2020 	strb.w	r2, [r3, #32]
 c000cba:	e6ed      	b.n	c000a98 <hmac_sha256_initialize+0x44>
 c000cbc:	f104 0980 	add.w	r9, r4, #128	@ 0x80
 c000cc0:	f104 05e0 	add.w	r5, r4, #224	@ 0xe0
 c000cc4:	e74a      	b.n	c000b5c <hmac_sha256_initialize+0x108>
 c000cc6:	2204      	movs	r2, #4
 c000cc8:	4613      	mov	r3, r2
 c000cca:	e7dc      	b.n	c000c86 <hmac_sha256_initialize+0x232>
 c000ccc:	510e527f 	.word	0x510e527f
 c000cd0:	9b05688c 	.word	0x9b05688c
 c000cd4:	1f83d9ab 	.word	0x1f83d9ab
 c000cd8:	6a09e667 	.word	0x6a09e667
 c000cdc:	bb67ae85 	.word	0xbb67ae85
 c000ce0:	3c6ef372 	.word	0x3c6ef372
 c000ce4:	a54ff53a 	.word	0xa54ff53a

0c000ce8 <hmac_sha256_finalize>:
 c000ce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000cec:	4604      	mov	r4, r0
 c000cee:	f100 0560 	add.w	r5, r0, #96	@ 0x60
 c000cf2:	4628      	mov	r0, r5
 c000cf4:	f7ff fe6a 	bl	c0009cc <sha256_finalize>
 c000cf8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 c000cfa:	f8d5 e004 	ldr.w	lr, [r5, #4]
 c000cfe:	f083 376a 	eor.w	r7, r3, #1785358954	@ 0x6a6a6a6a
 c000d02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 c000d04:	f8d5 c008 	ldr.w	ip, [r5, #8]
 c000d08:	f083 386a 	eor.w	r8, r3, #1785358954	@ 0x6a6a6a6a
 c000d0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 c000d0e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
 c000d12:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 c000d14:	f083 396a 	eor.w	r9, r3, #1785358954	@ 0x6a6a6a6a
 c000d18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 c000d1a:	f8c4 e004 	str.w	lr, [r4, #4]
 c000d1e:	6026      	str	r6, [r4, #0]
 c000d20:	f8c4 c008 	str.w	ip, [r4, #8]
 c000d24:	f8c4 b00c 	str.w	fp, [r4, #12]
 c000d28:	6a20      	ldr	r0, [r4, #32]
 c000d2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 c000d2c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 c000d2e:	f083 3a6a 	eor.w	sl, r3, #1785358954	@ 0x6a6a6a6a
 c000d32:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 c000d34:	f8d5 e014 	ldr.w	lr, [r5, #20]
 c000d38:	f8d5 c018 	ldr.w	ip, [r5, #24]
 c000d3c:	692e      	ldr	r6, [r5, #16]
 c000d3e:	f8d5 b01c 	ldr.w	fp, [r5, #28]
 c000d42:	f080 306a 	eor.w	r0, r0, #1785358954	@ 0x6a6a6a6a
 c000d46:	f081 316a 	eor.w	r1, r1, #1785358954	@ 0x6a6a6a6a
 c000d4a:	f082 326a 	eor.w	r2, r2, #1785358954	@ 0x6a6a6a6a
 c000d4e:	f083 336a 	eor.w	r3, r3, #1785358954	@ 0x6a6a6a6a
 c000d52:	f8c4 e014 	str.w	lr, [r4, #20]
 c000d56:	f8c4 c018 	str.w	ip, [r4, #24]
 c000d5a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 c000d5e:	e9c4 a30e 	strd	sl, r3, [r4, #56]	@ 0x38
 c000d62:	e9c4 270a 	strd	r2, r7, [r4, #40]	@ 0x28
 c000d66:	e9c4 890c 	strd	r8, r9, [r4, #48]	@ 0x30
 c000d6a:	6126      	str	r6, [r4, #16]
 c000d6c:	f8c4 b01c 	str.w	fp, [r4, #28]
 c000d70:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	@ 0x40
 c000d74:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 c000d76:	f081 306a 	eor.w	r0, r1, #1785358954	@ 0x6a6a6a6a
 c000d7a:	f082 326a 	eor.w	r2, r2, #1785358954	@ 0x6a6a6a6a
 c000d7e:	e9c4 0210 	strd	r0, r2, [r4, #64]	@ 0x40
 c000d82:	f083 316a 	eor.w	r1, r3, #1785358954	@ 0x6a6a6a6a
 c000d86:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 c000d8a:	f082 326a 	eor.w	r2, r2, #1785358954	@ 0x6a6a6a6a
 c000d8e:	e9c4 1212 	strd	r1, r2, [r4, #72]	@ 0x48
 c000d92:	e9d4 2115 	ldrd	r2, r1, [r4, #84]	@ 0x54
 c000d96:	f083 336a 	eor.w	r3, r3, #1785358954	@ 0x6a6a6a6a
 c000d9a:	f082 326a 	eor.w	r2, r2, #1785358954	@ 0x6a6a6a6a
 c000d9e:	e9c4 3214 	strd	r3, r2, [r4, #80]	@ 0x50
 c000da2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 c000da4:	f081 316a 	eor.w	r1, r1, #1785358954	@ 0x6a6a6a6a
 c000da8:	f083 336a 	eor.w	r3, r3, #1785358954	@ 0x6a6a6a6a
 c000dac:	e9c4 1316 	strd	r1, r3, [r4, #88]	@ 0x58
 c000db0:	2244      	movs	r2, #68	@ 0x44
 c000db2:	2100      	movs	r1, #0
 c000db4:	f104 0080 	add.w	r0, r4, #128	@ 0x80
 c000db8:	f003 fd3e 	bl	c004838 <memset>
 c000dbc:	2300      	movs	r3, #0
 c000dbe:	4918      	ldr	r1, [pc, #96]	@ (c000e20 <hmac_sha256_finalize+0x138>)
 c000dc0:	4a18      	ldr	r2, [pc, #96]	@ (c000e24 <hmac_sha256_finalize+0x13c>)
 c000dc2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 c000dc6:	e9c4 1230 	strd	r1, r2, [r4, #192]	@ 0xc0
 c000dca:	4917      	ldr	r1, [pc, #92]	@ (c000e28 <hmac_sha256_finalize+0x140>)
 c000dcc:	4a17      	ldr	r2, [pc, #92]	@ (c000e2c <hmac_sha256_finalize+0x144>)
 c000dce:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
 c000dd2:	e9c4 1232 	strd	r1, r2, [r4, #200]	@ 0xc8
 c000dd6:	4916      	ldr	r1, [pc, #88]	@ (c000e30 <hmac_sha256_finalize+0x148>)
 c000dd8:	4a16      	ldr	r2, [pc, #88]	@ (c000e34 <hmac_sha256_finalize+0x14c>)
 c000dda:	4628      	mov	r0, r5
 c000ddc:	e9c4 1234 	strd	r1, r2, [r4, #208]	@ 0xd0
 c000de0:	4915      	ldr	r1, [pc, #84]	@ (c000e38 <hmac_sha256_finalize+0x150>)
 c000de2:	4a16      	ldr	r2, [pc, #88]	@ (c000e3c <hmac_sha256_finalize+0x154>)
 c000de4:	e9c4 1236 	strd	r1, r2, [r4, #216]	@ 0xd8
 c000de8:	2240      	movs	r2, #64	@ 0x40
 c000dea:	f104 0120 	add.w	r1, r4, #32
 c000dee:	f7ff fc0b 	bl	c000608 <sha256_update>
 c000df2:	2220      	movs	r2, #32
 c000df4:	4621      	mov	r1, r4
 c000df6:	4628      	mov	r0, r5
 c000df8:	f7ff fde8 	bl	c0009cc <sha256_finalize>
 c000dfc:	6869      	ldr	r1, [r5, #4]
 c000dfe:	68aa      	ldr	r2, [r5, #8]
 c000e00:	68eb      	ldr	r3, [r5, #12]
 c000e02:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 c000e04:	6061      	str	r1, [r4, #4]
 c000e06:	6020      	str	r0, [r4, #0]
 c000e08:	60a2      	str	r2, [r4, #8]
 c000e0a:	60e3      	str	r3, [r4, #12]
 c000e0c:	6928      	ldr	r0, [r5, #16]
 c000e0e:	6969      	ldr	r1, [r5, #20]
 c000e10:	69aa      	ldr	r2, [r5, #24]
 c000e12:	69eb      	ldr	r3, [r5, #28]
 c000e14:	6120      	str	r0, [r4, #16]
 c000e16:	6161      	str	r1, [r4, #20]
 c000e18:	61a2      	str	r2, [r4, #24]
 c000e1a:	61e3      	str	r3, [r4, #28]
 c000e1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000e20:	6a09e667 	.word	0x6a09e667
 c000e24:	bb67ae85 	.word	0xbb67ae85
 c000e28:	3c6ef372 	.word	0x3c6ef372
 c000e2c:	a54ff53a 	.word	0xa54ff53a
 c000e30:	510e527f 	.word	0x510e527f
 c000e34:	9b05688c 	.word	0x9b05688c
 c000e38:	1f83d9ab 	.word	0x1f83d9ab
 c000e3c:	5be0cd19 	.word	0x5be0cd19

0c000e40 <MX_GPIO_Init>:
*/
void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000e40:	4b06      	ldr	r3, [pc, #24]	@ (c000e5c <MX_GPIO_Init+0x1c>)
{
 c000e42:	b082      	sub	sp, #8
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000e44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c000e46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 c000e4a:	64da      	str	r2, [r3, #76]	@ 0x4c
 c000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c000e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c000e52:	9301      	str	r3, [sp, #4]
 c000e54:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddIO2();

}
 c000e56:	b002      	add	sp, #8
  HAL_PWREx_EnableVddIO2();
 c000e58:	f001 bb1c 	b.w	c002494 <HAL_PWREx_EnableVddIO2>
 c000e5c:	50021000 	.word	0x50021000

0c000e60 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c000e60:	b500      	push	{lr}
 c000e62:	b09d      	sub	sp, #116	@ 0x74

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000e64:	2100      	movs	r1, #0
 c000e66:	226c      	movs	r2, #108	@ 0x6c
 c000e68:	4668      	mov	r0, sp
 c000e6a:	f003 fce5 	bl	c004838 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000e6e:	f240 3101 	movw	r1, #769	@ 0x301
 c000e72:	2001      	movs	r0, #1
 c000e74:	f001 f944 	bl	c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000e78:	2800      	cmp	r0, #0
 c000e7a:	d149      	bne.n	c000f10 <MX_GTZC_S_Init+0xb0>
  {
    Error_Handler();
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000e7c:	f240 3101 	movw	r1, #769	@ 0x301
 c000e80:	2002      	movs	r0, #2
 c000e82:	f001 f93d 	bl	c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000e86:	2800      	cmp	r0, #0
 c000e88:	d14b      	bne.n	c000f22 <MX_GTZC_S_Init+0xc2>
  {
    Error_Handler();
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000e8a:	f240 3101 	movw	r1, #769	@ 0x301
 c000e8e:	2015      	movs	r0, #21
 c000e90:	f001 f936 	bl	c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000e94:	2800      	cmp	r0, #0
 c000e96:	d14d      	bne.n	c000f34 <MX_GTZC_S_Init+0xd4>
  {
    Error_Handler();
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000e98:	2300      	movs	r3, #0
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000e9a:	f04f 32ff 	mov.w	r2, #4294967295
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000e9e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ c000f50 <MX_GTZC_S_Init+0xf0>
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000ea2:	4669      	mov	r1, sp
 c000ea4:	f04f 5040 	mov.w	r0, #805306368	@ 0x30000000
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000ea8:	ed8d 7b18 	vstr	d7, [sp, #96]	@ 0x60
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000eac:	e9cd 3300 	strd	r3, r3, [sp]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000eb0:	e9cd 2202 	strd	r2, r2, [sp, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000eb4:	e9cd 2204 	strd	r2, r2, [sp, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000eb8:	e9cd 2206 	strd	r2, r2, [sp, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000ebc:	e9cd 2208 	strd	r2, r2, [sp, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000ec0:	e9cd 220a 	strd	r2, r2, [sp, #40]	@ 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c000ec4:	e9cd 220c 	strd	r2, r2, [sp, #48]	@ 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000ec8:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000ecc:	e9cd 3310 	strd	r3, r3, [sp, #64]	@ 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000ed0:	e9cd 3312 	strd	r3, r3, [sp, #72]	@ 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000ed4:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000ed8:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000edc:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000ede:	f001 f98b 	bl	c0021f8 <HAL_GTZC_MPCBB_ConfigMem>
 c000ee2:	bb90      	cbnz	r0, c000f4a <MX_GTZC_S_Init+0xea>
  {
    Error_Handler();
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000ee4:	2300      	movs	r3, #0
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000ee6:	4669      	mov	r1, sp
 c000ee8:	481b      	ldr	r0, [pc, #108]	@ (c000f58 <MX_GTZC_S_Init+0xf8>)
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000eea:	e9cd 3302 	strd	r3, r3, [sp, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000eee:	e9cd 3304 	strd	r3, r3, [sp, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000ef2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000ef6:	e9cd 3308 	strd	r3, r3, [sp, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000efa:	931a      	str	r3, [sp, #104]	@ 0x68
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000efc:	f001 f97c 	bl	c0021f8 <HAL_GTZC_MPCBB_ConfigMem>
 c000f00:	bb00      	cbnz	r0, c000f44 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */
  if (HAL_GTZC_TZIC_EnableIT(GTZC_PERIPH_LPUART1) != HAL_OK)
 c000f02:	2015      	movs	r0, #21
 c000f04:	f001 f9e2 	bl	c0022cc <HAL_GTZC_TZIC_EnableIT>
 c000f08:	b9b8      	cbnz	r0, c000f3a <MX_GTZC_S_Init+0xda>
    Error_Handler();
  }

  /* USER CODE END GTZC_S_Init 2 */

}
 c000f0a:	b01d      	add	sp, #116	@ 0x74
 c000f0c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c000f10:	f000 f8a8 	bl	c001064 <Error_Handler>
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_TIM4, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000f14:	f240 3101 	movw	r1, #769	@ 0x301
 c000f18:	2002      	movs	r0, #2
 c000f1a:	f001 f8f1 	bl	c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000f1e:	2800      	cmp	r0, #0
 c000f20:	d0b3      	beq.n	c000e8a <MX_GTZC_S_Init+0x2a>
    Error_Handler();
 c000f22:	f000 f89f 	bl	c001064 <Error_Handler>
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_LPUART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000f26:	f240 3101 	movw	r1, #769	@ 0x301
 c000f2a:	2015      	movs	r0, #21
 c000f2c:	f001 f8e8 	bl	c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000f30:	2800      	cmp	r0, #0
 c000f32:	d0b1      	beq.n	c000e98 <MX_GTZC_S_Init+0x38>
    Error_Handler();
 c000f34:	f000 f896 	bl	c001064 <Error_Handler>
 c000f38:	e7ae      	b.n	c000e98 <MX_GTZC_S_Init+0x38>
    Error_Handler();
 c000f3a:	f000 f893 	bl	c001064 <Error_Handler>
}
 c000f3e:	b01d      	add	sp, #116	@ 0x74
 c000f40:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c000f44:	f000 f88e 	bl	c001064 <Error_Handler>
 c000f48:	e7db      	b.n	c000f02 <MX_GTZC_S_Init+0xa2>
    Error_Handler();
 c000f4a:	f000 f88b 	bl	c001064 <Error_Handler>
 c000f4e:	e7c9      	b.n	c000ee4 <MX_GTZC_S_Init+0x84>
	...
 c000f58:	30030000 	.word	0x30030000

0c000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000f5c:	b510      	push	{r4, lr}
 c000f5e:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000f60:	2248      	movs	r2, #72	@ 0x48
 c000f62:	2100      	movs	r1, #0
 c000f64:	a806      	add	r0, sp, #24
 c000f66:	f003 fc67 	bl	c004838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000f6a:	2000      	movs	r0, #0
 c000f6c:	e9cd 0001 	strd	r0, r0, [sp, #4]
 c000f70:	e9cd 0003 	strd	r0, r0, [sp, #12]
 c000f74:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c000f76:	f001 fa4d 	bl	c002414 <HAL_PWREx_ControlVoltageScaling>
 c000f7a:	b108      	cbz	r0, c000f80 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c000f7c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000f7e:	e7fe      	b.n	c000f7e <SystemClock_Config+0x22>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c000f80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 c000f84:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c000f86:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c000f88:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = 4;
 c000f8c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 55;
 c000f8e:	2137      	movs	r1, #55	@ 0x37
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c000f90:	2207      	movs	r2, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000f92:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c000f94:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c000f98:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 c000f9c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c000f9e:	e9cd 1214 	strd	r1, r2, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 4;
 c000fa2:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000fa4:	f001 fb20 	bl	c0025e8 <HAL_RCC_OscConfig>
 c000fa8:	4603      	mov	r3, r0
 c000faa:	b108      	cbz	r0, c000fb0 <SystemClock_Config+0x54>
 c000fac:	b672      	cpsid	i
  while (1)
 c000fae:	e7fe      	b.n	c000fae <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000fb0:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000fb2:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000fb4:	2105      	movs	r1, #5
 c000fb6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000fb8:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000fbc:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000fc0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000fc2:	f001 fed7 	bl	c002d74 <HAL_RCC_ClockConfig>
 c000fc6:	b108      	cbz	r0, c000fcc <SystemClock_Config+0x70>
 c000fc8:	b672      	cpsid	i
  while (1)
 c000fca:	e7fe      	b.n	c000fca <SystemClock_Config+0x6e>
}
 c000fcc:	b018      	add	sp, #96	@ 0x60
 c000fce:	bd10      	pop	{r4, pc}

0c000fd0 <main>:
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c000fd0:	4a21      	ldr	r2, [pc, #132]	@ (c001058 <main+0x88>)
{
 c000fd2:	b508      	push	{r3, lr}
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c000fd4:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 c000fd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 c000fda:	6253      	str	r3, [r2, #36]	@ 0x24
  HAL_Init();
 c000fdc:	f000 fee6 	bl	c001dac <HAL_Init>
  SystemClock_Config();
 c000fe0:	f7ff ffbc 	bl	c000f5c <SystemClock_Config>
  MX_GTZC_S_Init();
 c000fe4:	f7ff ff3c 	bl	c000e60 <MX_GTZC_S_Init>
  MX_GPIO_Init();
 c000fe8:	f7ff ff2a 	bl	c000e40 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 c000fec:	f000 fdf4 	bl	c001bd8 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 c000ff0:	f000 fd40 	bl	c001a74 <MX_TIM3_Init>
  MX_TIM4_Init();
 c000ff4:	f000 fd78 	bl	c001ae8 <MX_TIM4_Init>
  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000ff8:	4b18      	ldr	r3, [pc, #96]	@ (c00105c <main+0x8c>)
 c000ffa:	4919      	ldr	r1, [pc, #100]	@ (c001060 <main+0x90>)
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000ffc:	681a      	ldr	r2, [r3, #0]
 c000ffe:	608b      	str	r3, [r1, #8]
 c001000:	f382 8888 	msr	MSP_NS, r2
  NonSecure_ResetHandler();
 c001004:	685c      	ldr	r4, [r3, #4]
 c001006:	0864      	lsrs	r4, r4, #1
 c001008:	0064      	lsls	r4, r4, #1
 c00100a:	4620      	mov	r0, r4
 c00100c:	4621      	mov	r1, r4
 c00100e:	4622      	mov	r2, r4
 c001010:	4623      	mov	r3, r4
 c001012:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001016:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c00101a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00101e:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001022:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001026:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c00102a:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00102e:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001032:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001036:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c00103a:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00103e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001042:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c00104a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00104e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001052:	f7ff f8f1 	bl	c000238 <__gnu_cmse_nonsecure_call>
  while (1)
 c001056:	e7fe      	b.n	c001056 <main+0x86>
 c001058:	e000ed00 	.word	0xe000ed00
 c00105c:	08040000 	.word	0x08040000
 c001060:	e002ed00 	.word	0xe002ed00

0c001064 <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
 c001064:	b672      	cpsid	i
  while (1)
 c001066:	e7fe      	b.n	c001066 <Error_Handler+0x2>

0c001068 <__acle_se_SECURE_RegisterCallback>:
  * @param  func        pointer to non-secure function
  * @retval None
  */

CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func){
  if(func != NULL)
 c001068:	b111      	cbz	r1, c001070 <__acle_se_SECURE_RegisterCallback+0x8>
  {
    switch(CallbackId)
 c00106a:	b3c0      	cbz	r0, c0010de <__acle_se_SECURE_RegisterCallback+0x76>
 c00106c:	2801      	cmp	r0, #1
 c00106e:	d033      	beq.n	c0010d8 <__acle_se_SECURE_RegisterCallback+0x70>
			break;
      default:
        break;
    }
  }
}
 c001070:	4670      	mov	r0, lr
 c001072:	4671      	mov	r1, lr
 c001074:	4672      	mov	r2, lr
 c001076:	4673      	mov	r3, lr
 c001078:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c00107c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001080:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001084:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001088:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c00108c:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001090:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001094:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001098:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c00109c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0010a0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0010a4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0010a8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0010ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0010b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0010b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0010b8:	f38e 8c00 	msr	CPSR_fs, lr
 c0010bc:	b410      	push	{r4}
 c0010be:	eef1 ca10 	vmrs	ip, fpscr
 c0010c2:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0010c6:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0010ca:	ea0c 0c04 	and.w	ip, ip, r4
 c0010ce:	eee1 ca10 	vmsr	fpscr, ip
 c0010d2:	bc10      	pop	{r4}
 c0010d4:	46f4      	mov	ip, lr
 c0010d6:	4774      	bxns	lr
			pSecureErrorCallback = func;
 c0010d8:	4b02      	ldr	r3, [pc, #8]	@ (c0010e4 <__acle_se_SECURE_RegisterCallback+0x7c>)
 c0010da:	6019      	str	r1, [r3, #0]
}
 c0010dc:	e7c8      	b.n	c001070 <__acle_se_SECURE_RegisterCallback+0x8>
			pSecureFaultCallback = func;
 c0010de:	4b02      	ldr	r3, [pc, #8]	@ (c0010e8 <__acle_se_SECURE_RegisterCallback+0x80>)
 c0010e0:	6019      	str	r1, [r3, #0]
			break;
 c0010e2:	e7c5      	b.n	c001070 <__acle_se_SECURE_RegisterCallback+0x8>
 c0010e4:	300000b4 	.word	0x300000b4
 c0010e8:	300000b8 	.word	0x300000b8

0c0010ec <__acle_se_SECURE_send>:

CMSE_NS_ENTRY void SECURE_send(uint8_t* message, int size){
 c0010ec:	4684      	mov	ip, r0
 c0010ee:	460a      	mov	r2, r1
 c0010f0:	b508      	push	{r3, lr}
	HAL_UART_Transmit(&hlpuart1, message, size, HAL_MAX_DELAY);
 c0010f2:	4661      	mov	r1, ip
 c0010f4:	f04f 33ff 	mov.w	r3, #4294967295
 c0010f8:	b292      	uxth	r2, r2
 c0010fa:	481c      	ldr	r0, [pc, #112]	@ (c00116c <__acle_se_SECURE_send+0x80>)
 c0010fc:	f003 f95e 	bl	c0043bc <HAL_UART_Transmit>
};
 c001100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c001104:	4670      	mov	r0, lr
 c001106:	4671      	mov	r1, lr
 c001108:	4672      	mov	r2, lr
 c00110a:	4673      	mov	r3, lr
 c00110c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001110:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001114:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001118:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00111c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001120:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001124:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001128:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00112c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001130:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001134:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001138:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00113c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001148:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c00114c:	f38e 8c00 	msr	CPSR_fs, lr
 c001150:	b410      	push	{r4}
 c001152:	eef1 ca10 	vmrs	ip, fpscr
 c001156:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00115a:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c00115e:	ea0c 0c04 	and.w	ip, ip, r4
 c001162:	eee1 ca10 	vmsr	fpscr, ip
 c001166:	bc10      	pop	{r4}
 c001168:	46f4      	mov	ip, lr
 c00116a:	4774      	bxns	lr
 c00116c:	30000160 	.word	0x30000160

0c001170 <__acle_se_SECURE_recv>:

CMSE_NS_ENTRY void SECURE_recv(uint8_t* message, int size){
 c001170:	4684      	mov	ip, r0
 c001172:	460a      	mov	r2, r1
 c001174:	b508      	push	{r3, lr}
	HAL_UART_Receive(&hlpuart1, message, size, HAL_MAX_DELAY);
 c001176:	4661      	mov	r1, ip
 c001178:	f04f 33ff 	mov.w	r3, #4294967295
 c00117c:	b292      	uxth	r2, r2
 c00117e:	481c      	ldr	r0, [pc, #112]	@ (c0011f0 <__acle_se_SECURE_recv+0x80>)
 c001180:	f002 fdba 	bl	c003cf8 <HAL_UART_Receive>
};
 c001184:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c001188:	4670      	mov	r0, lr
 c00118a:	4671      	mov	r1, lr
 c00118c:	4672      	mov	r2, lr
 c00118e:	4673      	mov	r3, lr
 c001190:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001194:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001198:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00119c:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0011a0:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0011a4:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0011a8:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0011ac:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0011b0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0011b4:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0011b8:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0011bc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0011c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0011c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0011c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0011cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0011d0:	f38e 8c00 	msr	CPSR_fs, lr
 c0011d4:	b410      	push	{r4}
 c0011d6:	eef1 ca10 	vmrs	ip, fpscr
 c0011da:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0011de:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0011e2:	ea0c 0c04 	and.w	ip, ip, r4
 c0011e6:	eee1 ca10 	vmsr	fpscr, ip
 c0011ea:	bc10      	pop	{r4}
 c0011ec:	46f4      	mov	ip, lr
 c0011ee:	4774      	bxns	lr
 c0011f0:	30000160 	.word	0x30000160

0c0011f4 <__acle_se_SECURE_setState>:
		0xd6, 0xfd, 0xd9, 0xf1};

uint8_t exec = 0, stateUsed = 0, stateChecked = 0;

CMSE_NS_ENTRY void SECURE_setState(uint8_t *state, int state_size) {
	if(stateChecked != 1 || exec != 1) return;
 c0011f4:	4b29      	ldr	r3, [pc, #164]	@ (c00129c <__acle_se_SECURE_setState+0xa8>)
 c0011f6:	781b      	ldrb	r3, [r3, #0]
 c0011f8:	2b01      	cmp	r3, #1
 c0011fa:	d103      	bne.n	c001204 <__acle_se_SECURE_setState+0x10>
 c0011fc:	4b28      	ldr	r3, [pc, #160]	@ (c0012a0 <__acle_se_SECURE_setState+0xac>)
 c0011fe:	781b      	ldrb	r3, [r3, #0]
 c001200:	2b01      	cmp	r3, #1
 c001202:	d033      	beq.n	c00126c <__acle_se_SECURE_setState+0x78>
 c001204:	4670      	mov	r0, lr
 c001206:	4671      	mov	r1, lr
 c001208:	4672      	mov	r2, lr
 c00120a:	4673      	mov	r3, lr
 c00120c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001210:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001214:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c001218:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00121c:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001220:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001224:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c001228:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00122c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001230:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001234:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c001238:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c00123c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001240:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001244:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c001248:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c00124c:	f38e 8c00 	msr	CPSR_fs, lr
 c001250:	b410      	push	{r4}
 c001252:	eef1 ca10 	vmrs	ip, fpscr
 c001256:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00125a:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c00125e:	ea0c 0c04 	and.w	ip, ip, r4
 c001262:	eee1 ca10 	vmsr	fpscr, ip
 c001266:	bc10      	pop	{r4}
 c001268:	46f4      	mov	ip, lr
 c00126a:	4774      	bxns	lr
CMSE_NS_ENTRY void SECURE_setState(uint8_t *state, int state_size) {
 c00126c:	b530      	push	{r4, r5, lr}
 c00126e:	4604      	mov	r4, r0
 c001270:	460d      	mov	r5, r1
 c001272:	b0a3      	sub	sp, #140	@ 0x8c
	//if(state_size > 32) {
		sha256 hash;
		sha256_initialize(&hash);
 c001274:	4668      	mov	r0, sp
 c001276:	f7ff f999 	bl	c0005ac <sha256_initialize>
		sha256_finalize(&hash, state, state_size);
 c00127a:	4621      	mov	r1, r4
		memcpy(secure_state, hash.hash, 32);
 c00127c:	466c      	mov	r4, sp
		sha256_finalize(&hash, state, state_size);
 c00127e:	462a      	mov	r2, r5
 c001280:	4668      	mov	r0, sp
 c001282:	f7ff fba3 	bl	c0009cc <sha256_finalize>
		memcpy(secure_state, hash.hash, 32);
 c001286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 c001288:	4d06      	ldr	r5, [pc, #24]	@ (c0012a4 <__acle_se_SECURE_setState+0xb0>)
 c00128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c00128c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 c001290:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	//}
	//else {
	//	memset(secure_state, 0, 32);
	//	memcpy(secure_state, state, state_size);
	//}
}
 c001294:	b023      	add	sp, #140	@ 0x8c
 c001296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00129a:	e7b3      	b.n	c001204 <__acle_se_SECURE_setState+0x10>
 c00129c:	300000a0 	.word	0x300000a0
 c0012a0:	300000a2 	.word	0x300000a2
 c0012a4:	30000000 	.word	0x30000000

0c0012a8 <__acle_se_SECURE_checkState>:
		HAL_UART_Transmit(&hlpuart1, hex, 2, HAL_MAX_DELAY);
	}
	HAL_UART_Transmit(&hlpuart1, "\n", 1, HAL_MAX_DELAY);
}

CMSE_NS_ENTRY void SECURE_checkState(uint8_t *state, int state_size) {
 c0012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0012ac:	4604      	mov	r4, r0
 c0012ae:	460d      	mov	r5, r1
 c0012b0:	b0a4      	sub	sp, #144	@ 0x90
	sha256 hash;
	sha256_initialize(&hash);
 c0012b2:	a802      	add	r0, sp, #8
 c0012b4:	f7ff f97a 	bl	c0005ac <sha256_initialize>
	sha256_finalize(&hash, state, state_size);
 c0012b8:	4621      	mov	r1, r4
 c0012ba:	462a      	mov	r2, r5
 c0012bc:	a802      	add	r0, sp, #8
 c0012be:	f7ff fb85 	bl	c0009cc <sha256_finalize>
	uint8_t cmp = (uint8_t) memcmp(secure_state, hash.hash, 32);
 c0012c2:	2220      	movs	r2, #32
 c0012c4:	483c      	ldr	r0, [pc, #240]	@ (c0013b8 <__acle_se_SECURE_checkState+0x110>)
 c0012c6:	a902      	add	r1, sp, #8
 c0012c8:	f003 fa8c 	bl	c0047e4 <memcmp>

	if(cmp != 0) {
 c0012cc:	f010 04ff 	ands.w	r4, r0, #255	@ 0xff
 c0012d0:	d13e      	bne.n	c001350 <__acle_se_SECURE_checkState+0xa8>
		HAL_UART_Transmit(&hlpuart1, "TamperedState: ", 15, HAL_MAX_DELAY);
		print_token(hash.hash, 32);
	}

	stateChecked = (cmp == 0);
 c0012d2:	fab4 f084 	clz	r0, r4
	stateUsed = 1;
 c0012d6:	2201      	movs	r2, #1
	stateChecked = (cmp == 0);
 c0012d8:	4938      	ldr	r1, [pc, #224]	@ (c0013bc <__acle_se_SECURE_checkState+0x114>)
	stateUsed = 1;
 c0012da:	4b39      	ldr	r3, [pc, #228]	@ (c0013c0 <__acle_se_SECURE_checkState+0x118>)
	stateChecked = (cmp == 0);
 c0012dc:	0940      	lsrs	r0, r0, #5
 c0012de:	7008      	strb	r0, [r1, #0]
	stateUsed = 1;
 c0012e0:	701a      	strb	r2, [r3, #0]
}
 c0012e2:	b024      	add	sp, #144	@ 0x90
 c0012e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c0012e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0012ec:	4670      	mov	r0, lr
 c0012ee:	4671      	mov	r1, lr
 c0012f0:	4672      	mov	r2, lr
 c0012f2:	4673      	mov	r3, lr
 c0012f4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0012f8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0012fc:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c001300:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001304:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001308:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00130c:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c001310:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c001314:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c001318:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c00131c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c001320:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c001324:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c001328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c00132c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c001330:	f38e 8c00 	msr	CPSR_fs, lr
 c001334:	b410      	push	{r4}
 c001336:	eef1 ca10 	vmrs	ip, fpscr
 c00133a:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c00133e:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001342:	ea0c 0c04 	and.w	ip, ip, r4
 c001346:	eee1 ca10 	vmsr	fpscr, ip
 c00134a:	bc10      	pop	{r4}
 c00134c:	46f4      	mov	ip, lr
 c00134e:	4774      	bxns	lr
		HAL_UART_Transmit(&hlpuart1, "TamperedState: ", 15, HAL_MAX_DELAY);
 c001350:	f04f 33ff 	mov.w	r3, #4294967295
 c001354:	220f      	movs	r2, #15
 c001356:	491b      	ldr	r1, [pc, #108]	@ (c0013c4 <__acle_se_SECURE_checkState+0x11c>)
 c001358:	481b      	ldr	r0, [pc, #108]	@ (c0013c8 <__acle_se_SECURE_checkState+0x120>)
 c00135a:	f003 f82f 	bl	c0043bc <HAL_UART_Transmit>
	char hex[3]={0};
 c00135e:	f04f 0c00 	mov.w	ip, #0
 c001362:	4a1a      	ldr	r2, [pc, #104]	@ (c0013cc <__acle_se_SECURE_checkState+0x124>)
	HAL_UART_Transmit(&hlpuart1, "0x", 2, HAL_MAX_DELAY);
 c001364:	4818      	ldr	r0, [pc, #96]	@ (c0013c8 <__acle_se_SECURE_checkState+0x120>)
	char hex[3]={0};
 c001366:	8811      	ldrh	r1, [r2, #0]
	HAL_UART_Transmit(&hlpuart1, "0x", 2, HAL_MAX_DELAY);
 c001368:	f04f 33ff 	mov.w	r3, #4294967295
	char hex[3]={0};
 c00136c:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_UART_Transmit(&hlpuart1, "0x", 2, HAL_MAX_DELAY);
 c001370:	2202      	movs	r2, #2
 c001372:	4917      	ldr	r1, [pc, #92]	@ (c0013d0 <__acle_se_SECURE_checkState+0x128>)
		HAL_UART_Transmit(&hlpuart1, hex, 2, HAL_MAX_DELAY);
 c001374:	4607      	mov	r7, r0
		sprintf(hex, "%.2x", token[i]);
 c001376:	f8df 8060 	ldr.w	r8, [pc, #96]	@ c0013d8 <__acle_se_SECURE_checkState+0x130>
 c00137a:	f10d 0507 	add.w	r5, sp, #7
 c00137e:	f10d 0627 	add.w	r6, sp, #39	@ 0x27
	char hex[3]={0};
 c001382:	f88d c006 	strb.w	ip, [sp, #6]
	HAL_UART_Transmit(&hlpuart1, "0x", 2, HAL_MAX_DELAY);
 c001386:	f003 f819 	bl	c0043bc <HAL_UART_Transmit>
		sprintf(hex, "%.2x", token[i]);
 c00138a:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 c00138e:	4641      	mov	r1, r8
 c001390:	a801      	add	r0, sp, #4
 c001392:	f003 fa07 	bl	c0047a4 <siprintf>
		HAL_UART_Transmit(&hlpuart1, hex, 2, HAL_MAX_DELAY);
 c001396:	f04f 33ff 	mov.w	r3, #4294967295
 c00139a:	2202      	movs	r2, #2
 c00139c:	4638      	mov	r0, r7
 c00139e:	a901      	add	r1, sp, #4
 c0013a0:	f003 f80c 	bl	c0043bc <HAL_UART_Transmit>
	for(int i=0; i<size; i++) {
 c0013a4:	42b5      	cmp	r5, r6
 c0013a6:	d1f0      	bne.n	c00138a <__acle_se_SECURE_checkState+0xe2>
	HAL_UART_Transmit(&hlpuart1, "\n", 1, HAL_MAX_DELAY);
 c0013a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0013ac:	2201      	movs	r2, #1
 c0013ae:	4909      	ldr	r1, [pc, #36]	@ (c0013d4 <__acle_se_SECURE_checkState+0x12c>)
 c0013b0:	4805      	ldr	r0, [pc, #20]	@ (c0013c8 <__acle_se_SECURE_checkState+0x120>)
 c0013b2:	f003 f803 	bl	c0043bc <HAL_UART_Transmit>
}
 c0013b6:	e78c      	b.n	c0012d2 <__acle_se_SECURE_checkState+0x2a>
 c0013b8:	30000000 	.word	0x30000000
 c0013bc:	300000a0 	.word	0x300000a0
 c0013c0:	300000a1 	.word	0x300000a1
 c0013c4:	0c0050f4 	.word	0x0c0050f4
 c0013c8:	30000160 	.word	0x30000160
 c0013cc:	0c0050e4 	.word	0x0c0050e4
 c0013d0:	0c0050e8 	.word	0x0c0050e8
 c0013d4:	0c005110 	.word	0x0c005110
 c0013d8:	0c0050ec 	.word	0x0c0050ec

0c0013dc <verify_req>:
uint32_t my_counter = 0;

extern unsigned get_sphinc_sig(uint8_t *out);

int verify_req(pox_call_t *pox_fn, uint8_t *pox_token) {
	if(pox_fn->counter < my_counter) return 0;
 c0013dc:	4b22      	ldr	r3, [pc, #136]	@ (c001468 <verify_req+0x8c>)
 c0013de:	6942      	ldr	r2, [r0, #20]
 c0013e0:	681b      	ldr	r3, [r3, #0]
 c0013e2:	429a      	cmp	r2, r3
 c0013e4:	d201      	bcs.n	c0013ea <verify_req+0xe>
 c0013e6:	2000      	movs	r0, #0
			pox_fn->output[0] = 0xff;
			return 0;
		}
	pox_fn->output[0] = 0xaa;
	return 1;
}
 c0013e8:	4770      	bx	lr
int verify_req(pox_call_t *pox_fn, uint8_t *pox_token) {
 c0013ea:	b530      	push	{r4, r5, lr}
 c0013ec:	4605      	mov	r5, r0
 c0013ee:	460c      	mov	r4, r1
 c0013f0:	b0dd      	sub	sp, #372	@ 0x174
	sha256_initialize(&hash);
 c0013f2:	4668      	mov	r0, sp
 c0013f4:	f7ff f8da 	bl	c0005ac <sha256_initialize>
	sha256_update(&hash, pox_fn->command, pox_fn->command_size);
 c0013f8:	4668      	mov	r0, sp
 c0013fa:	7f2a      	ldrb	r2, [r5, #28]
 c0013fc:	69a9      	ldr	r1, [r5, #24]
 c0013fe:	f7ff f903 	bl	c000608 <sha256_update>
	sha256_update(&hash, &(pox_fn->counter), 4);
 c001402:	2204      	movs	r2, #4
 c001404:	4668      	mov	r0, sp
 c001406:	f105 0114 	add.w	r1, r5, #20
 c00140a:	f7ff f8fd 	bl	c000608 <sha256_update>
	sha256_update(&hash, &(pox_fn->addr), 4);
 c00140e:	2204      	movs	r2, #4
 c001410:	4629      	mov	r1, r5
 c001412:	4668      	mov	r0, sp
 c001414:	f7ff f8f8 	bl	c000608 <sha256_update>
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
 c001418:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 c00141c:	4668      	mov	r0, sp
 c00141e:	f7ff fad5 	bl	c0009cc <sha256_finalize>
	hmac_sha256_initialize(&hmac, symkey, 16);
 c001422:	2210      	movs	r2, #16
 c001424:	4911      	ldr	r1, [pc, #68]	@ (c00146c <verify_req+0x90>)
 c001426:	a822      	add	r0, sp, #136	@ 0x88
 c001428:	f7ff fb14 	bl	c000a54 <hmac_sha256_initialize>
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
 c00142c:	2220      	movs	r2, #32
 c00142e:	4669      	mov	r1, sp
 c001430:	a822      	add	r0, sp, #136	@ 0x88
 c001432:	f7ff fc59 	bl	c000ce8 <hmac_sha256_finalize>
	for (int i = 0; i < SHA256_DIGEST_SIZE; ++i)
 c001436:	aa22      	add	r2, sp, #136	@ 0x88
 c001438:	1e63      	subs	r3, r4, #1
 c00143a:	f104 011f 	add.w	r1, r4, #31
 c00143e:	e001      	b.n	c001444 <verify_req+0x68>
 c001440:	428b      	cmp	r3, r1
 c001442:	d00b      	beq.n	c00145c <verify_req+0x80>
		if(pox_token[i] != hmac.digest[i]){
 c001444:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 c001448:	f812 cb01 	ldrb.w	ip, [r2], #1
 c00144c:	45e6      	cmp	lr, ip
 c00144e:	d0f7      	beq.n	c001440 <verify_req+0x64>
			pox_fn->output[0] = 0xff;
 c001450:	22ff      	movs	r2, #255	@ 0xff
	if(pox_fn->counter < my_counter) return 0;
 c001452:	2000      	movs	r0, #0
			pox_fn->output[0] = 0xff;
 c001454:	68eb      	ldr	r3, [r5, #12]
 c001456:	701a      	strb	r2, [r3, #0]
}
 c001458:	b05d      	add	sp, #372	@ 0x174
 c00145a:	bd30      	pop	{r4, r5, pc}
	pox_fn->output[0] = 0xaa;
 c00145c:	22aa      	movs	r2, #170	@ 0xaa
	return 1;
 c00145e:	2001      	movs	r0, #1
	pox_fn->output[0] = 0xaa;
 c001460:	68eb      	ldr	r3, [r5, #12]
 c001462:	701a      	strb	r2, [r3, #0]
}
 c001464:	b05d      	add	sp, #372	@ 0x174
 c001466:	bd30      	pop	{r4, r5, pc}
 c001468:	3000009c 	.word	0x3000009c
 c00146c:	300000a4 	.word	0x300000a4

0c001470 <__acle_se_SECURE_pox>:

void reset_flags() {
	exec = 0; stateUsed = 0; stateChecked = 0;
}

CMSE_NS_ENTRY void SECURE_pox(pox_call_t *pox_fn, uint8_t *pox_token) {
 c001470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c001474:	4605      	mov	r5, r0
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
 c001476:	4c74      	ldr	r4, [pc, #464]	@ (c001648 <__acle_se_SECURE_pox+0x1d8>)
	HAL_UART_Transmit(&hlpuart1, "Phase2 start\n", 13, HAL_MAX_DELAY);
 c001478:	f04f 33ff 	mov.w	r3, #4294967295
 c00147c:	220d      	movs	r2, #13
CMSE_NS_ENTRY void SECURE_pox(pox_call_t *pox_fn, uint8_t *pox_token) {
 c00147e:	460e      	mov	r6, r1
	HAL_UART_Transmit(&hlpuart1, "Phase2 start\n", 13, HAL_MAX_DELAY);
 c001480:	4872      	ldr	r0, [pc, #456]	@ (c00164c <__acle_se_SECURE_pox+0x1dc>)
 c001482:	4973      	ldr	r1, [pc, #460]	@ (c001650 <__acle_se_SECURE_pox+0x1e0>)
CMSE_NS_ENTRY void SECURE_pox(pox_call_t *pox_fn, uint8_t *pox_token) {
 c001484:	b0dc      	sub	sp, #368	@ 0x170
	HAL_UART_Transmit(&hlpuart1, "Phase2 start\n", 13, HAL_MAX_DELAY);
 c001486:	f002 ff99 	bl	c0043bc <HAL_UART_Transmit>
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
 c00148a:	6823      	ldr	r3, [r4, #0]
 c00148c:	696a      	ldr	r2, [r5, #20]
 c00148e:	429a      	cmp	r2, r3
 c001490:	d836      	bhi.n	c001500 <__acle_se_SECURE_pox+0x90>

	reset_flags();
	__enable_irq();
	HAL_UART_Transmit(&hlpuart1, "Phase5 start\n", 13, HAL_MAX_DELAY);
	//HAL_UART_Transmit(&hlpuart1, "Success\n", 8, HAL_MAX_DELAY);
}
 c001492:	b05c      	add	sp, #368	@ 0x170
 c001494:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001498:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00149c:	4670      	mov	r0, lr
 c00149e:	4671      	mov	r1, lr
 c0014a0:	4672      	mov	r2, lr
 c0014a2:	4673      	mov	r3, lr
 c0014a4:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0014a8:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0014ac:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0014b0:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0014b4:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0014b8:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0014bc:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0014c0:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0014c4:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0014c8:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0014cc:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0014d0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0014d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0014d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0014dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0014e0:	f38e 8c00 	msr	CPSR_fs, lr
 c0014e4:	b410      	push	{r4}
 c0014e6:	eef1 ca10 	vmrs	ip, fpscr
 c0014ea:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c0014ee:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c0014f2:	ea0c 0c04 	and.w	ip, ip, r4
 c0014f6:	eee1 ca10 	vmsr	fpscr, ip
 c0014fa:	bc10      	pop	{r4}
 c0014fc:	46f4      	mov	ip, lr
 c0014fe:	4774      	bxns	lr
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
 c001500:	4631      	mov	r1, r6
 c001502:	4628      	mov	r0, r5
 c001504:	f7ff ff6a 	bl	c0013dc <verify_req>
 c001508:	2800      	cmp	r0, #0
 c00150a:	d0c2      	beq.n	c001492 <__acle_se_SECURE_pox+0x22>
	my_counter = pox_fn->counter;
 c00150c:	462f      	mov	r7, r5
	exec = 1; stateUsed = 0; stateChecked = 0;
 c00150e:	2201      	movs	r2, #1
 c001510:	2300      	movs	r3, #0
 c001512:	f8df 8154 	ldr.w	r8, [pc, #340]	@ c001668 <__acle_se_SECURE_pox+0x1f8>
 c001516:	f8df 9154 	ldr.w	r9, [pc, #340]	@ c00166c <__acle_se_SECURE_pox+0x1fc>
 c00151a:	f888 2000 	strb.w	r2, [r8]
 c00151e:	f8df a150 	ldr.w	sl, [pc, #336]	@ c001670 <__acle_se_SECURE_pox+0x200>
	my_counter = pox_fn->counter;
 c001522:	f857 2f14 	ldr.w	r2, [r7, #20]!
	sha256_initialize(&hash);
 c001526:	4668      	mov	r0, sp
	exec = 1; stateUsed = 0; stateChecked = 0;
 c001528:	f889 3000 	strb.w	r3, [r9]
 c00152c:	f88a 3000 	strb.w	r3, [sl]
	my_counter = pox_fn->counter;
 c001530:	6022      	str	r2, [r4, #0]
	sha256_initialize(&hash);
 c001532:	f7ff f83b 	bl	c0005ac <sha256_initialize>
	sha256_update(&hash, &(pox_fn->counter), 4);
 c001536:	4639      	mov	r1, r7
 c001538:	4668      	mov	r0, sp
 c00153a:	2204      	movs	r2, #4
 c00153c:	f7ff f864 	bl	c000608 <sha256_update>
	sha256_update(&hash, &(pox_fn->addr), 4);
 c001540:	4629      	mov	r1, r5
 c001542:	4668      	mov	r0, sp
 c001544:	2204      	movs	r2, #4
 c001546:	f7ff f85f 	bl	c000608 <sha256_update>
	sha256_update(&hash, pox_fn->input, pox_fn->input_size);
 c00154a:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 c00154e:	4668      	mov	r0, sp
 c001550:	f7ff f85a 	bl	c000608 <sha256_update>
	sha256_update(&hash, mem, mem_len);
 c001554:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 c001558:	4668      	mov	r0, sp
 c00155a:	493e      	ldr	r1, [pc, #248]	@ (c001654 <__acle_se_SECURE_pox+0x1e4>)
 c00155c:	f7ff f854 	bl	c000608 <sha256_update>
 c001560:	b672      	cpsid	i
	HAL_UART_Transmit(&hlpuart1, "Phase3 start\n", 13, HAL_MAX_DELAY);
 c001562:	f04f 33ff 	mov.w	r3, #4294967295
 c001566:	220d      	movs	r2, #13
 c001568:	493b      	ldr	r1, [pc, #236]	@ (c001658 <__acle_se_SECURE_pox+0x1e8>)
	void_function fn = (void_function)(pox_fn->addr);
 c00156a:	682c      	ldr	r4, [r5, #0]
	HAL_UART_Transmit(&hlpuart1, "Phase3 start\n", 13, HAL_MAX_DELAY);
 c00156c:	4837      	ldr	r0, [pc, #220]	@ (c00164c <__acle_se_SECURE_pox+0x1dc>)
 c00156e:	f002 ff25 	bl	c0043bc <HAL_UART_Transmit>
	fn();
 c001572:	0864      	lsrs	r4, r4, #1
 c001574:	0064      	lsls	r4, r4, #1
 c001576:	4620      	mov	r0, r4
 c001578:	4621      	mov	r1, r4
 c00157a:	4622      	mov	r2, r4
 c00157c:	4623      	mov	r3, r4
 c00157e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 c001582:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c001586:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c00158a:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c00158e:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c001592:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c001596:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c00159a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c00159e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0015a2:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0015a6:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0015aa:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0015ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0015b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0015b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 c0015ba:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0015be:	f7fe fe3b 	bl	c000238 <__gnu_cmse_nonsecure_call>
	HAL_UART_Transmit(&hlpuart1, "Phase4 start\n", 13, HAL_MAX_DELAY);
 c0015c2:	f04f 33ff 	mov.w	r3, #4294967295
 c0015c6:	220d      	movs	r2, #13
 c0015c8:	4924      	ldr	r1, [pc, #144]	@ (c00165c <__acle_se_SECURE_pox+0x1ec>)
 c0015ca:	4820      	ldr	r0, [pc, #128]	@ (c00164c <__acle_se_SECURE_pox+0x1dc>)
 c0015cc:	f002 fef6 	bl	c0043bc <HAL_UART_Transmit>
	if(exec && stateUsed && !stateChecked) {
 c0015d0:	f898 3000 	ldrb.w	r3, [r8]
 c0015d4:	b12b      	cbz	r3, c0015e2 <__acle_se_SECURE_pox+0x172>
 c0015d6:	f899 3000 	ldrb.w	r3, [r9]
 c0015da:	b113      	cbz	r3, c0015e2 <__acle_se_SECURE_pox+0x172>
 c0015dc:	f89a 3000 	ldrb.w	r3, [sl]
 c0015e0:	b34b      	cbz	r3, c001636 <__acle_se_SECURE_pox+0x1c6>
	sha256_finalize(&hash, pox_fn->output, pox_fn->output_size);
 c0015e2:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
 c0015e6:	4668      	mov	r0, sp
 c0015e8:	f7ff f9f0 	bl	c0009cc <sha256_finalize>
	hmac_sha256_initialize(&hmac, symkey, SYM_KEY_SIZE);
 c0015ec:	a822      	add	r0, sp, #136	@ 0x88
 c0015ee:	2210      	movs	r2, #16
 c0015f0:	491b      	ldr	r1, [pc, #108]	@ (c001660 <__acle_se_SECURE_pox+0x1f0>)
 c0015f2:	f7ff fa2f 	bl	c000a54 <hmac_sha256_initialize>
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
 c0015f6:	4669      	mov	r1, sp
 c0015f8:	a822      	add	r0, sp, #136	@ 0x88
 c0015fa:	2220      	movs	r2, #32
 c0015fc:	f7ff fb74 	bl	c000ce8 <hmac_sha256_finalize>
	exec = 0; stateUsed = 0; stateChecked = 0;
 c001600:	2300      	movs	r3, #0
	memcpy(pox_token, hmac.digest, SHA256_DIGEST_SIZE);
 c001602:	ad22      	add	r5, sp, #136	@ 0x88
	exec = 0; stateUsed = 0; stateChecked = 0;
 c001604:	f888 3000 	strb.w	r3, [r8]
 c001608:	f889 3000 	strb.w	r3, [r9]
 c00160c:	f88a 3000 	strb.w	r3, [sl]
	memcpy(pox_token, hmac.digest, SHA256_DIGEST_SIZE);
 c001610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c001612:	6030      	str	r0, [r6, #0]
 c001614:	6071      	str	r1, [r6, #4]
 c001616:	60b2      	str	r2, [r6, #8]
 c001618:	60f3      	str	r3, [r6, #12]
 c00161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 c00161c:	6130      	str	r0, [r6, #16]
 c00161e:	6171      	str	r1, [r6, #20]
 c001620:	61b2      	str	r2, [r6, #24]
 c001622:	61f3      	str	r3, [r6, #28]
  __ASM volatile ("cpsie i" : : : "memory");
 c001624:	b662      	cpsie	i
	HAL_UART_Transmit(&hlpuart1, "Phase5 start\n", 13, HAL_MAX_DELAY);
 c001626:	f04f 33ff 	mov.w	r3, #4294967295
 c00162a:	220d      	movs	r2, #13
 c00162c:	490d      	ldr	r1, [pc, #52]	@ (c001664 <__acle_se_SECURE_pox+0x1f4>)
 c00162e:	4807      	ldr	r0, [pc, #28]	@ (c00164c <__acle_se_SECURE_pox+0x1dc>)
 c001630:	f002 fec4 	bl	c0043bc <HAL_UART_Transmit>
 c001634:	e72d      	b.n	c001492 <__acle_se_SECURE_pox+0x22>
	exec = 0; stateUsed = 0; stateChecked = 0;
 c001636:	f888 3000 	strb.w	r3, [r8]
 c00163a:	f889 3000 	strb.w	r3, [r9]
 c00163e:	f88a 3000 	strb.w	r3, [sl]
 c001642:	b662      	cpsie	i
		return;
 c001644:	e725      	b.n	c001492 <__acle_se_SECURE_pox+0x22>
 c001646:	bf00      	nop
 c001648:	3000009c 	.word	0x3000009c
 c00164c:	30000160 	.word	0x30000160
 c001650:	0c005104 	.word	0x0c005104
 c001654:	080401f8 	.word	0x080401f8
 c001658:	0c005114 	.word	0x0c005114
 c00165c:	0c005124 	.word	0x0c005124
 c001660:	300000a4 	.word	0x300000a4
 c001664:	0c005134 	.word	0x0c005134
 c001668:	300000a2 	.word	0x300000a2
 c00166c:	300000a1 	.word	0x300000a1
 c001670:	300000a0 	.word	0x300000a0

0c001674 <HAL_MspInit>:

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c001674:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c001676:	4b2d      	ldr	r3, [pc, #180]	@ (c00172c <HAL_MspInit+0xb8>)
{
 c001678:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00167a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
{
 c00167c:	b085      	sub	sp, #20
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00167e:	f041 0101 	orr.w	r1, r1, #1
 c001682:	6619      	str	r1, [r3, #96]	@ 0x60
 c001684:	6e19      	ldr	r1, [r3, #96]	@ 0x60
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c001686:	2008      	movs	r0, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c001688:	f001 0101 	and.w	r1, r1, #1
 c00168c:	9101      	str	r1, [sp, #4]
 c00168e:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 c001690:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 c001692:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 c001696:	6599      	str	r1, [r3, #88]	@ 0x58
 c001698:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 c00169a:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 c00169e:	9102      	str	r1, [sp, #8]
 c0016a0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0016a2:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 c0016a4:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 c0016a8:	6499      	str	r1, [r3, #72]	@ 0x48
 c0016aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0016ac:	4611      	mov	r1, r2
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0016ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 c0016b2:	9303      	str	r3, [sp, #12]
 c0016b4:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0016b6:	f000 fbaf 	bl	c001e18 <HAL_NVIC_SetPriority>
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0016ba:	2008      	movs	r0, #8
 c0016bc:	f000 fbe8 	bl	c001e90 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c0016c0:	f000 fef0 	bl	c0024a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /** PWR Non-Privilege/Non-Secure Items Configurations
  */
  HAL_PWR_ConfigAttributes(PWR_WKUP1, PWR_NSEC |PWR_NPRIV);
 c0016c4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016c8:	2001      	movs	r0, #1
 c0016ca:	f000 fe6f 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP2, PWR_NSEC |PWR_NPRIV);
 c0016ce:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016d2:	2002      	movs	r0, #2
 c0016d4:	f000 fe6a 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP3, PWR_NSEC |PWR_NPRIV);
 c0016d8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016dc:	2004      	movs	r0, #4
 c0016de:	f000 fe65 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP4, PWR_NSEC |PWR_NPRIV);
 c0016e2:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016e6:	2008      	movs	r0, #8
 c0016e8:	f000 fe60 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_WKUP5, PWR_NSEC |PWR_NPRIV);
 c0016ec:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016f0:	2010      	movs	r0, #16
 c0016f2:	f000 fe5b 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VDM, PWR_NSEC |PWR_NPRIV);
 c0016f6:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c0016fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 c0016fe:	f000 fe55 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_APC, PWR_NSEC |PWR_NPRIV);
 c001702:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c001706:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 c00170a:	f000 fe4f 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_LPM, PWR_NSEC |PWR_NPRIV);
 c00170e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c001712:	f44f 7080 	mov.w	r0, #256	@ 0x100
 c001716:	f000 fe49 	bl	c0023ac <HAL_PWR_ConfigAttributes>
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c00171a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 c00171e:	f44f 6080 	mov.w	r0, #1024	@ 0x400

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001722:	b005      	add	sp, #20
 c001724:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWR_ConfigAttributes(PWR_VB, PWR_NSEC |PWR_NPRIV);
 c001728:	f000 be40 	b.w	c0023ac <HAL_PWR_ConfigAttributes>
 c00172c:	50021000 	.word	0x50021000

0c001730 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c001730:	e7fe      	b.n	c001730 <NMI_Handler>
 c001732:	bf00      	nop

0c001734 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001734:	e7fe      	b.n	c001734 <HardFault_Handler>
 c001736:	bf00      	nop

0c001738 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001738:	e7fe      	b.n	c001738 <MemManage_Handler>
 c00173a:	bf00      	nop

0c00173c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00173c:	e7fe      	b.n	c00173c <BusFault_Handler>
 c00173e:	bf00      	nop

0c001740 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001740:	e7fe      	b.n	c001740 <UsageFault_Handler>
 c001742:	bf00      	nop

0c001744 <SecureFault_Handler>:
void SecureFault_Handler(void)
{
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001744:	e7fe      	b.n	c001744 <SecureFault_Handler>
 c001746:	bf00      	nop

0c001748 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001748:	4770      	bx	lr
 c00174a:	bf00      	nop

0c00174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 c00174c:	4770      	bx	lr
 c00174e:	bf00      	nop

0c001750 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 c001750:	4770      	bx	lr
 c001752:	bf00      	nop

0c001754 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001754:	f000 bb3c 	b.w	c001dd0 <HAL_IncTick>

0c001758 <GTZC_IRQHandler>:
void GTZC_IRQHandler(void)
{
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c001758:	f000 bde0 	b.w	c00231c <HAL_GTZC_IRQHandler>

0c00175c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 c00175c:	4801      	ldr	r0, [pc, #4]	@ (c001764 <TIM3_IRQHandler+0x8>)
 c00175e:	f002 b9bd 	b.w	c003adc <HAL_TIM_IRQHandler>
 c001762:	bf00      	nop
 c001764:	30000110 	.word	0x30000110

0c001768 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 c001768:	4801      	ldr	r0, [pc, #4]	@ (c001770 <TIM4_IRQHandler+0x8>)
 c00176a:	f002 b9b7 	b.w	c003adc <HAL_TIM_IRQHandler>
 c00176e:	bf00      	nop
 c001770:	300000c0 	.word	0x300000c0

0c001774 <_sbrk>:
 c001774:	490d      	ldr	r1, [pc, #52]	@ (c0017ac <_sbrk+0x38>)
 c001776:	4603      	mov	r3, r0
 c001778:	b510      	push	{r4, lr}
 c00177a:	4a0d      	ldr	r2, [pc, #52]	@ (c0017b0 <_sbrk+0x3c>)
 c00177c:	4c0d      	ldr	r4, [pc, #52]	@ (c0017b4 <_sbrk+0x40>)
 c00177e:	6808      	ldr	r0, [r1, #0]
 c001780:	1b12      	subs	r2, r2, r4
 c001782:	b120      	cbz	r0, c00178e <_sbrk+0x1a>
 c001784:	4403      	add	r3, r0
 c001786:	4293      	cmp	r3, r2
 c001788:	d807      	bhi.n	c00179a <_sbrk+0x26>
 c00178a:	600b      	str	r3, [r1, #0]
 c00178c:	bd10      	pop	{r4, pc}
 c00178e:	4c0a      	ldr	r4, [pc, #40]	@ (c0017b8 <_sbrk+0x44>)
 c001790:	4620      	mov	r0, r4
 c001792:	4403      	add	r3, r0
 c001794:	4293      	cmp	r3, r2
 c001796:	600c      	str	r4, [r1, #0]
 c001798:	d9f7      	bls.n	c00178a <_sbrk+0x16>
 c00179a:	f003 f865 	bl	c004868 <__errno>
 c00179e:	220c      	movs	r2, #12
 c0017a0:	4603      	mov	r3, r0
 c0017a2:	f04f 30ff 	mov.w	r0, #4294967295
 c0017a6:	601a      	str	r2, [r3, #0]
 c0017a8:	bd10      	pop	{r4, pc}
 c0017aa:	bf00      	nop
 c0017ac:	300000bc 	.word	0x300000bc
 c0017b0:	30010000 	.word	0x30010000
 c0017b4:	00000400 	.word	0x00000400
 c0017b8:	30000340 	.word	0x30000340

0c0017bc <SystemInit>:
{

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0017bc:	2200      	movs	r2, #0
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0017be:	2101      	movs	r1, #1
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0017c0:	f04f 0c02 	mov.w	ip, #2
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c0017c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c0017c8:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
 c0017cc:	2703      	movs	r7, #3
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c0017ce:	f04f 40c0 	mov.w	r0, #1610612736	@ 0x60000000
 c0017d2:	2504      	movs	r5, #4
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c0017d4:	2405      	movs	r4, #5
    SAU_INIT_REGION(0);
 c0017d6:	4b30      	ldr	r3, [pc, #192]	@ (c001898 <SystemInit+0xdc>)
 c0017d8:	f8df a0d8 	ldr.w	sl, [pc, #216]	@ c0018b4 <SystemInit+0xf8>
 c0017dc:	f8df 90d8 	ldr.w	r9, [pc, #216]	@ c0018b8 <SystemInit+0xfc>
    SAU_INIT_REGION(1);
 c0017e0:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ c0018bc <SystemInit+0x100>
 c0017e4:	f8df e0d8 	ldr.w	lr, [pc, #216]	@ c0018c0 <SystemInit+0x104>
    SAU_INIT_REGION(0);
 c0017e8:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 c0017ec:	f8c3 a0dc 	str.w	sl, [r3, #220]	@ 0xdc
 c0017f0:	f8c3 90e0 	str.w	r9, [r3, #224]	@ 0xe0
    SAU_INIT_REGION(1);
 c0017f4:	f8c3 10d8 	str.w	r1, [r3, #216]	@ 0xd8
 c0017f8:	f8c3 80dc 	str.w	r8, [r3, #220]	@ 0xdc
 c0017fc:	f8c3 e0e0 	str.w	lr, [r3, #224]	@ 0xe0
    SAU_INIT_REGION(2);
 c001800:	f8c3 c0d8 	str.w	ip, [r3, #216]	@ 0xd8
 c001804:	f8df c0bc 	ldr.w	ip, [pc, #188]	@ c0018c4 <SystemInit+0x108>
 c001808:	f8c3 c0dc 	str.w	ip, [r3, #220]	@ 0xdc
 c00180c:	f50c 3c1f 	add.w	ip, ip, #162816	@ 0x27c00
 c001810:	f20c 3ce1 	addw	ip, ip, #993	@ 0x3e1
 c001814:	f8c3 c0e0 	str.w	ip, [r3, #224]	@ 0xe0
    SAU_INIT_REGION(3);
 c001818:	f8c3 70d8 	str.w	r7, [r3, #216]	@ 0xd8
 c00181c:	f8c3 60dc 	str.w	r6, [r3, #220]	@ 0xdc
 c001820:	4e1e      	ldr	r6, [pc, #120]	@ (c00189c <SystemInit+0xe0>)
 c001822:	f8c3 60e0 	str.w	r6, [r3, #224]	@ 0xe0
    SAU_INIT_REGION(4);
 c001826:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
 c00182a:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
 c00182e:	481c      	ldr	r0, [pc, #112]	@ (c0018a0 <SystemInit+0xe4>)
 c001830:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
    SAU_INIT_REGION(5);
 c001834:	481b      	ldr	r0, [pc, #108]	@ (c0018a4 <SystemInit+0xe8>)
 c001836:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
 c00183a:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
 c00183e:	f500 30c7 	add.w	r0, r0, #101888	@ 0x18e00
 c001842:	f200 10e1 	addw	r0, r0, #481	@ 0x1e1
 c001846:	f8c3 00e0 	str.w	r0, [r3, #224]	@ 0xe0
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c00184a:	f8c3 10d0 	str.w	r1, [r3, #208]	@ 0xd0
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00184e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001852:	4c15      	ldr	r4, [pc, #84]	@ (c0018a8 <SystemInit+0xec>)
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001854:	f441 6140 	orr.w	r1, r1, #3072	@ 0xc00
 c001858:	f8c3 108c 	str.w	r1, [r3, #140]	@ 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00185c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00185e:	4813      	ldr	r0, [pc, #76]	@ (c0018ac <SystemInit+0xf0>)
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001860:	f021 51e0 	bic.w	r1, r1, #469762048	@ 0x1c000000
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001864:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001868:	6361      	str	r1, [r4, #52]	@ 0x34
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c00186a:	f8c0 2280 	str.w	r2, [r0, #640]	@ 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00186e:	f8c0 2284 	str.w	r2, [r0, #644]	@ 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001872:	f8c0 2288 	str.w	r2, [r0, #648]	@ 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001876:	f8c0 228c 	str.w	r2, [r0, #652]	@ 0x28c
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00187a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00187e:	490c      	ldr	r1, [pc, #48]	@ (c0018b0 <SystemInit+0xf4>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001880:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 c001884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001888:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 c00188c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 c001890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif
}
 c001894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c001898:	e000ed00 	.word	0xe000ed00
 c00189c:	4fffffe1 	.word	0x4fffffe1
 c0018a0:	9fffffe1 	.word	0x9fffffe1
 c0018a4:	0bf90000 	.word	0x0bf90000
 c0018a8:	e000ef00 	.word	0xe000ef00
 c0018ac:	e000e100 	.word	0xe000e100
 c0018b0:	e002ed00 	.word	0xe002ed00
 c0018b4:	0c03e000 	.word	0x0c03e000
 c0018b8:	0c03ffe3 	.word	0x0c03ffe3
 c0018bc:	08040000 	.word	0x08040000
 c0018c0:	0807ffe1 	.word	0x0807ffe1
 c0018c4:	20018000 	.word	0x20018000

0c0018c8 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0018c8:	4b23      	ldr	r3, [pc, #140]	@ (c001958 <SystemCoreClockUpdate+0x90>)
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0018ca:	4923      	ldr	r1, [pc, #140]	@ (c001958 <SystemCoreClockUpdate+0x90>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0018cc:	681a      	ldr	r2, [r3, #0]
  msirange = MSIRangeTable[msirange];
 c0018ce:	4823      	ldr	r0, [pc, #140]	@ (c00195c <SystemCoreClockUpdate+0x94>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0018d0:	0712      	lsls	r2, r2, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0018d2:	bf54      	ite	pl
 c0018d4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0018d8:	681b      	ldrmi	r3, [r3, #0]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0018da:	688a      	ldr	r2, [r1, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0018dc:	bf58      	it	pl
 c0018de:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0018e2:	f002 020c 	and.w	r2, r2, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0018e6:	bf48      	it	mi
 c0018e8:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0018ec:	2a08      	cmp	r2, #8
  msirange = MSIRangeTable[msirange];
 c0018ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0018f2:	d00f      	beq.n	c001914 <SystemCoreClockUpdate+0x4c>
 c0018f4:	2a0c      	cmp	r2, #12
 c0018f6:	d00f      	beq.n	c001918 <SystemCoreClockUpdate+0x50>
 c0018f8:	4919      	ldr	r1, [pc, #100]	@ (c001960 <SystemCoreClockUpdate+0x98>)
 c0018fa:	2a04      	cmp	r2, #4
 c0018fc:	bf08      	it	eq
 c0018fe:	460b      	moveq	r3, r1
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001900:	4a15      	ldr	r2, [pc, #84]	@ (c001958 <SystemCoreClockUpdate+0x90>)
 c001902:	4818      	ldr	r0, [pc, #96]	@ (c001964 <SystemCoreClockUpdate+0x9c>)
 c001904:	6892      	ldr	r2, [r2, #8]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001906:	4918      	ldr	r1, [pc, #96]	@ (c001968 <SystemCoreClockUpdate+0xa0>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001908:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c00190c:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 c00190e:	40d3      	lsrs	r3, r2
 c001910:	600b      	str	r3, [r1, #0]
}
 c001912:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001914:	4b12      	ldr	r3, [pc, #72]	@ (c001960 <SystemCoreClockUpdate+0x98>)
 c001916:	e7f3      	b.n	c001900 <SystemCoreClockUpdate+0x38>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001918:	68c8      	ldr	r0, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c00191a:	68ca      	ldr	r2, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00191c:	f000 0103 	and.w	r1, r0, #3
 c001920:	3902      	subs	r1, #2
 c001922:	2901      	cmp	r1, #1
          pllvco = (HSE_VALUE / pllm);
 c001924:	bf98      	it	ls
 c001926:	490e      	ldrls	r1, [pc, #56]	@ (c001960 <SystemCoreClockUpdate+0x98>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001928:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c00192c:	f102 0201 	add.w	r2, r2, #1
          pllvco = (msirange / pllm);
 c001930:	bf8c      	ite	hi
 c001932:	fbb3 f1f2 	udivhi	r1, r3, r2
          pllvco = (HSE_VALUE / pllm);
 c001936:	fbb1 f1f2 	udivls	r1, r1, r2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c00193a:	4a07      	ldr	r2, [pc, #28]	@ (c001958 <SystemCoreClockUpdate+0x90>)
 c00193c:	68d3      	ldr	r3, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c00193e:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001940:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c001944:	fb01 f303 	mul.w	r3, r1, r3
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001948:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c00194c:	3201      	adds	r2, #1
 c00194e:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 c001950:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 c001954:	e7d4      	b.n	c001900 <SystemCoreClockUpdate+0x38>
 c001956:	bf00      	nop
 c001958:	50021000 	.word	0x50021000
 c00195c:	0c005144 	.word	0x0c005144
 c001960:	00f42400 	.word	0x00f42400
 c001964:	0c00518c 	.word	0x0c00518c
 c001968:	30000020 	.word	0x30000020

0c00196c <__acle_se_SECURE_SystemCoreClockUpdate>:
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00196c:	4b3c      	ldr	r3, [pc, #240]	@ (c001a60 <__acle_se_SECURE_SystemCoreClockUpdate+0xf4>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00196e:	493c      	ldr	r1, [pc, #240]	@ (c001a60 <__acle_se_SECURE_SystemCoreClockUpdate+0xf4>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001970:	681a      	ldr	r2, [r3, #0]
  msirange = MSIRangeTable[msirange];
 c001972:	483c      	ldr	r0, [pc, #240]	@ (c001a64 <__acle_se_SECURE_SystemCoreClockUpdate+0xf8>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001974:	0712      	lsls	r2, r2, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001976:	bf54      	ite	pl
 c001978:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	@ 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00197c:	681a      	ldrmi	r2, [r3, #0]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c00197e:	688b      	ldr	r3, [r1, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001980:	bf58      	it	pl
 c001982:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001986:	f003 030c 	and.w	r3, r3, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00198a:	bf48      	it	mi
 c00198c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001990:	2b08      	cmp	r3, #8
  msirange = MSIRangeTable[msirange];
 c001992:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001996:	d041      	beq.n	c001a1c <__acle_se_SECURE_SystemCoreClockUpdate+0xb0>
 c001998:	2b0c      	cmp	r3, #12
 c00199a:	d041      	beq.n	c001a20 <__acle_se_SECURE_SystemCoreClockUpdate+0xb4>
 c00199c:	4a32      	ldr	r2, [pc, #200]	@ (c001a68 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
 c00199e:	2b04      	cmp	r3, #4
 c0019a0:	bf08      	it	eq
 c0019a2:	4610      	moveq	r0, r2
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0019a4:	4b2e      	ldr	r3, [pc, #184]	@ (c001a60 <__acle_se_SECURE_SystemCoreClockUpdate+0xf4>)
 c0019a6:	4931      	ldr	r1, [pc, #196]	@ (c001a6c <__acle_se_SECURE_SystemCoreClockUpdate+0x100>)
 c0019a8:	689b      	ldr	r3, [r3, #8]
  SystemCoreClock >>= tmp;
 c0019aa:	4a31      	ldr	r2, [pc, #196]	@ (c001a70 <__acle_se_SECURE_SystemCoreClockUpdate+0x104>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0019ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c0019b0:	5ccb      	ldrb	r3, [r1, r3]
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
  SystemCoreClockUpdate();
  
  return SystemCoreClock;
}
 c0019b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
  SystemCoreClock >>= tmp;
 c0019b6:	40d8      	lsrs	r0, r3
}
 c0019b8:	4671      	mov	r1, lr
 c0019ba:	4673      	mov	r3, lr
 c0019bc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 c0019c0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 c0019c4:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 c0019c8:	eeb7 2a00 	vmov.f32	s4, #112	@ 0x3f800000  1.0
 c0019cc:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 c0019d0:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 c0019d4:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 c0019d8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 c0019dc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 c0019e0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 c0019e4:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 c0019e8:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 c0019ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 c0019f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
  SystemCoreClock >>= tmp;
 c0019f4:	6010      	str	r0, [r2, #0]
}
 c0019f6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 c0019fa:	4672      	mov	r2, lr
 c0019fc:	f38e 8c00 	msr	CPSR_fs, lr
 c001a00:	b410      	push	{r4}
 c001a02:	eef1 ca10 	vmrs	ip, fpscr
 c001a06:	f64f 7460 	movw	r4, #65376	@ 0xff60
 c001a0a:	f6c0 74ff 	movt	r4, #4095	@ 0xfff
 c001a0e:	ea0c 0c04 	and.w	ip, ip, r4
 c001a12:	eee1 ca10 	vmsr	fpscr, ip
 c001a16:	bc10      	pop	{r4}
 c001a18:	46f4      	mov	ip, lr
 c001a1a:	4774      	bxns	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001a1c:	4812      	ldr	r0, [pc, #72]	@ (c001a68 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
 c001a1e:	e7c1      	b.n	c0019a4 <__acle_se_SECURE_SystemCoreClockUpdate+0x38>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001a20:	68ca      	ldr	r2, [r1, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001a22:	68cb      	ldr	r3, [r1, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001a24:	f002 0203 	and.w	r2, r2, #3
 c001a28:	3a02      	subs	r2, #2
 c001a2a:	2a01      	cmp	r2, #1
          pllvco = (HSE_VALUE / pllm);
 c001a2c:	bf98      	it	ls
 c001a2e:	4a0e      	ldrls	r2, [pc, #56]	@ (c001a68 <__acle_se_SECURE_SystemCoreClockUpdate+0xfc>)
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001a30:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c001a34:	f103 0301 	add.w	r3, r3, #1
          pllvco = (msirange / pllm);
 c001a38:	bf8c      	ite	hi
 c001a3a:	fbb0 f2f3 	udivhi	r2, r0, r3
          pllvco = (HSE_VALUE / pllm);
 c001a3e:	fbb2 f2f3 	udivls	r2, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001a42:	4b07      	ldr	r3, [pc, #28]	@ (c001a60 <__acle_se_SECURE_SystemCoreClockUpdate+0xf4>)
 c001a44:	68d8      	ldr	r0, [r3, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001a46:	68db      	ldr	r3, [r3, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001a48:	f3c0 2006 	ubfx	r0, r0, #8, #7
 c001a4c:	fb02 f000 	mul.w	r0, r2, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001a50:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c001a54:	3301      	adds	r3, #1
 c001a56:	005b      	lsls	r3, r3, #1
      SystemCoreClock = pllvco/pllr;
 c001a58:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 c001a5c:	e7a2      	b.n	c0019a4 <__acle_se_SECURE_SystemCoreClockUpdate+0x38>
 c001a5e:	bf00      	nop
 c001a60:	50021000 	.word	0x50021000
 c001a64:	0c005144 	.word	0x0c005144
 c001a68:	00f42400 	.word	0x00f42400
 c001a6c:	0c00518c 	.word	0x0c00518c
 c001a70:	30000020 	.word	0x30000020

0c001a74 <MX_TIM3_Init>:

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001a74:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
 c001a76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
{
 c001a7a:	b500      	push	{lr}
  htim3.Instance = TIM3;
 c001a7c:	4818      	ldr	r0, [pc, #96]	@ (c001ae0 <MX_TIM3_Init+0x6c>)
 c001a7e:	4919      	ldr	r1, [pc, #100]	@ (c001ae4 <MX_TIM3_Init+0x70>)
{
 c001a80:	b089      	sub	sp, #36	@ 0x24
  htim3.Init.Prescaler = 0;
 c001a82:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001a86:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c001a8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim3.Instance = TIM3;
 c001a8e:	6001      	str	r1, [r0, #0]
  htim3.Init.Prescaler = 0;
 c001a90:	60c2      	str	r2, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001a92:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c001a94:	9301      	str	r3, [sp, #4]
  htim3.Init.Prescaler = 0;
 c001a96:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c001a98:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001a9a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 c001a9c:	f001 fed8 	bl	c003850 <HAL_TIM_Base_Init>
 c001aa0:	b990      	cbnz	r0, c001ac8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c001aa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c001aa6:	480e      	ldr	r0, [pc, #56]	@ (c001ae0 <MX_TIM3_Init+0x6c>)
 c001aa8:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c001aaa:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 c001aac:	f001 ff5e 	bl	c00396c <HAL_TIM_ConfigClockSource>
 c001ab0:	b990      	cbnz	r0, c001ad8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c001ab2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c001ab4:	480a      	ldr	r0, [pc, #40]	@ (c001ae0 <MX_TIM3_Init+0x6c>)
 c001ab6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c001ab8:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c001aba:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 c001abc:	f002 f8c6 	bl	c003c4c <HAL_TIMEx_MasterConfigSynchronization>
 c001ac0:	b928      	cbnz	r0, c001ace <MX_TIM3_Init+0x5a>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 c001ac2:	b009      	add	sp, #36	@ 0x24
 c001ac4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c001ac8:	f7ff facc 	bl	c001064 <Error_Handler>
 c001acc:	e7e9      	b.n	c001aa2 <MX_TIM3_Init+0x2e>
    Error_Handler();
 c001ace:	f7ff fac9 	bl	c001064 <Error_Handler>
}
 c001ad2:	b009      	add	sp, #36	@ 0x24
 c001ad4:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c001ad8:	f7ff fac4 	bl	c001064 <Error_Handler>
 c001adc:	e7e9      	b.n	c001ab2 <MX_TIM3_Init+0x3e>
 c001ade:	bf00      	nop
 c001ae0:	30000110 	.word	0x30000110
 c001ae4:	50000400 	.word	0x50000400

0c001ae8 <MX_TIM4_Init>:

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001ae8:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 0;
 c001aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
{
 c001aee:	b500      	push	{lr}
  htim4.Instance = TIM4;
 c001af0:	4818      	ldr	r0, [pc, #96]	@ (c001b54 <MX_TIM4_Init+0x6c>)
 c001af2:	4919      	ldr	r1, [pc, #100]	@ (c001b58 <MX_TIM4_Init+0x70>)
{
 c001af4:	b089      	sub	sp, #36	@ 0x24
  htim4.Init.Prescaler = 0;
 c001af6:	e9c0 3301 	strd	r3, r3, [r0, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001afa:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c001afe:	e9cd 3302 	strd	r3, r3, [sp, #8]
  htim4.Instance = TIM4;
 c001b02:	6001      	str	r1, [r0, #0]
  htim4.Init.Prescaler = 0;
 c001b04:	60c2      	str	r2, [r0, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001b06:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 c001b08:	9301      	str	r3, [sp, #4]
  htim4.Init.Prescaler = 0;
 c001b0a:	6103      	str	r3, [r0, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 65535;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 c001b0c:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 c001b0e:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 c001b10:	f001 fe9e 	bl	c003850 <HAL_TIM_Base_Init>
 c001b14:	b990      	cbnz	r0, c001b3c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c001b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c001b1a:	480e      	ldr	r0, [pc, #56]	@ (c001b54 <MX_TIM4_Init+0x6c>)
 c001b1c:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 c001b1e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 c001b20:	f001 ff24 	bl	c00396c <HAL_TIM_ConfigClockSource>
 c001b24:	b990      	cbnz	r0, c001b4c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c001b26:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c001b28:	480a      	ldr	r0, [pc, #40]	@ (c001b54 <MX_TIM4_Init+0x6c>)
 c001b2a:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 c001b2c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 c001b2e:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 c001b30:	f002 f88c 	bl	c003c4c <HAL_TIMEx_MasterConfigSynchronization>
 c001b34:	b928      	cbnz	r0, c001b42 <MX_TIM4_Init+0x5a>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 c001b36:	b009      	add	sp, #36	@ 0x24
 c001b38:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c001b3c:	f7ff fa92 	bl	c001064 <Error_Handler>
 c001b40:	e7e9      	b.n	c001b16 <MX_TIM4_Init+0x2e>
    Error_Handler();
 c001b42:	f7ff fa8f 	bl	c001064 <Error_Handler>
}
 c001b46:	b009      	add	sp, #36	@ 0x24
 c001b48:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 c001b4c:	f7ff fa8a 	bl	c001064 <Error_Handler>
 c001b50:	e7e9      	b.n	c001b26 <MX_TIM4_Init+0x3e>
 c001b52:	bf00      	nop
 c001b54:	300000c0 	.word	0x300000c0
 c001b58:	50000800 	.word	0x50000800

0c001b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 c001b5c:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM3)
 c001b5e:	4a1a      	ldr	r2, [pc, #104]	@ (c001bc8 <HAL_TIM_Base_MspInit+0x6c>)
 c001b60:	6803      	ldr	r3, [r0, #0]
{
 c001b62:	b083      	sub	sp, #12
  if(tim_baseHandle->Instance==TIM3)
 c001b64:	4293      	cmp	r3, r2
 c001b66:	d005      	beq.n	c001b74 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM4)
 c001b68:	4a18      	ldr	r2, [pc, #96]	@ (c001bcc <HAL_TIM_Base_MspInit+0x70>)
 c001b6a:	4293      	cmp	r3, r2
 c001b6c:	d017      	beq.n	c001b9e <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 c001b6e:	b003      	add	sp, #12
 c001b70:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c001b74:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 c001b76:	4b16      	ldr	r3, [pc, #88]	@ (c001bd0 <HAL_TIM_Base_MspInit+0x74>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c001b78:	202e      	movs	r0, #46	@ 0x2e
    __HAL_RCC_TIM3_CLK_ENABLE();
 c001b7a:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 c001b7c:	f041 0102 	orr.w	r1, r1, #2
 c001b80:	6599      	str	r1, [r3, #88]	@ 0x58
 c001b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c001b84:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 c001b86:	f003 0302 	and.w	r3, r3, #2
 c001b8a:	9300      	str	r3, [sp, #0]
 c001b8c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 c001b8e:	f000 f943 	bl	c001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 c001b92:	202e      	movs	r0, #46	@ 0x2e
}
 c001b94:	b003      	add	sp, #12
 c001b96:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c001b9a:	f000 b979 	b.w	c001e90 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c001b9e:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 c001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (c001bd0 <HAL_TIM_Base_MspInit+0x74>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c001ba2:	202f      	movs	r0, #47	@ 0x2f
    __HAL_RCC_TIM4_CLK_ENABLE();
 c001ba4:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 c001ba6:	f041 0104 	orr.w	r1, r1, #4
 c001baa:	6599      	str	r1, [r3, #88]	@ 0x58
 c001bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c001bae:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 c001bb0:	f003 0304 	and.w	r3, r3, #4
 c001bb4:	9301      	str	r3, [sp, #4]
 c001bb6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 c001bb8:	f000 f92e 	bl	c001e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c001bbc:	202f      	movs	r0, #47	@ 0x2f
}
 c001bbe:	b003      	add	sp, #12
 c001bc0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 c001bc4:	f000 b964 	b.w	c001e90 <HAL_NVIC_EnableIRQ>
 c001bc8:	50000400 	.word	0x50000400
 c001bcc:	50000800 	.word	0x50000800
 c001bd0:	50021000 	.word	0x50021000
 c001bd4:	00000000 	.word	0x00000000

0c001bd8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 c001bd8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
  hlpuart1.Init.BaudRate = 921600;
 c001bda:	f44f 2161 	mov.w	r1, #921600	@ 0xe1000
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c001bde:	2300      	movs	r3, #0
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c001be0:	220c      	movs	r2, #12
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c001be2:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ c001c60 <MX_LPUART1_UART_Init+0x88>
  hlpuart1.Instance = LPUART1;
 c001be6:	4820      	ldr	r0, [pc, #128]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 c001be8:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 c001bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 c001bf0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c001bf4:	6283      	str	r3, [r0, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 c001bf6:	6643      	str	r3, [r0, #100]	@ 0x64
  hlpuart1.Instance = LPUART1;
 c001bf8:	4b1c      	ldr	r3, [pc, #112]	@ (c001c6c <MX_LPUART1_UART_Init+0x94>)
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c001bfa:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Instance = LPUART1;
 c001bfe:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 c001c00:	f002 fb52 	bl	c0042a8 <HAL_UART_Init>
 c001c04:	b970      	cbnz	r0, c001c24 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001c06:	2100      	movs	r1, #0
 c001c08:	4817      	ldr	r0, [pc, #92]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c0a:	f002 fc99 	bl	c004540 <HAL_UARTEx_SetTxFifoThreshold>
 c001c0e:	b988      	cbnz	r0, c001c34 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001c10:	2100      	movs	r1, #0
 c001c12:	4815      	ldr	r0, [pc, #84]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c14:	f002 fcd6 	bl	c0045c4 <HAL_UARTEx_SetRxFifoThreshold>
 c001c18:	b9a0      	cbnz	r0, c001c44 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c001c1a:	4813      	ldr	r0, [pc, #76]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c1c:	f002 fc72 	bl	c004504 <HAL_UARTEx_DisableFifoMode>
 c001c20:	b9b8      	cbnz	r0, c001c52 <MX_LPUART1_UART_Init+0x7a>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 c001c22:	bd08      	pop	{r3, pc}
    Error_Handler();
 c001c24:	f7ff fa1e 	bl	c001064 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001c28:	2100      	movs	r1, #0
 c001c2a:	480f      	ldr	r0, [pc, #60]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c2c:	f002 fc88 	bl	c004540 <HAL_UARTEx_SetTxFifoThreshold>
 c001c30:	2800      	cmp	r0, #0
 c001c32:	d0ed      	beq.n	c001c10 <MX_LPUART1_UART_Init+0x38>
    Error_Handler();
 c001c34:	f7ff fa16 	bl	c001064 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c001c38:	2100      	movs	r1, #0
 c001c3a:	480b      	ldr	r0, [pc, #44]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c3c:	f002 fcc2 	bl	c0045c4 <HAL_UARTEx_SetRxFifoThreshold>
 c001c40:	2800      	cmp	r0, #0
 c001c42:	d0ea      	beq.n	c001c1a <MX_LPUART1_UART_Init+0x42>
    Error_Handler();
 c001c44:	f7ff fa0e 	bl	c001064 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 c001c48:	4807      	ldr	r0, [pc, #28]	@ (c001c68 <MX_LPUART1_UART_Init+0x90>)
 c001c4a:	f002 fc5b 	bl	c004504 <HAL_UARTEx_DisableFifoMode>
 c001c4e:	2800      	cmp	r0, #0
 c001c50:	d0e7      	beq.n	c001c22 <MX_LPUART1_UART_Init+0x4a>
}
 c001c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 c001c56:	f7ff ba05 	b.w	c001064 <Error_Handler>
 c001c5a:	bf00      	nop
 c001c5c:	f3af 8000 	nop.w
	...
 c001c68:	30000160 	.word	0x30000160
 c001c6c:	50008000 	.word	0x50008000

0c001c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 c001c70:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001c72:	2100      	movs	r1, #0
{
 c001c74:	4604      	mov	r4, r0
 c001c76:	b0ac      	sub	sp, #176	@ 0xb0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001c78:	2294      	movs	r2, #148	@ 0x94
 c001c7a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001c7c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 c001c80:	e9cd 1104 	strd	r1, r1, [sp, #16]
 c001c84:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001c86:	f002 fdd7 	bl	c004838 <memset>
  if(uartHandle->Instance==LPUART1)
 c001c8a:	4b1d      	ldr	r3, [pc, #116]	@ (c001d00 <HAL_UART_MspInit+0x90>)
 c001c8c:	6822      	ldr	r2, [r4, #0]
 c001c8e:	429a      	cmp	r2, r3
 c001c90:	d001      	beq.n	c001c96 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 c001c92:	b02c      	add	sp, #176	@ 0xb0
 c001c94:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c001c96:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001c98:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 c001c9a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001c9c:	f001 fb50 	bl	c003340 <HAL_RCCEx_PeriphCLKConfig>
 c001ca0:	bb20      	cbnz	r0, c001cec <HAL_UART_MspInit+0x7c>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 c001ca2:	4b18      	ldr	r3, [pc, #96]	@ (c001d04 <HAL_UART_MspInit+0x94>)
 c001ca4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 c001ca6:	f042 0201 	orr.w	r2, r2, #1
 c001caa:	65da      	str	r2, [r3, #92]	@ 0x5c
 c001cac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 c001cae:	f002 0201 	and.w	r2, r2, #1
 c001cb2:	9200      	str	r2, [sp, #0]
 c001cb4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 c001cb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 c001cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
 c001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 c001cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 c001cc4:	9301      	str	r3, [sp, #4]
 c001cc6:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 c001cc8:	f000 fbe4 	bl	c002494 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c001ccc:	2008      	movs	r0, #8
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c001cce:	ed9f 7b0a 	vldr	d7, [pc, #40]	@ c001cf8 <HAL_UART_MspInit+0x88>
 c001cd2:	2200      	movs	r2, #0
 c001cd4:	2300      	movs	r3, #0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 c001cd6:	9006      	str	r0, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001cd8:	a902      	add	r1, sp, #8
 c001cda:	480b      	ldr	r0, [pc, #44]	@ (c001d08 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 c001cdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 c001ce0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001ce4:	f000 f8fc 	bl	c001ee0 <HAL_GPIO_Init>
}
 c001ce8:	b02c      	add	sp, #176	@ 0xb0
 c001cea:	bd10      	pop	{r4, pc}
      Error_Handler();
 c001cec:	f7ff f9ba 	bl	c001064 <Error_Handler>
 c001cf0:	e7d7      	b.n	c001ca2 <HAL_UART_MspInit+0x32>
 c001cf2:	bf00      	nop
 c001cf4:	f3af 8000 	nop.w
 c001cf8:	00000180 	.word	0x00000180
 c001cfc:	00000002 	.word	0x00000002
 c001d00:	50008000 	.word	0x50008000
 c001d04:	50021000 	.word	0x50021000
 c001d08:	52021800 	.word	0x52021800

0c001d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ c001d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001d10:	f7ff fd54 	bl	c0017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001d14:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001d16:	e003      	b.n	c001d20 <LoopCopyDataInit>

0c001d18 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001d18:	4b0b      	ldr	r3, [pc, #44]	@ (c001d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001d1a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001d1c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001d1e:	3104      	adds	r1, #4

0c001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001d20:	480a      	ldr	r0, [pc, #40]	@ (c001d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 c001d22:	4b0b      	ldr	r3, [pc, #44]	@ (c001d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 c001d24:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001d26:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001d28:	d3f6      	bcc.n	c001d18 <CopyDataInit>
	ldr	r2, =_sbss
 c001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (c001d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001d2c:	e002      	b.n	c001d34 <LoopFillZerobss>

0c001d2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001d2e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001d30:	f842 3b04 	str.w	r3, [r2], #4

0c001d34 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001d34:	4b08      	ldr	r3, [pc, #32]	@ (c001d58 <LoopForever+0x16>)
	cmp	r2, r3
 c001d36:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001d38:	d3f9      	bcc.n	c001d2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001d3a:	f002 fd9b 	bl	c004874 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001d3e:	f7ff f947 	bl	c000fd0 <main>

0c001d42 <LoopForever>:

LoopForever:
    b LoopForever
 c001d42:	e7fe      	b.n	c001d42 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001d44:	30010000 	.word	0x30010000
	ldr	r3, =_sidata
 c001d48:	0c005208 	.word	0x0c005208
	ldr	r0, =_sdata
 c001d4c:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001d50:	3000007c 	.word	0x3000007c
	ldr	r2, =_sbss
 c001d54:	30000080 	.word	0x30000080
	ldr	r3, = _ebss
 c001d58:	3000033c 	.word	0x3000033c

0c001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001d5c:	e7fe      	b.n	c001d5c <ADC1_2_IRQHandler>
	...

0c001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001d60:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001d62:	4b0f      	ldr	r3, [pc, #60]	@ (c001da0 <HAL_InitTick+0x40>)
 c001d64:	781b      	ldrb	r3, [r3, #0]
 c001d66:	b90b      	cbnz	r3, c001d6c <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 c001d68:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 c001d6a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c001d6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 c001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 c001d74:	490b      	ldr	r1, [pc, #44]	@ (c001da4 <HAL_InitTick+0x44>)
 c001d76:	4605      	mov	r5, r0
 c001d78:	6808      	ldr	r0, [r1, #0]
 c001d7a:	fbb0 f0f3 	udiv	r0, r0, r3
 c001d7e:	f000 f895 	bl	c001eac <HAL_SYSTICK_Config>
 c001d82:	4604      	mov	r4, r0
 c001d84:	2800      	cmp	r0, #0
 c001d86:	d1ef      	bne.n	c001d68 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001d88:	2d07      	cmp	r5, #7
 c001d8a:	d8ed      	bhi.n	c001d68 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001d8c:	4602      	mov	r2, r0
 c001d8e:	4629      	mov	r1, r5
 c001d90:	f04f 30ff 	mov.w	r0, #4294967295
 c001d94:	f000 f840 	bl	c001e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001d98:	4b03      	ldr	r3, [pc, #12]	@ (c001da8 <HAL_InitTick+0x48>)
 c001d9a:	4620      	mov	r0, r4
 c001d9c:	601d      	str	r5, [r3, #0]
}
 c001d9e:	bd38      	pop	{r3, r4, r5, pc}
 c001da0:	30000024 	.word	0x30000024
 c001da4:	30000020 	.word	0x30000020
 c001da8:	30000028 	.word	0x30000028

0c001dac <HAL_Init>:
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001dac:	2004      	movs	r0, #4
{
 c001dae:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001db0:	f000 f820 	bl	c001df4 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 c001db4:	f7ff fd88 	bl	c0018c8 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001db8:	2007      	movs	r0, #7
 c001dba:	f7ff ffd1 	bl	c001d60 <HAL_InitTick>
 c001dbe:	b110      	cbz	r0, c001dc6 <HAL_Init+0x1a>
    status = HAL_ERROR;
 c001dc0:	2401      	movs	r4, #1
}
 c001dc2:	4620      	mov	r0, r4
 c001dc4:	bd10      	pop	{r4, pc}
 c001dc6:	4604      	mov	r4, r0
    HAL_MspInit();
 c001dc8:	f7ff fc54 	bl	c001674 <HAL_MspInit>
}
 c001dcc:	4620      	mov	r0, r4
 c001dce:	bd10      	pop	{r4, pc}

0c001dd0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 c001dd0:	4a03      	ldr	r2, [pc, #12]	@ (c001de0 <HAL_IncTick+0x10>)
 c001dd2:	4b04      	ldr	r3, [pc, #16]	@ (c001de4 <HAL_IncTick+0x14>)
 c001dd4:	6811      	ldr	r1, [r2, #0]
 c001dd6:	781b      	ldrb	r3, [r3, #0]
 c001dd8:	440b      	add	r3, r1
 c001dda:	6013      	str	r3, [r2, #0]
}
 c001ddc:	4770      	bx	lr
 c001dde:	bf00      	nop
 c001de0:	300001f0 	.word	0x300001f0
 c001de4:	30000024 	.word	0x30000024

0c001de8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 c001de8:	4b01      	ldr	r3, [pc, #4]	@ (c001df0 <HAL_GetTick+0x8>)
 c001dea:	6818      	ldr	r0, [r3, #0]
}
 c001dec:	4770      	bx	lr
 c001dee:	bf00      	nop
 c001df0:	300001f0 	.word	0x300001f0

0c001df4 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001df4:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001df8:	4906      	ldr	r1, [pc, #24]	@ (c001e14 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001dfa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001dfc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001dfe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001e02:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001e08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 c001e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 c001e10:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 c001e12:	4770      	bx	lr
 c001e14:	e000ed00 	.word	0xe000ed00

0c001e18 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001e18:	4b1b      	ldr	r3, [pc, #108]	@ (c001e88 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001e1a:	b500      	push	{lr}
 c001e1c:	68db      	ldr	r3, [r3, #12]
 c001e1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001e22:	f1c3 0e07 	rsb	lr, r3, #7
 c001e26:	f1be 0f03 	cmp.w	lr, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001e2a:	f103 0c03 	add.w	ip, r3, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001e2e:	bf28      	it	cs
 c001e30:	f04f 0e03 	movcs.w	lr, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001e34:	f1bc 0f06 	cmp.w	ip, #6
 c001e38:	d91c      	bls.n	c001e74 <HAL_NVIC_SetPriority+0x5c>
 c001e3a:	f1a3 0c04 	sub.w	ip, r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 c001e42:	fa03 f30c 	lsl.w	r3, r3, ip
 c001e46:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 c001e4e:	fa03 f30e 	lsl.w	r3, r3, lr
 c001e52:	ea21 0303 	bic.w	r3, r1, r3
 c001e56:	fa03 f30c 	lsl.w	r3, r3, ip
 c001e5a:	4313      	orrs	r3, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001e5c:	015b      	lsls	r3, r3, #5
  if ((int32_t)(IRQn) >= 0)
 c001e5e:	2800      	cmp	r0, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001e60:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 c001e62:	db0a      	blt.n	c001e7a <HAL_NVIC_SetPriority+0x62>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001e64:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 c001e68:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 c001e6c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 c001e70:	f85d fb04 	ldr.w	pc, [sp], #4
 c001e74:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001e76:	4694      	mov	ip, r2
 c001e78:	e7e7      	b.n	c001e4a <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001e7a:	4a04      	ldr	r2, [pc, #16]	@ (c001e8c <HAL_NVIC_SetPriority+0x74>)
 c001e7c:	f000 000f 	and.w	r0, r0, #15
 c001e80:	4402      	add	r2, r0
 c001e82:	7613      	strb	r3, [r2, #24]
 c001e84:	f85d fb04 	ldr.w	pc, [sp], #4
 c001e88:	e000ed00 	.word	0xe000ed00
 c001e8c:	e000ecfc 	.word	0xe000ecfc

0c001e90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 c001e90:	2800      	cmp	r0, #0
 c001e92:	db07      	blt.n	c001ea4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001e94:	2301      	movs	r3, #1
 c001e96:	f000 011f 	and.w	r1, r0, #31
 c001e9a:	4a03      	ldr	r2, [pc, #12]	@ (c001ea8 <HAL_NVIC_EnableIRQ+0x18>)
 c001e9c:	0940      	lsrs	r0, r0, #5
 c001e9e:	408b      	lsls	r3, r1
 c001ea0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 c001ea4:	4770      	bx	lr
 c001ea6:	bf00      	nop
 c001ea8:	e000e100 	.word	0xe000e100

0c001eac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001eac:	3801      	subs	r0, #1
 c001eae:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 c001eb2:	d301      	bcc.n	c001eb8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001eb4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 c001eb6:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001eb8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001ebc:	f04f 0ce0 	mov.w	ip, #224	@ 0xe0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001ec0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001ec2:	2107      	movs	r1, #7
{
 c001ec4:	b410      	push	{r4}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001ec6:	4c05      	ldr	r4, [pc, #20]	@ (c001edc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001ec8:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001eca:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001ece:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001ed0:	619a      	str	r2, [r3, #24]
}
 c001ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001ed6:	6119      	str	r1, [r3, #16]
 c001ed8:	4770      	bx	lr
 c001eda:	bf00      	nop
 c001edc:	e000ed00 	.word	0xe000ed00

0c001ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001ee4:	680c      	ldr	r4, [r1, #0]
 c001ee6:	2c00      	cmp	r4, #0
 c001ee8:	f000 808d 	beq.w	c002006 <HAL_GPIO_Init+0x126>
  uint32_t position = 0U;
 c001eec:	2200      	movs	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001eee:	f04f 0901 	mov.w	r9, #1
 c001ef2:	fa09 f502 	lsl.w	r5, r9, r2

    if(iocurrent != 0U)
 c001ef6:	ea15 0a04 	ands.w	sl, r5, r4
 c001efa:	d07f      	beq.n	c001ffc <HAL_GPIO_Init+0x11c>
        GPIOx->OTYPER = temp;
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001efc:	2603      	movs	r6, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001efe:	684b      	ldr	r3, [r1, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001f00:	688f      	ldr	r7, [r1, #8]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001f02:	f023 0e10 	bic.w	lr, r3, #16
 c001f06:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 c001f0a:	f10e 3bff 	add.w	fp, lr, #4294967295
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001f0e:	fa07 f80c 	lsl.w	r8, r7, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001f12:	f1bb 0f01 	cmp.w	fp, #1
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001f16:	fa06 f70c 	lsl.w	r7, r6, ip
 c001f1a:	ea6f 0707 	mvn.w	r7, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001f1e:	d974      	bls.n	c00200a <HAL_GPIO_Init+0x12a>
      temp = GPIOx->PUPDR;
 c001f20:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001f22:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001f24:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 c001f28:	60c5      	str	r5, [r0, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001f2a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001f2c:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001f2e:	ea03 0506 	and.w	r5, r3, r6
 c001f32:	fa05 f50c 	lsl.w	r5, r5, ip
 c001f36:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001f38:	00df      	lsls	r7, r3, #3
      GPIOx->MODER = temp;
 c001f3a:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001f3c:	d55e      	bpl.n	c001ffc <HAL_GPIO_Init+0x11c>
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001f3e:	260f      	movs	r6, #15
 c001f40:	f022 0503 	bic.w	r5, r2, #3
 c001f44:	f002 0c03 	and.w	ip, r2, #3
 c001f48:	f105 45a0 	add.w	r5, r5, #1342177280	@ 0x50000000
 c001f4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 c001f50:	fa06 fe0c 	lsl.w	lr, r6, ip
 c001f54:	f505 353d 	add.w	r5, r5, #193536	@ 0x2f400
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001f58:	4e62      	ldr	r6, [pc, #392]	@ (c0020e4 <HAL_GPIO_Init+0x204>)
        temp = EXTI->EXTICR[position >> 2U];
 c001f5a:	6e2f      	ldr	r7, [r5, #96]	@ 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001f5c:	42b0      	cmp	r0, r6
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001f5e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001f62:	d023      	beq.n	c001fac <HAL_GPIO_Init+0xcc>
 c001f64:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 c001f68:	42b0      	cmp	r0, r6
 c001f6a:	f000 80a0 	beq.w	c0020ae <HAL_GPIO_Init+0x1ce>
 c001f6e:	4e5e      	ldr	r6, [pc, #376]	@ (c0020e8 <HAL_GPIO_Init+0x208>)
 c001f70:	42b0      	cmp	r0, r6
 c001f72:	f000 80a1 	beq.w	c0020b8 <HAL_GPIO_Init+0x1d8>
 c001f76:	f8df e178 	ldr.w	lr, [pc, #376]	@ c0020f0 <HAL_GPIO_Init+0x210>
 c001f7a:	4570      	cmp	r0, lr
 c001f7c:	f000 8091 	beq.w	c0020a2 <HAL_GPIO_Init+0x1c2>
 c001f80:	f8df e170 	ldr.w	lr, [pc, #368]	@ c0020f4 <HAL_GPIO_Init+0x214>
 c001f84:	4570      	cmp	r0, lr
 c001f86:	f000 809e 	beq.w	c0020c6 <HAL_GPIO_Init+0x1e6>
 c001f8a:	f8df e16c 	ldr.w	lr, [pc, #364]	@ c0020f8 <HAL_GPIO_Init+0x218>
 c001f8e:	4570      	cmp	r0, lr
 c001f90:	f000 80a0 	beq.w	c0020d4 <HAL_GPIO_Init+0x1f4>
 c001f94:	f8df e164 	ldr.w	lr, [pc, #356]	@ c0020fc <HAL_GPIO_Init+0x21c>
 c001f98:	4570      	cmp	r0, lr
 c001f9a:	bf0c      	ite	eq
 c001f9c:	f04f 0e06 	moveq.w	lr, #6
 c001fa0:	f04f 0e07 	movne.w	lr, #7
 c001fa4:	fa0e fc0c 	lsl.w	ip, lr, ip
 c001fa8:	ea47 070c 	orr.w	r7, r7, ip
        EXTI->EXTICR[position >> 2U] = temp;
 c001fac:	662f      	str	r7, [r5, #96]	@ 0x60

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~(iocurrent);
 c001fae:	ea6f 070a 	mvn.w	r7, sl
        temp = EXTI->IMR1;
 c001fb2:	4d4e      	ldr	r5, [pc, #312]	@ (c0020ec <HAL_GPIO_Init+0x20c>)
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001fb4:	03de      	lsls	r6, r3, #15
        temp = EXTI->IMR1;
 c001fb6:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 c001fba:	4e4c      	ldr	r6, [pc, #304]	@ (c0020ec <HAL_GPIO_Init+0x20c>)
        temp &= ~(iocurrent);
 c001fbc:	bf54      	ite	pl
 c001fbe:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c001fc0:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->IMR1 = temp;
 c001fc4:	f8c6 5080 	str.w	r5, [r6, #128]	@ 0x80

        temp = EXTI->EMR1;
 c001fc8:	f8d6 5084 	ldr.w	r5, [r6, #132]	@ 0x84
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001fcc:	039e      	lsls	r6, r3, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 c001fce:	4e47      	ldr	r6, [pc, #284]	@ (c0020ec <HAL_GPIO_Init+0x20c>)
        temp &= ~(iocurrent);
 c001fd0:	bf54      	ite	pl
 c001fd2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c001fd4:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 c001fd8:	f8c6 5084 	str.w	r5, [r6, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001fdc:	6835      	ldr	r5, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001fde:	02de      	lsls	r6, r3, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 c001fe0:	4e42      	ldr	r6, [pc, #264]	@ (c0020ec <HAL_GPIO_Init+0x20c>)
        temp &= ~(iocurrent);
 c001fe2:	bf54      	ite	pl
 c001fe4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c001fe6:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR1 = temp;
 c001fea:	6035      	str	r5, [r6, #0]

        temp = EXTI->FTSR1;
 c001fec:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001fee:	029b      	lsls	r3, r3, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 c001ff0:	4b3e      	ldr	r3, [pc, #248]	@ (c0020ec <HAL_GPIO_Init+0x20c>)
        temp &= ~(iocurrent);
 c001ff2:	bf54      	ite	pl
 c001ff4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 c001ff6:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 c001ffa:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 c001ffc:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001ffe:	fa34 f302 	lsrs.w	r3, r4, r2
 c002002:	f47f af76 	bne.w	c001ef2 <HAL_GPIO_Init+0x12>
  }
}
 c002006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 c00200a:	f8d0 b008 	ldr.w	fp, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c00200e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c002010:	ea0b 0b07 	and.w	fp, fp, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 c002014:	fa06 fa0c 	lsl.w	sl, r6, ip
 c002018:	ea4a 0a0b 	orr.w	sl, sl, fp
        GPIOx->OSPEEDR = temp;
 c00201c:	f8c0 a008 	str.w	sl, [r0, #8]
        temp = GPIOx->OTYPER;
 c002020:	f8d0 a004 	ldr.w	sl, [r0, #4]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c002024:	f1be 0f02 	cmp.w	lr, #2
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c002028:	ea2a 0a05 	bic.w	sl, sl, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c00202c:	ea4f 1513 	mov.w	r5, r3, lsr #4
 c002030:	fa05 f502 	lsl.w	r5, r5, r2
 c002034:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 c002038:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 c00203a:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00203c:	f003 0303 	and.w	r3, r3, #3
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c002040:	ea05 0507 	and.w	r5, r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c002044:	ea45 0508 	orr.w	r5, r5, r8
      GPIOx->PUPDR = temp;
 c002048:	60c5      	str	r5, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00204a:	fa03 f30c 	lsl.w	r3, r3, ip
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c00204e:	d009      	beq.n	c002064 <HAL_GPIO_Init+0x184>
      temp = GPIOx->MODER;
 c002050:	6805      	ldr	r5, [r0, #0]
    position++;
 c002052:	3201      	adds	r2, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c002054:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c002056:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 c002058:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00205a:	fa34 f302 	lsrs.w	r3, r4, r2
 c00205e:	f47f af48 	bne.w	c001ef2 <HAL_GPIO_Init+0x12>
 c002062:	e7d0      	b.n	c002006 <HAL_GPIO_Init+0x126>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c002064:	690e      	ldr	r6, [r1, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c002066:	f002 0507 	and.w	r5, r2, #7
 c00206a:	00ad      	lsls	r5, r5, #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c00206c:	fa06 fe05 	lsl.w	lr, r6, r5
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c002070:	260f      	movs	r6, #15
        temp = GPIOx->AFR[position >> 3U];
 c002072:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 c002076:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 c00207a:	f8dc 8020 	ldr.w	r8, [ip, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c00207e:	fa06 f505 	lsl.w	r5, r6, r5
 c002082:	ea28 0505 	bic.w	r5, r8, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c002086:	ea4e 0505 	orr.w	r5, lr, r5
        GPIOx->AFR[position >> 3U] = temp;
 c00208a:	f8cc 5020 	str.w	r5, [ip, #32]
      temp = GPIOx->MODER;
 c00208e:	6805      	ldr	r5, [r0, #0]
    position++;
 c002090:	3201      	adds	r2, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c002092:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c002094:	432b      	orrs	r3, r5
      GPIOx->MODER = temp;
 c002096:	6003      	str	r3, [r0, #0]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002098:	fa34 f302 	lsrs.w	r3, r4, r2
 c00209c:	f47f af29 	bne.w	c001ef2 <HAL_GPIO_Init+0x12>
 c0020a0:	e7b1      	b.n	c002006 <HAL_GPIO_Init+0x126>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0020a2:	2603      	movs	r6, #3
 c0020a4:	fa06 fc0c 	lsl.w	ip, r6, ip
 c0020a8:	ea47 070c 	orr.w	r7, r7, ip
 c0020ac:	e77e      	b.n	c001fac <HAL_GPIO_Init+0xcc>
 c0020ae:	fa09 fc0c 	lsl.w	ip, r9, ip
 c0020b2:	ea47 070c 	orr.w	r7, r7, ip
 c0020b6:	e779      	b.n	c001fac <HAL_GPIO_Init+0xcc>
 c0020b8:	f04f 0e02 	mov.w	lr, #2
 c0020bc:	fa0e fc0c 	lsl.w	ip, lr, ip
 c0020c0:	ea47 070c 	orr.w	r7, r7, ip
 c0020c4:	e772      	b.n	c001fac <HAL_GPIO_Init+0xcc>
 c0020c6:	f04f 0e04 	mov.w	lr, #4
 c0020ca:	fa0e fc0c 	lsl.w	ip, lr, ip
 c0020ce:	ea47 070c 	orr.w	r7, r7, ip
 c0020d2:	e76b      	b.n	c001fac <HAL_GPIO_Init+0xcc>
 c0020d4:	f04f 0e05 	mov.w	lr, #5
 c0020d8:	fa0e fc0c 	lsl.w	ip, lr, ip
 c0020dc:	ea47 070c 	orr.w	r7, r7, ip
 c0020e0:	e764      	b.n	c001fac <HAL_GPIO_Init+0xcc>
 c0020e2:	bf00      	nop
 c0020e4:	52020000 	.word	0x52020000
 c0020e8:	52020800 	.word	0x52020800
 c0020ec:	5002f400 	.word	0x5002f400
 c0020f0:	52020c00 	.word	0x52020c00
 c0020f4:	52021000 	.word	0x52021000
 c0020f8:	52021400 	.word	0x52021400
 c0020fc:	52021800 	.word	0x52021800

0c002100 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
                                                       uint32_t PeriphAttributes)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002100:	f5b1 7f41 	cmp.w	r1, #772	@ 0x304
 c002104:	d22a      	bcs.n	c00215c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5c>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002106:	ea4f 7c10 	mov.w	ip, r0, lsr #28
 c00210a:	f000 021f 	and.w	r2, r0, #31
 c00210e:	eb02 134c 	add.w	r3, r2, ip, lsl #5
 c002112:	2b32      	cmp	r3, #50	@ 0x32
 c002114:	d822      	bhi.n	c00215c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x5c>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002116:	0680      	lsls	r0, r0, #26
{
 c002118:	b410      	push	{r4}
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c00211a:	d421      	bmi.n	c002160 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x60>
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00211c:	f240 1001 	movw	r0, #257	@ 0x101
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002120:	4b31      	ldr	r3, [pc, #196]	@ (c0021e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xe8>)
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002122:	4388      	bics	r0, r1
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002124:	4463      	add	r3, ip
 c002126:	ea4f 0383 	mov.w	r3, r3, lsl #2
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00212a:	d03b      	beq.n	c0021a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xa4>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00212c:	05c8      	lsls	r0, r1, #23
 c00212e:	d507      	bpl.n	c002140 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002130:	f04f 0c01 	mov.w	ip, #1
 c002134:	6818      	ldr	r0, [r3, #0]
 c002136:	fa0c fc02 	lsl.w	ip, ip, r2
 c00213a:	ea20 000c 	bic.w	r0, r0, ip
 c00213e:	6018      	str	r0, [r3, #0]
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002140:	f240 2002 	movw	r0, #514	@ 0x202
 c002144:	4388      	bics	r0, r1
 c002146:	d047      	beq.n	c0021d8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xd8>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002148:	0589      	lsls	r1, r1, #22
 c00214a:	d525      	bpl.n	c002198 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00214c:	2001      	movs	r0, #1
 c00214e:	6919      	ldr	r1, [r3, #16]
 c002150:	fa00 f202 	lsl.w	r2, r0, r2
 c002154:	ea21 0202 	bic.w	r2, r1, r2
 c002158:	611a      	str	r2, [r3, #16]
 c00215a:	e01d      	b.n	c002198 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
    return HAL_ERROR;
 c00215c:	2001      	movs	r0, #1
    {
      /* do nothing */
    }
  }
  return HAL_OK;
}
 c00215e:	4770      	bx	lr
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002160:	b9f3      	cbnz	r3, c0021a0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xa0>
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002162:	f240 1201 	movw	r2, #257	@ 0x101
 c002166:	438a      	bics	r2, r1
 c002168:	d02c      	beq.n	c0021c4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xc4>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00216a:	05ca      	lsls	r2, r1, #23
 c00216c:	d506      	bpl.n	c00217c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00216e:	4a1f      	ldr	r2, [pc, #124]	@ (c0021ec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002170:	481f      	ldr	r0, [pc, #124]	@ (c0021f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf0>)
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002172:	6914      	ldr	r4, [r2, #16]
 c002174:	6113      	str	r3, [r2, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002176:	6953      	ldr	r3, [r2, #20]
 c002178:	4018      	ands	r0, r3
 c00217a:	6150      	str	r0, [r2, #20]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c00217c:	f240 2302 	movw	r3, #514	@ 0x202
 c002180:	438b      	bics	r3, r1
 c002182:	d015      	beq.n	c0021b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xb0>
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002184:	058c      	lsls	r4, r1, #22
 c002186:	d507      	bpl.n	c002198 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002188:	2100      	movs	r1, #0
 c00218a:	4b18      	ldr	r3, [pc, #96]	@ (c0021ec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c00218c:	4a18      	ldr	r2, [pc, #96]	@ (c0021f0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf0>)
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c00218e:	6a18      	ldr	r0, [r3, #32]
 c002190:	6219      	str	r1, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002192:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 c002194:	400a      	ands	r2, r1
 c002196:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_OK;
 c002198:	2000      	movs	r0, #0
}
 c00219a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00219e:	4770      	bx	lr
    return HAL_ERROR;
 c0021a0:	2001      	movs	r0, #1
 c0021a2:	e7fa      	b.n	c00219a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9a>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0021a4:	2001      	movs	r0, #1
 c0021a6:	681c      	ldr	r4, [r3, #0]
 c0021a8:	4090      	lsls	r0, r2
 c0021aa:	4320      	orrs	r0, r4
 c0021ac:	6018      	str	r0, [r3, #0]
 c0021ae:	e7c7      	b.n	c002140 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0021b0:	f04f 31ff 	mov.w	r1, #4294967295
 c0021b4:	4b0d      	ldr	r3, [pc, #52]	@ (c0021ec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0021b6:	4a0f      	ldr	r2, [pc, #60]	@ (c0021f4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf4>)
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0021b8:	6a18      	ldr	r0, [r3, #32]
 c0021ba:	6219      	str	r1, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0021bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 c0021be:	430a      	orrs	r2, r1
 c0021c0:	625a      	str	r2, [r3, #36]	@ 0x24
 c0021c2:	e7e9      	b.n	c002198 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0021c4:	f04f 30ff 	mov.w	r0, #4294967295
 c0021c8:	4b08      	ldr	r3, [pc, #32]	@ (c0021ec <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>)
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0021ca:	4a0a      	ldr	r2, [pc, #40]	@ (c0021f4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xf4>)
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0021cc:	691c      	ldr	r4, [r3, #16]
 c0021ce:	6118      	str	r0, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0021d0:	6958      	ldr	r0, [r3, #20]
 c0021d2:	4302      	orrs	r2, r0
 c0021d4:	615a      	str	r2, [r3, #20]
 c0021d6:	e7d1      	b.n	c00217c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0021d8:	2101      	movs	r1, #1
 c0021da:	6918      	ldr	r0, [r3, #16]
 c0021dc:	fa01 f202 	lsl.w	r2, r1, r2
 c0021e0:	4302      	orrs	r2, r0
 c0021e2:	611a      	str	r2, [r3, #16]
 c0021e4:	e7d8      	b.n	c002198 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x98>
 c0021e6:	bf00      	nop
 c0021e8:	1400c904 	.word	0x1400c904
 c0021ec:	50032400 	.word	0x50032400
 c0021f0:	fff89000 	.word	0xfff89000
 c0021f4:	00076fff 	.word	0x00076fff

0c0021f8 <HAL_GTZC_MPCBB_ConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0021f8:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
 c0021fc:	b510      	push	{r4, lr}
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0021fe:	d00b      	beq.n	c002218 <HAL_GTZC_MPCBB_ConfigMem+0x20>
 c002200:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
 c002204:	d008      	beq.n	c002218 <HAL_GTZC_MPCBB_ConfigMem+0x20>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c002206:	4b2e      	ldr	r3, [pc, #184]	@ (c0022c0 <HAL_GTZC_MPCBB_ConfigMem+0xc8>)
 c002208:	4298      	cmp	r0, r3
 c00220a:	d03c      	beq.n	c002286 <HAL_GTZC_MPCBB_ConfigMem+0x8e>
 c00220c:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 c002210:	4298      	cmp	r0, r3
 c002212:	d038      	beq.n	c002286 <HAL_GTZC_MPCBB_ConfigMem+0x8e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c002214:	2001      	movs	r0, #1
    WRITE_REG(mpcbb_ptr->VCTR[i],
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
}
 c002216:	bd10      	pop	{r4, pc}
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002218:	680a      	ldr	r2, [r1, #0]
 c00221a:	b1aa      	cbz	r2, c002248 <HAL_GTZC_MPCBB_ConfigMem+0x50>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00221c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 c002220:	d1f8      	bne.n	c002214 <HAL_GTZC_MPCBB_ConfigMem+0x1c>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002222:	684b      	ldr	r3, [r1, #4]
 c002224:	b193      	cbz	r3, c00224c <HAL_GTZC_MPCBB_ConfigMem+0x54>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 c00222a:	d1f3      	bne.n	c002214 <HAL_GTZC_MPCBB_ConfigMem+0x1c>
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00222c:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 c002230:	d03d      	beq.n	c0022ae <HAL_GTZC_MPCBB_ConfigMem+0xb6>
 c002232:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 c002236:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
 c00223a:	d007      	beq.n	c00224c <HAL_GTZC_MPCBB_ConfigMem+0x54>
 c00223c:	f06f 0eff 	mvn.w	lr, #255	@ 0xff
 c002240:	f04f 0c08 	mov.w	ip, #8
    mpcbb_ptr = GTZC_MPCBB2_S;
 c002244:	4c1f      	ldr	r4, [pc, #124]	@ (c0022c4 <HAL_GTZC_MPCBB_ConfigMem+0xcc>)
 c002246:	e006      	b.n	c002256 <HAL_GTZC_MPCBB_ConfigMem+0x5e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002248:	684a      	ldr	r2, [r1, #4]
 c00224a:	bb62      	cbnz	r2, c0022a6 <HAL_GTZC_MPCBB_ConfigMem+0xae>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c00224c:	f04f 4e7f 	mov.w	lr, #4278190080	@ 0xff000000
 c002250:	f04f 0c18 	mov.w	ip, #24
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002254:	4c1c      	ldr	r4, [pc, #112]	@ (c0022c8 <HAL_GTZC_MPCBB_ConfigMem+0xd0>)
  for (i = 0U; i < size_in_superblocks; i++)
 c002256:	2300      	movs	r3, #0
  MODIFY_REG(mpcbb_ptr->CR,
 c002258:	6820      	ldr	r0, [r4, #0]
 c00225a:	3104      	adds	r1, #4
 c00225c:	f020 4040 	bic.w	r0, r0, #3221225472	@ 0xc0000000
 c002260:	4302      	orrs	r2, r0
 c002262:	6022      	str	r2, [r4, #0]
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002264:	6922      	ldr	r2, [r4, #16]
 c002266:	6e48      	ldr	r0, [r1, #100]	@ 0x64
 c002268:	ea02 020e 	and.w	r2, r2, lr
 c00226c:	4302      	orrs	r2, r0
 c00226e:	6122      	str	r2, [r4, #16]
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c002270:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 c002274:	f851 0f04 	ldr.w	r0, [r1, #4]!
  for (i = 0U; i < size_in_superblocks; i++)
 c002278:	3301      	adds	r3, #1
 c00227a:	4563      	cmp	r3, ip
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c00227c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002280:	d1f6      	bne.n	c002270 <HAL_GTZC_MPCBB_ConfigMem+0x78>
  return HAL_OK;
 c002282:	2000      	movs	r0, #0
}
 c002284:	bd10      	pop	{r4, pc}
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002286:	680a      	ldr	r2, [r1, #0]
 c002288:	b132      	cbz	r2, c002298 <HAL_GTZC_MPCBB_ConfigMem+0xa0>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00228a:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 c00228e:	d1c1      	bne.n	c002214 <HAL_GTZC_MPCBB_ConfigMem+0x1c>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002290:	684b      	ldr	r3, [r1, #4]
 c002292:	2b00      	cmp	r3, #0
 c002294:	d1c7      	bne.n	c002226 <HAL_GTZC_MPCBB_ConfigMem+0x2e>
 c002296:	e7ce      	b.n	c002236 <HAL_GTZC_MPCBB_ConfigMem+0x3e>
 c002298:	684a      	ldr	r2, [r1, #4]
 c00229a:	2a00      	cmp	r2, #0
 c00229c:	d0ce      	beq.n	c00223c <HAL_GTZC_MPCBB_ConfigMem+0x44>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c00229e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 c0022a2:	d1b7      	bne.n	c002214 <HAL_GTZC_MPCBB_ConfigMem+0x1c>
 c0022a4:	e7ca      	b.n	c00223c <HAL_GTZC_MPCBB_ConfigMem+0x44>
 c0022a6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 c0022aa:	d0cf      	beq.n	c00224c <HAL_GTZC_MPCBB_ConfigMem+0x54>
 c0022ac:	e7b2      	b.n	c002214 <HAL_GTZC_MPCBB_ConfigMem+0x1c>
 c0022ae:	f04f 4e7f 	mov.w	lr, #4278190080	@ 0xff000000
 c0022b2:	f04f 0c18 	mov.w	ip, #24
 c0022b6:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0022ba:	4c03      	ldr	r4, [pc, #12]	@ (c0022c8 <HAL_GTZC_MPCBB_ConfigMem+0xd0>)
 c0022bc:	e7cb      	b.n	c002256 <HAL_GTZC_MPCBB_ConfigMem+0x5e>
 c0022be:	bf00      	nop
 c0022c0:	20030000 	.word	0x20030000
 c0022c4:	50033000 	.word	0x50033000
 c0022c8:	50032c00 	.word	0x50032c00

0c0022cc <HAL_GTZC_TZIC_EnableIT>:
HAL_StatusTypeDef HAL_GTZC_TZIC_EnableIT(uint32_t PeriphId)
{
  uint32_t register_address;

  /* check entry parameters */
  if ((HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZIC_PERIPH_NUMBER)
 c0022cc:	0f03      	lsrs	r3, r0, #28
 c0022ce:	f000 011f 	and.w	r1, r0, #31
 c0022d2:	eb01 1243 	add.w	r2, r1, r3, lsl #5
 c0022d6:	2a47      	cmp	r2, #71	@ 0x47
 c0022d8:	d818      	bhi.n	c00230c <HAL_GTZC_TZIC_EnableIT+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0022da:	0680      	lsls	r0, r0, #26
 c0022dc:	d50a      	bpl.n	c0022f4 <HAL_GTZC_TZIC_EnableIT+0x28>
 c0022de:	b9aa      	cbnz	r2, c00230c <HAL_GTZC_TZIC_EnableIT+0x40>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
  {
    /* same configuration is applied to all peripherals */
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0022e0:	f04f 30ff 	mov.w	r0, #4294967295
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c0022e4:	22ff      	movs	r2, #255	@ 0xff
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0022e6:	4b0a      	ldr	r3, [pc, #40]	@ (c002310 <HAL_GTZC_TZIC_EnableIT+0x44>)
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c0022e8:	490a      	ldr	r1, [pc, #40]	@ (c002314 <HAL_GTZC_TZIC_EnableIT+0x48>)
    WRITE_REG(GTZC_TZIC->IER1, TZIC_IER1_ALL);
 c0022ea:	6018      	str	r0, [r3, #0]
    WRITE_REG(GTZC_TZIC->IER2, TZIC_IER2_ALL);
 c0022ec:	6059      	str	r1, [r3, #4]
    /* common case where only one peripheral is configured */
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
  }

  return HAL_OK;
 c0022ee:	2000      	movs	r0, #0
    WRITE_REG(GTZC_TZIC->IER3, TZIC_IER3_ALL);
 c0022f0:	609a      	str	r2, [r3, #8]
 c0022f2:	4770      	bx	lr
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0022f4:	2201      	movs	r2, #1
    register_address = (uint32_t) &(GTZC_TZIC->IER1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0022f6:	f103 53a0 	add.w	r3, r3, #335544320	@ 0x14000000
 c0022fa:	f503 434a 	add.w	r3, r3, #51712	@ 0xca00
 c0022fe:	009b      	lsls	r3, r3, #2
    SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002300:	6818      	ldr	r0, [r3, #0]
 c002302:	408a      	lsls	r2, r1
 c002304:	4302      	orrs	r2, r0
 c002306:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 c002308:	2000      	movs	r0, #0
 c00230a:	4770      	bx	lr
    return HAL_ERROR;
 c00230c:	2001      	movs	r0, #1
}
 c00230e:	4770      	bx	lr
 c002310:	50032800 	.word	0x50032800
 c002314:	3fff6fff 	.word	0x3fff6fff

0c002318 <HAL_GTZC_TZIC_Callback>:
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c002318:	4770      	bx	lr
 c00231a:	bf00      	nop

0c00231c <HAL_GTZC_IRQHandler>:
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c00231c:	4a22      	ldr	r2, [pc, #136]	@ (c0023a8 <HAL_GTZC_IRQHandler+0x8c>)
{
 c00231e:	b538      	push	{r3, r4, r5, lr}
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c002320:	6815      	ldr	r5, [r2, #0]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c002322:	6913      	ldr	r3, [r2, #16]
  if (flag != 0U)
 c002324:	401d      	ands	r5, r3
 c002326:	d010      	beq.n	c00234a <HAL_GTZC_IRQHandler+0x2e>
    while ((flag >> position) != 0U)
 c002328:	462b      	mov	r3, r5
    position = 0U;
 c00232a:	2400      	movs	r4, #0
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c00232c:	6215      	str	r5, [r2, #32]
    while ((flag >> position) != 0U)
 c00232e:	e003      	b.n	c002338 <HAL_GTZC_IRQHandler+0x1c>
      position++;
 c002330:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c002332:	fa35 f304 	lsrs.w	r3, r5, r4
 c002336:	d008      	beq.n	c00234a <HAL_GTZC_IRQHandler+0x2e>
      if ((flag & (1UL << position)) != 0U)
 c002338:	07d9      	lsls	r1, r3, #31
 c00233a:	d5f9      	bpl.n	c002330 <HAL_GTZC_IRQHandler+0x14>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c00233c:	4620      	mov	r0, r4
      position++;
 c00233e:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c002340:	f7ff ffea 	bl	c002318 <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c002344:	fa35 f304 	lsrs.w	r3, r5, r4
 c002348:	d1f6      	bne.n	c002338 <HAL_GTZC_IRQHandler+0x1c>
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c00234a:	4a17      	ldr	r2, [pc, #92]	@ (c0023a8 <HAL_GTZC_IRQHandler+0x8c>)
 c00234c:	6855      	ldr	r5, [r2, #4]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c00234e:	6953      	ldr	r3, [r2, #20]
  if (flag != 0U)
 c002350:	401d      	ands	r5, r3
 c002352:	d011      	beq.n	c002378 <HAL_GTZC_IRQHandler+0x5c>
    while ((flag >> position) != 0U)
 c002354:	462b      	mov	r3, r5
    position = 0U;
 c002356:	2400      	movs	r4, #0
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c002358:	6255      	str	r5, [r2, #36]	@ 0x24
    while ((flag >> position) != 0U)
 c00235a:	e003      	b.n	c002364 <HAL_GTZC_IRQHandler+0x48>
      position++;
 c00235c:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c00235e:	fa35 f304 	lsrs.w	r3, r5, r4
 c002362:	d009      	beq.n	c002378 <HAL_GTZC_IRQHandler+0x5c>
      if ((flag & (1UL << position)) != 0U)
 c002364:	07da      	lsls	r2, r3, #31
 c002366:	d5f9      	bpl.n	c00235c <HAL_GTZC_IRQHandler+0x40>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c002368:	f044 5080 	orr.w	r0, r4, #268435456	@ 0x10000000
      position++;
 c00236c:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c00236e:	f7ff ffd3 	bl	c002318 <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c002372:	fa35 f304 	lsrs.w	r3, r5, r4
 c002376:	d1f5      	bne.n	c002364 <HAL_GTZC_IRQHandler+0x48>
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c002378:	4a0b      	ldr	r2, [pc, #44]	@ (c0023a8 <HAL_GTZC_IRQHandler+0x8c>)
 c00237a:	6895      	ldr	r5, [r2, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c00237c:	6993      	ldr	r3, [r2, #24]
  if (flag != 0U)
 c00237e:	401d      	ands	r5, r3
 c002380:	d011      	beq.n	c0023a6 <HAL_GTZC_IRQHandler+0x8a>
    while ((flag >> position) != 0U)
 c002382:	462b      	mov	r3, r5
    position = 0U;
 c002384:	2400      	movs	r4, #0
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c002386:	6295      	str	r5, [r2, #40]	@ 0x28
    while ((flag >> position) != 0U)
 c002388:	e003      	b.n	c002392 <HAL_GTZC_IRQHandler+0x76>
      position++;
 c00238a:	3401      	adds	r4, #1
    while ((flag >> position) != 0U)
 c00238c:	fa35 f304 	lsrs.w	r3, r5, r4
 c002390:	d009      	beq.n	c0023a6 <HAL_GTZC_IRQHandler+0x8a>
      if ((flag & (1UL << position)) != 0U)
 c002392:	07db      	lsls	r3, r3, #31
 c002394:	d5f9      	bpl.n	c00238a <HAL_GTZC_IRQHandler+0x6e>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c002396:	f044 5000 	orr.w	r0, r4, #536870912	@ 0x20000000
      position++;
 c00239a:	3401      	adds	r4, #1
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c00239c:	f7ff ffbc 	bl	c002318 <HAL_GTZC_TZIC_Callback>
    while ((flag >> position) != 0U)
 c0023a0:	fa35 f304 	lsrs.w	r3, r5, r4
 c0023a4:	d1f5      	bne.n	c002392 <HAL_GTZC_IRQHandler+0x76>
}
 c0023a6:	bd38      	pop	{r3, r4, r5, pc}
 c0023a8:	50032800 	.word	0x50032800

0c0023ac <HAL_PWR_ConfigAttributes>:
  /* Check the parameters */
  assert_param(IS_PWR_ITEMS_ATTRIBUTES(Item));
  assert_param(IS_PWR_ATTRIBUTES(Attributes));

  /* Privilege/non-privilege attribute */
  if ((Attributes & PWR_PRIV) == PWR_PRIV)
 c0023ac:	f240 2302 	movw	r3, #514	@ 0x202
 c0023b0:	438b      	bics	r3, r1
 c0023b2:	d01d      	beq.n	c0023f0 <HAL_PWR_ConfigAttributes+0x44>
  {
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
  }
  else if ((Attributes & PWR_NPRIV) == PWR_NPRIV)
 c0023b4:	058a      	lsls	r2, r1, #22
 c0023b6:	d40b      	bmi.n	c0023d0 <HAL_PWR_ConfigAttributes+0x24>


#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Secure/non-secure attribute */
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c0023b8:	f240 1301 	movw	r3, #257	@ 0x101
 c0023bc:	438b      	bics	r3, r1
 c0023be:	d012      	beq.n	c0023e6 <HAL_PWR_ConfigAttributes+0x3a>
  {
    SET_BIT(PWR_S->SECCFGR, Item);
  }
  else if ((Attributes & PWR_NSEC) == PWR_NSEC)
 c0023c0:	05cb      	lsls	r3, r1, #23
 c0023c2:	d504      	bpl.n	c0023ce <HAL_PWR_ConfigAttributes+0x22>
  {
    CLEAR_BIT(PWR_S->SECCFGR, Item);
 c0023c4:	4a0e      	ldr	r2, [pc, #56]	@ (c002400 <HAL_PWR_ConfigAttributes+0x54>)
 c0023c6:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 c0023c8:	ea23 0300 	bic.w	r3, r3, r0
 c0023cc:	6793      	str	r3, [r2, #120]	@ 0x78
  {
    /* do nothing */
  }

#endif /* __ARM_FEATURE_CMSE */
}
 c0023ce:	4770      	bx	lr
    CLEAR_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c0023d0:	4a0b      	ldr	r2, [pc, #44]	@ (c002400 <HAL_PWR_ConfigAttributes+0x54>)
 c0023d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 c0023d6:	f023 0301 	bic.w	r3, r3, #1
 c0023da:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  if ((Attributes & PWR_SEC) == PWR_SEC)
 c0023de:	f240 1301 	movw	r3, #257	@ 0x101
 c0023e2:	438b      	bics	r3, r1
 c0023e4:	d1ec      	bne.n	c0023c0 <HAL_PWR_ConfigAttributes+0x14>
    SET_BIT(PWR_S->SECCFGR, Item);
 c0023e6:	4a06      	ldr	r2, [pc, #24]	@ (c002400 <HAL_PWR_ConfigAttributes+0x54>)
 c0023e8:	6f93      	ldr	r3, [r2, #120]	@ 0x78
 c0023ea:	4303      	orrs	r3, r0
 c0023ec:	6793      	str	r3, [r2, #120]	@ 0x78
 c0023ee:	4770      	bx	lr
    SET_BIT(PWR->PRIVCFGR, PWR_PRIVCFGR_PRIV);
 c0023f0:	4a03      	ldr	r2, [pc, #12]	@ (c002400 <HAL_PWR_ConfigAttributes+0x54>)
 c0023f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 c0023f6:	f043 0301 	orr.w	r3, r3, #1
 c0023fa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 c0023fe:	e7db      	b.n	c0023b8 <HAL_PWR_ConfigAttributes+0xc>
 c002400:	50007000 	.word	0x50007000

0c002404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 c002404:	4b02      	ldr	r3, [pc, #8]	@ (c002410 <HAL_PWREx_GetVoltageRange+0xc>)
 c002406:	6818      	ldr	r0, [r3, #0]
}
 c002408:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 c00240c:	4770      	bx	lr
 c00240e:	bf00      	nop
 c002410:	50007000 	.word	0x50007000

0c002414 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002414:	4a1b      	ldr	r2, [pc, #108]	@ (c002484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 c002416:	6813      	ldr	r3, [r2, #0]
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c002418:	6911      	ldr	r1, [r2, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c00241a:	f411 4f10 	tst.w	r1, #36864	@ 0x9000
 c00241e:	d02c      	beq.n	c00247a <HAL_PWREx_ControlVoltageScaling+0x66>
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002420:	68d1      	ldr	r1, [r2, #12]
 c002422:	0409      	lsls	r1, r1, #16
 c002424:	d429      	bmi.n	c00247a <HAL_PWREx_ControlVoltageScaling+0x66>
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002426:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
  if (vos_old == VoltageScaling)
 c00242a:	4283      	cmp	r3, r0
 c00242c:	d023      	beq.n	c002476 <HAL_PWREx_ControlVoltageScaling+0x62>
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c00242e:	f04f 0c32 	mov.w	ip, #50	@ 0x32
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002432:	6813      	ldr	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002434:	4914      	ldr	r1, [pc, #80]	@ (c002488 <HAL_PWREx_ControlVoltageScaling+0x74>)
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002436:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 c00243a:	4303      	orrs	r3, r0
 c00243c:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c00243e:	680b      	ldr	r3, [r1, #0]
 c002440:	4912      	ldr	r1, [pc, #72]	@ (c00248c <HAL_PWREx_ControlVoltageScaling+0x78>)
 c002442:	095b      	lsrs	r3, r3, #5
 c002444:	fba1 1303 	umull	r1, r3, r1, r3
 c002448:	09db      	lsrs	r3, r3, #7
 c00244a:	fb0c f303 	mul.w	r3, ip, r3
 c00244e:	4910      	ldr	r1, [pc, #64]	@ (c002490 <HAL_PWREx_ControlVoltageScaling+0x7c>)
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002450:	6950      	ldr	r0, [r2, #20]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002452:	fba1 1303 	umull	r1, r3, r1, r3
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002456:	0540      	lsls	r0, r0, #21
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002458:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 c00245c:	f103 0301 	add.w	r3, r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002460:	d505      	bpl.n	c00246e <HAL_PWREx_ControlVoltageScaling+0x5a>
 c002462:	e000      	b.n	c002466 <HAL_PWREx_ControlVoltageScaling+0x52>
 c002464:	b11b      	cbz	r3, c00246e <HAL_PWREx_ControlVoltageScaling+0x5a>
 c002466:	6951      	ldr	r1, [r2, #20]
    wait_loop_index--;
 c002468:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c00246a:	0549      	lsls	r1, r1, #21
 c00246c:	d4fa      	bmi.n	c002464 <HAL_PWREx_ControlVoltageScaling+0x50>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c00246e:	4b05      	ldr	r3, [pc, #20]	@ (c002484 <HAL_PWREx_ControlVoltageScaling+0x70>)
 c002470:	695b      	ldr	r3, [r3, #20]
 c002472:	055b      	lsls	r3, r3, #21
 c002474:	d403      	bmi.n	c00247e <HAL_PWREx_ControlVoltageScaling+0x6a>
    return HAL_OK;
 c002476:	2000      	movs	r0, #0
 c002478:	4770      	bx	lr
    return HAL_ERROR;
 c00247a:	2001      	movs	r0, #1
}
 c00247c:	4770      	bx	lr
    return HAL_TIMEOUT;
 c00247e:	2003      	movs	r0, #3
 c002480:	4770      	bx	lr
 c002482:	bf00      	nop
 c002484:	50007000 	.word	0x50007000
 c002488:	30000020 	.word	0x30000020
 c00248c:	0a7c5ac5 	.word	0x0a7c5ac5
 c002490:	cccccccd 	.word	0xcccccccd

0c002494 <HAL_PWREx_EnableVddIO2>:
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c002494:	4a02      	ldr	r2, [pc, #8]	@ (c0024a0 <HAL_PWREx_EnableVddIO2+0xc>)
 c002496:	6853      	ldr	r3, [r2, #4]
 c002498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 c00249c:	6053      	str	r3, [r2, #4]
}
 c00249e:	4770      	bx	lr
 c0024a0:	50007000 	.word	0x50007000

0c0024a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c0024a4:	4a02      	ldr	r2, [pc, #8]	@ (c0024b0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 c0024a6:	6893      	ldr	r3, [r2, #8]
 c0024a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 c0024ac:	6093      	str	r3, [r2, #8]
}
 c0024ae:	4770      	bx	lr
 c0024b0:	50007000 	.word	0x50007000

0c0024b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0024b4:	b530      	push	{r4, r5, lr}
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0024b6:	4c1e      	ldr	r4, [pc, #120]	@ (c002530 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
{
 c0024b8:	4605      	mov	r5, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0024ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
{
 c0024bc:	b083      	sub	sp, #12
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0024be:	00db      	lsls	r3, r3, #3
 c0024c0:	d521      	bpl.n	c002506 <RCC_SetFlashLatencyFromMSIRange+0x52>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0024c2:	f7ff ff9f 	bl	c002404 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0024c6:	f430 7300 	bics.w	r3, r0, #512	@ 0x200
 c0024ca:	d015      	beq.n	c0024f8 <RCC_SetFlashLatencyFromMSIRange+0x44>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c0024cc:	2d80      	cmp	r5, #128	@ 0x80
 c0024ce:	d82a      	bhi.n	c002526 <RCC_SetFlashLatencyFromMSIRange+0x72>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c0024d0:	d02b      	beq.n	c00252a <RCC_SetFlashLatencyFromMSIRange+0x76>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0024d2:	f1a5 0370 	sub.w	r3, r5, #112	@ 0x70
 c0024d6:	fab3 f383 	clz	r3, r3
 c0024da:	095b      	lsrs	r3, r3, #5
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0024dc:	4915      	ldr	r1, [pc, #84]	@ (c002534 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 c0024de:	680a      	ldr	r2, [r1, #0]
 c0024e0:	f022 020f 	bic.w	r2, r2, #15
 c0024e4:	431a      	orrs	r2, r3
 c0024e6:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0024e8:	6808      	ldr	r0, [r1, #0]
 c0024ea:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 c0024ee:	1ac0      	subs	r0, r0, r3
 c0024f0:	bf18      	it	ne
 c0024f2:	2001      	movne	r0, #1
 c0024f4:	b003      	add	sp, #12
 c0024f6:	bd30      	pop	{r4, r5, pc}
    if (msirange > RCC_MSIRANGE_8)
 c0024f8:	2d80      	cmp	r5, #128	@ 0x80
 c0024fa:	d9ef      	bls.n	c0024dc <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 c0024fc:	2da1      	cmp	r5, #161	@ 0xa1
 c0024fe:	bf34      	ite	cc
 c002500:	2301      	movcc	r3, #1
 c002502:	2302      	movcs	r3, #2
 c002504:	e7ea      	b.n	c0024dc <RCC_SetFlashLatencyFromMSIRange+0x28>
    __HAL_RCC_PWR_CLK_ENABLE();
 c002506:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 c002508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c00250c:	65a3      	str	r3, [r4, #88]	@ 0x58
 c00250e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 c002510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c002514:	9301      	str	r3, [sp, #4]
 c002516:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 c002518:	f7ff ff74 	bl	c002404 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 c00251c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 c00251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c002522:	65a3      	str	r3, [r4, #88]	@ 0x58
 c002524:	e7cf      	b.n	c0024c6 <RCC_SetFlashLatencyFromMSIRange+0x12>
      latency = FLASH_LATENCY_3; /* 3WS */
 c002526:	2303      	movs	r3, #3
 c002528:	e7d8      	b.n	c0024dc <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 c00252a:	2302      	movs	r3, #2
 c00252c:	e7d6      	b.n	c0024dc <RCC_SetFlashLatencyFromMSIRange+0x28>
 c00252e:	bf00      	nop
 c002530:	50021000 	.word	0x50021000
 c002534:	50022000 	.word	0x50022000

0c002538 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002538:	4a28      	ldr	r2, [pc, #160]	@ (c0025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 c00253a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00253c:	68d2      	ldr	r2, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00253e:	f013 030c 	ands.w	r3, r3, #12
 c002542:	d00b      	beq.n	c00255c <HAL_RCC_GetSysClockFreq+0x24>
 c002544:	2b0c      	cmp	r3, #12
 c002546:	d03b      	beq.n	c0025c0 <HAL_RCC_GetSysClockFreq+0x88>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c002548:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 c00254c:	fa42 f303 	asr.w	r3, r2, r3
    sysclockfreq = HSE_VALUE;
 c002550:	f013 0f01 	tst.w	r3, #1
 c002554:	4822      	ldr	r0, [pc, #136]	@ (c0025e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 c002556:	bf18      	it	ne
 c002558:	2000      	movne	r0, #0
 c00255a:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00255c:	4a1f      	ldr	r2, [pc, #124]	@ (c0025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 c00255e:	6811      	ldr	r1, [r2, #0]
 c002560:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002562:	bf54      	ite	pl
 c002564:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002568:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c00256a:	491e      	ldr	r1, [pc, #120]	@ (c0025e4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00256c:	bf54      	ite	pl
 c00256e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002572:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c002576:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00257a:	b303      	cbz	r3, c0025be <HAL_RCC_GetSysClockFreq+0x86>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00257c:	2b0c      	cmp	r3, #12
 c00257e:	d11d      	bne.n	c0025bc <HAL_RCC_GetSysClockFreq+0x84>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002580:	4916      	ldr	r1, [pc, #88]	@ (c0025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 c002582:	68ca      	ldr	r2, [r1, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002584:	68cb      	ldr	r3, [r1, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002586:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00258a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 c00258e:	2a02      	cmp	r2, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002590:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 c002594:	d001      	beq.n	c00259a <HAL_RCC_GetSysClockFreq+0x62>
 c002596:	2a03      	cmp	r2, #3
 c002598:	d118      	bne.n	c0025cc <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00259a:	4a11      	ldr	r2, [pc, #68]	@ (c0025e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 c00259c:	68c8      	ldr	r0, [r1, #12]
 c00259e:	fbb2 f3f3 	udiv	r3, r2, r3
 c0025a2:	f3c0 2006 	ubfx	r0, r0, #8, #7
 c0025a6:	fb03 f000 	mul.w	r0, r3, r0
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0025aa:	4b0c      	ldr	r3, [pc, #48]	@ (c0025dc <HAL_RCC_GetSysClockFreq+0xa4>)
 c0025ac:	68db      	ldr	r3, [r3, #12]
 c0025ae:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c0025b2:	3301      	adds	r3, #1
 c0025b4:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 c0025b6:	fbb0 f0f3 	udiv	r0, r0, r3
 c0025ba:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0025bc:	2000      	movs	r0, #0
}
 c0025be:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0025c0:	f002 0203 	and.w	r2, r2, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0025c4:	2a01      	cmp	r2, #1
 c0025c6:	d0c9      	beq.n	c00255c <HAL_RCC_GetSysClockFreq+0x24>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0025c8:	2000      	movs	r0, #0
 c0025ca:	e7d9      	b.n	c002580 <HAL_RCC_GetSysClockFreq+0x48>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0025cc:	fbb0 f0f3 	udiv	r0, r0, r3
 c0025d0:	68cb      	ldr	r3, [r1, #12]
 c0025d2:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c0025d6:	fb03 f000 	mul.w	r0, r3, r0
        break;
 c0025da:	e7e6      	b.n	c0025aa <HAL_RCC_GetSysClockFreq+0x72>
 c0025dc:	50021000 	.word	0x50021000
 c0025e0:	00f42400 	.word	0x00f42400
 c0025e4:	0c005144 	.word	0x0c005144

0c0025e8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 c0025e8:	2800      	cmp	r0, #0
 c0025ea:	f000 83bd 	beq.w	c002d68 <HAL_RCC_OscConfig+0x780>
{
 c0025ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0025f2:	4aa4      	ldr	r2, [pc, #656]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0025f4:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0025f6:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0025f8:	68d6      	ldr	r6, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0025fa:	06df      	lsls	r7, r3, #27
 c0025fc:	4604      	mov	r4, r0
{
 c0025fe:	b082      	sub	sp, #8
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002600:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002604:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c002608:	d534      	bpl.n	c002674 <HAL_RCC_OscConfig+0x8c>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00260a:	2d00      	cmp	r5, #0
 c00260c:	f000 817a 	beq.w	c002904 <HAL_RCC_OscConfig+0x31c>
 c002610:	2d0c      	cmp	r5, #12
 c002612:	f000 8174 	beq.w	c0028fe <HAL_RCC_OscConfig+0x316>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c002616:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 c002618:	4f9a      	ldr	r7, [pc, #616]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00261a:	2b00      	cmp	r3, #0
 c00261c:	f000 81fb 	beq.w	c002a16 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_MSI_ENABLE();
 c002620:	683b      	ldr	r3, [r7, #0]
 c002622:	f043 0301 	orr.w	r3, r3, #1
 c002626:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c002628:	f7ff fbde 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00262c:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c00262e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002630:	079a      	lsls	r2, r3, #30
 c002632:	d40c      	bmi.n	c00264e <HAL_RCC_OscConfig+0x66>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002634:	f7ff fbd8 	bl	c001de8 <HAL_GetTick>
 c002638:	eba0 0008 	sub.w	r0, r0, r8
 c00263c:	2802      	cmp	r0, #2
 c00263e:	d903      	bls.n	c002648 <HAL_RCC_OscConfig+0x60>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002640:	683b      	ldr	r3, [r7, #0]
 c002642:	079b      	lsls	r3, r3, #30
 c002644:	f140 81fe 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002648:	683b      	ldr	r3, [r7, #0]
 c00264a:	0799      	lsls	r1, r3, #30
 c00264c:	d5f2      	bpl.n	c002634 <HAL_RCC_OscConfig+0x4c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00264e:	4b8d      	ldr	r3, [pc, #564]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002650:	681a      	ldr	r2, [r3, #0]
 c002652:	f042 0208 	orr.w	r2, r2, #8
 c002656:	601a      	str	r2, [r3, #0]
 c002658:	681a      	ldr	r2, [r3, #0]
 c00265a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 c00265c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 c002660:	430a      	orrs	r2, r1
 c002662:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002664:	685a      	ldr	r2, [r3, #4]
 c002666:	6a21      	ldr	r1, [r4, #32]
 c002668:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 c00266c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c002670:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002672:	6823      	ldr	r3, [r4, #0]
 c002674:	07da      	lsls	r2, r3, #31
 c002676:	d52e      	bpl.n	c0026d6 <HAL_RCC_OscConfig+0xee>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c002678:	2d08      	cmp	r5, #8
 c00267a:	f000 81c2 	beq.w	c002a02 <HAL_RCC_OscConfig+0x41a>
 c00267e:	2d0c      	cmp	r5, #12
 c002680:	f000 81bc 	beq.w	c0029fc <HAL_RCC_OscConfig+0x414>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c002684:	6863      	ldr	r3, [r4, #4]
 c002686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 c00268a:	f000 81df 	beq.w	c002a4c <HAL_RCC_OscConfig+0x464>
 c00268e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 c002692:	f000 8316 	beq.w	c002cc2 <HAL_RCC_OscConfig+0x6da>
 c002696:	4f7b      	ldr	r7, [pc, #492]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002698:	683a      	ldr	r2, [r7, #0]
 c00269a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 c00269e:	603a      	str	r2, [r7, #0]
 c0026a0:	683a      	ldr	r2, [r7, #0]
 c0026a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 c0026a6:	603a      	str	r2, [r7, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0026a8:	2b00      	cmp	r3, #0
 c0026aa:	f040 81d4 	bne.w	c002a56 <HAL_RCC_OscConfig+0x46e>
        tickstart = HAL_GetTick();
 c0026ae:	f7ff fb9b 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0026b2:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c0026b4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0026b6:	0399      	lsls	r1, r3, #14
 c0026b8:	d50c      	bpl.n	c0026d4 <HAL_RCC_OscConfig+0xec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0026ba:	f7ff fb95 	bl	c001de8 <HAL_GetTick>
 c0026be:	eba0 0008 	sub.w	r0, r0, r8
 c0026c2:	2864      	cmp	r0, #100	@ 0x64
 c0026c4:	d903      	bls.n	c0026ce <HAL_RCC_OscConfig+0xe6>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0026c6:	683b      	ldr	r3, [r7, #0]
 c0026c8:	039a      	lsls	r2, r3, #14
 c0026ca:	f100 81bb 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0026ce:	683b      	ldr	r3, [r7, #0]
 c0026d0:	039b      	lsls	r3, r3, #14
 c0026d2:	d4f2      	bmi.n	c0026ba <HAL_RCC_OscConfig+0xd2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0026d4:	6823      	ldr	r3, [r4, #0]
 c0026d6:	0799      	lsls	r1, r3, #30
 c0026d8:	f100 80e8 	bmi.w	c0028ac <HAL_RCC_OscConfig+0x2c4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0026dc:	071a      	lsls	r2, r3, #28
 c0026de:	d52b      	bpl.n	c002738 <HAL_RCC_OscConfig+0x150>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0026e0:	6963      	ldr	r3, [r4, #20]
 c0026e2:	2b00      	cmp	r3, #0
 c0026e4:	f000 816d 	beq.w	c0029c2 <HAL_RCC_OscConfig+0x3da>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0026e8:	69a3      	ldr	r3, [r4, #24]
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0026ea:	4a66      	ldr	r2, [pc, #408]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0026ec:	2b00      	cmp	r3, #0
 c0026ee:	f040 820e 	bne.w	c002b0e <HAL_RCC_OscConfig+0x526>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0026f2:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 c0026f6:	f023 0310 	bic.w	r3, r3, #16
 c0026fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      __HAL_RCC_LSI_ENABLE();
 c0026fe:	4d61      	ldr	r5, [pc, #388]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002700:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c002704:	f043 0301 	orr.w	r3, r3, #1
 c002708:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 c00270c:	f7ff fb6c 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002710:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 c002714:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002716:	079b      	lsls	r3, r3, #30
 c002718:	d40d      	bmi.n	c002736 <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00271a:	f7ff fb65 	bl	c001de8 <HAL_GetTick>
 c00271e:	1b80      	subs	r0, r0, r6
 c002720:	2807      	cmp	r0, #7
 c002722:	d904      	bls.n	c00272e <HAL_RCC_OscConfig+0x146>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002724:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c002728:	079f      	lsls	r7, r3, #30
 c00272a:	f140 818b 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00272e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c002732:	0799      	lsls	r1, r3, #30
 c002734:	d5f1      	bpl.n	c00271a <HAL_RCC_OscConfig+0x132>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002736:	6823      	ldr	r3, [r4, #0]
 c002738:	075d      	lsls	r5, r3, #29
 c00273a:	d55c      	bpl.n	c0027f6 <HAL_RCC_OscConfig+0x20e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c00273c:	4b51      	ldr	r3, [pc, #324]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c00273e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 c002740:	00d0      	lsls	r0, r2, #3
 c002742:	f140 8121 	bpl.w	c002988 <HAL_RCC_OscConfig+0x3a0>
    FlagStatus       pwrclkchanged = RESET;
 c002746:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002748:	4e4f      	ldr	r6, [pc, #316]	@ (c002888 <HAL_RCC_OscConfig+0x2a0>)
 c00274a:	6833      	ldr	r3, [r6, #0]
 c00274c:	05d9      	lsls	r1, r3, #23
 c00274e:	f140 8222 	bpl.w	c002b96 <HAL_RCC_OscConfig+0x5ae>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002752:	68a3      	ldr	r3, [r4, #8]
 c002754:	07da      	lsls	r2, r3, #31
 c002756:	f140 8193 	bpl.w	c002a80 <HAL_RCC_OscConfig+0x498>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00275a:	075a      	lsls	r2, r3, #29
 c00275c:	f140 824d 	bpl.w	c002bfa <HAL_RCC_OscConfig+0x612>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002760:	4b48      	ldr	r3, [pc, #288]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002762:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 c002766:	f042 0204 	orr.w	r2, r2, #4
 c00276a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00276e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 c002772:	f042 0201 	orr.w	r2, r2, #1
 c002776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      tickstart = HAL_GetTick();
 c00277a:	f7ff fb35 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00277e:	4f41      	ldr	r7, [pc, #260]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
      tickstart = HAL_GetTick();
 c002780:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002782:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c002786:	079b      	lsls	r3, r3, #30
 c002788:	d40f      	bmi.n	c0027aa <HAL_RCC_OscConfig+0x1c2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00278a:	f241 3888 	movw	r8, #5000	@ 0x1388
 c00278e:	f7ff fb2b 	bl	c001de8 <HAL_GetTick>
 c002792:	1b80      	subs	r0, r0, r6
 c002794:	4540      	cmp	r0, r8
 c002796:	d904      	bls.n	c0027a2 <HAL_RCC_OscConfig+0x1ba>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002798:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c00279c:	079a      	lsls	r2, r3, #30
 c00279e:	f140 8151 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0027a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c0027a6:	079b      	lsls	r3, r3, #30
 c0027a8:	d5f1      	bpl.n	c00278e <HAL_RCC_OscConfig+0x1a6>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0027aa:	68a3      	ldr	r3, [r4, #8]
 c0027ac:	0619      	lsls	r1, r3, #24
 c0027ae:	f140 8231 	bpl.w	c002c14 <HAL_RCC_OscConfig+0x62c>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0027b2:	4f34      	ldr	r7, [pc, #208]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c0027b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c0027b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c0027bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0027c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c0027c4:	0519      	lsls	r1, r3, #20
 c0027c6:	d40f      	bmi.n	c0027e8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0027c8:	f241 3888 	movw	r8, #5000	@ 0x1388
 c0027cc:	f7ff fb0c 	bl	c001de8 <HAL_GetTick>
 c0027d0:	1b80      	subs	r0, r0, r6
 c0027d2:	4540      	cmp	r0, r8
 c0027d4:	d904      	bls.n	c0027e0 <HAL_RCC_OscConfig+0x1f8>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0027d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c0027da:	051a      	lsls	r2, r3, #20
 c0027dc:	f140 8132 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c0027e4:	051b      	lsls	r3, r3, #20
 c0027e6:	d5f1      	bpl.n	c0027cc <HAL_RCC_OscConfig+0x1e4>
    if (pwrclkchanged == SET)
 c0027e8:	b125      	cbz	r5, c0027f4 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_DISABLE();
 c0027ea:	4a26      	ldr	r2, [pc, #152]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c0027ec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 c0027ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c0027f2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c0027f4:	6823      	ldr	r3, [r4, #0]
 c0027f6:	069a      	lsls	r2, r3, #26
 c0027f8:	d51f      	bpl.n	c00283a <HAL_RCC_OscConfig+0x252>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0027fa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      __HAL_RCC_HSI48_ENABLE();
 c0027fc:	4d21      	ldr	r5, [pc, #132]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0027fe:	2b00      	cmp	r3, #0
 c002800:	f000 81ac 	beq.w	c002b5c <HAL_RCC_OscConfig+0x574>
      __HAL_RCC_HSI48_ENABLE();
 c002804:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c002808:	f043 0301 	orr.w	r3, r3, #1
 c00280c:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 c002810:	f7ff faea 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002814:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 c002818:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00281a:	079b      	lsls	r3, r3, #30
 c00281c:	d40d      	bmi.n	c00283a <HAL_RCC_OscConfig+0x252>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00281e:	f7ff fae3 	bl	c001de8 <HAL_GetTick>
 c002822:	1b80      	subs	r0, r0, r6
 c002824:	2802      	cmp	r0, #2
 c002826:	d904      	bls.n	c002832 <HAL_RCC_OscConfig+0x24a>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002828:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c00282c:	079f      	lsls	r7, r3, #30
 c00282e:	f140 8109 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002832:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c002836:	0799      	lsls	r1, r3, #30
 c002838:	d5f1      	bpl.n	c00281e <HAL_RCC_OscConfig+0x236>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c00283a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 c00283c:	2b00      	cmp	r3, #0
 c00283e:	d031      	beq.n	c0028a4 <HAL_RCC_OscConfig+0x2bc>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002840:	4d10      	ldr	r5, [pc, #64]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002842:	68aa      	ldr	r2, [r5, #8]
 c002844:	f002 020c 	and.w	r2, r2, #12
 c002848:	2a0c      	cmp	r2, #12
 c00284a:	f000 8200 	beq.w	c002c4e <HAL_RCC_OscConfig+0x666>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00284e:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 c002850:	682b      	ldr	r3, [r5, #0]
 c002852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 c002856:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c002858:	f000 823d 	beq.w	c002cd6 <HAL_RCC_OscConfig+0x6ee>
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c00285c:	682b      	ldr	r3, [r5, #0]
 c00285e:	f013 5f20 	tst.w	r3, #671088640	@ 0x28000000
 c002862:	f000 81d2 	beq.w	c002c0a <HAL_RCC_OscConfig+0x622>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c002866:	4c07      	ldr	r4, [pc, #28]	@ (c002884 <HAL_RCC_OscConfig+0x29c>)
 c002868:	68e3      	ldr	r3, [r4, #12]
 c00286a:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 c00286e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c002872:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 c002874:	f7ff fab8 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002878:	6823      	ldr	r3, [r4, #0]
        tickstart = HAL_GetTick();
 c00287a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00287c:	0199      	lsls	r1, r3, #6
 c00287e:	d511      	bpl.n	c0028a4 <HAL_RCC_OscConfig+0x2bc>
 c002880:	e004      	b.n	c00288c <HAL_RCC_OscConfig+0x2a4>
 c002882:	bf00      	nop
 c002884:	50021000 	.word	0x50021000
 c002888:	50007000 	.word	0x50007000
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00288c:	f7ff faac 	bl	c001de8 <HAL_GetTick>
 c002890:	1b40      	subs	r0, r0, r5
 c002892:	2802      	cmp	r0, #2
 c002894:	d903      	bls.n	c00289e <HAL_RCC_OscConfig+0x2b6>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002896:	6823      	ldr	r3, [r4, #0]
 c002898:	019a      	lsls	r2, r3, #6
 c00289a:	f100 80d3 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00289e:	6823      	ldr	r3, [r4, #0]
 c0028a0:	019b      	lsls	r3, r3, #6
 c0028a2:	d4f3      	bmi.n	c00288c <HAL_RCC_OscConfig+0x2a4>
  return HAL_OK;
 c0028a4:	2000      	movs	r0, #0
}
 c0028a6:	b002      	add	sp, #8
 c0028a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0028ac:	2d04      	cmp	r5, #4
 c0028ae:	d078      	beq.n	c0029a2 <HAL_RCC_OscConfig+0x3ba>
 c0028b0:	2d0c      	cmp	r5, #12
 c0028b2:	d074      	beq.n	c00299e <HAL_RCC_OscConfig+0x3b6>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0028b4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 c0028b6:	4d99      	ldr	r5, [pc, #612]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0028b8:	2b00      	cmp	r3, #0
 c0028ba:	f000 8137 	beq.w	c002b2c <HAL_RCC_OscConfig+0x544>
        __HAL_RCC_HSI_ENABLE();
 c0028be:	682b      	ldr	r3, [r5, #0]
 c0028c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c0028c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c0028c6:	f7ff fa8f 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028ca:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c0028cc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028ce:	055f      	lsls	r7, r3, #21
 c0028d0:	d40b      	bmi.n	c0028ea <HAL_RCC_OscConfig+0x302>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0028d2:	f7ff fa89 	bl	c001de8 <HAL_GetTick>
 c0028d6:	1b80      	subs	r0, r0, r6
 c0028d8:	2802      	cmp	r0, #2
 c0028da:	d903      	bls.n	c0028e4 <HAL_RCC_OscConfig+0x2fc>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028dc:	682b      	ldr	r3, [r5, #0]
 c0028de:	0559      	lsls	r1, r3, #21
 c0028e0:	f140 80b0 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0028e4:	682b      	ldr	r3, [r5, #0]
 c0028e6:	055a      	lsls	r2, r3, #21
 c0028e8:	d5f3      	bpl.n	c0028d2 <HAL_RCC_OscConfig+0x2ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0028ea:	4a8c      	ldr	r2, [pc, #560]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c0028ec:	6921      	ldr	r1, [r4, #16]
 c0028ee:	6853      	ldr	r3, [r2, #4]
 c0028f0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 c0028f4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 c0028f8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0028fa:	6823      	ldr	r3, [r4, #0]
 c0028fc:	e6ee      	b.n	c0026dc <HAL_RCC_OscConfig+0xf4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0028fe:	2e01      	cmp	r6, #1
 c002900:	f47f ae89 	bne.w	c002616 <HAL_RCC_OscConfig+0x2e>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002904:	4b85      	ldr	r3, [pc, #532]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002906:	681b      	ldr	r3, [r3, #0]
 c002908:	0798      	lsls	r0, r3, #30
 c00290a:	d438      	bmi.n	c00297e <HAL_RCC_OscConfig+0x396>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c00290c:	4b83      	ldr	r3, [pc, #524]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c00290e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 c002910:	681a      	ldr	r2, [r3, #0]
 c002912:	0711      	lsls	r1, r2, #28
 c002914:	bf56      	itet	pl
 c002916:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 c00291a:	681b      	ldrmi	r3, [r3, #0]
 c00291c:	091b      	lsrpl	r3, r3, #4
 c00291e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 c002922:	4298      	cmp	r0, r3
 c002924:	f200 8151 	bhi.w	c002bca <HAL_RCC_OscConfig+0x5e2>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002928:	4b7c      	ldr	r3, [pc, #496]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c00292a:	681a      	ldr	r2, [r3, #0]
 c00292c:	f042 0208 	orr.w	r2, r2, #8
 c002930:	601a      	str	r2, [r3, #0]
 c002932:	681a      	ldr	r2, [r3, #0]
 c002934:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 c002938:	4302      	orrs	r2, r0
 c00293a:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00293c:	685a      	ldr	r2, [r3, #4]
 c00293e:	6a21      	ldr	r1, [r4, #32]
 c002940:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 c002944:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c002948:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00294a:	2d00      	cmp	r5, #0
 c00294c:	f000 81b3 	beq.w	c002cb6 <HAL_RCC_OscConfig+0x6ce>
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002950:	f7ff fdf2 	bl	c002538 <HAL_RCC_GetSysClockFreq>
 c002954:	4603      	mov	r3, r0
 c002956:	4a71      	ldr	r2, [pc, #452]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002958:	4971      	ldr	r1, [pc, #452]	@ (c002b20 <HAL_RCC_OscConfig+0x538>)
 c00295a:	6892      	ldr	r2, [r2, #8]
 c00295c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c002960:	5c89      	ldrb	r1, [r1, r2]
        status = HAL_InitTick(uwTickPrio);
 c002962:	4a70      	ldr	r2, [pc, #448]	@ (c002b24 <HAL_RCC_OscConfig+0x53c>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002964:	40cb      	lsrs	r3, r1
        status = HAL_InitTick(uwTickPrio);
 c002966:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002968:	4a6f      	ldr	r2, [pc, #444]	@ (c002b28 <HAL_RCC_OscConfig+0x540>)
 c00296a:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 c00296c:	f7ff f9f8 	bl	c001d60 <HAL_InitTick>
        if (status != HAL_OK)
 c002970:	2800      	cmp	r0, #0
 c002972:	d198      	bne.n	c0028a6 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002974:	6823      	ldr	r3, [r4, #0]
 c002976:	07da      	lsls	r2, r3, #31
 c002978:	f57f aead 	bpl.w	c0026d6 <HAL_RCC_OscConfig+0xee>
 c00297c:	e67c      	b.n	c002678 <HAL_RCC_OscConfig+0x90>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00297e:	69e3      	ldr	r3, [r4, #28]
 c002980:	2b00      	cmp	r3, #0
 c002982:	d1c3      	bne.n	c00290c <HAL_RCC_OscConfig+0x324>
    return HAL_ERROR;
 c002984:	2001      	movs	r0, #1
 c002986:	e78e      	b.n	c0028a6 <HAL_RCC_OscConfig+0x2be>
      __HAL_RCC_PWR_CLK_ENABLE();
 c002988:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
      pwrclkchanged = SET;
 c00298a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c00298c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 c002990:	659a      	str	r2, [r3, #88]	@ 0x58
 c002992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c002994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c002998:	9301      	str	r3, [sp, #4]
 c00299a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 c00299c:	e6d4      	b.n	c002748 <HAL_RCC_OscConfig+0x160>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00299e:	2e02      	cmp	r6, #2
 c0029a0:	d188      	bne.n	c0028b4 <HAL_RCC_OscConfig+0x2cc>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0029a2:	4a5e      	ldr	r2, [pc, #376]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c0029a4:	6812      	ldr	r2, [r2, #0]
 c0029a6:	0552      	lsls	r2, r2, #21
 c0029a8:	d502      	bpl.n	c0029b0 <HAL_RCC_OscConfig+0x3c8>
 c0029aa:	68e2      	ldr	r2, [r4, #12]
 c0029ac:	2a00      	cmp	r2, #0
 c0029ae:	d0e9      	beq.n	c002984 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0029b0:	495a      	ldr	r1, [pc, #360]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c0029b2:	6920      	ldr	r0, [r4, #16]
 c0029b4:	684a      	ldr	r2, [r1, #4]
 c0029b6:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 c0029ba:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 c0029be:	604a      	str	r2, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0029c0:	e68c      	b.n	c0026dc <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_LSI_DISABLE();
 c0029c2:	4d56      	ldr	r5, [pc, #344]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c0029c4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c0029c8:	f023 0301 	bic.w	r3, r3, #1
 c0029cc:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 c0029d0:	f7ff fa0a 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0029d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 c0029d8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0029da:	079a      	lsls	r2, r3, #30
 c0029dc:	f57f aeab 	bpl.w	c002736 <HAL_RCC_OscConfig+0x14e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0029e0:	f7ff fa02 	bl	c001de8 <HAL_GetTick>
 c0029e4:	1b80      	subs	r0, r0, r6
 c0029e6:	2807      	cmp	r0, #7
 c0029e8:	d903      	bls.n	c0029f2 <HAL_RCC_OscConfig+0x40a>
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0029ea:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c0029ee:	079b      	lsls	r3, r3, #30
 c0029f0:	d428      	bmi.n	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0029f2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 c0029f6:	079f      	lsls	r7, r3, #30
 c0029f8:	d4f2      	bmi.n	c0029e0 <HAL_RCC_OscConfig+0x3f8>
 c0029fa:	e69c      	b.n	c002736 <HAL_RCC_OscConfig+0x14e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0029fc:	2e03      	cmp	r6, #3
 c0029fe:	f47f ae41 	bne.w	c002684 <HAL_RCC_OscConfig+0x9c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c002a02:	4a46      	ldr	r2, [pc, #280]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002a04:	6812      	ldr	r2, [r2, #0]
 c002a06:	0397      	lsls	r7, r2, #14
 c002a08:	f57f ae65 	bpl.w	c0026d6 <HAL_RCC_OscConfig+0xee>
 c002a0c:	6862      	ldr	r2, [r4, #4]
 c002a0e:	2a00      	cmp	r2, #0
 c002a10:	f47f ae61 	bne.w	c0026d6 <HAL_RCC_OscConfig+0xee>
 c002a14:	e7b6      	b.n	c002984 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_MSI_DISABLE();
 c002a16:	683b      	ldr	r3, [r7, #0]
 c002a18:	f023 0301 	bic.w	r3, r3, #1
 c002a1c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c002a1e:	f7ff f9e3 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002a22:	683b      	ldr	r3, [r7, #0]
        tickstart = HAL_GetTick();
 c002a24:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002a26:	079a      	lsls	r2, r3, #30
 c002a28:	d403      	bmi.n	c002a32 <HAL_RCC_OscConfig+0x44a>
 c002a2a:	e7a3      	b.n	c002974 <HAL_RCC_OscConfig+0x38c>
 c002a2c:	683b      	ldr	r3, [r7, #0]
 c002a2e:	0799      	lsls	r1, r3, #30
 c002a30:	d5a0      	bpl.n	c002974 <HAL_RCC_OscConfig+0x38c>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002a32:	f7ff f9d9 	bl	c001de8 <HAL_GetTick>
 c002a36:	eba0 0008 	sub.w	r0, r0, r8
 c002a3a:	2802      	cmp	r0, #2
 c002a3c:	d9f6      	bls.n	c002a2c <HAL_RCC_OscConfig+0x444>
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002a3e:	683b      	ldr	r3, [r7, #0]
 c002a40:	079b      	lsls	r3, r3, #30
 c002a42:	d5f3      	bpl.n	c002a2c <HAL_RCC_OscConfig+0x444>
              return HAL_TIMEOUT;
 c002a44:	2003      	movs	r0, #3
}
 c002a46:	b002      	add	sp, #8
 c002a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c002a4c:	4a33      	ldr	r2, [pc, #204]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002a4e:	6813      	ldr	r3, [r2, #0]
 c002a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c002a54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 c002a56:	f7ff f9c7 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002a5a:	4f30      	ldr	r7, [pc, #192]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
        tickstart = HAL_GetTick();
 c002a5c:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002a5e:	683b      	ldr	r3, [r7, #0]
 c002a60:	0399      	lsls	r1, r3, #14
 c002a62:	f53f ae37 	bmi.w	c0026d4 <HAL_RCC_OscConfig+0xec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002a66:	f7ff f9bf 	bl	c001de8 <HAL_GetTick>
 c002a6a:	eba0 0008 	sub.w	r0, r0, r8
 c002a6e:	2864      	cmp	r0, #100	@ 0x64
 c002a70:	d902      	bls.n	c002a78 <HAL_RCC_OscConfig+0x490>
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002a72:	683b      	ldr	r3, [r7, #0]
 c002a74:	039a      	lsls	r2, r3, #14
 c002a76:	d5e5      	bpl.n	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002a78:	683b      	ldr	r3, [r7, #0]
 c002a7a:	039b      	lsls	r3, r3, #14
 c002a7c:	d5f3      	bpl.n	c002a66 <HAL_RCC_OscConfig+0x47e>
 c002a7e:	e629      	b.n	c0026d4 <HAL_RCC_OscConfig+0xec>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002a80:	4e26      	ldr	r6, [pc, #152]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002a82:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 c002a86:	f022 0201 	bic.w	r2, r2, #1
 c002a8a:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002a8e:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 c002a92:	f022 0204 	bic.w	r2, r2, #4
 c002a96:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002a9a:	2b00      	cmp	r3, #0
 c002a9c:	f47f ae6d 	bne.w	c00277a <HAL_RCC_OscConfig+0x192>
      tickstart = HAL_GetTick();
 c002aa0:	f7ff f9a2 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002aa4:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
      tickstart = HAL_GetTick();
 c002aa8:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002aaa:	0799      	lsls	r1, r3, #30
 c002aac:	d50e      	bpl.n	c002acc <HAL_RCC_OscConfig+0x4e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002aae:	f241 3888 	movw	r8, #5000	@ 0x1388
 c002ab2:	f7ff f999 	bl	c001de8 <HAL_GetTick>
 c002ab6:	1bc0      	subs	r0, r0, r7
 c002ab8:	4540      	cmp	r0, r8
 c002aba:	d903      	bls.n	c002ac4 <HAL_RCC_OscConfig+0x4dc>
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002abc:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002ac0:	079b      	lsls	r3, r3, #30
 c002ac2:	d4bf      	bmi.n	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002ac4:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002ac8:	0799      	lsls	r1, r3, #30
 c002aca:	d4f2      	bmi.n	c002ab2 <HAL_RCC_OscConfig+0x4ca>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c002acc:	4e13      	ldr	r6, [pc, #76]	@ (c002b1c <HAL_RCC_OscConfig+0x534>)
 c002ace:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002ad2:	061a      	lsls	r2, r3, #24
 c002ad4:	f57f ae88 	bpl.w	c0027e8 <HAL_RCC_OscConfig+0x200>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002ad8:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002ae0:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002ae4:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002ae8:	051a      	lsls	r2, r3, #20
 c002aea:	f57f ae7d 	bpl.w	c0027e8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002aee:	f241 3888 	movw	r8, #5000	@ 0x1388
 c002af2:	f7ff f979 	bl	c001de8 <HAL_GetTick>
 c002af6:	1bc0      	subs	r0, r0, r7
 c002af8:	4540      	cmp	r0, r8
 c002afa:	d903      	bls.n	c002b04 <HAL_RCC_OscConfig+0x51c>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002afc:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002b00:	051b      	lsls	r3, r3, #20
 c002b02:	d49f      	bmi.n	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002b04:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 c002b08:	0519      	lsls	r1, r3, #20
 c002b0a:	d4f2      	bmi.n	c002af2 <HAL_RCC_OscConfig+0x50a>
 c002b0c:	e66c      	b.n	c0027e8 <HAL_RCC_OscConfig+0x200>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c002b0e:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 c002b12:	f043 0310 	orr.w	r3, r3, #16
 c002b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 c002b1a:	e5f0      	b.n	c0026fe <HAL_RCC_OscConfig+0x116>
 c002b1c:	50021000 	.word	0x50021000
 c002b20:	0c00518c 	.word	0x0c00518c
 c002b24:	30000028 	.word	0x30000028
 c002b28:	30000020 	.word	0x30000020
        __HAL_RCC_HSI_DISABLE();
 c002b2c:	682b      	ldr	r3, [r5, #0]
 c002b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 c002b32:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c002b34:	f7ff f958 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002b38:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c002b3a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002b3c:	055b      	lsls	r3, r3, #21
 c002b3e:	d50b      	bpl.n	c002b58 <HAL_RCC_OscConfig+0x570>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002b40:	f7ff f952 	bl	c001de8 <HAL_GetTick>
 c002b44:	1b80      	subs	r0, r0, r6
 c002b46:	2802      	cmp	r0, #2
 c002b48:	d903      	bls.n	c002b52 <HAL_RCC_OscConfig+0x56a>
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002b4a:	682b      	ldr	r3, [r5, #0]
 c002b4c:	055f      	lsls	r7, r3, #21
 c002b4e:	f53f af79 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002b52:	682b      	ldr	r3, [r5, #0]
 c002b54:	0559      	lsls	r1, r3, #21
 c002b56:	d4f3      	bmi.n	c002b40 <HAL_RCC_OscConfig+0x558>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002b58:	6823      	ldr	r3, [r4, #0]
 c002b5a:	e5bf      	b.n	c0026dc <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_HSI48_DISABLE();
 c002b5c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c002b60:	f023 0301 	bic.w	r3, r3, #1
 c002b64:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 c002b68:	f7ff f93e 	bl	c001de8 <HAL_GetTick>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002b6c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 c002b70:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002b72:	079a      	lsls	r2, r3, #30
 c002b74:	f57f ae61 	bpl.w	c00283a <HAL_RCC_OscConfig+0x252>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002b78:	f7ff f936 	bl	c001de8 <HAL_GetTick>
 c002b7c:	1b80      	subs	r0, r0, r6
 c002b7e:	2802      	cmp	r0, #2
 c002b80:	d904      	bls.n	c002b8c <HAL_RCC_OscConfig+0x5a4>
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002b82:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c002b86:	079b      	lsls	r3, r3, #30
 c002b88:	f53f af5c 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002b8c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 c002b90:	079f      	lsls	r7, r3, #30
 c002b92:	d4f1      	bmi.n	c002b78 <HAL_RCC_OscConfig+0x590>
 c002b94:	e651      	b.n	c00283a <HAL_RCC_OscConfig+0x252>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002b96:	6833      	ldr	r3, [r6, #0]
 c002b98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c002b9c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 c002b9e:	f7ff f923 	bl	c001de8 <HAL_GetTick>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002ba2:	6833      	ldr	r3, [r6, #0]
      tickstart = HAL_GetTick();
 c002ba4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002ba6:	05db      	lsls	r3, r3, #23
 c002ba8:	f53f add3 	bmi.w	c002752 <HAL_RCC_OscConfig+0x16a>
 c002bac:	e003      	b.n	c002bb6 <HAL_RCC_OscConfig+0x5ce>
 c002bae:	6833      	ldr	r3, [r6, #0]
 c002bb0:	05d9      	lsls	r1, r3, #23
 c002bb2:	f53f adce 	bmi.w	c002752 <HAL_RCC_OscConfig+0x16a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002bb6:	f7ff f917 	bl	c001de8 <HAL_GetTick>
 c002bba:	1bc0      	subs	r0, r0, r7
 c002bbc:	2802      	cmp	r0, #2
 c002bbe:	d9f6      	bls.n	c002bae <HAL_RCC_OscConfig+0x5c6>
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002bc0:	6833      	ldr	r3, [r6, #0]
 c002bc2:	05d8      	lsls	r0, r3, #23
 c002bc4:	f57f af3e 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
 c002bc8:	e7f1      	b.n	c002bae <HAL_RCC_OscConfig+0x5c6>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002bca:	f7ff fc73 	bl	c0024b4 <RCC_SetFlashLatencyFromMSIRange>
 c002bce:	2800      	cmp	r0, #0
 c002bd0:	f47f aed8 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002bd4:	4b65      	ldr	r3, [pc, #404]	@ (c002d6c <HAL_RCC_OscConfig+0x784>)
 c002bd6:	681a      	ldr	r2, [r3, #0]
 c002bd8:	f042 0208 	orr.w	r2, r2, #8
 c002bdc:	601a      	str	r2, [r3, #0]
 c002bde:	681a      	ldr	r2, [r3, #0]
 c002be0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 c002be2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 c002be6:	430a      	orrs	r2, r1
 c002be8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002bea:	685a      	ldr	r2, [r3, #4]
 c002bec:	6a21      	ldr	r1, [r4, #32]
 c002bee:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 c002bf2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c002bf6:	605a      	str	r2, [r3, #4]
 c002bf8:	e6aa      	b.n	c002950 <HAL_RCC_OscConfig+0x368>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002bfa:	4a5c      	ldr	r2, [pc, #368]	@ (c002d6c <HAL_RCC_OscConfig+0x784>)
 c002bfc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 c002c00:	f043 0301 	orr.w	r3, r3, #1
 c002c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002c08:	e5b7      	b.n	c00277a <HAL_RCC_OscConfig+0x192>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c002c0a:	68eb      	ldr	r3, [r5, #12]
 c002c0c:	f023 0303 	bic.w	r3, r3, #3
 c002c10:	60eb      	str	r3, [r5, #12]
 c002c12:	e628      	b.n	c002866 <HAL_RCC_OscConfig+0x27e>
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002c14:	4f55      	ldr	r7, [pc, #340]	@ (c002d6c <HAL_RCC_OscConfig+0x784>)
 c002c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c002c1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c002c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002c22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c002c26:	0519      	lsls	r1, r3, #20
 c002c28:	f57f adde 	bpl.w	c0027e8 <HAL_RCC_OscConfig+0x200>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002c2c:	f241 3888 	movw	r8, #5000	@ 0x1388
 c002c30:	f7ff f8da 	bl	c001de8 <HAL_GetTick>
 c002c34:	1b80      	subs	r0, r0, r6
 c002c36:	4540      	cmp	r0, r8
 c002c38:	d904      	bls.n	c002c44 <HAL_RCC_OscConfig+0x65c>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002c3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c002c3e:	051a      	lsls	r2, r3, #20
 c002c40:	f53f af00 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 c002c48:	051b      	lsls	r3, r3, #20
 c002c4a:	d4f1      	bmi.n	c002c30 <HAL_RCC_OscConfig+0x648>
 c002c4c:	e5cc      	b.n	c0027e8 <HAL_RCC_OscConfig+0x200>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002c4e:	2b01      	cmp	r3, #1
 c002c50:	f43f ae98 	beq.w	c002984 <HAL_RCC_OscConfig+0x39c>
        pll_config = RCC->PLLCFGR;
 c002c54:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002c56:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 c002c58:	f003 0103 	and.w	r1, r3, #3
 c002c5c:	4291      	cmp	r1, r2
 c002c5e:	f47f ae91 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002c62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 c002c64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 c002c68:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002c6a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 c002c6e:	f47f ae89 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002c72:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 c002c74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002c78:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 c002c7c:	f47f ae82 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002c80:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 c002c82:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002c86:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 c002c8a:	f47f ae7b 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002c8e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 c002c90:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 c002c94:	0852      	lsrs	r2, r2, #1
 c002c96:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002c98:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 c002c9c:	f47f ae72 	bne.w	c002984 <HAL_RCC_OscConfig+0x39c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c002ca0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 c002ca2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 c002ca6:	0852      	lsrs	r2, r2, #1
 c002ca8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002caa:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 c002cae:	bf14      	ite	ne
 c002cb0:	2001      	movne	r0, #1
 c002cb2:	2000      	moveq	r0, #0
 c002cb4:	e5f7      	b.n	c0028a6 <HAL_RCC_OscConfig+0x2be>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002cb6:	f7ff fbfd 	bl	c0024b4 <RCC_SetFlashLatencyFromMSIRange>
 c002cba:	2800      	cmp	r0, #0
 c002cbc:	f43f ae48 	beq.w	c002950 <HAL_RCC_OscConfig+0x368>
 c002cc0:	e660      	b.n	c002984 <HAL_RCC_OscConfig+0x39c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c002cc2:	4b2a      	ldr	r3, [pc, #168]	@ (c002d6c <HAL_RCC_OscConfig+0x784>)
 c002cc4:	681a      	ldr	r2, [r3, #0]
 c002cc6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 c002cca:	601a      	str	r2, [r3, #0]
 c002ccc:	681a      	ldr	r2, [r3, #0]
 c002cce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 c002cd2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002cd4:	e6bf      	b.n	c002a56 <HAL_RCC_OscConfig+0x46e>
        tickstart = HAL_GetTick();
 c002cd6:	f7ff f887 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002cda:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c002cdc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002cde:	0199      	lsls	r1, r3, #6
 c002ce0:	d50b      	bpl.n	c002cfa <HAL_RCC_OscConfig+0x712>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002ce2:	f7ff f881 	bl	c001de8 <HAL_GetTick>
 c002ce6:	1b80      	subs	r0, r0, r6
 c002ce8:	2802      	cmp	r0, #2
 c002cea:	d903      	bls.n	c002cf4 <HAL_RCC_OscConfig+0x70c>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002cec:	682b      	ldr	r3, [r5, #0]
 c002cee:	019b      	lsls	r3, r3, #6
 c002cf0:	f53f aea8 	bmi.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002cf4:	682b      	ldr	r3, [r5, #0]
 c002cf6:	019f      	lsls	r7, r3, #6
 c002cf8:	d4f3      	bmi.n	c002ce2 <HAL_RCC_OscConfig+0x6fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c002cfa:	4d1c      	ldr	r5, [pc, #112]	@ (c002d6c <HAL_RCC_OscConfig+0x784>)
 c002cfc:	4b1c      	ldr	r3, [pc, #112]	@ (c002d70 <HAL_RCC_OscConfig+0x788>)
 c002cfe:	68e9      	ldr	r1, [r5, #12]
 c002d00:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 c002d02:	400b      	ands	r3, r1
 c002d04:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 c002d06:	4313      	orrs	r3, r2
 c002d08:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	@ 0x38
 c002d0c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c002d10:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 c002d14:	3801      	subs	r0, #1
 c002d16:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	@ 0x40
 c002d1a:	0849      	lsrs	r1, r1, #1
 c002d1c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 c002d20:	3901      	subs	r1, #1
 c002d22:	0852      	lsrs	r2, r2, #1
 c002d24:	3a01      	subs	r2, #1
 c002d26:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 c002d2a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 c002d2e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 c002d30:	682b      	ldr	r3, [r5, #0]
 c002d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c002d36:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c002d38:	68eb      	ldr	r3, [r5, #12]
 c002d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 c002d3e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 c002d40:	f7ff f852 	bl	c001de8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002d44:	682b      	ldr	r3, [r5, #0]
        tickstart = HAL_GetTick();
 c002d46:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002d48:	019a      	lsls	r2, r3, #6
 c002d4a:	f53f adab 	bmi.w	c0028a4 <HAL_RCC_OscConfig+0x2bc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002d4e:	f7ff f84b 	bl	c001de8 <HAL_GetTick>
 c002d52:	1b00      	subs	r0, r0, r4
 c002d54:	2802      	cmp	r0, #2
 c002d56:	d903      	bls.n	c002d60 <HAL_RCC_OscConfig+0x778>
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002d58:	682b      	ldr	r3, [r5, #0]
 c002d5a:	019e      	lsls	r6, r3, #6
 c002d5c:	f57f ae72 	bpl.w	c002a44 <HAL_RCC_OscConfig+0x45c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002d60:	682b      	ldr	r3, [r5, #0]
 c002d62:	0198      	lsls	r0, r3, #6
 c002d64:	d5f3      	bpl.n	c002d4e <HAL_RCC_OscConfig+0x766>
 c002d66:	e59d      	b.n	c0028a4 <HAL_RCC_OscConfig+0x2bc>
    return HAL_ERROR;
 c002d68:	2001      	movs	r0, #1
}
 c002d6a:	4770      	bx	lr
 c002d6c:	50021000 	.word	0x50021000
 c002d70:	019f800c 	.word	0x019f800c

0c002d74 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 c002d74:	2800      	cmp	r0, #0
 c002d76:	f000 80b9 	beq.w	c002eec <HAL_RCC_ClockConfig+0x178>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002d7a:	4a8a      	ldr	r2, [pc, #552]	@ (c002fa4 <HAL_RCC_ClockConfig+0x230>)
{
 c002d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002d80:	6813      	ldr	r3, [r2, #0]
 c002d82:	4681      	mov	r9, r0
 c002d84:	f003 030f 	and.w	r3, r3, #15
 c002d88:	428b      	cmp	r3, r1
 c002d8a:	460c      	mov	r4, r1
 c002d8c:	d20c      	bcs.n	c002da8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002d8e:	6813      	ldr	r3, [r2, #0]
 c002d90:	f023 030f 	bic.w	r3, r3, #15
 c002d94:	430b      	orrs	r3, r1
 c002d96:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002d98:	6813      	ldr	r3, [r2, #0]
 c002d9a:	f003 030f 	and.w	r3, r3, #15
 c002d9e:	428b      	cmp	r3, r1
 c002da0:	d002      	beq.n	c002da8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 c002da2:	2001      	movs	r0, #1
}
 c002da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c002da8:	f8d9 3000 	ldr.w	r3, [r9]
 c002dac:	07de      	lsls	r6, r3, #31
 c002dae:	d54a      	bpl.n	c002e46 <HAL_RCC_ClockConfig+0xd2>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c002db0:	f8d9 6004 	ldr.w	r6, [r9, #4]
 c002db4:	2e03      	cmp	r6, #3
 c002db6:	f000 809b 	beq.w	c002ef0 <HAL_RCC_ClockConfig+0x17c>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002dba:	4b7b      	ldr	r3, [pc, #492]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002dbc:	2e02      	cmp	r6, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002dbe:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002dc0:	f000 8083 	beq.w	c002eca <HAL_RCC_ClockConfig+0x156>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c002dc4:	2e00      	cmp	r6, #0
 c002dc6:	f040 80d0 	bne.w	c002f6a <HAL_RCC_ClockConfig+0x1f6>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002dca:	079d      	lsls	r5, r3, #30
 c002dcc:	d5e9      	bpl.n	c002da2 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002dce:	f7ff fbb3 	bl	c002538 <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 c002dd2:	4b76      	ldr	r3, [pc, #472]	@ (c002fac <HAL_RCC_ClockConfig+0x238>)
 c002dd4:	4298      	cmp	r0, r3
 c002dd6:	f240 80c5 	bls.w	c002f64 <HAL_RCC_ClockConfig+0x1f0>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002dda:	4a73      	ldr	r2, [pc, #460]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002ddc:	6893      	ldr	r3, [r2, #8]
 c002dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c002de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c002de6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002de8:	f04f 0880 	mov.w	r8, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c002dec:	4d6e      	ldr	r5, [pc, #440]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002dee:	68ab      	ldr	r3, [r5, #8]
 c002df0:	f023 0303 	bic.w	r3, r3, #3
 c002df4:	4333      	orrs	r3, r6
 c002df6:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 c002df8:	f7fe fff6 	bl	c001de8 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002dfc:	68ab      	ldr	r3, [r5, #8]
 c002dfe:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c002e02:	f003 030c 	and.w	r3, r3, #12
 c002e06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
    tickstart = HAL_GetTick();
 c002e0a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002e0c:	d061      	beq.n	c002ed2 <HAL_RCC_ClockConfig+0x15e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002e0e:	f241 3788 	movw	r7, #5000	@ 0x1388
 c002e12:	e007      	b.n	c002e24 <HAL_RCC_ClockConfig+0xb0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002e14:	f8d9 2004 	ldr.w	r2, [r9, #4]
 c002e18:	0092      	lsls	r2, r2, #2
 c002e1a:	68ab      	ldr	r3, [r5, #8]
 c002e1c:	f003 030c 	and.w	r3, r3, #12
 c002e20:	4293      	cmp	r3, r2
 c002e22:	d056      	beq.n	c002ed2 <HAL_RCC_ClockConfig+0x15e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002e24:	f7fe ffe0 	bl	c001de8 <HAL_GetTick>
 c002e28:	1b83      	subs	r3, r0, r6
 c002e2a:	42bb      	cmp	r3, r7
 c002e2c:	d9f2      	bls.n	c002e14 <HAL_RCC_ClockConfig+0xa0>
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002e2e:	68ab      	ldr	r3, [r5, #8]
 c002e30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 c002e34:	f003 030c 	and.w	r3, r3, #12
 c002e38:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
 c002e3c:	ea4f 0281 	mov.w	r2, r1, lsl #2
 c002e40:	d0eb      	beq.n	c002e1a <HAL_RCC_ClockConfig+0xa6>
          return HAL_TIMEOUT;
 c002e42:	2003      	movs	r0, #3
 c002e44:	e7ae      	b.n	c002da4 <HAL_RCC_ClockConfig+0x30>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002e46:	079d      	lsls	r5, r3, #30
 c002e48:	d436      	bmi.n	c002eb8 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c002e4a:	4956      	ldr	r1, [pc, #344]	@ (c002fa4 <HAL_RCC_ClockConfig+0x230>)
 c002e4c:	680a      	ldr	r2, [r1, #0]
 c002e4e:	f002 020f 	and.w	r2, r2, #15
 c002e52:	42a2      	cmp	r2, r4
 c002e54:	d909      	bls.n	c002e6a <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002e56:	680a      	ldr	r2, [r1, #0]
 c002e58:	f022 020f 	bic.w	r2, r2, #15
 c002e5c:	4322      	orrs	r2, r4
 c002e5e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002e60:	680a      	ldr	r2, [r1, #0]
 c002e62:	f002 020f 	and.w	r2, r2, #15
 c002e66:	42a2      	cmp	r2, r4
 c002e68:	d19b      	bne.n	c002da2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c002e6a:	075a      	lsls	r2, r3, #29
 c002e6c:	d507      	bpl.n	c002e7e <HAL_RCC_ClockConfig+0x10a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002e6e:	494e      	ldr	r1, [pc, #312]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002e70:	f8d9 000c 	ldr.w	r0, [r9, #12]
 c002e74:	688a      	ldr	r2, [r1, #8]
 c002e76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 c002e7a:	4302      	orrs	r2, r0
 c002e7c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002e7e:	071b      	lsls	r3, r3, #28
 c002e80:	d508      	bpl.n	c002e94 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002e82:	4a49      	ldr	r2, [pc, #292]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002e84:	f8d9 1010 	ldr.w	r1, [r9, #16]
 c002e88:	6893      	ldr	r3, [r2, #8]
 c002e8a:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 c002e8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 c002e92:	6093      	str	r3, [r2, #8]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002e94:	f7ff fb50 	bl	c002538 <HAL_RCC_GetSysClockFreq>
 c002e98:	4603      	mov	r3, r0
 c002e9a:	4a43      	ldr	r2, [pc, #268]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002e9c:	4944      	ldr	r1, [pc, #272]	@ (c002fb0 <HAL_RCC_ClockConfig+0x23c>)
 c002e9e:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 c002ea0:	4844      	ldr	r0, [pc, #272]	@ (c002fb4 <HAL_RCC_ClockConfig+0x240>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002ea2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 c002ea6:	5c89      	ldrb	r1, [r1, r2]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002ea8:	4a43      	ldr	r2, [pc, #268]	@ (c002fb8 <HAL_RCC_ClockConfig+0x244>)
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002eaa:	40cb      	lsrs	r3, r1
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002eac:	6013      	str	r3, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 c002eae:	6800      	ldr	r0, [r0, #0]
}
 c002eb0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 c002eb4:	f7fe bf54 	b.w	c001d60 <HAL_InitTick>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002eb8:	493b      	ldr	r1, [pc, #236]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002eba:	f8d9 0008 	ldr.w	r0, [r9, #8]
 c002ebe:	688a      	ldr	r2, [r1, #8]
 c002ec0:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 c002ec4:	4302      	orrs	r2, r0
 c002ec6:	608a      	str	r2, [r1, #8]
 c002ec8:	e7bf      	b.n	c002e4a <HAL_RCC_ClockConfig+0xd6>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002eca:	039f      	lsls	r7, r3, #14
 c002ecc:	f53f af7f 	bmi.w	c002dce <HAL_RCC_ClockConfig+0x5a>
 c002ed0:	e767      	b.n	c002da2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002ed2:	f8d9 3000 	ldr.w	r3, [r9]
 c002ed6:	0799      	lsls	r1, r3, #30
 c002ed8:	d4ee      	bmi.n	c002eb8 <HAL_RCC_ClockConfig+0x144>
    if (hpre == RCC_SYSCLK_DIV2)
 c002eda:	f1b8 0f00 	cmp.w	r8, #0
 c002ede:	d0b4      	beq.n	c002e4a <HAL_RCC_ClockConfig+0xd6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c002ee0:	4931      	ldr	r1, [pc, #196]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002ee2:	688a      	ldr	r2, [r1, #8]
 c002ee4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 c002ee8:	608a      	str	r2, [r1, #8]
 c002eea:	e7ae      	b.n	c002e4a <HAL_RCC_ClockConfig+0xd6>
    return HAL_ERROR;
 c002eec:	2001      	movs	r0, #1
}
 c002eee:	4770      	bx	lr
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002ef0:	4a2d      	ldr	r2, [pc, #180]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002ef2:	6811      	ldr	r1, [r2, #0]
 c002ef4:	0188      	lsls	r0, r1, #6
 c002ef6:	f57f af54 	bpl.w	c002da2 <HAL_RCC_ClockConfig+0x2e>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c002efa:	68d1      	ldr	r1, [r2, #12]
 c002efc:	f001 0103 	and.w	r1, r1, #3
 c002f00:	2901      	cmp	r1, #1
 c002f02:	d036      	beq.n	c002f72 <HAL_RCC_ClockConfig+0x1fe>
  uint32_t msirange = 0U;
 c002f04:	2700      	movs	r7, #0
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002f06:	4d28      	ldr	r5, [pc, #160]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
 c002f08:	68e8      	ldr	r0, [r5, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002f0a:	68ea      	ldr	r2, [r5, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002f0c:	f000 0003 	and.w	r0, r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002f10:	f3c2 1203 	ubfx	r2, r2, #4, #4

  switch (pllsource)
 c002f14:	2802      	cmp	r0, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002f16:	f102 0101 	add.w	r1, r2, #1
  switch (pllsource)
 c002f1a:	d039      	beq.n	c002f90 <HAL_RCC_ClockConfig+0x21c>
 c002f1c:	2803      	cmp	r0, #3
 c002f1e:	d037      	beq.n	c002f90 <HAL_RCC_ClockConfig+0x21c>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002f20:	fbb7 f7f1 	udiv	r7, r7, r1
 c002f24:	68ea      	ldr	r2, [r5, #12]
 c002f26:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002f2a:	fb07 f102 	mul.w	r1, r7, r2
      break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002f2e:	481e      	ldr	r0, [pc, #120]	@ (c002fa8 <HAL_RCC_ClockConfig+0x234>)
      if (pllfreq > 80000000U)
 c002f30:	4d1e      	ldr	r5, [pc, #120]	@ (c002fac <HAL_RCC_ClockConfig+0x238>)
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002f32:	68c2      	ldr	r2, [r0, #12]
 c002f34:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c002f38:	3201      	adds	r2, #1
 c002f3a:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco / pllr;
 c002f3c:	fbb1 f2f2 	udiv	r2, r1, r2
      if (pllfreq > 80000000U)
 c002f40:	42aa      	cmp	r2, r5
 c002f42:	d90f      	bls.n	c002f64 <HAL_RCC_ClockConfig+0x1f0>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002f44:	6882      	ldr	r2, [r0, #8]
 c002f46:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 c002f4a:	d004      	beq.n	c002f56 <HAL_RCC_ClockConfig+0x1e2>
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c002f4c:	079b      	lsls	r3, r3, #30
 c002f4e:	d509      	bpl.n	c002f64 <HAL_RCC_ClockConfig+0x1f0>
 c002f50:	f8d9 3008 	ldr.w	r3, [r9, #8]
 c002f54:	b933      	cbnz	r3, c002f64 <HAL_RCC_ClockConfig+0x1f0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002f56:	6883      	ldr	r3, [r0, #8]
 c002f58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 c002f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c002f60:	6083      	str	r3, [r0, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002f62:	e741      	b.n	c002de8 <HAL_RCC_ClockConfig+0x74>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c002f64:	f04f 0800 	mov.w	r8, #0
 c002f68:	e740      	b.n	c002dec <HAL_RCC_ClockConfig+0x78>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002f6a:	0558      	lsls	r0, r3, #21
 c002f6c:	f57f af19 	bpl.w	c002da2 <HAL_RCC_ClockConfig+0x2e>
 c002f70:	e72d      	b.n	c002dce <HAL_RCC_ClockConfig+0x5a>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002f72:	6811      	ldr	r1, [r2, #0]
 c002f74:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002f76:	bf54      	ite	pl
 c002f78:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002f7c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c002f7e:	490f      	ldr	r1, [pc, #60]	@ (c002fbc <HAL_RCC_ClockConfig+0x248>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002f80:	bf54      	ite	pl
 c002f82:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002f86:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c002f8a:	f851 7022 	ldr.w	r7, [r1, r2, lsl #2]
 c002f8e:	e7ba      	b.n	c002f06 <HAL_RCC_ClockConfig+0x192>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002f90:	480b      	ldr	r0, [pc, #44]	@ (c002fc0 <HAL_RCC_ClockConfig+0x24c>)
 c002f92:	68ea      	ldr	r2, [r5, #12]
 c002f94:	fbb0 f1f1 	udiv	r1, r0, r1
 c002f98:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c002f9c:	fb02 f101 	mul.w	r1, r2, r1
      break;
 c002fa0:	e7c5      	b.n	c002f2e <HAL_RCC_ClockConfig+0x1ba>
 c002fa2:	bf00      	nop
 c002fa4:	50022000 	.word	0x50022000
 c002fa8:	50021000 	.word	0x50021000
 c002fac:	04c4b400 	.word	0x04c4b400
 c002fb0:	0c00518c 	.word	0x0c00518c
 c002fb4:	30000028 	.word	0x30000028
 c002fb8:	30000020 	.word	0x30000020
 c002fbc:	0c005144 	.word	0x0c005144
 c002fc0:	00f42400 	.word	0x00f42400

0c002fc4 <HAL_RCC_GetPCLK1Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002fc4:	4a30      	ldr	r2, [pc, #192]	@ (c003088 <HAL_RCC_GetPCLK1Freq+0xc4>)
 c002fc6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002fc8:	68d1      	ldr	r1, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c002fca:	f013 020c 	ands.w	r2, r3, #12
 c002fce:	d019      	beq.n	c003004 <HAL_RCC_GetPCLK1Freq+0x40>
 c002fd0:	2a0c      	cmp	r2, #12
 c002fd2:	d048      	beq.n	c003066 <HAL_RCC_GetPCLK1Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c002fd4:	f46f 7188 	mvn.w	r1, #272	@ 0x110
 c002fd8:	fa41 f202 	asr.w	r2, r1, r2
    sysclockfreq = HSE_VALUE;
 c002fdc:	f012 0f01 	tst.w	r2, #1
 c002fe0:	4b2a      	ldr	r3, [pc, #168]	@ (c00308c <HAL_RCC_GetPCLK1Freq+0xc8>)
 c002fe2:	bf18      	it	ne
 c002fe4:	2300      	movne	r3, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002fe6:	4a28      	ldr	r2, [pc, #160]	@ (c003088 <HAL_RCC_GetPCLK1Freq+0xc4>)
 c002fe8:	4829      	ldr	r0, [pc, #164]	@ (c003090 <HAL_RCC_GetPCLK1Freq+0xcc>)
 c002fea:	6891      	ldr	r1, [r2, #8]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002fec:	6892      	ldr	r2, [r2, #8]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002fee:	f3c1 1103 	ubfx	r1, r1, #4, #4
 c002ff2:	5c41      	ldrb	r1, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c002ff4:	4827      	ldr	r0, [pc, #156]	@ (c003094 <HAL_RCC_GetPCLK1Freq+0xd0>)
 c002ff6:	f3c2 2202 	ubfx	r2, r2, #8, #3
 c002ffa:	5c80      	ldrb	r0, [r0, r2]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002ffc:	40cb      	lsrs	r3, r1
}
 c002ffe:	fa23 f000 	lsr.w	r0, r3, r0
 c003002:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003004:	4b20      	ldr	r3, [pc, #128]	@ (c003088 <HAL_RCC_GetPCLK1Freq+0xc4>)
 c003006:	6819      	ldr	r1, [r3, #0]
 c003008:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00300a:	bf54      	ite	pl
 c00300c:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003010:	681b      	ldrmi	r3, [r3, #0]
    msirange = MSIRangeTable[msirange];
 c003012:	4921      	ldr	r1, [pc, #132]	@ (c003098 <HAL_RCC_GetPCLK1Freq+0xd4>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003014:	bf54      	ite	pl
 c003016:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00301a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 c00301e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003022:	2a00      	cmp	r2, #0
 c003024:	d0df      	beq.n	c002fe6 <HAL_RCC_GetPCLK1Freq+0x22>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003026:	2a0c      	cmp	r2, #12
 c003028:	d12b      	bne.n	c003082 <HAL_RCC_GetPCLK1Freq+0xbe>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00302a:	4817      	ldr	r0, [pc, #92]	@ (c003088 <HAL_RCC_GetPCLK1Freq+0xc4>)
 c00302c:	68c1      	ldr	r1, [r0, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00302e:	68c2      	ldr	r2, [r0, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003030:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003034:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 c003038:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00303a:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 c00303e:	d001      	beq.n	c003044 <HAL_RCC_GetPCLK1Freq+0x80>
 c003040:	2903      	cmp	r1, #3
 c003042:	d116      	bne.n	c003072 <HAL_RCC_GetPCLK1Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003044:	4911      	ldr	r1, [pc, #68]	@ (c00308c <HAL_RCC_GetPCLK1Freq+0xc8>)
 c003046:	68c3      	ldr	r3, [r0, #12]
 c003048:	fbb1 f2f2 	udiv	r2, r1, r2
 c00304c:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c003050:	fb02 f303 	mul.w	r3, r2, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003054:	4a0c      	ldr	r2, [pc, #48]	@ (c003088 <HAL_RCC_GetPCLK1Freq+0xc4>)
 c003056:	68d2      	ldr	r2, [r2, #12]
 c003058:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c00305c:	3201      	adds	r2, #1
 c00305e:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco / pllr;
 c003060:	fbb3 f3f2 	udiv	r3, r3, r2
 c003064:	e7bf      	b.n	c002fe6 <HAL_RCC_GetPCLK1Freq+0x22>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003066:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00306a:	2901      	cmp	r1, #1
 c00306c:	d0ca      	beq.n	c003004 <HAL_RCC_GetPCLK1Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c00306e:	2300      	movs	r3, #0
 c003070:	e7db      	b.n	c00302a <HAL_RCC_GetPCLK1Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003072:	fbb3 f2f2 	udiv	r2, r3, r2
 c003076:	68c3      	ldr	r3, [r0, #12]
 c003078:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c00307c:	fb02 f303 	mul.w	r3, r2, r3
        break;
 c003080:	e7e8      	b.n	c003054 <HAL_RCC_GetPCLK1Freq+0x90>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c003082:	2300      	movs	r3, #0
 c003084:	e7af      	b.n	c002fe6 <HAL_RCC_GetPCLK1Freq+0x22>
 c003086:	bf00      	nop
 c003088:	50021000 	.word	0x50021000
 c00308c:	00f42400 	.word	0x00f42400
 c003090:	0c00518c 	.word	0x0c00518c
 c003094:	0c005184 	.word	0x0c005184
 c003098:	0c005144 	.word	0x0c005144

0c00309c <HAL_RCC_GetPCLK2Freq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00309c:	4a30      	ldr	r2, [pc, #192]	@ (c003160 <HAL_RCC_GetPCLK2Freq+0xc4>)
 c00309e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0030a0:	68d1      	ldr	r1, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0030a2:	f013 020c 	ands.w	r2, r3, #12
 c0030a6:	d019      	beq.n	c0030dc <HAL_RCC_GetPCLK2Freq+0x40>
 c0030a8:	2a0c      	cmp	r2, #12
 c0030aa:	d048      	beq.n	c00313e <HAL_RCC_GetPCLK2Freq+0xa2>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0030ac:	f46f 7188 	mvn.w	r1, #272	@ 0x110
 c0030b0:	fa41 f202 	asr.w	r2, r1, r2
    sysclockfreq = HSE_VALUE;
 c0030b4:	f012 0f01 	tst.w	r2, #1
 c0030b8:	4b2a      	ldr	r3, [pc, #168]	@ (c003164 <HAL_RCC_GetPCLK2Freq+0xc8>)
 c0030ba:	bf18      	it	ne
 c0030bc:	2300      	movne	r3, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0030be:	4a28      	ldr	r2, [pc, #160]	@ (c003160 <HAL_RCC_GetPCLK2Freq+0xc4>)
 c0030c0:	4829      	ldr	r0, [pc, #164]	@ (c003168 <HAL_RCC_GetPCLK2Freq+0xcc>)
 c0030c2:	6891      	ldr	r1, [r2, #8]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0030c4:	6892      	ldr	r2, [r2, #8]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0030c6:	f3c1 1103 	ubfx	r1, r1, #4, #4
 c0030ca:	5c41      	ldrb	r1, [r0, r1]
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0030cc:	4827      	ldr	r0, [pc, #156]	@ (c00316c <HAL_RCC_GetPCLK2Freq+0xd0>)
 c0030ce:	f3c2 22c2 	ubfx	r2, r2, #11, #3
 c0030d2:	5c80      	ldrb	r0, [r0, r2]
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0030d4:	40cb      	lsrs	r3, r1
}
 c0030d6:	fa23 f000 	lsr.w	r0, r3, r0
 c0030da:	4770      	bx	lr
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0030dc:	4b20      	ldr	r3, [pc, #128]	@ (c003160 <HAL_RCC_GetPCLK2Freq+0xc4>)
 c0030de:	6819      	ldr	r1, [r3, #0]
 c0030e0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0030e2:	bf54      	ite	pl
 c0030e4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0030e8:	681b      	ldrmi	r3, [r3, #0]
    msirange = MSIRangeTable[msirange];
 c0030ea:	4921      	ldr	r1, [pc, #132]	@ (c003170 <HAL_RCC_GetPCLK2Freq+0xd4>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0030ec:	bf54      	ite	pl
 c0030ee:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0030f2:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 c0030f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0030fa:	2a00      	cmp	r2, #0
 c0030fc:	d0df      	beq.n	c0030be <HAL_RCC_GetPCLK2Freq+0x22>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0030fe:	2a0c      	cmp	r2, #12
 c003100:	d12b      	bne.n	c00315a <HAL_RCC_GetPCLK2Freq+0xbe>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003102:	4817      	ldr	r0, [pc, #92]	@ (c003160 <HAL_RCC_GetPCLK2Freq+0xc4>)
 c003104:	68c1      	ldr	r1, [r0, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003106:	68c2      	ldr	r2, [r0, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003108:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00310c:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 c003110:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003112:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 c003116:	d001      	beq.n	c00311c <HAL_RCC_GetPCLK2Freq+0x80>
 c003118:	2903      	cmp	r1, #3
 c00311a:	d116      	bne.n	c00314a <HAL_RCC_GetPCLK2Freq+0xae>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00311c:	4911      	ldr	r1, [pc, #68]	@ (c003164 <HAL_RCC_GetPCLK2Freq+0xc8>)
 c00311e:	68c3      	ldr	r3, [r0, #12]
 c003120:	fbb1 f2f2 	udiv	r2, r1, r2
 c003124:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c003128:	fb02 f303 	mul.w	r3, r2, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00312c:	4a0c      	ldr	r2, [pc, #48]	@ (c003160 <HAL_RCC_GetPCLK2Freq+0xc4>)
 c00312e:	68d2      	ldr	r2, [r2, #12]
 c003130:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c003134:	3201      	adds	r2, #1
 c003136:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco / pllr;
 c003138:	fbb3 f3f2 	udiv	r3, r3, r2
 c00313c:	e7bf      	b.n	c0030be <HAL_RCC_GetPCLK2Freq+0x22>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00313e:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c003142:	2901      	cmp	r1, #1
 c003144:	d0ca      	beq.n	c0030dc <HAL_RCC_GetPCLK2Freq+0x40>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c003146:	2300      	movs	r3, #0
 c003148:	e7db      	b.n	c003102 <HAL_RCC_GetPCLK2Freq+0x66>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00314a:	fbb3 f2f2 	udiv	r2, r3, r2
 c00314e:	68c3      	ldr	r3, [r0, #12]
 c003150:	f3c3 2306 	ubfx	r3, r3, #8, #7
 c003154:	fb02 f303 	mul.w	r3, r2, r3
        break;
 c003158:	e7e8      	b.n	c00312c <HAL_RCC_GetPCLK2Freq+0x90>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c00315a:	2300      	movs	r3, #0
 c00315c:	e7af      	b.n	c0030be <HAL_RCC_GetPCLK2Freq+0x22>
 c00315e:	bf00      	nop
 c003160:	50021000 	.word	0x50021000
 c003164:	00f42400 	.word	0x00f42400
 c003168:	0c00518c 	.word	0x0c00518c
 c00316c:	0c005184 	.word	0x0c005184
 c003170:	0c005144 	.word	0x0c005144

0c003174 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c003176:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c003178:	6800      	ldr	r0, [r0, #0]
{
 c00317a:	460f      	mov	r7, r1
  switch (pPllSai1->PLLSAI1Source)
 c00317c:	2802      	cmp	r0, #2
 c00317e:	d005      	beq.n	c00318c <RCCEx_PLLSAI1_Config+0x18>
 c003180:	2803      	cmp	r0, #3
 c003182:	d04c      	beq.n	c00321e <RCCEx_PLLSAI1_Config+0xaa>
 c003184:	2801      	cmp	r0, #1
 c003186:	d045      	beq.n	c003214 <RCCEx_PLLSAI1_Config+0xa0>
 c003188:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 c00318a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00318c:	4b38      	ldr	r3, [pc, #224]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c00318e:	681b      	ldr	r3, [r3, #0]
 c003190:	055d      	lsls	r5, r3, #21
 c003192:	d5f9      	bpl.n	c003188 <RCCEx_PLLSAI1_Config+0x14>
    __HAL_RCC_PLLSAI1_DISABLE();
 c003194:	4d36      	ldr	r5, [pc, #216]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c003196:	682b      	ldr	r3, [r5, #0]
 c003198:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 c00319c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 c00319e:	f7fe fe23 	bl	c001de8 <HAL_GetTick>
 c0031a2:	4606      	mov	r6, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0031a4:	e004      	b.n	c0031b0 <RCCEx_PLLSAI1_Config+0x3c>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0031a6:	f7fe fe1f 	bl	c001de8 <HAL_GetTick>
 c0031aa:	1b83      	subs	r3, r0, r6
 c0031ac:	2b02      	cmp	r3, #2
 c0031ae:	d848      	bhi.n	c003242 <RCCEx_PLLSAI1_Config+0xce>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0031b0:	682b      	ldr	r3, [r5, #0]
 c0031b2:	0119      	lsls	r1, r3, #4
 c0031b4:	d4f7      	bmi.n	c0031a6 <RCCEx_PLLSAI1_Config+0x32>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0031b6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 c0031ba:	3b01      	subs	r3, #1
 c0031bc:	0210      	lsls	r0, r2, #8
 c0031be:	6821      	ldr	r1, [r4, #0]
 c0031c0:	011a      	lsls	r2, r3, #4
      if (Divider == DIVIDER_P_UPDATE)
 c0031c2:	2f00      	cmp	r7, #0
 c0031c4:	d031      	beq.n	c00322a <RCCEx_PLLSAI1_Config+0xb6>
      else if (Divider == DIVIDER_Q_UPDATE)
 c0031c6:	2f01      	cmp	r7, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0031c8:	4d29      	ldr	r5, [pc, #164]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
      else if (Divider == DIVIDER_Q_UPDATE)
 c0031ca:	d043      	beq.n	c003254 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0031cc:	692e      	ldr	r6, [r5, #16]
 c0031ce:	4b29      	ldr	r3, [pc, #164]	@ (c003274 <RCCEx_PLLSAI1_Config+0x100>)
 c0031d0:	4033      	ands	r3, r6
 c0031d2:	430b      	orrs	r3, r1
 c0031d4:	4303      	orrs	r3, r0
 c0031d6:	4313      	orrs	r3, r2
 c0031d8:	6962      	ldr	r2, [r4, #20]
 c0031da:	0852      	lsrs	r2, r2, #1
 c0031dc:	3a01      	subs	r2, #1
 c0031de:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 c0031e2:	612b      	str	r3, [r5, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 c0031e4:	4d22      	ldr	r5, [pc, #136]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c0031e6:	682b      	ldr	r3, [r5, #0]
 c0031e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 c0031ec:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 c0031ee:	f7fe fdfb 	bl	c001de8 <HAL_GetTick>
 c0031f2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0031f4:	e004      	b.n	c003200 <RCCEx_PLLSAI1_Config+0x8c>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0031f6:	f7fe fdf7 	bl	c001de8 <HAL_GetTick>
 c0031fa:	1b83      	subs	r3, r0, r6
 c0031fc:	2b02      	cmp	r3, #2
 c0031fe:	d825      	bhi.n	c00324c <RCCEx_PLLSAI1_Config+0xd8>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003200:	682b      	ldr	r3, [r5, #0]
 c003202:	011b      	lsls	r3, r3, #4
 c003204:	d5f7      	bpl.n	c0031f6 <RCCEx_PLLSAI1_Config+0x82>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c003206:	4a1a      	ldr	r2, [pc, #104]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c003208:	69a1      	ldr	r1, [r4, #24]
 c00320a:	6913      	ldr	r3, [r2, #16]
 c00320c:	2000      	movs	r0, #0
 c00320e:	430b      	orrs	r3, r1
 c003210:	6113      	str	r3, [r2, #16]
}
 c003212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003214:	4a16      	ldr	r2, [pc, #88]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c003216:	6812      	ldr	r2, [r2, #0]
 c003218:	0796      	lsls	r6, r2, #30
 c00321a:	d4bb      	bmi.n	c003194 <RCCEx_PLLSAI1_Config+0x20>
}
 c00321c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c00321e:	4b14      	ldr	r3, [pc, #80]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c003220:	681b      	ldr	r3, [r3, #0]
 c003222:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 c003226:	d0af      	beq.n	c003188 <RCCEx_PLLSAI1_Config+0x14>
 c003228:	e7b4      	b.n	c003194 <RCCEx_PLLSAI1_Config+0x20>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00322a:	4d11      	ldr	r5, [pc, #68]	@ (c003270 <RCCEx_PLLSAI1_Config+0xfc>)
 c00322c:	4b12      	ldr	r3, [pc, #72]	@ (c003278 <RCCEx_PLLSAI1_Config+0x104>)
 c00322e:	692e      	ldr	r6, [r5, #16]
 c003230:	4033      	ands	r3, r6
 c003232:	430b      	orrs	r3, r1
 c003234:	68e1      	ldr	r1, [r4, #12]
 c003236:	4303      	orrs	r3, r0
 c003238:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 c00323c:	4313      	orrs	r3, r2
 c00323e:	612b      	str	r3, [r5, #16]
 c003240:	e7d0      	b.n	c0031e4 <RCCEx_PLLSAI1_Config+0x70>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003242:	682b      	ldr	r3, [r5, #0]
 c003244:	0118      	lsls	r0, r3, #4
 c003246:	d5b6      	bpl.n	c0031b6 <RCCEx_PLLSAI1_Config+0x42>
            status = HAL_TIMEOUT;
 c003248:	2003      	movs	r0, #3
}
 c00324a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00324c:	682b      	ldr	r3, [r5, #0]
 c00324e:	011a      	lsls	r2, r3, #4
 c003250:	d5fa      	bpl.n	c003248 <RCCEx_PLLSAI1_Config+0xd4>
 c003252:	e7d8      	b.n	c003206 <RCCEx_PLLSAI1_Config+0x92>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003254:	692e      	ldr	r6, [r5, #16]
 c003256:	4b09      	ldr	r3, [pc, #36]	@ (c00327c <RCCEx_PLLSAI1_Config+0x108>)
 c003258:	4033      	ands	r3, r6
 c00325a:	430b      	orrs	r3, r1
 c00325c:	6921      	ldr	r1, [r4, #16]
 c00325e:	4303      	orrs	r3, r0
 c003260:	4313      	orrs	r3, r2
 c003262:	084a      	lsrs	r2, r1, #1
 c003264:	3a01      	subs	r2, #1
 c003266:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 c00326a:	612b      	str	r3, [r5, #16]
 c00326c:	e7ba      	b.n	c0031e4 <RCCEx_PLLSAI1_Config+0x70>
 c00326e:	bf00      	nop
 c003270:	50021000 	.word	0x50021000
 c003274:	f9ff800c 	.word	0xf9ff800c
 c003278:	07ff800c 	.word	0x07ff800c
 c00327c:	ff9f800c 	.word	0xff9f800c

0c003280 <RCCEx_PLLSAI2_Config.constprop.0>:
  *
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
 c003280:	b570      	push	{r4, r5, r6, lr}
 c003282:	4604      	mov	r4, r0
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c003284:	6800      	ldr	r0, [r0, #0]
 c003286:	2802      	cmp	r0, #2
 c003288:	d005      	beq.n	c003296 <RCCEx_PLLSAI2_Config.constprop.0+0x16>
 c00328a:	2803      	cmp	r0, #3
 c00328c:	d045      	beq.n	c00331a <RCCEx_PLLSAI2_Config.constprop.0+0x9a>
 c00328e:	2801      	cmp	r0, #1
 c003290:	d03e      	beq.n	c003310 <RCCEx_PLLSAI2_Config.constprop.0+0x90>
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
      {
        status = HAL_ERROR;
 c003292:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 c003294:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003296:	4b28      	ldr	r3, [pc, #160]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c003298:	681b      	ldr	r3, [r3, #0]
 c00329a:	055d      	lsls	r5, r3, #21
 c00329c:	d5f9      	bpl.n	c003292 <RCCEx_PLLSAI2_Config.constprop.0+0x12>
    __HAL_RCC_PLLSAI2_DISABLE();
 c00329e:	4d26      	ldr	r5, [pc, #152]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c0032a0:	682b      	ldr	r3, [r5, #0]
 c0032a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 c0032a6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 c0032a8:	f7fe fd9e 	bl	c001de8 <HAL_GetTick>
 c0032ac:	4606      	mov	r6, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0032ae:	e004      	b.n	c0032ba <RCCEx_PLLSAI2_Config.constprop.0+0x3a>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0032b0:	f7fe fd9a 	bl	c001de8 <HAL_GetTick>
 c0032b4:	1b83      	subs	r3, r0, r6
 c0032b6:	2b02      	cmp	r3, #2
 c0032b8:	d835      	bhi.n	c003326 <RCCEx_PLLSAI2_Config.constprop.0+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0032ba:	682b      	ldr	r3, [r5, #0]
 c0032bc:	0099      	lsls	r1, r3, #2
 c0032be:	d4f7      	bmi.n	c0032b0 <RCCEx_PLLSAI2_Config.constprop.0+0x30>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c0032c0:	4d1d      	ldr	r5, [pc, #116]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c0032c2:	4b1e      	ldr	r3, [pc, #120]	@ (c00333c <RCCEx_PLLSAI2_Config.constprop.0+0xbc>)
 c0032c4:	6969      	ldr	r1, [r5, #20]
 c0032c6:	6822      	ldr	r2, [r4, #0]
 c0032c8:	400b      	ands	r3, r1
 c0032ca:	4313      	orrs	r3, r2
 c0032cc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 c0032d0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 c0032d4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 c0032d8:	6862      	ldr	r2, [r4, #4]
 c0032da:	3a01      	subs	r2, #1
 c0032dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 c0032e0:	616b      	str	r3, [r5, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 c0032e2:	682b      	ldr	r3, [r5, #0]
 c0032e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 c0032e8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 c0032ea:	f7fe fd7d 	bl	c001de8 <HAL_GetTick>
 c0032ee:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0032f0:	e004      	b.n	c0032fc <RCCEx_PLLSAI2_Config.constprop.0+0x7c>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0032f2:	f7fe fd79 	bl	c001de8 <HAL_GetTick>
 c0032f6:	1b83      	subs	r3, r0, r6
 c0032f8:	2b02      	cmp	r3, #2
 c0032fa:	d819      	bhi.n	c003330 <RCCEx_PLLSAI2_Config.constprop.0+0xb0>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0032fc:	682b      	ldr	r3, [r5, #0]
 c0032fe:	009b      	lsls	r3, r3, #2
 c003300:	d5f7      	bpl.n	c0032f2 <RCCEx_PLLSAI2_Config.constprop.0+0x72>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c003302:	4a0d      	ldr	r2, [pc, #52]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c003304:	6921      	ldr	r1, [r4, #16]
 c003306:	6953      	ldr	r3, [r2, #20]
 c003308:	2000      	movs	r0, #0
 c00330a:	430b      	orrs	r3, r1
 c00330c:	6153      	str	r3, [r2, #20]
}
 c00330e:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003310:	4a09      	ldr	r2, [pc, #36]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c003312:	6812      	ldr	r2, [r2, #0]
 c003314:	0796      	lsls	r6, r2, #30
 c003316:	d4c2      	bmi.n	c00329e <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
}
 c003318:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c00331a:	4b07      	ldr	r3, [pc, #28]	@ (c003338 <RCCEx_PLLSAI2_Config.constprop.0+0xb8>)
 c00331c:	681b      	ldr	r3, [r3, #0]
 c00331e:	f413 2fc0 	tst.w	r3, #393216	@ 0x60000
 c003322:	d0b6      	beq.n	c003292 <RCCEx_PLLSAI2_Config.constprop.0+0x12>
 c003324:	e7bb      	b.n	c00329e <RCCEx_PLLSAI2_Config.constprop.0+0x1e>
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003326:	682b      	ldr	r3, [r5, #0]
 c003328:	0098      	lsls	r0, r3, #2
 c00332a:	d5c9      	bpl.n	c0032c0 <RCCEx_PLLSAI2_Config.constprop.0+0x40>
            status = HAL_TIMEOUT;
 c00332c:	2003      	movs	r0, #3
}
 c00332e:	bd70      	pop	{r4, r5, r6, pc}
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003330:	682b      	ldr	r3, [r5, #0]
 c003332:	009a      	lsls	r2, r3, #2
 c003334:	d5fa      	bpl.n	c00332c <RCCEx_PLLSAI2_Config.constprop.0+0xac>
 c003336:	e7e4      	b.n	c003302 <RCCEx_PLLSAI2_Config.constprop.0+0x82>
 c003338:	50021000 	.word	0x50021000
 c00333c:	07ff800c 	.word	0x07ff800c

0c003340 <HAL_RCCEx_PeriphCLKConfig>:
{
 c003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003344:	6803      	ldr	r3, [r0, #0]
{
 c003346:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003348:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 c00334c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c00334e:	d013      	beq.n	c003378 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch (PeriphClkInit->Sai1ClockSelection)
 c003350:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
 c003352:	2940      	cmp	r1, #64	@ 0x40
 c003354:	f000 8246 	beq.w	c0037e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 c003358:	f200 8157 	bhi.w	c00360a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 c00335c:	2900      	cmp	r1, #0
 c00335e:	f000 81f4 	beq.w	c00374a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 c003362:	2920      	cmp	r1, #32
 c003364:	f040 826f 	bne.w	c003846 <HAL_RCCEx_PeriphCLKConfig+0x506>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003368:	3020      	adds	r0, #32
 c00336a:	f7ff ff89 	bl	c003280 <RCCEx_PLLSAI2_Config.constprop.0>
 c00336e:	4606      	mov	r6, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003370:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c003372:	2e00      	cmp	r6, #0
 c003374:	f000 8234 	beq.w	c0037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003378:	04df      	lsls	r7, r3, #19
 c00337a:	f140 8159 	bpl.w	c003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Sai2ClockSelection)
 c00337e:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 c003380:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 c003384:	f000 8234 	beq.w	c0037f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 c003388:	f200 81af 	bhi.w	c0036ea <HAL_RCCEx_PeriphCLKConfig+0x3aa>
 c00338c:	2900      	cmp	r1, #0
 c00338e:	f000 81e5 	beq.w	c00375c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c003392:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 c003396:	f040 8254 	bne.w	c003842 <HAL_RCCEx_PeriphCLKConfig+0x502>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c00339a:	f104 0020 	add.w	r0, r4, #32
 c00339e:	f7ff ff6f 	bl	c003280 <RCCEx_PLLSAI2_Config.constprop.0>
 c0033a2:	4607      	mov	r7, r0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0033a4:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c0033a6:	2f00      	cmp	r7, #0
 c0033a8:	f040 81aa 	bne.w	c003700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c0033ac:	49aa      	ldr	r1, [pc, #680]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0033ae:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 c0033b0:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0033b4:	039d      	lsls	r5, r3, #14
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c0033b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 c0033ba:	ea42 0200 	orr.w	r2, r2, r0
 c0033be:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0033c2:	f100 8139 	bmi.w	c003638 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0033c6:	07d9      	lsls	r1, r3, #31
 c0033c8:	d508      	bpl.n	c0033dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c0033ca:	49a3      	ldr	r1, [pc, #652]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0033cc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 c0033ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0033d2:	f022 0203 	bic.w	r2, r2, #3
 c0033d6:	4302      	orrs	r2, r0
 c0033d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0033dc:	079a      	lsls	r2, r3, #30
 c0033de:	d508      	bpl.n	c0033f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c0033e0:	499d      	ldr	r1, [pc, #628]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0033e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 c0033e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0033e8:	f022 020c 	bic.w	r2, r2, #12
 c0033ec:	4302      	orrs	r2, r0
 c0033ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0033f2:	075d      	lsls	r5, r3, #29
 c0033f4:	d508      	bpl.n	c003408 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0033f6:	4998      	ldr	r1, [pc, #608]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0033f8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 c0033fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0033fe:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 c003402:	4302      	orrs	r2, r0
 c003404:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003408:	0718      	lsls	r0, r3, #28
 c00340a:	d508      	bpl.n	c00341e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c00340c:	4992      	ldr	r1, [pc, #584]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c00340e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 c003410:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c003414:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 c003418:	4302      	orrs	r2, r0
 c00341a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00341e:	06d9      	lsls	r1, r3, #27
 c003420:	d508      	bpl.n	c003434 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c003422:	498d      	ldr	r1, [pc, #564]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c003424:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 c003426:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c00342a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 c00342e:	4302      	orrs	r2, r0
 c003430:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c003434:	069a      	lsls	r2, r3, #26
 c003436:	d508      	bpl.n	c00344a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c003438:	4987      	ldr	r1, [pc, #540]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c00343a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 c00343c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c003440:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 c003444:	4302      	orrs	r2, r0
 c003446:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c00344a:	059d      	lsls	r5, r3, #22
 c00344c:	d508      	bpl.n	c003460 <HAL_RCCEx_PeriphCLKConfig+0x120>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00344e:	4982      	ldr	r1, [pc, #520]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c003450:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 c003452:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c003456:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 c00345a:	4302      	orrs	r2, r0
 c00345c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003460:	0558      	lsls	r0, r3, #21
 c003462:	d508      	bpl.n	c003476 <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c003464:	497c      	ldr	r1, [pc, #496]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c003466:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 c003468:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c00346c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 c003470:	4302      	orrs	r2, r0
 c003472:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c003476:	0259      	lsls	r1, r3, #9
 c003478:	d508      	bpl.n	c00348c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c00347a:	4977      	ldr	r1, [pc, #476]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c00347c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 c00347e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c003482:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 c003486:	4302      	orrs	r2, r0
 c003488:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c00348c:	019a      	lsls	r2, r3, #6
 c00348e:	d50c      	bpl.n	c0034aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
    switch (PeriphClkInit->FdcanClockSelection)
 c003490:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 c003492:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 c003496:	f000 8193 	beq.w	c0037c0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 c00349a:	f1b2 7f00 	cmp.w	r2, #33554432	@ 0x2000000
 c00349e:	f000 813d 	beq.w	c00371c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 c0034a2:	2a00      	cmp	r2, #0
 c0034a4:	f000 8140 	beq.w	c003728 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 c0034a8:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0034aa:	065f      	lsls	r7, r3, #25
 c0034ac:	d508      	bpl.n	c0034c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0034ae:	496a      	ldr	r1, [pc, #424]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0034b0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 c0034b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0034b6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 c0034ba:	4302      	orrs	r2, r0
 c0034bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0034c0:	061d      	lsls	r5, r3, #24
 c0034c2:	d508      	bpl.n	c0034d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0034c4:	4964      	ldr	r1, [pc, #400]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0034c6:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 c0034c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0034cc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 c0034d0:	4302      	orrs	r2, r0
 c0034d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c0034d6:	05d8      	lsls	r0, r3, #23
 c0034d8:	d508      	bpl.n	c0034ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c0034da:	495f      	ldr	r1, [pc, #380]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0034dc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 c0034de:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c0034e2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 c0034e6:	4302      	orrs	r2, r0
 c0034e8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c0034ec:	02d9      	lsls	r1, r3, #11
 c0034ee:	d508      	bpl.n	c003502 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c0034f0:	4959      	ldr	r1, [pc, #356]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0034f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 c0034f4:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 c0034f8:	f022 0203 	bic.w	r2, r2, #3
 c0034fc:	4302      	orrs	r2, r0
 c0034fe:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c003502:	049a      	lsls	r2, r3, #18
 c003504:	d511      	bpl.n	c00352a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c003506:	4954      	ldr	r1, [pc, #336]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c003508:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 c00350a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c00350e:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c003512:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 c003516:	ea42 0200 	orr.w	r2, r2, r0
 c00351a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c00351e:	f000 8131 	beq.w	c003784 <HAL_RCCEx_PeriphCLKConfig+0x444>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c003522:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 c003526:	f000 8177 	beq.w	c003818 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c00352a:	031f      	lsls	r7, r3, #12
 c00352c:	d51b      	bpl.n	c003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c00352e:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 c003530:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 c003534:	f000 812b 	beq.w	c00378e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 c003538:	4847      	ldr	r0, [pc, #284]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c00353a:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c00353e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 c003542:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 c003546:	ea42 0201 	orr.w	r2, r2, r1
 c00354a:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
 c00354e:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 c003552:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 c003556:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c00355a:	f000 8165 	beq.w	c003828 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c00355e:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 c003562:	f000 814c 	beq.w	c0037fe <HAL_RCCEx_PeriphCLKConfig+0x4be>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c003566:	035d      	lsls	r5, r3, #13
 c003568:	d511      	bpl.n	c00358e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c00356a:	493b      	ldr	r1, [pc, #236]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c00356c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 c00356e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c003572:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c003576:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 c00357a:	ea42 0200 	orr.w	r2, r2, r0
 c00357e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c003582:	f000 8110 	beq.w	c0037a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c003586:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 c00358a:	f000 813d 	beq.w	c003808 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c00358e:	0458      	lsls	r0, r3, #17
 c003590:	d50e      	bpl.n	c0035b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c003592:	4831      	ldr	r0, [pc, #196]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c003594:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 c003598:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c00359c:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c0035a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 c0035a4:	ea42 0201 	orr.w	r2, r2, r1
 c0035a8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0035ac:	f000 8110 	beq.w	c0037d0 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0035b0:	03d9      	lsls	r1, r3, #15
 c0035b2:	d509      	bpl.n	c0035c8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0035b4:	4928      	ldr	r1, [pc, #160]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0035b6:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 c0035ba:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 c0035be:	f022 0204 	bic.w	r2, r2, #4
 c0035c2:	4302      	orrs	r2, r0
 c0035c4:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c0035c8:	029a      	lsls	r2, r3, #10
 c0035ca:	d509      	bpl.n	c0035e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c0035cc:	4922      	ldr	r1, [pc, #136]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0035ce:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 c0035d2:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 c0035d6:	f022 0218 	bic.w	r2, r2, #24
 c0035da:	4302      	orrs	r2, r0
 c0035dc:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c0035e0:	01db      	lsls	r3, r3, #7
 c0035e2:	d50e      	bpl.n	c003602 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c0035e4:	4a1c      	ldr	r2, [pc, #112]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c0035e6:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 c0035ea:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c0035ee:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c0035f2:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 c0035f6:	ea43 0301 	orr.w	r3, r3, r1
 c0035fa:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c0035fe:	f000 80d7 	beq.w	c0037b0 <HAL_RCCEx_PeriphCLKConfig+0x470>
}
 c003602:	4630      	mov	r0, r6
 c003604:	b002      	add	sp, #8
 c003606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    switch (PeriphClkInit->Sai1ClockSelection)
 c00360a:	2960      	cmp	r1, #96	@ 0x60
 c00360c:	d002      	beq.n	c003614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 c00360e:	2980      	cmp	r1, #128	@ 0x80
 c003610:	f040 8119 	bne.w	c003846 <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003614:	4810      	ldr	r0, [pc, #64]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003616:	04df      	lsls	r7, r3, #19
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003618:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c00361c:	f04f 0600 	mov.w	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003620:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 c003624:	ea42 0201 	orr.w	r2, r2, r1
 c003628:	f8c0 209c 	str.w	r2, [r0, #156]	@ 0x9c
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c00362c:	f53f aea7 	bmi.w	c00337e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch (PeriphClkInit->Sai2ClockSelection)
 c003630:	4637      	mov	r7, r6
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c003632:	039d      	lsls	r5, r3, #14
 c003634:	f57f aec7 	bpl.w	c0033c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003638:	4b07      	ldr	r3, [pc, #28]	@ (c003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 c00363a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 c00363c:	00d0      	lsls	r0, r2, #3
 c00363e:	d561      	bpl.n	c003704 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    FlagStatus       pwrclkchanged = RESET;
 c003640:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003644:	4d05      	ldr	r5, [pc, #20]	@ (c00365c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 c003646:	682b      	ldr	r3, [r5, #0]
 c003648:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 c00364c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 c00364e:	f7fe fbcb 	bl	c001de8 <HAL_GetTick>
 c003652:	4681      	mov	r9, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c003654:	e00a      	b.n	c00366c <HAL_RCCEx_PeriphCLKConfig+0x32c>
 c003656:	bf00      	nop
 c003658:	50021000 	.word	0x50021000
 c00365c:	50007000 	.word	0x50007000
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003660:	f7fe fbc2 	bl	c001de8 <HAL_GetTick>
 c003664:	eba0 0009 	sub.w	r0, r0, r9
 c003668:	2802      	cmp	r0, #2
 c00366a:	d868      	bhi.n	c00373e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00366c:	682b      	ldr	r3, [r5, #0]
 c00366e:	05da      	lsls	r2, r3, #23
 c003670:	d5f6      	bpl.n	c003660 <HAL_RCCEx_PeriphCLKConfig+0x320>
    if (ret == HAL_OK)
 c003672:	2f00      	cmp	r7, #0
 c003674:	d178      	bne.n	c003768 <HAL_RCCEx_PeriphCLKConfig+0x428>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c003676:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c00367a:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c00367e:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c003682:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 c003686:	d027      	beq.n	c0036d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 c003688:	428b      	cmp	r3, r1
 c00368a:	d025      	beq.n	c0036d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c00368c:	f8da 2090 	ldr.w	r2, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 c003690:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 c003694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 c003698:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c00369c:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 c0036a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 c0036a4:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0036a8:	f422 7340 	bic.w	r3, r2, #768	@ 0x300
        RCC->BDCR = tmpregister;
 c0036ac:	f8ca 3090 	str.w	r3, [sl, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c0036b0:	07d3      	lsls	r3, r2, #31
 c0036b2:	d511      	bpl.n	c0036d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
        tickstart = HAL_GetTick();
 c0036b4:	f7fe fb98 	bl	c001de8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0036b8:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 c0036bc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0036be:	e005      	b.n	c0036cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0036c0:	f7fe fb92 	bl	c001de8 <HAL_GetTick>
 c0036c4:	1b40      	subs	r0, r0, r5
 c0036c6:	4548      	cmp	r0, r9
 c0036c8:	f200 80b6 	bhi.w	c003838 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0036cc:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 c0036d0:	0798      	lsls	r0, r3, #30
 c0036d2:	d5f5      	bpl.n	c0036c0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0036d4:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 c0036d8:	4a5c      	ldr	r2, [pc, #368]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c0036da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 c0036de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 c0036e2:	430b      	orrs	r3, r1
 c0036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 c0036e8:	e03f      	b.n	c00376a <HAL_RCCEx_PeriphCLKConfig+0x42a>
    switch (PeriphClkInit->Sai2ClockSelection)
 c0036ea:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 c0036ee:	d003      	beq.n	c0036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 c0036f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 c0036f4:	f040 80a5 	bne.w	c003842 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch (PeriphClkInit->Sai1ClockSelection)
 c0036f8:	4637      	mov	r7, r6
    if (ret == HAL_OK)
 c0036fa:	2f00      	cmp	r7, #0
 c0036fc:	f43f ae56 	beq.w	c0033ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
 c003700:	463e      	mov	r6, r7
 c003702:	e796      	b.n	c003632 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
      __HAL_RCC_PWR_CLK_ENABLE();
 c003704:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
      pwrclkchanged = SET;
 c003706:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c00370a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 c00370e:	659a      	str	r2, [r3, #88]	@ 0x58
 c003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 c003712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 c003716:	9301      	str	r3, [sp, #4]
 c003718:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 c00371a:	e793      	b.n	c003644 <HAL_RCCEx_PeriphCLKConfig+0x304>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c00371c:	2100      	movs	r1, #0
 c00371e:	1d20      	adds	r0, r4, #4
 c003720:	f7ff fd28 	bl	c003174 <RCCEx_PLLSAI1_Config>
 c003724:	4607      	mov	r7, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003726:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c003728:	bb57      	cbnz	r7, c003780 <HAL_RCCEx_PeriphCLKConfig+0x440>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c00372a:	4948      	ldr	r1, [pc, #288]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c00372c:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 c00372e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 c003732:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 c003736:	4302      	orrs	r2, r0
 c003738:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
 c00373c:	e6b5      	b.n	c0034aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00373e:	682b      	ldr	r3, [r5, #0]
 c003740:	05d9      	lsls	r1, r3, #23
 c003742:	d496      	bmi.n	c003672 <HAL_RCCEx_PeriphCLKConfig+0x332>
          ret = HAL_TIMEOUT;
 c003744:	2603      	movs	r6, #3
 c003746:	4637      	mov	r7, r6
 c003748:	e00f      	b.n	c00376a <HAL_RCCEx_PeriphCLKConfig+0x42a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c00374a:	3004      	adds	r0, #4
 c00374c:	f7ff fd12 	bl	c003174 <RCCEx_PLLSAI1_Config>
 c003750:	4606      	mov	r6, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003752:	6823      	ldr	r3, [r4, #0]
    if (ret == HAL_OK)
 c003754:	2e00      	cmp	r6, #0
 c003756:	f47f ae0f 	bne.w	c003378 <HAL_RCCEx_PeriphCLKConfig+0x38>
 c00375a:	e041      	b.n	c0037e0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c00375c:	1d20      	adds	r0, r4, #4
 c00375e:	f7ff fd09 	bl	c003174 <RCCEx_PLLSAI1_Config>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c003762:	6823      	ldr	r3, [r4, #0]
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003764:	4607      	mov	r7, r0
        break;
 c003766:	e61e      	b.n	c0033a6 <HAL_RCCEx_PeriphCLKConfig+0x66>
 c003768:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c00376a:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 c00376c:	f1b8 0f00 	cmp.w	r8, #0
 c003770:	f43f ae29 	beq.w	c0033c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      __HAL_RCC_PWR_CLK_DISABLE();
 c003774:	4935      	ldr	r1, [pc, #212]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c003776:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 c003778:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 c00377c:	658a      	str	r2, [r1, #88]	@ 0x58
 c00377e:	e622      	b.n	c0033c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 c003780:	463e      	mov	r6, r7
 c003782:	e692      	b.n	c0034aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003784:	68ca      	ldr	r2, [r1, #12]
 c003786:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 c00378a:	60ca      	str	r2, [r1, #12]
 c00378c:	e6cd      	b.n	c00352a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c00378e:	4a2f      	ldr	r2, [pc, #188]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c003790:	f8d2 109c 	ldr.w	r1, [r2, #156]	@ 0x9c
 c003794:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 c003798:	f8c2 109c 	str.w	r1, [r2, #156]	@ 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00379c:	68d1      	ldr	r1, [r2, #12]
 c00379e:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 c0037a2:	60d1      	str	r1, [r2, #12]
 c0037a4:	e6df      	b.n	c003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0037a6:	68ca      	ldr	r2, [r1, #12]
 c0037a8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 c0037ac:	60ca      	str	r2, [r1, #12]
 c0037ae:	e6ee      	b.n	c00358e <HAL_RCCEx_PeriphCLKConfig+0x24e>
}
 c0037b0:	4630      	mov	r0, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0037b2:	68d3      	ldr	r3, [r2, #12]
 c0037b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 c0037b8:	60d3      	str	r3, [r2, #12]
}
 c0037ba:	b002      	add	sp, #8
 c0037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0037c0:	4922      	ldr	r1, [pc, #136]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c0037c2:	68ca      	ldr	r2, [r1, #12]
 c0037c4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 c0037c8:	60ca      	str	r2, [r1, #12]
    if (ret == HAL_OK)
 c0037ca:	2f00      	cmp	r7, #0
 c0037cc:	d1d8      	bne.n	c003780 <HAL_RCCEx_PeriphCLKConfig+0x440>
 c0037ce:	e7ac      	b.n	c00372a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0037d0:	2102      	movs	r1, #2
 c0037d2:	1d20      	adds	r0, r4, #4
 c0037d4:	f7ff fcce 	bl	c003174 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c0037d8:	b100      	cbz	r0, c0037dc <HAL_RCCEx_PeriphCLKConfig+0x49c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0037da:	4606      	mov	r6, r0
 c0037dc:	6823      	ldr	r3, [r4, #0]
 c0037de:	e6e7      	b.n	c0035b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c0037e0:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 c0037e2:	e717      	b.n	c003614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0037e4:	4819      	ldr	r0, [pc, #100]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 c0037e6:	68c2      	ldr	r2, [r0, #12]
 c0037e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 c0037ec:	60c2      	str	r2, [r0, #12]
    if (ret == HAL_OK)
 c0037ee:	e711      	b.n	c003614 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0037f0:	4916      	ldr	r1, [pc, #88]	@ (c00384c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
    switch (PeriphClkInit->Sai1ClockSelection)
 c0037f2:	4637      	mov	r7, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0037f4:	68ca      	ldr	r2, [r1, #12]
 c0037f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 c0037fa:	60ca      	str	r2, [r1, #12]
        break;
 c0037fc:	e77d      	b.n	c0036fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0037fe:	68c2      	ldr	r2, [r0, #12]
 c003800:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 c003804:	60c2      	str	r2, [r0, #12]
 c003806:	e6ae      	b.n	c003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003808:	2101      	movs	r1, #1
 c00380a:	1d20      	adds	r0, r4, #4
 c00380c:	f7ff fcb2 	bl	c003174 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c003810:	b100      	cbz	r0, c003814 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c003812:	4606      	mov	r6, r0
 c003814:	6823      	ldr	r3, [r4, #0]
 c003816:	e6ba      	b.n	c00358e <HAL_RCCEx_PeriphCLKConfig+0x24e>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003818:	2101      	movs	r1, #1
 c00381a:	1d20      	adds	r0, r4, #4
 c00381c:	f7ff fcaa 	bl	c003174 <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 c003820:	b100      	cbz	r0, c003824 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c003822:	4606      	mov	r6, r0
 c003824:	6823      	ldr	r3, [r4, #0]
 c003826:	e680      	b.n	c00352a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003828:	2101      	movs	r1, #1
 c00382a:	1d20      	adds	r0, r4, #4
 c00382c:	f7ff fca2 	bl	c003174 <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 c003830:	b100      	cbz	r0, c003834 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c003832:	4606      	mov	r6, r0
 c003834:	6823      	ldr	r3, [r4, #0]
 c003836:	e696      	b.n	c003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003838:	f8da 3090 	ldr.w	r3, [sl, #144]	@ 0x90
 c00383c:	079d      	lsls	r5, r3, #30
 c00383e:	d581      	bpl.n	c003744 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c003840:	e748      	b.n	c0036d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Sai2ClockSelection)
 c003842:	2601      	movs	r6, #1
 c003844:	e6f4      	b.n	c003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Sai1ClockSelection)
 c003846:	2601      	movs	r6, #1
 c003848:	e596      	b.n	c003378 <HAL_RCCEx_PeriphCLKConfig+0x38>
 c00384a:	bf00      	nop
 c00384c:	50021000 	.word	0x50021000

0c003850 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 c003850:	2800      	cmp	r0, #0
 c003852:	f000 8084 	beq.w	c00395e <HAL_TIM_Base_Init+0x10e>
{
 c003856:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 c003858:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 c00385c:	4604      	mov	r4, r0
 c00385e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 c003862:	2b00      	cmp	r3, #0
 c003864:	d070      	beq.n	c003948 <HAL_TIM_Base_Init+0xf8>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 c003866:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 c003868:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c00386a:	493e      	ldr	r1, [pc, #248]	@ (c003964 <HAL_TIM_Base_Init+0x114>)
  htim->State = HAL_TIM_STATE_BUSY;
 c00386c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c003870:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 c003872:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 c003874:	d054      	beq.n	c003920 <HAL_TIM_Base_Init+0xd0>
 c003876:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 c00387a:	d024      	beq.n	c0038c6 <HAL_TIM_Base_Init+0x76>
 c00387c:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 c003880:	428a      	cmp	r2, r1
 c003882:	d020      	beq.n	c0038c6 <HAL_TIM_Base_Init+0x76>
 c003884:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 c003888:	428a      	cmp	r2, r1
 c00388a:	d01c      	beq.n	c0038c6 <HAL_TIM_Base_Init+0x76>
 c00388c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 c003890:	428a      	cmp	r2, r1
 c003892:	d018      	beq.n	c0038c6 <HAL_TIM_Base_Init+0x76>
 c003894:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 c003898:	428a      	cmp	r2, r1
 c00389a:	d041      	beq.n	c003920 <HAL_TIM_Base_Init+0xd0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 c00389c:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 c0038a0:	428a      	cmp	r2, r1
 c0038a2:	d056      	beq.n	c003952 <HAL_TIM_Base_Init+0x102>
 c0038a4:	4930      	ldr	r1, [pc, #192]	@ (c003968 <HAL_TIM_Base_Init+0x118>)
 c0038a6:	428a      	cmp	r2, r1
 c0038a8:	d053      	beq.n	c003952 <HAL_TIM_Base_Init+0x102>
 c0038aa:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 c0038ae:	428a      	cmp	r2, r1
 c0038b0:	d04f      	beq.n	c003952 <HAL_TIM_Base_Init+0x102>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0038b2:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 c0038b4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 c0038b6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0038b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c0038bc:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 c0038be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 c0038c0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 c0038c2:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 c0038c4:	e010      	b.n	c0038e8 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 c0038c6:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c0038c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c0038cc:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 c0038ce:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 c0038d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0038d4:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c0038d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0038d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 c0038dc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c0038de:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 c0038e0:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 c0038e2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 c0038e4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 c0038e6:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 c0038e8:	2301      	movs	r3, #1
 c0038ea:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 c0038ec:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c0038f0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 c0038f4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 c0038f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 c0038fc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 c003900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 c003904:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 c003908:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 c00390c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 c003910:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 c003914:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 c003918:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 c00391c:	2000      	movs	r0, #0
}
 c00391e:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 c003920:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 c003922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c003926:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 c003928:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 c00392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c00392e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c003930:	69a1      	ldr	r1, [r4, #24]
 c003932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 c003936:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 c003938:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 c00393a:	68e3      	ldr	r3, [r4, #12]
 c00393c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 c00393e:	6863      	ldr	r3, [r4, #4]
 c003940:	6293      	str	r3, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 c003942:	6963      	ldr	r3, [r4, #20]
 c003944:	6313      	str	r3, [r2, #48]	@ 0x30
 c003946:	e7cf      	b.n	c0038e8 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 c003948:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 c00394c:	f7fe f906 	bl	c001b5c <HAL_TIM_Base_MspInit>
 c003950:	e789      	b.n	c003866 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c003952:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 c003954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 c003958:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 c00395a:	4303      	orrs	r3, r0
 c00395c:	e7e9      	b.n	c003932 <HAL_TIM_Base_Init+0xe2>
    return HAL_ERROR;
 c00395e:	2001      	movs	r0, #1
}
 c003960:	4770      	bx	lr
 c003962:	bf00      	nop
 c003964:	50012c00 	.word	0x50012c00
 c003968:	50014400 	.word	0x50014400

0c00396c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 c00396c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 c003970:	2a01      	cmp	r2, #1
 c003972:	d07a      	beq.n	c003a6a <HAL_TIM_ConfigClockSource+0xfe>
 c003974:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 c003976:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 c003978:	f04f 0c01 	mov.w	ip, #1
  tmpsmcr = htim->Instance->SMCR;
 c00397c:	6800      	ldr	r0, [r0, #0]
{
 c00397e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 c003980:	f883 c03c 	strb.w	ip, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 c003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 c003988:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c00398a:	4c4e      	ldr	r4, [pc, #312]	@ (c003ac4 <HAL_TIM_ConfigClockSource+0x158>)
 c00398c:	4014      	ands	r4, r2
  switch (sClockSourceConfig->ClockSource)
 c00398e:	680a      	ldr	r2, [r1, #0]
  htim->Instance->SMCR = tmpsmcr;
 c003990:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 c003992:	2a60      	cmp	r2, #96	@ 0x60
 c003994:	d06b      	beq.n	c003a6e <HAL_TIM_ConfigClockSource+0x102>
 c003996:	d835      	bhi.n	c003a04 <HAL_TIM_ConfigClockSource+0x98>
 c003998:	2a40      	cmp	r2, #64	@ 0x40
 c00399a:	d04c      	beq.n	c003a36 <HAL_TIM_ConfigClockSource+0xca>
 c00399c:	d923      	bls.n	c0039e6 <HAL_TIM_ConfigClockSource+0x7a>
 c00399e:	2a50      	cmp	r2, #80	@ 0x50
 c0039a0:	d118      	bne.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c0039a2:	684a      	ldr	r2, [r1, #4]
 c0039a4:	68cc      	ldr	r4, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 c0039a6:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c0039a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 c0039ac:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c0039ae:	6a02      	ldr	r2, [r0, #32]
 c0039b0:	f022 0201 	bic.w	r2, r2, #1
 c0039b4:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 c0039b6:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c0039b8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c0039bc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 c0039c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 c0039c2:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 c0039c4:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 c0039c6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 c0039ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c0039ce:	f042 0257 	orr.w	r2, r2, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c0039d2:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 c0039d4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 c0039d6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 c0039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 c0039dc:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  return HAL_OK;
 c0039e0:	4610      	mov	r0, r2
}
 c0039e2:	bc30      	pop	{r4, r5}
 c0039e4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 c0039e6:	2a20      	cmp	r2, #32
 c0039e8:	d002      	beq.n	c0039f0 <HAL_TIM_ConfigClockSource+0x84>
 c0039ea:	d920      	bls.n	c003a2e <HAL_TIM_ConfigClockSource+0xc2>
 c0039ec:	2a30      	cmp	r2, #48	@ 0x30
 c0039ee:	d1f1      	bne.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 c0039f0:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 c0039f2:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 c0039f6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c0039fa:	4311      	orrs	r1, r2
 c0039fc:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 c003a00:	6081      	str	r1, [r0, #8]
}
 c003a02:	e7e7      	b.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 c003a04:	2a70      	cmp	r2, #112	@ 0x70
 c003a06:	d04d      	beq.n	c003aa4 <HAL_TIM_ConfigClockSource+0x138>
 c003a08:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 c003a0c:	d1e2      	bne.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003a0e:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 c003a12:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003a14:	432a      	orrs	r2, r5
 c003a16:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c003a18:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003a1c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 c003a20:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 c003a22:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 c003a24:	6882      	ldr	r2, [r0, #8]
 c003a26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 c003a2a:	6082      	str	r2, [r0, #8]
      break;
 c003a2c:	e7d2      	b.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 c003a2e:	f032 0110 	bics.w	r1, r2, #16
 c003a32:	d1cf      	bne.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
 c003a34:	e7dc      	b.n	c0039f0 <HAL_TIM_ConfigClockSource+0x84>
      TIM_TI1_ConfigInputStage(htim->Instance,
 c003a36:	684a      	ldr	r2, [r1, #4]
 c003a38:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 c003a3a:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 c003a3c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 c003a40:	4311      	orrs	r1, r2
  TIMx->CCER &= ~TIM_CCER_CC1E;
 c003a42:	6a02      	ldr	r2, [r0, #32]
 c003a44:	f022 0201 	bic.w	r2, r2, #1
 c003a48:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 c003a4a:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 c003a4c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 c003a50:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 c003a54:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 c003a56:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 c003a58:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 c003a5a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 c003a5e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c003a62:	f042 0247 	orr.w	r2, r2, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 c003a66:	6082      	str	r2, [r0, #8]
}
 c003a68:	e7b4      	b.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 c003a6a:	2002      	movs	r0, #2
}
 c003a6c:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c003a6e:	6a02      	ldr	r2, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 c003a70:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c003a72:	f022 0210 	bic.w	r2, r2, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 c003a76:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 c003a78:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 c003a7a:	6981      	ldr	r1, [r0, #24]
  tmpccer = TIMx->CCER;
 c003a7c:	6a02      	ldr	r2, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 c003a7e:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 c003a82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 c003a86:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 c003a8a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 c003a8e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 c003a90:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 c003a92:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 c003a94:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 c003a98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 c003a9c:	f042 0267 	orr.w	r2, r2, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 c003aa0:	6082      	str	r2, [r0, #8]
}
 c003aa2:	e797      	b.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003aa4:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 c003aa8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003aaa:	432a      	orrs	r2, r5
 c003aac:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 c003aae:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 c003ab2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 c003ab6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 c003ab8:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 c003aba:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 c003abc:	f042 0277 	orr.w	r2, r2, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 c003ac0:	6082      	str	r2, [r0, #8]
      break;
 c003ac2:	e787      	b.n	c0039d4 <HAL_TIM_ConfigClockSource+0x68>
 c003ac4:	ffce0088 	.word	0xffce0088

0c003ac8 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 c003ac8:	4770      	bx	lr
 c003aca:	bf00      	nop

0c003acc <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 c003acc:	4770      	bx	lr
 c003ace:	bf00      	nop

0c003ad0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 c003ad0:	4770      	bx	lr
 c003ad2:	bf00      	nop

0c003ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 c003ad4:	4770      	bx	lr
 c003ad6:	bf00      	nop

0c003ad8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 c003ad8:	4770      	bx	lr
 c003ada:	bf00      	nop

0c003adc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c003adc:	6803      	ldr	r3, [r0, #0]
{
 c003ade:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c003ae0:	691a      	ldr	r2, [r3, #16]
{
 c003ae2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 c003ae4:	0791      	lsls	r1, r2, #30
 c003ae6:	d502      	bpl.n	c003aee <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 c003ae8:	68da      	ldr	r2, [r3, #12]
 c003aea:	0792      	lsls	r2, r2, #30
 c003aec:	d468      	bmi.n	c003bc0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c003aee:	691a      	ldr	r2, [r3, #16]
 c003af0:	0752      	lsls	r2, r2, #29
 c003af2:	d502      	bpl.n	c003afa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 c003af4:	68da      	ldr	r2, [r3, #12]
 c003af6:	0750      	lsls	r0, r2, #29
 c003af8:	d44f      	bmi.n	c003b9a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c003afa:	691a      	ldr	r2, [r3, #16]
 c003afc:	0711      	lsls	r1, r2, #28
 c003afe:	d502      	bpl.n	c003b06 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 c003b00:	68da      	ldr	r2, [r3, #12]
 c003b02:	0712      	lsls	r2, r2, #28
 c003b04:	d437      	bmi.n	c003b76 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c003b06:	691a      	ldr	r2, [r3, #16]
 c003b08:	06d0      	lsls	r0, r2, #27
 c003b0a:	d502      	bpl.n	c003b12 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 c003b0c:	68da      	ldr	r2, [r3, #12]
 c003b0e:	06d1      	lsls	r1, r2, #27
 c003b10:	d41e      	bmi.n	c003b50 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c003b12:	691a      	ldr	r2, [r3, #16]
 c003b14:	07d2      	lsls	r2, r2, #31
 c003b16:	d502      	bpl.n	c003b1e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 c003b18:	68da      	ldr	r2, [r3, #12]
 c003b1a:	07d0      	lsls	r0, r2, #31
 c003b1c:	d469      	bmi.n	c003bf2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c003b1e:	691a      	ldr	r2, [r3, #16]
 c003b20:	0611      	lsls	r1, r2, #24
 c003b22:	d502      	bpl.n	c003b2a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c003b24:	68da      	ldr	r2, [r3, #12]
 c003b26:	0612      	lsls	r2, r2, #24
 c003b28:	d46b      	bmi.n	c003c02 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c003b2a:	691a      	ldr	r2, [r3, #16]
 c003b2c:	05d0      	lsls	r0, r2, #23
 c003b2e:	d502      	bpl.n	c003b36 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 c003b30:	68da      	ldr	r2, [r3, #12]
 c003b32:	0611      	lsls	r1, r2, #24
 c003b34:	d46d      	bmi.n	c003c12 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c003b36:	691a      	ldr	r2, [r3, #16]
 c003b38:	0652      	lsls	r2, r2, #25
 c003b3a:	d502      	bpl.n	c003b42 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 c003b3c:	68da      	ldr	r2, [r3, #12]
 c003b3e:	0650      	lsls	r0, r2, #25
 c003b40:	d46f      	bmi.n	c003c22 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c003b42:	691a      	ldr	r2, [r3, #16]
 c003b44:	0691      	lsls	r1, r2, #26
 c003b46:	d502      	bpl.n	c003b4e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 c003b48:	68da      	ldr	r2, [r3, #12]
 c003b4a:	0692      	lsls	r2, r2, #26
 c003b4c:	d449      	bmi.n	c003be2 <HAL_TIM_IRQHandler+0x106>
}
 c003b4e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c003b50:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c003b54:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 c003b56:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 c003b58:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c003b5a:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 c003b5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 c003b5e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 c003b62:	d16f      	bne.n	c003c44 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c003b64:	f7ff ffb2 	bl	c003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c003b68:	4620      	mov	r0, r4
 c003b6a:	f7ff ffb3 	bl	c003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003b6e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 c003b70:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003b72:	7722      	strb	r2, [r4, #28]
 c003b74:	e7cd      	b.n	c003b12 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c003b76:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c003b7a:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 c003b7c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 c003b7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c003b80:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 c003b82:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 c003b84:	079b      	lsls	r3, r3, #30
 c003b86:	d15a      	bne.n	c003c3e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c003b88:	f7ff ffa0 	bl	c003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c003b8c:	4620      	mov	r0, r4
 c003b8e:	f7ff ffa1 	bl	c003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003b92:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 c003b94:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003b96:	7722      	strb	r2, [r4, #28]
 c003b98:	e7b5      	b.n	c003b06 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c003b9a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c003b9e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 c003ba0:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 c003ba2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c003ba4:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 c003ba6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 c003ba8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 c003bac:	d144      	bne.n	c003c38 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 c003bae:	f7ff ff8d 	bl	c003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 c003bb2:	4620      	mov	r0, r4
 c003bb4:	f7ff ff8e 	bl	c003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003bb8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 c003bba:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003bbc:	7722      	strb	r2, [r4, #28]
 c003bbe:	e79c      	b.n	c003afa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c003bc0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c003bc4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 c003bc6:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 c003bc8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 c003bca:	699b      	ldr	r3, [r3, #24]
 c003bcc:	0799      	lsls	r1, r3, #30
 c003bce:	d130      	bne.n	c003c32 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 c003bd0:	f7ff ff7c 	bl	c003acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 c003bd4:	4620      	mov	r0, r4
 c003bd6:	f7ff ff7d 	bl	c003ad4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003bda:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 c003bdc:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 c003bde:	7722      	strb	r2, [r4, #28]
 c003be0:	e785      	b.n	c003aee <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c003be2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 c003be6:	4620      	mov	r0, r4
}
 c003be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 c003bec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 c003bee:	f000 b87d 	b.w	c003cec <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c003bf2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 c003bf6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 c003bf8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 c003bfa:	f7ff ff65 	bl	c003ac8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 c003bfe:	6823      	ldr	r3, [r4, #0]
 c003c00:	e78d      	b.n	c003b1e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c003c02:	f06f 0280 	mvn.w	r2, #128	@ 0x80
      HAL_TIMEx_BreakCallback(htim);
 c003c06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 c003c08:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 c003c0a:	f000 f871 	bl	c003cf0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 c003c0e:	6823      	ldr	r3, [r4, #0]
 c003c10:	e78b      	b.n	c003b2a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c003c12:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 c003c16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 c003c18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 c003c1a:	f000 f86b 	bl	c003cf4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 c003c1e:	6823      	ldr	r3, [r4, #0]
 c003c20:	e789      	b.n	c003b36 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c003c22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 c003c26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 c003c28:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 c003c2a:	f7ff ff55 	bl	c003ad8 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 c003c2e:	6823      	ldr	r3, [r4, #0]
 c003c30:	e787      	b.n	c003b42 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 c003c32:	f7ff ff4d 	bl	c003ad0 <HAL_TIM_IC_CaptureCallback>
 c003c36:	e7d0      	b.n	c003bda <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 c003c38:	f7ff ff4a 	bl	c003ad0 <HAL_TIM_IC_CaptureCallback>
 c003c3c:	e7bc      	b.n	c003bb8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 c003c3e:	f7ff ff47 	bl	c003ad0 <HAL_TIM_IC_CaptureCallback>
 c003c42:	e7a6      	b.n	c003b92 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 c003c44:	f7ff ff44 	bl	c003ad0 <HAL_TIM_IC_CaptureCallback>
 c003c48:	e791      	b.n	c003b6e <HAL_TIM_IRQHandler+0x92>
 c003c4a:	bf00      	nop

0c003c4c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 c003c4c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 c003c50:	2a01      	cmp	r2, #1
 c003c52:	d045      	beq.n	c003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 c003c54:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 c003c56:	2002      	movs	r0, #2
{
 c003c58:	b470      	push	{r4, r5, r6}

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 c003c5a:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c003c5c:	4e21      	ldr	r6, [pc, #132]	@ (c003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 c003c5e:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c003c62:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 c003c64:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c003c66:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 c003c68:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 c003c6a:	d027      	beq.n	c003cbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 c003c6c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 c003c70:	42b2      	cmp	r2, r6
 c003c72:	d02c      	beq.n	c003cce <HAL_TIMEx_MasterConfigSynchronization+0x82>
  tmpcr2 &= ~TIM_CR2_MMS;
 c003c74:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c003c78:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c003c7a:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  htim->Instance->CR2 = tmpcr2;
 c003c7e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c003c80:	d00e      	beq.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 c003c82:	4819      	ldr	r0, [pc, #100]	@ (c003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 c003c84:	4282      	cmp	r2, r0
 c003c86:	d00b      	beq.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 c003c88:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 c003c8c:	4282      	cmp	r2, r0
 c003c8e:	d007      	beq.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 c003c90:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 c003c94:	4282      	cmp	r2, r0
 c003c96:	d003      	beq.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 c003c98:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 c003c9c:	4282      	cmp	r2, r0
 c003c9e:	d104      	bne.n	c003caa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c003ca0:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 c003ca2:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 c003ca6:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 c003ca8:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 c003caa:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 c003cac:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 c003cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 c003cb2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 c003cb6:	4610      	mov	r0, r2
}
 c003cb8:	bc70      	pop	{r4, r5, r6}
 c003cba:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c003cbc:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 c003cbe:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c003cc2:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 c003cc4:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c003cc8:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 c003cca:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c003ccc:	e7e8      	b.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c003cce:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 c003cd0:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 c003cd4:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 c003cd6:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 c003cda:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 c003cdc:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 c003cde:	e7df      	b.n	c003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 c003ce0:	2002      	movs	r0, #2
}
 c003ce2:	4770      	bx	lr
 c003ce4:	50012c00 	.word	0x50012c00
 c003ce8:	50000400 	.word	0x50000400

0c003cec <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 c003cec:	4770      	bx	lr
 c003cee:	bf00      	nop

0c003cf0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 c003cf0:	4770      	bx	lr
 c003cf2:	bf00      	nop

0c003cf4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 c003cf4:	4770      	bx	lr
 c003cf6:	bf00      	nop

0c003cf8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c003cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c003cfc:	461d      	mov	r5, r3
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 c003cfe:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 c003d02:	2b20      	cmp	r3, #32
 c003d04:	d153      	bne.n	c003dae <HAL_UART_Receive+0xb6>
  {
    if ((pData == NULL) || (Size == 0U))
 c003d06:	4689      	mov	r9, r1
 c003d08:	2900      	cmp	r1, #0
 c003d0a:	d04d      	beq.n	c003da8 <HAL_UART_Receive+0xb0>
 c003d0c:	4616      	mov	r6, r2
 c003d0e:	2a00      	cmp	r2, #0
 c003d10:	d04a      	beq.n	c003da8 <HAL_UART_Receive+0xb0>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 c003d12:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 c003d16:	4604      	mov	r4, r0
 c003d18:	2b01      	cmp	r3, #1
 c003d1a:	d048      	beq.n	c003dae <HAL_UART_Receive+0xb6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c003d1c:	2322      	movs	r3, #34	@ 0x22
    __HAL_LOCK(huart);
 c003d1e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c003d20:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 c003d24:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c003d28:	f8c0 808c 	str.w	r8, [r0, #140]	@ 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 c003d2c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c003d30:	f8c0 806c 	str.w	r8, [r0, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c003d34:	f7fe f858 	bl	c001de8 <HAL_GetTick>

    huart->RxXferSize  = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 c003d38:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 c003d3a:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 c003d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferSize  = Size;
 c003d40:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    huart->RxXferCount = Size;
 c003d44:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 c003d48:	d057      	beq.n	c003dfa <HAL_UART_Receive+0x102>
 c003d4a:	2b00      	cmp	r3, #0
 c003d4c:	d17e      	bne.n	c003e4c <HAL_UART_Receive+0x154>
    uhMask = huart->Mask;
 c003d4e:	4698      	mov	r8, r3
    UART_MASK_COMPUTATION(huart);
 c003d50:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 c003d52:	2b00      	cmp	r3, #0
 c003d54:	bf0c      	ite	eq
 c003d56:	26ff      	moveq	r6, #255	@ 0xff
 c003d58:	267f      	movne	r6, #127	@ 0x7f
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);
 c003d5a:	2300      	movs	r3, #0
 c003d5c:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 c003d60:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 c003d64:	f8a4 6060 	strh.w	r6, [r4, #96]	@ 0x60
    while (huart->RxXferCount > 0U)
 c003d68:	b29b      	uxth	r3, r3
 c003d6a:	b1bb      	cbz	r3, c003d9c <HAL_UART_Receive+0xa4>
 c003d6c:	6823      	ldr	r3, [r4, #0]
 c003d6e:	1c6a      	adds	r2, r5, #1
 c003d70:	d120      	bne.n	c003db4 <HAL_UART_Receive+0xbc>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003d72:	69da      	ldr	r2, [r3, #28]
 c003d74:	0690      	lsls	r0, r2, #26
 c003d76:	d5fc      	bpl.n	c003d72 <HAL_UART_Receive+0x7a>
      if (pdata8bits == NULL)
 c003d78:	f1b9 0f00 	cmp.w	r9, #0
 c003d7c:	d044      	beq.n	c003e08 <HAL_UART_Receive+0x110>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 c003d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 c003d80:	4033      	ands	r3, r6
 c003d82:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 c003d86:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 c003d8a:	3b01      	subs	r3, #1
 c003d8c:	b29b      	uxth	r3, r3
 c003d8e:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 c003d92:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 c003d96:	b29b      	uxth	r3, r3
 c003d98:	2b00      	cmp	r3, #0
 c003d9a:	d1e7      	bne.n	c003d6c <HAL_UART_Receive+0x74>
    huart->RxState = HAL_UART_STATE_READY;
 c003d9c:	2320      	movs	r3, #32
    return HAL_OK;
 c003d9e:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 c003da0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 c003da4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 c003da8:	2001      	movs	r0, #1
}
 c003daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(huart);
 c003dae:	2002      	movs	r0, #2
}
 c003db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c003db4:	69da      	ldr	r2, [r3, #28]
 c003db6:	0691      	lsls	r1, r2, #26
 c003db8:	d4de      	bmi.n	c003d78 <HAL_UART_Receive+0x80>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c003dba:	f7fe f815 	bl	c001de8 <HAL_GetTick>
 c003dbe:	1bc0      	subs	r0, r0, r7
 c003dc0:	4285      	cmp	r5, r0
 c003dc2:	6823      	ldr	r3, [r4, #0]
 c003dc4:	d330      	bcc.n	c003e28 <HAL_UART_Receive+0x130>
 c003dc6:	b37d      	cbz	r5, c003e28 <HAL_UART_Receive+0x130>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c003dc8:	681a      	ldr	r2, [r3, #0]
 c003dca:	0751      	lsls	r1, r2, #29
 c003dcc:	d5f2      	bpl.n	c003db4 <HAL_UART_Receive+0xbc>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c003dce:	69da      	ldr	r2, [r3, #28]
 c003dd0:	0512      	lsls	r2, r2, #20
 c003dd2:	d5ef      	bpl.n	c003db4 <HAL_UART_Receive+0xbc>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003dd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 c003dd8:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c003dda:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c003ddc:	6819      	ldr	r1, [r3, #0]
 c003dde:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 c003de2:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c003de4:	6899      	ldr	r1, [r3, #8]
 c003de6:	f021 0101 	bic.w	r1, r1, #1
 c003dea:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 c003dec:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c003df0:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c003df4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_TIMEOUT;
 c003df8:	e023      	b.n	c003e42 <HAL_UART_Receive+0x14a>
    UART_MASK_COMPUTATION(huart);
 c003dfa:	6923      	ldr	r3, [r4, #16]
 c003dfc:	bb5b      	cbnz	r3, c003e56 <HAL_UART_Receive+0x15e>
 c003dfe:	46c8      	mov	r8, r9
    uhMask = huart->Mask;
 c003e00:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 c003e04:	4699      	mov	r9, r3
 c003e06:	e7a8      	b.n	c003d5a <HAL_UART_Receive+0x62>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 c003e08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 c003e0a:	4032      	ands	r2, r6
 c003e0c:	f828 2b02 	strh.w	r2, [r8], #2
      huart->RxXferCount--;
 c003e10:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 c003e14:	3a01      	subs	r2, #1
 c003e16:	b292      	uxth	r2, r2
 c003e18:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 c003e1c:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
 c003e20:	b292      	uxth	r2, r2
 c003e22:	2a00      	cmp	r2, #0
 c003e24:	d1a3      	bne.n	c003d6e <HAL_UART_Receive+0x76>
 c003e26:	e7b9      	b.n	c003d9c <HAL_UART_Receive+0xa4>
        huart->gState = HAL_UART_STATE_READY;
 c003e28:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c003e2a:	681a      	ldr	r2, [r3, #0]
 c003e2c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c003e30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c003e32:	689a      	ldr	r2, [r3, #8]
 c003e34:	f022 0201 	bic.w	r2, r2, #1
 c003e38:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 c003e3a:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c003e3e:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
          __HAL_UNLOCK(huart);
 c003e42:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 c003e44:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 c003e46:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
 c003e4a:	e7ae      	b.n	c003daa <HAL_UART_Receive+0xb2>
    UART_MASK_COMPUTATION(huart);
 c003e4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 c003e50:	d003      	beq.n	c003e5a <HAL_UART_Receive+0x162>
    uhMask = huart->Mask;
 c003e52:	4646      	mov	r6, r8
 c003e54:	e781      	b.n	c003d5a <HAL_UART_Receive+0x62>
 c003e56:	26ff      	movs	r6, #255	@ 0xff
 c003e58:	e77f      	b.n	c003d5a <HAL_UART_Receive+0x62>
    UART_MASK_COMPUTATION(huart);
 c003e5a:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 c003e5c:	2b00      	cmp	r3, #0
 c003e5e:	bf14      	ite	ne
 c003e60:	263f      	movne	r6, #63	@ 0x3f
 c003e62:	267f      	moveq	r6, #127	@ 0x7f
 c003e64:	e779      	b.n	c003d5a <HAL_UART_Receive+0x62>
 c003e66:	bf00      	nop

0c003e68 <UART_SetConfig>:
{
 c003e68:	b570      	push	{r4, r5, r6, lr}
 c003e6a:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c003e6c:	6926      	ldr	r6, [r4, #16]
 c003e6e:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 c003e70:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c003e72:	4332      	orrs	r2, r6
 c003e74:	6966      	ldr	r6, [r4, #20]
 c003e76:	69c0      	ldr	r0, [r0, #28]
 c003e78:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c003e7a:	49a5      	ldr	r1, [pc, #660]	@ (c004110 <UART_SetConfig+0x2a8>)
 c003e7c:	681e      	ldr	r6, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c003e7e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c003e80:	4031      	ands	r1, r6
 c003e82:	430a      	orrs	r2, r1
 c003e84:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c003e86:	685a      	ldr	r2, [r3, #4]
 c003e88:	68e1      	ldr	r1, [r4, #12]
 c003e8a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 c003e8e:	430a      	orrs	r2, r1
 c003e90:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c003e92:	4da0      	ldr	r5, [pc, #640]	@ (c004114 <UART_SetConfig+0x2ac>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003e94:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c003e96:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003e98:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c003e9c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c003e9e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003ea0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c003ea4:	f000 80d4 	beq.w	c004050 <UART_SetConfig+0x1e8>
    tmpreg |= huart->Init.OneBitSampling;
 c003ea8:	6a25      	ldr	r5, [r4, #32]
 c003eaa:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c003eac:	430a      	orrs	r2, r1
 c003eae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c003eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 c003eb2:	f022 020f 	bic.w	r2, r2, #15
 c003eb6:	4332      	orrs	r2, r6
 c003eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003eba:	4a97      	ldr	r2, [pc, #604]	@ (c004118 <UART_SetConfig+0x2b0>)
 c003ebc:	4293      	cmp	r3, r2
 c003ebe:	d039      	beq.n	c003f34 <UART_SetConfig+0xcc>
 c003ec0:	4a96      	ldr	r2, [pc, #600]	@ (c00411c <UART_SetConfig+0x2b4>)
 c003ec2:	4293      	cmp	r3, r2
 c003ec4:	d012      	beq.n	c003eec <UART_SetConfig+0x84>
 c003ec6:	4a96      	ldr	r2, [pc, #600]	@ (c004120 <UART_SetConfig+0x2b8>)
 c003ec8:	4293      	cmp	r3, r2
 c003eca:	f000 80a9 	beq.w	c004020 <UART_SetConfig+0x1b8>
 c003ece:	4a95      	ldr	r2, [pc, #596]	@ (c004124 <UART_SetConfig+0x2bc>)
 c003ed0:	4293      	cmp	r3, r2
 c003ed2:	d043      	beq.n	c003f5c <UART_SetConfig+0xf4>
 c003ed4:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
 c003ed8:	f000 8091 	beq.w	c003ffe <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 c003edc:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 c003ede:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 c003ee0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 c003ee4:	6723      	str	r3, [r4, #112]	@ 0x70
  huart->NbRxDataToProcess = 1;
 c003ee6:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 c003ee8:	6763      	str	r3, [r4, #116]	@ 0x74
}
 c003eea:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003eec:	4b8e      	ldr	r3, [pc, #568]	@ (c004128 <UART_SetConfig+0x2c0>)
 c003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c003ef2:	f003 030c 	and.w	r3, r3, #12
 c003ef6:	2b0c      	cmp	r3, #12
 c003ef8:	d8f0      	bhi.n	c003edc <UART_SetConfig+0x74>
 c003efa:	a201      	add	r2, pc, #4	@ (adr r2, c003f00 <UART_SetConfig+0x98>)
 c003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003f00:	0c004015 	.word	0x0c004015
 c003f04:	0c003edd 	.word	0x0c003edd
 c003f08:	0c003edd 	.word	0x0c003edd
 c003f0c:	0c003edd 	.word	0x0c003edd
 c003f10:	0c003f75 	.word	0x0c003f75
 c003f14:	0c003edd 	.word	0x0c003edd
 c003f18:	0c003edd 	.word	0x0c003edd
 c003f1c:	0c003edd 	.word	0x0c003edd
 c003f20:	0c003fbf 	.word	0x0c003fbf
 c003f24:	0c003edd 	.word	0x0c003edd
 c003f28:	0c003edd 	.word	0x0c003edd
 c003f2c:	0c003edd 	.word	0x0c003edd
 c003f30:	0c003f8d 	.word	0x0c003f8d
 c003f34:	4b7c      	ldr	r3, [pc, #496]	@ (c004128 <UART_SetConfig+0x2c0>)
 c003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c003f3a:	f003 0303 	and.w	r3, r3, #3
 c003f3e:	2b02      	cmp	r3, #2
 c003f40:	d03d      	beq.n	c003fbe <UART_SetConfig+0x156>
 c003f42:	2b03      	cmp	r3, #3
 c003f44:	d022      	beq.n	c003f8c <UART_SetConfig+0x124>
 c003f46:	2b01      	cmp	r3, #1
 c003f48:	d014      	beq.n	c003f74 <UART_SetConfig+0x10c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003f4a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 c003f4e:	f000 80d6 	beq.w	c0040fe <UART_SetConfig+0x296>
        pclk = HAL_RCC_GetPCLK2Freq();
 c003f52:	f7ff f8a3 	bl	c00309c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 c003f56:	b9a8      	cbnz	r0, c003f84 <UART_SetConfig+0x11c>
        ret = HAL_ERROR;
 c003f58:	2000      	movs	r0, #0
 c003f5a:	e7c0      	b.n	c003ede <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003f5c:	4b72      	ldr	r3, [pc, #456]	@ (c004128 <UART_SetConfig+0x2c0>)
 c003f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c003f62:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 c003f66:	2b80      	cmp	r3, #128	@ 0x80
 c003f68:	d029      	beq.n	c003fbe <UART_SetConfig+0x156>
 c003f6a:	d866      	bhi.n	c00403a <UART_SetConfig+0x1d2>
 c003f6c:	2b00      	cmp	r3, #0
 c003f6e:	d051      	beq.n	c004014 <UART_SetConfig+0x1ac>
 c003f70:	2b40      	cmp	r3, #64	@ 0x40
 c003f72:	d1b3      	bne.n	c003edc <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003f74:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 c003f78:	f000 80c6 	beq.w	c004108 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetSysClockFreq();
 c003f7c:	f7fe fadc 	bl	c002538 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 c003f80:	2800      	cmp	r0, #0
 c003f82:	d0e9      	beq.n	c003f58 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003f84:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 c003f86:	e006      	b.n	c003f96 <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003f88:	2b30      	cmp	r3, #48	@ 0x30
 c003f8a:	d1a7      	bne.n	c003edc <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003f8c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 c003f90:	d019      	beq.n	c003fc6 <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 c003f92:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003f96:	4a65      	ldr	r2, [pc, #404]	@ (c00412c <UART_SetConfig+0x2c4>)
 c003f98:	6863      	ldr	r3, [r4, #4]
 c003f9a:	f832 1016 	ldrh.w	r1, [r2, r6, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003f9e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003fa2:	fbb0 f0f1 	udiv	r0, r0, r1
 c003fa6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 c003faa:	fbb0 f0f3 	udiv	r0, r0, r3
 c003fae:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003fb0:	f1a0 0310 	sub.w	r3, r0, #16
 c003fb4:	4293      	cmp	r3, r2
 c003fb6:	d891      	bhi.n	c003edc <UART_SetConfig+0x74>
          huart->Instance->BRR = usartdiv;
 c003fb8:	6823      	ldr	r3, [r4, #0]
 c003fba:	60d8      	str	r0, [r3, #12]
 c003fbc:	e7cc      	b.n	c003f58 <UART_SetConfig+0xf0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003fbe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 c003fc2:	485b      	ldr	r0, [pc, #364]	@ (c004130 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c003fc4:	d1e7      	bne.n	c003f96 <UART_SetConfig+0x12e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c003fc6:	4b59      	ldr	r3, [pc, #356]	@ (c00412c <UART_SetConfig+0x2c4>)
 c003fc8:	6862      	ldr	r2, [r4, #4]
 c003fca:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
 c003fce:	0853      	lsrs	r3, r2, #1
 c003fd0:	fbb0 f0f1 	udiv	r0, r0, r1
 c003fd4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 c003fd8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c003fdc:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 c003fe0:	b29a      	uxth	r2, r3
 c003fe2:	f1a2 0010 	sub.w	r0, r2, #16
 c003fe6:	4288      	cmp	r0, r1
 c003fe8:	f63f af78 	bhi.w	c003edc <UART_SetConfig+0x74>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c003fec:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 c003ff0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c003ff2:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c003ff4:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 c003ff8:	4313      	orrs	r3, r2
 c003ffa:	60cb      	str	r3, [r1, #12]
 c003ffc:	e7ac      	b.n	c003f58 <UART_SetConfig+0xf0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c003ffe:	f503 33e0 	add.w	r3, r3, #114688	@ 0x1c000
 c004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c004006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 c00400a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 c00400e:	d0d6      	beq.n	c003fbe <UART_SetConfig+0x156>
 c004010:	d81a      	bhi.n	c004048 <UART_SetConfig+0x1e0>
 c004012:	b9ab      	cbnz	r3, c004040 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c004014:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 c004018:	d067      	beq.n	c0040ea <UART_SetConfig+0x282>
        pclk = HAL_RCC_GetPCLK1Freq();
 c00401a:	f7fe ffd3 	bl	c002fc4 <HAL_RCC_GetPCLK1Freq>
        break;
 c00401e:	e79a      	b.n	c003f56 <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c004020:	4b41      	ldr	r3, [pc, #260]	@ (c004128 <UART_SetConfig+0x2c0>)
 c004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 c004026:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 c00402a:	2b20      	cmp	r3, #32
 c00402c:	d0c7      	beq.n	c003fbe <UART_SetConfig+0x156>
 c00402e:	d8ab      	bhi.n	c003f88 <UART_SetConfig+0x120>
 c004030:	2b00      	cmp	r3, #0
 c004032:	d0ef      	beq.n	c004014 <UART_SetConfig+0x1ac>
 c004034:	2b10      	cmp	r3, #16
 c004036:	d09d      	beq.n	c003f74 <UART_SetConfig+0x10c>
 c004038:	e750      	b.n	c003edc <UART_SetConfig+0x74>
 c00403a:	2bc0      	cmp	r3, #192	@ 0xc0
 c00403c:	d0a6      	beq.n	c003f8c <UART_SetConfig+0x124>
 c00403e:	e74d      	b.n	c003edc <UART_SetConfig+0x74>
 c004040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 c004044:	d096      	beq.n	c003f74 <UART_SetConfig+0x10c>
 c004046:	e749      	b.n	c003edc <UART_SetConfig+0x74>
 c004048:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 c00404c:	d09e      	beq.n	c003f8c <UART_SetConfig+0x124>
 c00404e:	e745      	b.n	c003edc <UART_SetConfig+0x74>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c004050:	4311      	orrs	r1, r2
 c004052:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c004054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c004056:	4934      	ldr	r1, [pc, #208]	@ (c004128 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c004058:	f022 020f 	bic.w	r2, r2, #15
 c00405c:	4332      	orrs	r2, r6
 c00405e:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 c004060:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 c004064:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 c004068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 c00406c:	d04a      	beq.n	c004104 <UART_SetConfig+0x29c>
 c00406e:	d835      	bhi.n	c0040dc <UART_SetConfig+0x274>
 c004070:	2b00      	cmp	r3, #0
 c004072:	d041      	beq.n	c0040f8 <UART_SetConfig+0x290>
 c004074:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 c004078:	f47f af30 	bne.w	c003edc <UART_SetConfig+0x74>
        pclk = HAL_RCC_GetSysClockFreq();
 c00407c:	f7fe fa5c 	bl	c002538 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 c004080:	2800      	cmp	r0, #0
 c004082:	f43f af69 	beq.w	c003f58 <UART_SetConfig+0xf0>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c004086:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 c004088:	4b28      	ldr	r3, [pc, #160]	@ (c00412c <UART_SetConfig+0x2c4>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c00408a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c00408c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004090:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c004094:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004098:	4299      	cmp	r1, r3
 c00409a:	f63f af1f 	bhi.w	c003edc <UART_SetConfig+0x74>
 c00409e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 c0040a2:	f63f af1b 	bhi.w	c003edc <UART_SetConfig+0x74>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0040a6:	2300      	movs	r3, #0
 c0040a8:	4619      	mov	r1, r3
 c0040aa:	f7fc f8f3 	bl	c000294 <__aeabi_uldivmod>
 c0040ae:	4606      	mov	r6, r0
 c0040b0:	462a      	mov	r2, r5
 c0040b2:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 c0040b6:	0209      	lsls	r1, r1, #8
 c0040b8:	0235      	lsls	r5, r6, #8
 c0040ba:	eb15 000c 	adds.w	r0, r5, ip
 c0040be:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 c0040c2:	f04f 0300 	mov.w	r3, #0
 c0040c6:	f141 0100 	adc.w	r1, r1, #0
 c0040ca:	f7fc f8e3 	bl	c000294 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c0040ce:	4b19      	ldr	r3, [pc, #100]	@ (c004134 <UART_SetConfig+0x2cc>)
 c0040d0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 c0040d4:	429a      	cmp	r2, r3
 c0040d6:	f63f af01 	bhi.w	c003edc <UART_SetConfig+0x74>
 c0040da:	e76d      	b.n	c003fb8 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0040dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 c0040e0:	f47f aefc 	bne.w	c003edc <UART_SetConfig+0x74>
        pclk = (uint32_t) LSE_VALUE;
 c0040e4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 c0040e8:	e7ce      	b.n	c004088 <UART_SetConfig+0x220>
        pclk = HAL_RCC_GetPCLK1Freq();
 c0040ea:	f7fe ff6b 	bl	c002fc4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 c0040ee:	2800      	cmp	r0, #0
 c0040f0:	f43f af32 	beq.w	c003f58 <UART_SetConfig+0xf0>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0040f4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 c0040f6:	e766      	b.n	c003fc6 <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK1Freq();
 c0040f8:	f7fe ff64 	bl	c002fc4 <HAL_RCC_GetPCLK1Freq>
        break;
 c0040fc:	e7c0      	b.n	c004080 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetPCLK2Freq();
 c0040fe:	f7fe ffcd 	bl	c00309c <HAL_RCC_GetPCLK2Freq>
        break;
 c004102:	e7f4      	b.n	c0040ee <UART_SetConfig+0x286>
        pclk = (uint32_t) HSI_VALUE;
 c004104:	480a      	ldr	r0, [pc, #40]	@ (c004130 <UART_SetConfig+0x2c8>)
 c004106:	e7bf      	b.n	c004088 <UART_SetConfig+0x220>
        pclk = HAL_RCC_GetSysClockFreq();
 c004108:	f7fe fa16 	bl	c002538 <HAL_RCC_GetSysClockFreq>
        break;
 c00410c:	e7ef      	b.n	c0040ee <UART_SetConfig+0x286>
 c00410e:	bf00      	nop
 c004110:	cfff69f3 	.word	0xcfff69f3
 c004114:	50008000 	.word	0x50008000
 c004118:	50013800 	.word	0x50013800
 c00411c:	50004400 	.word	0x50004400
 c004120:	50004800 	.word	0x50004800
 c004124:	50004c00 	.word	0x50004c00
 c004128:	50021000 	.word	0x50021000
 c00412c:	0c00519c 	.word	0x0c00519c
 c004130:	00f42400 	.word	0x00f42400
 c004134:	000ffcff 	.word	0x000ffcff

0c004138 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c004138:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 c00413a:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c00413c:	07da      	lsls	r2, r3, #31
 c00413e:	d506      	bpl.n	c00414e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c004140:	6801      	ldr	r1, [r0, #0]
 c004142:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 c004144:	684a      	ldr	r2, [r1, #4]
 c004146:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 c00414a:	4322      	orrs	r2, r4
 c00414c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00414e:	079c      	lsls	r4, r3, #30
 c004150:	d506      	bpl.n	c004160 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c004152:	6801      	ldr	r1, [r0, #0]
 c004154:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 c004156:	684a      	ldr	r2, [r1, #4]
 c004158:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 c00415c:	4322      	orrs	r2, r4
 c00415e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c004160:	0759      	lsls	r1, r3, #29
 c004162:	d506      	bpl.n	c004172 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c004164:	6801      	ldr	r1, [r0, #0]
 c004166:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 c004168:	684a      	ldr	r2, [r1, #4]
 c00416a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 c00416e:	4322      	orrs	r2, r4
 c004170:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c004172:	071a      	lsls	r2, r3, #28
 c004174:	d506      	bpl.n	c004184 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c004176:	6801      	ldr	r1, [r0, #0]
 c004178:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 c00417a:	684a      	ldr	r2, [r1, #4]
 c00417c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 c004180:	4322      	orrs	r2, r4
 c004182:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c004184:	06dc      	lsls	r4, r3, #27
 c004186:	d506      	bpl.n	c004196 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c004188:	6801      	ldr	r1, [r0, #0]
 c00418a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 c00418c:	688a      	ldr	r2, [r1, #8]
 c00418e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 c004192:	4322      	orrs	r2, r4
 c004194:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c004196:	0699      	lsls	r1, r3, #26
 c004198:	d506      	bpl.n	c0041a8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00419a:	6801      	ldr	r1, [r0, #0]
 c00419c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 c00419e:	688a      	ldr	r2, [r1, #8]
 c0041a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 c0041a4:	4322      	orrs	r2, r4
 c0041a6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c0041a8:	065a      	lsls	r2, r3, #25
 c0041aa:	d50a      	bpl.n	c0041c2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0041ac:	6801      	ldr	r1, [r0, #0]
 c0041ae:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 c0041b0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0041b2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0041b6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 c0041ba:	ea42 0204 	orr.w	r2, r2, r4
 c0041be:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0041c0:	d00b      	beq.n	c0041da <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c0041c2:	061b      	lsls	r3, r3, #24
 c0041c4:	d506      	bpl.n	c0041d4 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c0041c6:	6802      	ldr	r2, [r0, #0]
 c0041c8:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 c0041ca:	6853      	ldr	r3, [r2, #4]
 c0041cc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 c0041d0:	430b      	orrs	r3, r1
 c0041d2:	6053      	str	r3, [r2, #4]
}
 c0041d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 c0041d8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0041da:	684a      	ldr	r2, [r1, #4]
 c0041dc:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 c0041de:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 c0041e2:	4322      	orrs	r2, r4
 c0041e4:	604a      	str	r2, [r1, #4]
 c0041e6:	e7ec      	b.n	c0041c2 <UART_AdvFeatureConfig+0x8a>

0c0041e8 <UART_CheckIdleState>:
{
 c0041e8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0041ea:	2300      	movs	r3, #0
{
 c0041ec:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0041ee:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  tickstart = HAL_GetTick();
 c0041f2:	f7fd fdf9 	bl	c001de8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0041f6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 c0041f8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0041fa:	681a      	ldr	r2, [r3, #0]
 c0041fc:	0711      	lsls	r1, r2, #28
 c0041fe:	d40e      	bmi.n	c00421e <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c004200:	681a      	ldr	r2, [r3, #0]
 c004202:	0752      	lsls	r2, r2, #29
 c004204:	d42f      	bmi.n	c004266 <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c004206:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 c004208:	2220      	movs	r2, #32
  return HAL_OK;
 c00420a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 c00420c:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 c004210:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c004214:	66e3      	str	r3, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 c004216:	2300      	movs	r3, #0
 c004218:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
}
 c00421c:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00421e:	69da      	ldr	r2, [r3, #28]
 c004220:	0292      	lsls	r2, r2, #10
 c004222:	d4ed      	bmi.n	c004200 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c004224:	f7fd fde0 	bl	c001de8 <HAL_GetTick>
 c004228:	1b43      	subs	r3, r0, r5
 c00422a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c00422e:	d22b      	bcs.n	c004288 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c004230:	6823      	ldr	r3, [r4, #0]
 c004232:	681a      	ldr	r2, [r3, #0]
 c004234:	0750      	lsls	r0, r2, #29
 c004236:	d5f2      	bpl.n	c00421e <UART_CheckIdleState+0x36>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c004238:	69da      	ldr	r2, [r3, #28]
 c00423a:	0511      	lsls	r1, r2, #20
 c00423c:	d5ef      	bpl.n	c00421e <UART_CheckIdleState+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00423e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
          huart->gState = HAL_UART_STATE_READY;
 c004242:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c004244:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c004246:	6819      	ldr	r1, [r3, #0]
 c004248:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 c00424c:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00424e:	6899      	ldr	r1, [r3, #8]
 c004250:	f021 0101 	bic.w	r1, r1, #1
 c004254:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 c004256:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c00425a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c00425e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 c004262:	2003      	movs	r0, #3
 c004264:	e7d7      	b.n	c004216 <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c004266:	69db      	ldr	r3, [r3, #28]
 c004268:	0258      	lsls	r0, r3, #9
 c00426a:	d4cc      	bmi.n	c004206 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00426c:	f7fd fdbc 	bl	c001de8 <HAL_GetTick>
 c004270:	1b43      	subs	r3, r0, r5
 c004272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 c004276:	d207      	bcs.n	c004288 <UART_CheckIdleState+0xa0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c004278:	6823      	ldr	r3, [r4, #0]
 c00427a:	681a      	ldr	r2, [r3, #0]
 c00427c:	0751      	lsls	r1, r2, #29
 c00427e:	d5f2      	bpl.n	c004266 <UART_CheckIdleState+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c004280:	69da      	ldr	r2, [r3, #28]
 c004282:	0512      	lsls	r2, r2, #20
 c004284:	d5ef      	bpl.n	c004266 <UART_CheckIdleState+0x7e>
 c004286:	e7da      	b.n	c00423e <UART_CheckIdleState+0x56>
        huart->gState = HAL_UART_STATE_READY;
 c004288:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c00428a:	6823      	ldr	r3, [r4, #0]
 c00428c:	681a      	ldr	r2, [r3, #0]
 c00428e:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c004292:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c004294:	689a      	ldr	r2, [r3, #8]
 c004296:	f022 0201 	bic.w	r2, r2, #1
 c00429a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 c00429c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c0042a0:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 c0042a4:	e7dd      	b.n	c004262 <UART_CheckIdleState+0x7a>
 c0042a6:	bf00      	nop

0c0042a8 <HAL_UART_Init>:
  if (huart == NULL)
 c0042a8:	b380      	cbz	r0, c00430c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 c0042aa:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 c0042ae:	b510      	push	{r4, lr}
 c0042b0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 c0042b2:	b333      	cbz	r3, c004302 <HAL_UART_Init+0x5a>
  huart->gState = HAL_UART_STATE_BUSY;
 c0042b4:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 c0042b6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c0042b8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  __HAL_UART_DISABLE(huart);
 c0042bc:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0042be:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 c0042c0:	f023 0301 	bic.w	r3, r3, #1
 c0042c4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0042c6:	f7ff fdcf 	bl	c003e68 <UART_SetConfig>
 c0042ca:	2801      	cmp	r0, #1
 c0042cc:	d017      	beq.n	c0042fe <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0042ce:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 c0042d0:	b98b      	cbnz	r3, c0042f6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0042d2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 c0042d4:	4620      	mov	r0, r4
}
 c0042d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0042da:	685a      	ldr	r2, [r3, #4]
 c0042dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 c0042e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0042e2:	689a      	ldr	r2, [r3, #8]
 c0042e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 c0042e8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 c0042ea:	681a      	ldr	r2, [r3, #0]
 c0042ec:	f042 0201 	orr.w	r2, r2, #1
 c0042f0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 c0042f2:	f7ff bf79 	b.w	c0041e8 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 c0042f6:	4620      	mov	r0, r4
 c0042f8:	f7ff ff1e 	bl	c004138 <UART_AdvFeatureConfig>
 c0042fc:	e7e9      	b.n	c0042d2 <HAL_UART_Init+0x2a>
}
 c0042fe:	2001      	movs	r0, #1
 c004300:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 c004302:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    HAL_UART_MspInit(huart);
 c004306:	f7fd fcb3 	bl	c001c70 <HAL_UART_MspInit>
 c00430a:	e7d3      	b.n	c0042b4 <HAL_UART_Init+0xc>
}
 c00430c:	2001      	movs	r0, #1
 c00430e:	4770      	bx	lr

0c004310 <UART_WaitOnFlagUntilTimeout>:
{
 c004310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c004318:	460d      	mov	r5, r1
 c00431a:	f1b8 3fff 	cmp.w	r8, #4294967295
 c00431e:	4616      	mov	r6, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c004320:	6804      	ldr	r4, [r0, #0]
 c004322:	d10a      	bne.n	c00433a <UART_WaitOnFlagUntilTimeout+0x2a>
 c004324:	69e3      	ldr	r3, [r4, #28]
 c004326:	ea35 0303 	bics.w	r3, r5, r3
 c00432a:	bf0c      	ite	eq
 c00432c:	2301      	moveq	r3, #1
 c00432e:	2300      	movne	r3, #0
 c004330:	42b3      	cmp	r3, r6
 c004332:	d0f7      	beq.n	c004324 <UART_WaitOnFlagUntilTimeout+0x14>
        }
      }
    }
  }
  return HAL_OK;
 c004334:	2000      	movs	r0, #0
}
 c004336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c00433a:	4607      	mov	r7, r0
 c00433c:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00433e:	69e2      	ldr	r2, [r4, #28]
 c004340:	ea35 0202 	bics.w	r2, r5, r2
 c004344:	bf0c      	ite	eq
 c004346:	2301      	moveq	r3, #1
 c004348:	2300      	movne	r3, #0
 c00434a:	42b3      	cmp	r3, r6
 c00434c:	d1f2      	bne.n	c004334 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00434e:	f7fd fd4b 	bl	c001de8 <HAL_GetTick>
 c004352:	eba0 0009 	sub.w	r0, r0, r9
 c004356:	4540      	cmp	r0, r8
 c004358:	d821      	bhi.n	c00439e <UART_WaitOnFlagUntilTimeout+0x8e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00435a:	683c      	ldr	r4, [r7, #0]
 c00435c:	4623      	mov	r3, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00435e:	f1b8 0f00 	cmp.w	r8, #0
 c004362:	d01d      	beq.n	c0043a0 <UART_WaitOnFlagUntilTimeout+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c004364:	6823      	ldr	r3, [r4, #0]
 c004366:	0759      	lsls	r1, r3, #29
 c004368:	d5e9      	bpl.n	c00433e <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00436a:	69e3      	ldr	r3, [r4, #28]
 c00436c:	051a      	lsls	r2, r3, #20
 c00436e:	d5e6      	bpl.n	c00433e <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c004370:	f44f 6200 	mov.w	r2, #2048	@ 0x800
          huart->gState = HAL_UART_STATE_READY;
 c004374:	2320      	movs	r3, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c004376:	6222      	str	r2, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c004378:	6822      	ldr	r2, [r4, #0]
 c00437a:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c00437e:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c004380:	68a2      	ldr	r2, [r4, #8]
 c004382:	f022 0201 	bic.w	r2, r2, #1
 c004386:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 c004388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 c00438c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c004390:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 c004394:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 c004396:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 c004398:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 c00439c:	e7cb      	b.n	c004336 <UART_WaitOnFlagUntilTimeout+0x26>
 c00439e:	683b      	ldr	r3, [r7, #0]
        huart->gState = HAL_UART_STATE_READY;
 c0043a0:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0043a2:	681a      	ldr	r2, [r3, #0]
 c0043a4:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 c0043a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0043aa:	689a      	ldr	r2, [r3, #8]
 c0043ac:	f022 0201 	bic.w	r2, r2, #1
 c0043b0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 c0043b2:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 c0043b6:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
        return HAL_TIMEOUT;
 c0043ba:	e7eb      	b.n	c004394 <UART_WaitOnFlagUntilTimeout+0x84>

0c0043bc <HAL_UART_Transmit>:
{
 c0043bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0043c0:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 c0043c2:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
{
 c0043c6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 c0043c8:	2b20      	cmp	r3, #32
 c0043ca:	d17d      	bne.n	c0044c8 <HAL_UART_Transmit+0x10c>
    if ((pData == NULL) || (Size == 0U))
 c0043cc:	4689      	mov	r9, r1
 c0043ce:	2900      	cmp	r1, #0
 c0043d0:	d047      	beq.n	c004462 <HAL_UART_Transmit+0xa6>
 c0043d2:	4617      	mov	r7, r2
 c0043d4:	2a00      	cmp	r2, #0
 c0043d6:	d044      	beq.n	c004462 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 c0043d8:	f890 3080 	ldrb.w	r3, [r0, #128]	@ 0x80
 c0043dc:	4604      	mov	r4, r0
 c0043de:	2b01      	cmp	r3, #1
 c0043e0:	d072      	beq.n	c0044c8 <HAL_UART_Transmit+0x10c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c0043e2:	2321      	movs	r3, #33	@ 0x21
    __HAL_LOCK(huart);
 c0043e4:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0043e6:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 c0043ea:	f880 2080 	strb.w	r2, [r0, #128]	@ 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0043ee:	f8c0 808c 	str.w	r8, [r0, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c0043f2:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    tickstart = HAL_GetTick();
 c0043f6:	f7fd fcf7 	bl	c001de8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0043fa:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 c0043fc:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0043fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize  = Size;
 c004402:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 c004406:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c00440a:	d061      	beq.n	c0044d0 <HAL_UART_Transmit+0x114>
      pdata16bits = NULL;
 c00440c:	4647      	mov	r7, r8
    __HAL_UNLOCK(huart);
 c00440e:	2300      	movs	r3, #0
 c004410:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    while (huart->TxXferCount > 0U)
 c004414:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 c004418:	b29b      	uxth	r3, r3
 c00441a:	b1b3      	cbz	r3, c00444a <HAL_UART_Transmit+0x8e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00441c:	6823      	ldr	r3, [r4, #0]
 c00441e:	1c6a      	adds	r2, r5, #1
 c004420:	d123      	bne.n	c00446a <HAL_UART_Transmit+0xae>
 c004422:	69da      	ldr	r2, [r3, #28]
 c004424:	0611      	lsls	r1, r2, #24
 c004426:	d5fc      	bpl.n	c004422 <HAL_UART_Transmit+0x66>
      if (pdata8bits == NULL)
 c004428:	f1b9 0f00 	cmp.w	r9, #0
 c00442c:	d047      	beq.n	c0044be <HAL_UART_Transmit+0x102>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c00442e:	f819 2b01 	ldrb.w	r2, [r9], #1
 c004432:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 c004434:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 c004438:	3a01      	subs	r2, #1
 c00443a:	b292      	uxth	r2, r2
 c00443c:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 c004440:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 c004444:	b292      	uxth	r2, r2
 c004446:	2a00      	cmp	r2, #0
 c004448:	d1e9      	bne.n	c00441e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c00444a:	4633      	mov	r3, r6
 c00444c:	2200      	movs	r2, #0
 c00444e:	2140      	movs	r1, #64	@ 0x40
 c004450:	4620      	mov	r0, r4
 c004452:	9500      	str	r5, [sp, #0]
 c004454:	f7ff ff5c 	bl	c004310 <UART_WaitOnFlagUntilTimeout>
 c004458:	bb68      	cbnz	r0, c0044b6 <HAL_UART_Transmit+0xfa>
    huart->gState = HAL_UART_STATE_READY;
 c00445a:	2320      	movs	r3, #32
 c00445c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
    return HAL_OK;
 c004460:	e000      	b.n	c004464 <HAL_UART_Transmit+0xa8>
      return  HAL_ERROR;
 c004462:	2001      	movs	r0, #1
}
 c004464:	b003      	add	sp, #12
 c004466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00446a:	69da      	ldr	r2, [r3, #28]
 c00446c:	f012 0880 	ands.w	r8, r2, #128	@ 0x80
 c004470:	d1da      	bne.n	c004428 <HAL_UART_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c004472:	f7fd fcb9 	bl	c001de8 <HAL_GetTick>
 c004476:	1b80      	subs	r0, r0, r6
 c004478:	4285      	cmp	r5, r0
 c00447a:	d32f      	bcc.n	c0044dc <HAL_UART_Transmit+0x120>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00447c:	6823      	ldr	r3, [r4, #0]
 c00447e:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c004480:	b36d      	cbz	r5, c0044de <HAL_UART_Transmit+0x122>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c004482:	681a      	ldr	r2, [r3, #0]
 c004484:	0752      	lsls	r2, r2, #29
 c004486:	d5f0      	bpl.n	c00446a <HAL_UART_Transmit+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c004488:	69da      	ldr	r2, [r3, #28]
 c00448a:	0510      	lsls	r0, r2, #20
 c00448c:	d5ed      	bpl.n	c00446a <HAL_UART_Transmit+0xae>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00448e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
          huart->gState = HAL_UART_STATE_READY;
 c004492:	2220      	movs	r2, #32
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c004494:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c004496:	6819      	ldr	r1, [r3, #0]
 c004498:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 c00449c:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00449e:	6899      	ldr	r1, [r3, #8]
 c0044a0:	f021 0101 	bic.w	r1, r1, #1
 c0044a4:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 c0044a6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 c0044aa:	f884 8080 	strb.w	r8, [r4, #128]	@ 0x80
          huart->RxState = HAL_UART_STATE_READY;
 c0044ae:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0044b2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 c0044b6:	2003      	movs	r0, #3
}
 c0044b8:	b003      	add	sp, #12
 c0044ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0044be:	f837 2b02 	ldrh.w	r2, [r7], #2
 c0044c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c0044c6:	e7b4      	b.n	c004432 <HAL_UART_Transmit+0x76>
    __HAL_LOCK(huart);
 c0044c8:	2002      	movs	r0, #2
}
 c0044ca:	b003      	add	sp, #12
 c0044cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0044d0:	6923      	ldr	r3, [r4, #16]
 c0044d2:	2b00      	cmp	r3, #0
 c0044d4:	d19a      	bne.n	c00440c <HAL_UART_Transmit+0x50>
 c0044d6:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 c0044d8:	4699      	mov	r9, r3
 c0044da:	e798      	b.n	c00440e <HAL_UART_Transmit+0x52>
 c0044dc:	6822      	ldr	r2, [r4, #0]
        huart->gState = HAL_UART_STATE_READY;
 c0044de:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 c0044e0:	2000      	movs	r0, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 c0044e2:	6813      	ldr	r3, [r2, #0]
 c0044e4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 c0044e8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0044ea:	6893      	ldr	r3, [r2, #8]
 c0044ec:	f023 0301 	bic.w	r3, r3, #1
 c0044f0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 c0044f2:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
        __HAL_UNLOCK(huart);
 c0044f6:	f884 0080 	strb.w	r0, [r4, #128]	@ 0x80
        huart->RxState = HAL_UART_STATE_READY;
 c0044fa:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 c0044fe:	2003      	movs	r0, #3
 c004500:	e7da      	b.n	c0044b8 <HAL_UART_Transmit+0xfc>
 c004502:	bf00      	nop

0c004504 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c004504:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 c004508:	2a01      	cmp	r2, #1
 c00450a:	d017      	beq.n	c00453c <HAL_UARTEx_DisableFifoMode+0x38>
 c00450c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 c00450e:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c004510:	2100      	movs	r1, #0
{
 c004512:	b430      	push	{r4, r5}

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 c004514:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c004516:	681a      	ldr	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 c004518:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00451c:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 c00451e:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c004520:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 c004524:	f024 0401 	bic.w	r4, r4, #1
 c004528:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c00452a:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00452c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00452e:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80

  return HAL_OK;
 c004532:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 c004534:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 c004538:	bc30      	pop	{r4, r5}
 c00453a:	4770      	bx	lr
  __HAL_LOCK(huart);
 c00453c:	2002      	movs	r0, #2
}
 c00453e:	4770      	bx	lr

0c004540 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c004540:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 c004544:	2a01      	cmp	r2, #1
 c004546:	d037      	beq.n	c0045b8 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 c004548:	4603      	mov	r3, r0
 c00454a:	2024      	movs	r0, #36	@ 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00454c:	681a      	ldr	r2, [r3, #0]
{
 c00454e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 c004550:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c004554:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c004556:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c004558:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 c00455a:	f020 0001 	bic.w	r0, r0, #1
 c00455e:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c004560:	6890      	ldr	r0, [r2, #8]
 c004562:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 c004566:	4301      	orrs	r1, r0
 c004568:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c00456a:	b315      	cbz	r5, c0045b2 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c00456c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c00456e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004570:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004574:	4911      	ldr	r1, [pc, #68]	@ (c0045bc <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
 c004576:	4d12      	ldr	r5, [pc, #72]	@ (c0045c0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c004578:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c00457c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004580:	f811 100c 	ldrb.w	r1, [r1, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004584:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004588:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c00458c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c00458e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004590:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004594:	fbb1 f1f5 	udiv	r1, r1, r5
 c004598:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 c00459c:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 c00459e:	2520      	movs	r5, #32
 c0045a0:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0045a4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 c0045a6:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 c0045aa:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 c0045ac:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 c0045b0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 c0045b2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 c0045b4:	4608      	mov	r0, r1
 c0045b6:	e7ef      	b.n	c004598 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 c0045b8:	2002      	movs	r0, #2
}
 c0045ba:	4770      	bx	lr
 c0045bc:	0c0051bc 	.word	0x0c0051bc
 c0045c0:	0c0051b4 	.word	0x0c0051b4

0c0045c4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 c0045c4:	f890 2080 	ldrb.w	r2, [r0, #128]	@ 0x80
 c0045c8:	2a01      	cmp	r2, #1
 c0045ca:	d037      	beq.n	c00463c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 c0045cc:	4603      	mov	r3, r0
 c0045ce:	2024      	movs	r0, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0045d0:	681a      	ldr	r2, [r3, #0]
{
 c0045d2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 c0045d4:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0045d8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 c0045da:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0045dc:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
  __HAL_UART_DISABLE(huart);
 c0045de:	f020 0001 	bic.w	r0, r0, #1
 c0045e2:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0045e4:	6890      	ldr	r0, [r2, #8]
 c0045e6:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 c0045ea:	4301      	orrs	r1, r0
 c0045ec:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0045ee:	b315      	cbz	r5, c004636 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0045f0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0045f2:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c0045f4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c0045f8:	4911      	ldr	r1, [pc, #68]	@ (c004640 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
 c0045fa:	4d12      	ldr	r5, [pc, #72]	@ (c004644 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0045fc:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004600:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004604:	f811 100c 	ldrb.w	r1, [r1, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004608:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c00460c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004610:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004612:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 c004614:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 c004618:	fbb1 f1f5 	udiv	r1, r1, r5
 c00461c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 c004620:	2100      	movs	r1, #0
  huart->gState = HAL_UART_STATE_READY;
 c004622:	2520      	movs	r5, #32
 c004624:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c004628:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 c00462a:	f883 1080 	strb.w	r1, [r3, #128]	@ 0x80
  return HAL_OK;
 c00462e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 c004630:	f8c3 5084 	str.w	r5, [r3, #132]	@ 0x84
}
 c004634:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 c004636:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 c004638:	4608      	mov	r0, r1
 c00463a:	e7ef      	b.n	c00461c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 c00463c:	2002      	movs	r0, #2
}
 c00463e:	4770      	bx	lr
 c004640:	0c0051bc 	.word	0x0c0051bc
 c004644:	0c0051b4 	.word	0x0c0051b4

0c004648 <sbrk_aligned>:
 c004648:	b570      	push	{r4, r5, r6, lr}
 c00464a:	4e0f      	ldr	r6, [pc, #60]	@ (c004688 <sbrk_aligned+0x40>)
 c00464c:	460c      	mov	r4, r1
 c00464e:	4605      	mov	r5, r0
 c004650:	6831      	ldr	r1, [r6, #0]
 c004652:	b911      	cbnz	r1, c00465a <sbrk_aligned+0x12>
 c004654:	f000 f8f8 	bl	c004848 <_sbrk_r>
 c004658:	6030      	str	r0, [r6, #0]
 c00465a:	4621      	mov	r1, r4
 c00465c:	4628      	mov	r0, r5
 c00465e:	f000 f8f3 	bl	c004848 <_sbrk_r>
 c004662:	1c43      	adds	r3, r0, #1
 c004664:	d103      	bne.n	c00466e <sbrk_aligned+0x26>
 c004666:	f04f 34ff 	mov.w	r4, #4294967295
 c00466a:	4620      	mov	r0, r4
 c00466c:	bd70      	pop	{r4, r5, r6, pc}
 c00466e:	1cc4      	adds	r4, r0, #3
 c004670:	f024 0403 	bic.w	r4, r4, #3
 c004674:	42a0      	cmp	r0, r4
 c004676:	d0f8      	beq.n	c00466a <sbrk_aligned+0x22>
 c004678:	1a21      	subs	r1, r4, r0
 c00467a:	4628      	mov	r0, r5
 c00467c:	f000 f8e4 	bl	c004848 <_sbrk_r>
 c004680:	3001      	adds	r0, #1
 c004682:	d1f2      	bne.n	c00466a <sbrk_aligned+0x22>
 c004684:	e7ef      	b.n	c004666 <sbrk_aligned+0x1e>
 c004686:	bf00      	nop
 c004688:	300001f4 	.word	0x300001f4

0c00468c <_malloc_r>:
 c00468c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c004690:	1ccd      	adds	r5, r1, #3
 c004692:	4606      	mov	r6, r0
 c004694:	f025 0503 	bic.w	r5, r5, #3
 c004698:	3508      	adds	r5, #8
 c00469a:	2d0c      	cmp	r5, #12
 c00469c:	bf38      	it	cc
 c00469e:	250c      	movcc	r5, #12
 c0046a0:	2d00      	cmp	r5, #0
 c0046a2:	db01      	blt.n	c0046a8 <_malloc_r+0x1c>
 c0046a4:	42a9      	cmp	r1, r5
 c0046a6:	d904      	bls.n	c0046b2 <_malloc_r+0x26>
 c0046a8:	230c      	movs	r3, #12
 c0046aa:	6033      	str	r3, [r6, #0]
 c0046ac:	2000      	movs	r0, #0
 c0046ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0046b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ c004788 <_malloc_r+0xfc>
 c0046b6:	f000 f869 	bl	c00478c <__malloc_lock>
 c0046ba:	f8d8 3000 	ldr.w	r3, [r8]
 c0046be:	461c      	mov	r4, r3
 c0046c0:	bb44      	cbnz	r4, c004714 <_malloc_r+0x88>
 c0046c2:	4629      	mov	r1, r5
 c0046c4:	4630      	mov	r0, r6
 c0046c6:	f7ff ffbf 	bl	c004648 <sbrk_aligned>
 c0046ca:	1c43      	adds	r3, r0, #1
 c0046cc:	4604      	mov	r4, r0
 c0046ce:	d158      	bne.n	c004782 <_malloc_r+0xf6>
 c0046d0:	f8d8 4000 	ldr.w	r4, [r8]
 c0046d4:	4627      	mov	r7, r4
 c0046d6:	2f00      	cmp	r7, #0
 c0046d8:	d143      	bne.n	c004762 <_malloc_r+0xd6>
 c0046da:	2c00      	cmp	r4, #0
 c0046dc:	d04b      	beq.n	c004776 <_malloc_r+0xea>
 c0046de:	6823      	ldr	r3, [r4, #0]
 c0046e0:	4639      	mov	r1, r7
 c0046e2:	4630      	mov	r0, r6
 c0046e4:	eb04 0903 	add.w	r9, r4, r3
 c0046e8:	f000 f8ae 	bl	c004848 <_sbrk_r>
 c0046ec:	4581      	cmp	r9, r0
 c0046ee:	d142      	bne.n	c004776 <_malloc_r+0xea>
 c0046f0:	6821      	ldr	r1, [r4, #0]
 c0046f2:	4630      	mov	r0, r6
 c0046f4:	1a6d      	subs	r5, r5, r1
 c0046f6:	4629      	mov	r1, r5
 c0046f8:	f7ff ffa6 	bl	c004648 <sbrk_aligned>
 c0046fc:	3001      	adds	r0, #1
 c0046fe:	d03a      	beq.n	c004776 <_malloc_r+0xea>
 c004700:	6823      	ldr	r3, [r4, #0]
 c004702:	442b      	add	r3, r5
 c004704:	6023      	str	r3, [r4, #0]
 c004706:	f8d8 3000 	ldr.w	r3, [r8]
 c00470a:	685a      	ldr	r2, [r3, #4]
 c00470c:	bb62      	cbnz	r2, c004768 <_malloc_r+0xdc>
 c00470e:	f8c8 7000 	str.w	r7, [r8]
 c004712:	e00f      	b.n	c004734 <_malloc_r+0xa8>
 c004714:	6822      	ldr	r2, [r4, #0]
 c004716:	1b52      	subs	r2, r2, r5
 c004718:	d420      	bmi.n	c00475c <_malloc_r+0xd0>
 c00471a:	2a0b      	cmp	r2, #11
 c00471c:	d917      	bls.n	c00474e <_malloc_r+0xc2>
 c00471e:	1961      	adds	r1, r4, r5
 c004720:	42a3      	cmp	r3, r4
 c004722:	6025      	str	r5, [r4, #0]
 c004724:	bf18      	it	ne
 c004726:	6059      	strne	r1, [r3, #4]
 c004728:	6863      	ldr	r3, [r4, #4]
 c00472a:	bf08      	it	eq
 c00472c:	f8c8 1000 	streq.w	r1, [r8]
 c004730:	5162      	str	r2, [r4, r5]
 c004732:	604b      	str	r3, [r1, #4]
 c004734:	4630      	mov	r0, r6
 c004736:	f000 f82f 	bl	c004798 <__malloc_unlock>
 c00473a:	f104 000b 	add.w	r0, r4, #11
 c00473e:	1d23      	adds	r3, r4, #4
 c004740:	f020 0007 	bic.w	r0, r0, #7
 c004744:	1ac2      	subs	r2, r0, r3
 c004746:	bf1c      	itt	ne
 c004748:	1a1b      	subne	r3, r3, r0
 c00474a:	50a3      	strne	r3, [r4, r2]
 c00474c:	e7af      	b.n	c0046ae <_malloc_r+0x22>
 c00474e:	6862      	ldr	r2, [r4, #4]
 c004750:	42a3      	cmp	r3, r4
 c004752:	bf0c      	ite	eq
 c004754:	f8c8 2000 	streq.w	r2, [r8]
 c004758:	605a      	strne	r2, [r3, #4]
 c00475a:	e7eb      	b.n	c004734 <_malloc_r+0xa8>
 c00475c:	4623      	mov	r3, r4
 c00475e:	6864      	ldr	r4, [r4, #4]
 c004760:	e7ae      	b.n	c0046c0 <_malloc_r+0x34>
 c004762:	463c      	mov	r4, r7
 c004764:	687f      	ldr	r7, [r7, #4]
 c004766:	e7b6      	b.n	c0046d6 <_malloc_r+0x4a>
 c004768:	461a      	mov	r2, r3
 c00476a:	685b      	ldr	r3, [r3, #4]
 c00476c:	42a3      	cmp	r3, r4
 c00476e:	d1fb      	bne.n	c004768 <_malloc_r+0xdc>
 c004770:	2300      	movs	r3, #0
 c004772:	6053      	str	r3, [r2, #4]
 c004774:	e7de      	b.n	c004734 <_malloc_r+0xa8>
 c004776:	230c      	movs	r3, #12
 c004778:	4630      	mov	r0, r6
 c00477a:	6033      	str	r3, [r6, #0]
 c00477c:	f000 f80c 	bl	c004798 <__malloc_unlock>
 c004780:	e794      	b.n	c0046ac <_malloc_r+0x20>
 c004782:	6005      	str	r5, [r0, #0]
 c004784:	e7d6      	b.n	c004734 <_malloc_r+0xa8>
 c004786:	bf00      	nop
 c004788:	300001f8 	.word	0x300001f8

0c00478c <__malloc_lock>:
 c00478c:	4801      	ldr	r0, [pc, #4]	@ (c004794 <__malloc_lock+0x8>)
 c00478e:	f000 b895 	b.w	c0048bc <__retarget_lock_acquire_recursive>
 c004792:	bf00      	nop
 c004794:	30000338 	.word	0x30000338

0c004798 <__malloc_unlock>:
 c004798:	4801      	ldr	r0, [pc, #4]	@ (c0047a0 <__malloc_unlock+0x8>)
 c00479a:	f000 b890 	b.w	c0048be <__retarget_lock_release_recursive>
 c00479e:	bf00      	nop
 c0047a0:	30000338 	.word	0x30000338

0c0047a4 <siprintf>:
 c0047a4:	b40e      	push	{r1, r2, r3}
 c0047a6:	b500      	push	{lr}
 c0047a8:	b09c      	sub	sp, #112	@ 0x70
 c0047aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 c0047ae:	ab1d      	add	r3, sp, #116	@ 0x74
 c0047b0:	9002      	str	r0, [sp, #8]
 c0047b2:	9006      	str	r0, [sp, #24]
 c0047b4:	9107      	str	r1, [sp, #28]
 c0047b6:	9104      	str	r1, [sp, #16]
 c0047b8:	4808      	ldr	r0, [pc, #32]	@ (c0047dc <siprintf+0x38>)
 c0047ba:	4909      	ldr	r1, [pc, #36]	@ (c0047e0 <siprintf+0x3c>)
 c0047bc:	f853 2b04 	ldr.w	r2, [r3], #4
 c0047c0:	9105      	str	r1, [sp, #20]
 c0047c2:	a902      	add	r1, sp, #8
 c0047c4:	6800      	ldr	r0, [r0, #0]
 c0047c6:	9301      	str	r3, [sp, #4]
 c0047c8:	f000 f92e 	bl	c004a28 <_svfiprintf_r>
 c0047cc:	9b02      	ldr	r3, [sp, #8]
 c0047ce:	2200      	movs	r2, #0
 c0047d0:	701a      	strb	r2, [r3, #0]
 c0047d2:	b01c      	add	sp, #112	@ 0x70
 c0047d4:	f85d eb04 	ldr.w	lr, [sp], #4
 c0047d8:	b003      	add	sp, #12
 c0047da:	4770      	bx	lr
 c0047dc:	3000002c 	.word	0x3000002c
 c0047e0:	ffff0208 	.word	0xffff0208

0c0047e4 <memcmp>:
 c0047e4:	3901      	subs	r1, #1
 c0047e6:	4402      	add	r2, r0
 c0047e8:	b510      	push	{r4, lr}
 c0047ea:	4290      	cmp	r0, r2
 c0047ec:	d101      	bne.n	c0047f2 <memcmp+0xe>
 c0047ee:	2000      	movs	r0, #0
 c0047f0:	e005      	b.n	c0047fe <memcmp+0x1a>
 c0047f2:	7803      	ldrb	r3, [r0, #0]
 c0047f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 c0047f8:	42a3      	cmp	r3, r4
 c0047fa:	d001      	beq.n	c004800 <memcmp+0x1c>
 c0047fc:	1b18      	subs	r0, r3, r4
 c0047fe:	bd10      	pop	{r4, pc}
 c004800:	3001      	adds	r0, #1
 c004802:	e7f2      	b.n	c0047ea <memcmp+0x6>

0c004804 <memmove>:
 c004804:	4288      	cmp	r0, r1
 c004806:	b510      	push	{r4, lr}
 c004808:	eb01 0402 	add.w	r4, r1, r2
 c00480c:	d902      	bls.n	c004814 <memmove+0x10>
 c00480e:	4284      	cmp	r4, r0
 c004810:	4623      	mov	r3, r4
 c004812:	d807      	bhi.n	c004824 <memmove+0x20>
 c004814:	1e43      	subs	r3, r0, #1
 c004816:	42a1      	cmp	r1, r4
 c004818:	d008      	beq.n	c00482c <memmove+0x28>
 c00481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 c00481e:	f803 2f01 	strb.w	r2, [r3, #1]!
 c004822:	e7f8      	b.n	c004816 <memmove+0x12>
 c004824:	4402      	add	r2, r0
 c004826:	4601      	mov	r1, r0
 c004828:	428a      	cmp	r2, r1
 c00482a:	d100      	bne.n	c00482e <memmove+0x2a>
 c00482c:	bd10      	pop	{r4, pc}
 c00482e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c004832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 c004836:	e7f7      	b.n	c004828 <memmove+0x24>

0c004838 <memset>:
 c004838:	4402      	add	r2, r0
 c00483a:	4603      	mov	r3, r0
 c00483c:	4293      	cmp	r3, r2
 c00483e:	d100      	bne.n	c004842 <memset+0xa>
 c004840:	4770      	bx	lr
 c004842:	f803 1b01 	strb.w	r1, [r3], #1
 c004846:	e7f9      	b.n	c00483c <memset+0x4>

0c004848 <_sbrk_r>:
 c004848:	b538      	push	{r3, r4, r5, lr}
 c00484a:	2300      	movs	r3, #0
 c00484c:	4d05      	ldr	r5, [pc, #20]	@ (c004864 <_sbrk_r+0x1c>)
 c00484e:	4604      	mov	r4, r0
 c004850:	4608      	mov	r0, r1
 c004852:	602b      	str	r3, [r5, #0]
 c004854:	f7fc ff8e 	bl	c001774 <_sbrk>
 c004858:	1c43      	adds	r3, r0, #1
 c00485a:	d102      	bne.n	c004862 <_sbrk_r+0x1a>
 c00485c:	682b      	ldr	r3, [r5, #0]
 c00485e:	b103      	cbz	r3, c004862 <_sbrk_r+0x1a>
 c004860:	6023      	str	r3, [r4, #0]
 c004862:	bd38      	pop	{r3, r4, r5, pc}
 c004864:	30000334 	.word	0x30000334

0c004868 <__errno>:
 c004868:	4b01      	ldr	r3, [pc, #4]	@ (c004870 <__errno+0x8>)
 c00486a:	6818      	ldr	r0, [r3, #0]
 c00486c:	4770      	bx	lr
 c00486e:	bf00      	nop
 c004870:	3000002c 	.word	0x3000002c

0c004874 <__libc_init_array>:
 c004874:	b570      	push	{r4, r5, r6, lr}
 c004876:	4d0d      	ldr	r5, [pc, #52]	@ (c0048ac <__libc_init_array+0x38>)
 c004878:	2600      	movs	r6, #0
 c00487a:	4c0d      	ldr	r4, [pc, #52]	@ (c0048b0 <__libc_init_array+0x3c>)
 c00487c:	1b64      	subs	r4, r4, r5
 c00487e:	10a4      	asrs	r4, r4, #2
 c004880:	42a6      	cmp	r6, r4
 c004882:	d109      	bne.n	c004898 <__libc_init_array+0x24>
 c004884:	4d0b      	ldr	r5, [pc, #44]	@ (c0048b4 <__libc_init_array+0x40>)
 c004886:	2600      	movs	r6, #0
 c004888:	4c0b      	ldr	r4, [pc, #44]	@ (c0048b8 <__libc_init_array+0x44>)
 c00488a:	f000 fb9f 	bl	c004fcc <_init>
 c00488e:	1b64      	subs	r4, r4, r5
 c004890:	10a4      	asrs	r4, r4, #2
 c004892:	42a6      	cmp	r6, r4
 c004894:	d105      	bne.n	c0048a2 <__libc_init_array+0x2e>
 c004896:	bd70      	pop	{r4, r5, r6, pc}
 c004898:	f855 3b04 	ldr.w	r3, [r5], #4
 c00489c:	3601      	adds	r6, #1
 c00489e:	4798      	blx	r3
 c0048a0:	e7ee      	b.n	c004880 <__libc_init_array+0xc>
 c0048a2:	f855 3b04 	ldr.w	r3, [r5], #4
 c0048a6:	3601      	adds	r6, #1
 c0048a8:	4798      	blx	r3
 c0048aa:	e7f2      	b.n	c004892 <__libc_init_array+0x1e>
 c0048ac:	0c005200 	.word	0x0c005200
 c0048b0:	0c005200 	.word	0x0c005200
 c0048b4:	0c005200 	.word	0x0c005200
 c0048b8:	0c005204 	.word	0x0c005204

0c0048bc <__retarget_lock_acquire_recursive>:
 c0048bc:	4770      	bx	lr

0c0048be <__retarget_lock_release_recursive>:
 c0048be:	4770      	bx	lr

0c0048c0 <memcpy>:
 c0048c0:	440a      	add	r2, r1
 c0048c2:	1e43      	subs	r3, r0, #1
 c0048c4:	4291      	cmp	r1, r2
 c0048c6:	d100      	bne.n	c0048ca <memcpy+0xa>
 c0048c8:	4770      	bx	lr
 c0048ca:	b510      	push	{r4, lr}
 c0048cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0048d0:	4291      	cmp	r1, r2
 c0048d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 c0048d6:	d1f9      	bne.n	c0048cc <memcpy+0xc>
 c0048d8:	bd10      	pop	{r4, pc}
	...

0c0048dc <_free_r>:
 c0048dc:	b538      	push	{r3, r4, r5, lr}
 c0048de:	4605      	mov	r5, r0
 c0048e0:	2900      	cmp	r1, #0
 c0048e2:	d041      	beq.n	c004968 <_free_r+0x8c>
 c0048e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c0048e8:	1f0c      	subs	r4, r1, #4
 c0048ea:	2b00      	cmp	r3, #0
 c0048ec:	bfb8      	it	lt
 c0048ee:	18e4      	addlt	r4, r4, r3
 c0048f0:	f7ff ff4c 	bl	c00478c <__malloc_lock>
 c0048f4:	4a1d      	ldr	r2, [pc, #116]	@ (c00496c <_free_r+0x90>)
 c0048f6:	6813      	ldr	r3, [r2, #0]
 c0048f8:	b933      	cbnz	r3, c004908 <_free_r+0x2c>
 c0048fa:	6063      	str	r3, [r4, #4]
 c0048fc:	6014      	str	r4, [r2, #0]
 c0048fe:	4628      	mov	r0, r5
 c004900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 c004904:	f7ff bf48 	b.w	c004798 <__malloc_unlock>
 c004908:	42a3      	cmp	r3, r4
 c00490a:	d908      	bls.n	c00491e <_free_r+0x42>
 c00490c:	6820      	ldr	r0, [r4, #0]
 c00490e:	1821      	adds	r1, r4, r0
 c004910:	428b      	cmp	r3, r1
 c004912:	bf01      	itttt	eq
 c004914:	6819      	ldreq	r1, [r3, #0]
 c004916:	685b      	ldreq	r3, [r3, #4]
 c004918:	1809      	addeq	r1, r1, r0
 c00491a:	6021      	streq	r1, [r4, #0]
 c00491c:	e7ed      	b.n	c0048fa <_free_r+0x1e>
 c00491e:	461a      	mov	r2, r3
 c004920:	685b      	ldr	r3, [r3, #4]
 c004922:	b10b      	cbz	r3, c004928 <_free_r+0x4c>
 c004924:	42a3      	cmp	r3, r4
 c004926:	d9fa      	bls.n	c00491e <_free_r+0x42>
 c004928:	6811      	ldr	r1, [r2, #0]
 c00492a:	1850      	adds	r0, r2, r1
 c00492c:	42a0      	cmp	r0, r4
 c00492e:	d10b      	bne.n	c004948 <_free_r+0x6c>
 c004930:	6820      	ldr	r0, [r4, #0]
 c004932:	4401      	add	r1, r0
 c004934:	1850      	adds	r0, r2, r1
 c004936:	6011      	str	r1, [r2, #0]
 c004938:	4283      	cmp	r3, r0
 c00493a:	d1e0      	bne.n	c0048fe <_free_r+0x22>
 c00493c:	6818      	ldr	r0, [r3, #0]
 c00493e:	685b      	ldr	r3, [r3, #4]
 c004940:	4408      	add	r0, r1
 c004942:	6053      	str	r3, [r2, #4]
 c004944:	6010      	str	r0, [r2, #0]
 c004946:	e7da      	b.n	c0048fe <_free_r+0x22>
 c004948:	d902      	bls.n	c004950 <_free_r+0x74>
 c00494a:	230c      	movs	r3, #12
 c00494c:	602b      	str	r3, [r5, #0]
 c00494e:	e7d6      	b.n	c0048fe <_free_r+0x22>
 c004950:	6820      	ldr	r0, [r4, #0]
 c004952:	1821      	adds	r1, r4, r0
 c004954:	428b      	cmp	r3, r1
 c004956:	bf02      	ittt	eq
 c004958:	6819      	ldreq	r1, [r3, #0]
 c00495a:	685b      	ldreq	r3, [r3, #4]
 c00495c:	1809      	addeq	r1, r1, r0
 c00495e:	6063      	str	r3, [r4, #4]
 c004960:	bf08      	it	eq
 c004962:	6021      	streq	r1, [r4, #0]
 c004964:	6054      	str	r4, [r2, #4]
 c004966:	e7ca      	b.n	c0048fe <_free_r+0x22>
 c004968:	bd38      	pop	{r3, r4, r5, pc}
 c00496a:	bf00      	nop
 c00496c:	300001f8 	.word	0x300001f8

0c004970 <__ssputs_r>:
 c004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c004974:	461f      	mov	r7, r3
 c004976:	688e      	ldr	r6, [r1, #8]
 c004978:	4682      	mov	sl, r0
 c00497a:	460c      	mov	r4, r1
 c00497c:	42be      	cmp	r6, r7
 c00497e:	4690      	mov	r8, r2
 c004980:	680b      	ldr	r3, [r1, #0]
 c004982:	d82d      	bhi.n	c0049e0 <__ssputs_r+0x70>
 c004984:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 c004988:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 c00498c:	d026      	beq.n	c0049dc <__ssputs_r+0x6c>
 c00498e:	6965      	ldr	r5, [r4, #20]
 c004990:	6909      	ldr	r1, [r1, #16]
 c004992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 c004996:	eba3 0901 	sub.w	r9, r3, r1
 c00499a:	1c7b      	adds	r3, r7, #1
 c00499c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 c0049a0:	444b      	add	r3, r9
 c0049a2:	106d      	asrs	r5, r5, #1
 c0049a4:	429d      	cmp	r5, r3
 c0049a6:	bf38      	it	cc
 c0049a8:	461d      	movcc	r5, r3
 c0049aa:	0553      	lsls	r3, r2, #21
 c0049ac:	d527      	bpl.n	c0049fe <__ssputs_r+0x8e>
 c0049ae:	4629      	mov	r1, r5
 c0049b0:	f7ff fe6c 	bl	c00468c <_malloc_r>
 c0049b4:	4606      	mov	r6, r0
 c0049b6:	b360      	cbz	r0, c004a12 <__ssputs_r+0xa2>
 c0049b8:	464a      	mov	r2, r9
 c0049ba:	6921      	ldr	r1, [r4, #16]
 c0049bc:	f7ff ff80 	bl	c0048c0 <memcpy>
 c0049c0:	89a3      	ldrh	r3, [r4, #12]
 c0049c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 c0049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 c0049ca:	81a3      	strh	r3, [r4, #12]
 c0049cc:	6126      	str	r6, [r4, #16]
 c0049ce:	444e      	add	r6, r9
 c0049d0:	6165      	str	r5, [r4, #20]
 c0049d2:	eba5 0509 	sub.w	r5, r5, r9
 c0049d6:	6026      	str	r6, [r4, #0]
 c0049d8:	463e      	mov	r6, r7
 c0049da:	60a5      	str	r5, [r4, #8]
 c0049dc:	42be      	cmp	r6, r7
 c0049de:	d900      	bls.n	c0049e2 <__ssputs_r+0x72>
 c0049e0:	463e      	mov	r6, r7
 c0049e2:	4632      	mov	r2, r6
 c0049e4:	4641      	mov	r1, r8
 c0049e6:	6820      	ldr	r0, [r4, #0]
 c0049e8:	f7ff ff0c 	bl	c004804 <memmove>
 c0049ec:	68a3      	ldr	r3, [r4, #8]
 c0049ee:	2000      	movs	r0, #0
 c0049f0:	1b9b      	subs	r3, r3, r6
 c0049f2:	60a3      	str	r3, [r4, #8]
 c0049f4:	6823      	ldr	r3, [r4, #0]
 c0049f6:	4433      	add	r3, r6
 c0049f8:	6023      	str	r3, [r4, #0]
 c0049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0049fe:	462a      	mov	r2, r5
 c004a00:	f000 faae 	bl	c004f60 <_realloc_r>
 c004a04:	4606      	mov	r6, r0
 c004a06:	2800      	cmp	r0, #0
 c004a08:	d1e0      	bne.n	c0049cc <__ssputs_r+0x5c>
 c004a0a:	6921      	ldr	r1, [r4, #16]
 c004a0c:	4650      	mov	r0, sl
 c004a0e:	f7ff ff65 	bl	c0048dc <_free_r>
 c004a12:	230c      	movs	r3, #12
 c004a14:	f04f 30ff 	mov.w	r0, #4294967295
 c004a18:	f8ca 3000 	str.w	r3, [sl]
 c004a1c:	89a3      	ldrh	r3, [r4, #12]
 c004a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 c004a22:	81a3      	strh	r3, [r4, #12]
 c004a24:	e7e9      	b.n	c0049fa <__ssputs_r+0x8a>
	...

0c004a28 <_svfiprintf_r>:
 c004a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c004a2c:	4698      	mov	r8, r3
 c004a2e:	898b      	ldrh	r3, [r1, #12]
 c004a30:	b09d      	sub	sp, #116	@ 0x74
 c004a32:	4607      	mov	r7, r0
 c004a34:	061b      	lsls	r3, r3, #24
 c004a36:	460d      	mov	r5, r1
 c004a38:	4614      	mov	r4, r2
 c004a3a:	d510      	bpl.n	c004a5e <_svfiprintf_r+0x36>
 c004a3c:	690b      	ldr	r3, [r1, #16]
 c004a3e:	b973      	cbnz	r3, c004a5e <_svfiprintf_r+0x36>
 c004a40:	2140      	movs	r1, #64	@ 0x40
 c004a42:	f7ff fe23 	bl	c00468c <_malloc_r>
 c004a46:	6028      	str	r0, [r5, #0]
 c004a48:	6128      	str	r0, [r5, #16]
 c004a4a:	b930      	cbnz	r0, c004a5a <_svfiprintf_r+0x32>
 c004a4c:	230c      	movs	r3, #12
 c004a4e:	603b      	str	r3, [r7, #0]
 c004a50:	f04f 30ff 	mov.w	r0, #4294967295
 c004a54:	b01d      	add	sp, #116	@ 0x74
 c004a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c004a5a:	2340      	movs	r3, #64	@ 0x40
 c004a5c:	616b      	str	r3, [r5, #20]
 c004a5e:	2300      	movs	r3, #0
 c004a60:	f8cd 800c 	str.w	r8, [sp, #12]
 c004a64:	f04f 0901 	mov.w	r9, #1
 c004a68:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ c004c0c <_svfiprintf_r+0x1e4>
 c004a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 c004a6e:	2320      	movs	r3, #32
 c004a70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 c004a74:	2330      	movs	r3, #48	@ 0x30
 c004a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 c004a7a:	4623      	mov	r3, r4
 c004a7c:	469a      	mov	sl, r3
 c004a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 c004a82:	b10a      	cbz	r2, c004a88 <_svfiprintf_r+0x60>
 c004a84:	2a25      	cmp	r2, #37	@ 0x25
 c004a86:	d1f9      	bne.n	c004a7c <_svfiprintf_r+0x54>
 c004a88:	ebba 0b04 	subs.w	fp, sl, r4
 c004a8c:	d00b      	beq.n	c004aa6 <_svfiprintf_r+0x7e>
 c004a8e:	465b      	mov	r3, fp
 c004a90:	4622      	mov	r2, r4
 c004a92:	4629      	mov	r1, r5
 c004a94:	4638      	mov	r0, r7
 c004a96:	f7ff ff6b 	bl	c004970 <__ssputs_r>
 c004a9a:	3001      	adds	r0, #1
 c004a9c:	f000 80a7 	beq.w	c004bee <_svfiprintf_r+0x1c6>
 c004aa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 c004aa2:	445a      	add	r2, fp
 c004aa4:	9209      	str	r2, [sp, #36]	@ 0x24
 c004aa6:	f89a 3000 	ldrb.w	r3, [sl]
 c004aaa:	2b00      	cmp	r3, #0
 c004aac:	f000 809f 	beq.w	c004bee <_svfiprintf_r+0x1c6>
 c004ab0:	2300      	movs	r3, #0
 c004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 c004ab6:	f10a 0a01 	add.w	sl, sl, #1
 c004aba:	9304      	str	r3, [sp, #16]
 c004abc:	9307      	str	r3, [sp, #28]
 c004abe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 c004ac2:	931a      	str	r3, [sp, #104]	@ 0x68
 c004ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c004ac8:	4654      	mov	r4, sl
 c004aca:	2205      	movs	r2, #5
 c004acc:	484f      	ldr	r0, [pc, #316]	@ (c004c0c <_svfiprintf_r+0x1e4>)
 c004ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 c004ad2:	f000 fa37 	bl	c004f44 <memchr>
 c004ad6:	9a04      	ldr	r2, [sp, #16]
 c004ad8:	b9d8      	cbnz	r0, c004b12 <_svfiprintf_r+0xea>
 c004ada:	06d0      	lsls	r0, r2, #27
 c004adc:	bf44      	itt	mi
 c004ade:	2320      	movmi	r3, #32
 c004ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 c004ae4:	0711      	lsls	r1, r2, #28
 c004ae6:	bf44      	itt	mi
 c004ae8:	232b      	movmi	r3, #43	@ 0x2b
 c004aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 c004aee:	f89a 3000 	ldrb.w	r3, [sl]
 c004af2:	2b2a      	cmp	r3, #42	@ 0x2a
 c004af4:	d015      	beq.n	c004b22 <_svfiprintf_r+0xfa>
 c004af6:	9a07      	ldr	r2, [sp, #28]
 c004af8:	4654      	mov	r4, sl
 c004afa:	2000      	movs	r0, #0
 c004afc:	f04f 0c0a 	mov.w	ip, #10
 c004b00:	4621      	mov	r1, r4
 c004b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 c004b06:	3b30      	subs	r3, #48	@ 0x30
 c004b08:	2b09      	cmp	r3, #9
 c004b0a:	d94b      	bls.n	c004ba4 <_svfiprintf_r+0x17c>
 c004b0c:	b1b0      	cbz	r0, c004b3c <_svfiprintf_r+0x114>
 c004b0e:	9207      	str	r2, [sp, #28]
 c004b10:	e014      	b.n	c004b3c <_svfiprintf_r+0x114>
 c004b12:	eba0 0308 	sub.w	r3, r0, r8
 c004b16:	46a2      	mov	sl, r4
 c004b18:	fa09 f303 	lsl.w	r3, r9, r3
 c004b1c:	4313      	orrs	r3, r2
 c004b1e:	9304      	str	r3, [sp, #16]
 c004b20:	e7d2      	b.n	c004ac8 <_svfiprintf_r+0xa0>
 c004b22:	9b03      	ldr	r3, [sp, #12]
 c004b24:	1d19      	adds	r1, r3, #4
 c004b26:	681b      	ldr	r3, [r3, #0]
 c004b28:	2b00      	cmp	r3, #0
 c004b2a:	9103      	str	r1, [sp, #12]
 c004b2c:	bfbb      	ittet	lt
 c004b2e:	425b      	neglt	r3, r3
 c004b30:	f042 0202 	orrlt.w	r2, r2, #2
 c004b34:	9307      	strge	r3, [sp, #28]
 c004b36:	9307      	strlt	r3, [sp, #28]
 c004b38:	bfb8      	it	lt
 c004b3a:	9204      	strlt	r2, [sp, #16]
 c004b3c:	7823      	ldrb	r3, [r4, #0]
 c004b3e:	2b2e      	cmp	r3, #46	@ 0x2e
 c004b40:	d10a      	bne.n	c004b58 <_svfiprintf_r+0x130>
 c004b42:	7863      	ldrb	r3, [r4, #1]
 c004b44:	2b2a      	cmp	r3, #42	@ 0x2a
 c004b46:	d132      	bne.n	c004bae <_svfiprintf_r+0x186>
 c004b48:	9b03      	ldr	r3, [sp, #12]
 c004b4a:	3402      	adds	r4, #2
 c004b4c:	1d1a      	adds	r2, r3, #4
 c004b4e:	681b      	ldr	r3, [r3, #0]
 c004b50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 c004b54:	9203      	str	r2, [sp, #12]
 c004b56:	9305      	str	r3, [sp, #20]
 c004b58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ c004c1c <_svfiprintf_r+0x1f4>
 c004b5c:	2203      	movs	r2, #3
 c004b5e:	7821      	ldrb	r1, [r4, #0]
 c004b60:	4650      	mov	r0, sl
 c004b62:	f000 f9ef 	bl	c004f44 <memchr>
 c004b66:	b138      	cbz	r0, c004b78 <_svfiprintf_r+0x150>
 c004b68:	eba0 000a 	sub.w	r0, r0, sl
 c004b6c:	2240      	movs	r2, #64	@ 0x40
 c004b6e:	9b04      	ldr	r3, [sp, #16]
 c004b70:	3401      	adds	r4, #1
 c004b72:	4082      	lsls	r2, r0
 c004b74:	4313      	orrs	r3, r2
 c004b76:	9304      	str	r3, [sp, #16]
 c004b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 c004b7c:	2206      	movs	r2, #6
 c004b7e:	4824      	ldr	r0, [pc, #144]	@ (c004c10 <_svfiprintf_r+0x1e8>)
 c004b80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 c004b84:	f000 f9de 	bl	c004f44 <memchr>
 c004b88:	2800      	cmp	r0, #0
 c004b8a:	d036      	beq.n	c004bfa <_svfiprintf_r+0x1d2>
 c004b8c:	4b21      	ldr	r3, [pc, #132]	@ (c004c14 <_svfiprintf_r+0x1ec>)
 c004b8e:	bb1b      	cbnz	r3, c004bd8 <_svfiprintf_r+0x1b0>
 c004b90:	9b03      	ldr	r3, [sp, #12]
 c004b92:	3307      	adds	r3, #7
 c004b94:	f023 0307 	bic.w	r3, r3, #7
 c004b98:	3308      	adds	r3, #8
 c004b9a:	9303      	str	r3, [sp, #12]
 c004b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 c004b9e:	4433      	add	r3, r6
 c004ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 c004ba2:	e76a      	b.n	c004a7a <_svfiprintf_r+0x52>
 c004ba4:	fb0c 3202 	mla	r2, ip, r2, r3
 c004ba8:	460c      	mov	r4, r1
 c004baa:	2001      	movs	r0, #1
 c004bac:	e7a8      	b.n	c004b00 <_svfiprintf_r+0xd8>
 c004bae:	2300      	movs	r3, #0
 c004bb0:	3401      	adds	r4, #1
 c004bb2:	f04f 0c0a 	mov.w	ip, #10
 c004bb6:	4619      	mov	r1, r3
 c004bb8:	9305      	str	r3, [sp, #20]
 c004bba:	4620      	mov	r0, r4
 c004bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 c004bc0:	3a30      	subs	r2, #48	@ 0x30
 c004bc2:	2a09      	cmp	r2, #9
 c004bc4:	d903      	bls.n	c004bce <_svfiprintf_r+0x1a6>
 c004bc6:	2b00      	cmp	r3, #0
 c004bc8:	d0c6      	beq.n	c004b58 <_svfiprintf_r+0x130>
 c004bca:	9105      	str	r1, [sp, #20]
 c004bcc:	e7c4      	b.n	c004b58 <_svfiprintf_r+0x130>
 c004bce:	fb0c 2101 	mla	r1, ip, r1, r2
 c004bd2:	4604      	mov	r4, r0
 c004bd4:	2301      	movs	r3, #1
 c004bd6:	e7f0      	b.n	c004bba <_svfiprintf_r+0x192>
 c004bd8:	ab03      	add	r3, sp, #12
 c004bda:	462a      	mov	r2, r5
 c004bdc:	a904      	add	r1, sp, #16
 c004bde:	4638      	mov	r0, r7
 c004be0:	9300      	str	r3, [sp, #0]
 c004be2:	4b0d      	ldr	r3, [pc, #52]	@ (c004c18 <_svfiprintf_r+0x1f0>)
 c004be4:	f3af 8000 	nop.w
 c004be8:	1c42      	adds	r2, r0, #1
 c004bea:	4606      	mov	r6, r0
 c004bec:	d1d6      	bne.n	c004b9c <_svfiprintf_r+0x174>
 c004bee:	89ab      	ldrh	r3, [r5, #12]
 c004bf0:	065b      	lsls	r3, r3, #25
 c004bf2:	f53f af2d 	bmi.w	c004a50 <_svfiprintf_r+0x28>
 c004bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 c004bf8:	e72c      	b.n	c004a54 <_svfiprintf_r+0x2c>
 c004bfa:	ab03      	add	r3, sp, #12
 c004bfc:	462a      	mov	r2, r5
 c004bfe:	a904      	add	r1, sp, #16
 c004c00:	4638      	mov	r0, r7
 c004c02:	9300      	str	r3, [sp, #0]
 c004c04:	4b04      	ldr	r3, [pc, #16]	@ (c004c18 <_svfiprintf_r+0x1f0>)
 c004c06:	f000 f87d 	bl	c004d04 <_printf_i>
 c004c0a:	e7ed      	b.n	c004be8 <_svfiprintf_r+0x1c0>
 c004c0c:	0c0051c4 	.word	0x0c0051c4
 c004c10:	0c0051ce 	.word	0x0c0051ce
 c004c14:	00000000 	.word	0x00000000
 c004c18:	0c004971 	.word	0x0c004971
 c004c1c:	0c0051ca 	.word	0x0c0051ca

0c004c20 <_printf_common>:
 c004c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c004c24:	4616      	mov	r6, r2
 c004c26:	4698      	mov	r8, r3
 c004c28:	688a      	ldr	r2, [r1, #8]
 c004c2a:	4607      	mov	r7, r0
 c004c2c:	690b      	ldr	r3, [r1, #16]
 c004c2e:	460c      	mov	r4, r1
 c004c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 c004c34:	4293      	cmp	r3, r2
 c004c36:	bfb8      	it	lt
 c004c38:	4613      	movlt	r3, r2
 c004c3a:	6033      	str	r3, [r6, #0]
 c004c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 c004c40:	b10a      	cbz	r2, c004c46 <_printf_common+0x26>
 c004c42:	3301      	adds	r3, #1
 c004c44:	6033      	str	r3, [r6, #0]
 c004c46:	6823      	ldr	r3, [r4, #0]
 c004c48:	0699      	lsls	r1, r3, #26
 c004c4a:	bf42      	ittt	mi
 c004c4c:	6833      	ldrmi	r3, [r6, #0]
 c004c4e:	3302      	addmi	r3, #2
 c004c50:	6033      	strmi	r3, [r6, #0]
 c004c52:	6825      	ldr	r5, [r4, #0]
 c004c54:	f015 0506 	ands.w	r5, r5, #6
 c004c58:	d106      	bne.n	c004c68 <_printf_common+0x48>
 c004c5a:	f104 0a19 	add.w	sl, r4, #25
 c004c5e:	68e3      	ldr	r3, [r4, #12]
 c004c60:	6832      	ldr	r2, [r6, #0]
 c004c62:	1a9b      	subs	r3, r3, r2
 c004c64:	42ab      	cmp	r3, r5
 c004c66:	dc2b      	bgt.n	c004cc0 <_printf_common+0xa0>
 c004c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 c004c6c:	6822      	ldr	r2, [r4, #0]
 c004c6e:	3b00      	subs	r3, #0
 c004c70:	bf18      	it	ne
 c004c72:	2301      	movne	r3, #1
 c004c74:	0692      	lsls	r2, r2, #26
 c004c76:	d430      	bmi.n	c004cda <_printf_common+0xba>
 c004c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 c004c7c:	4641      	mov	r1, r8
 c004c7e:	4638      	mov	r0, r7
 c004c80:	47c8      	blx	r9
 c004c82:	3001      	adds	r0, #1
 c004c84:	d023      	beq.n	c004cce <_printf_common+0xae>
 c004c86:	6823      	ldr	r3, [r4, #0]
 c004c88:	341a      	adds	r4, #26
 c004c8a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c004c8e:	f003 0306 	and.w	r3, r3, #6
 c004c92:	2b04      	cmp	r3, #4
 c004c94:	bf0a      	itet	eq
 c004c96:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 c004c9a:	2500      	movne	r5, #0
 c004c9c:	6833      	ldreq	r3, [r6, #0]
 c004c9e:	f04f 0600 	mov.w	r6, #0
 c004ca2:	bf08      	it	eq
 c004ca4:	1aed      	subeq	r5, r5, r3
 c004ca6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c004caa:	bf08      	it	eq
 c004cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c004cb0:	4293      	cmp	r3, r2
 c004cb2:	bfc4      	itt	gt
 c004cb4:	1a9b      	subgt	r3, r3, r2
 c004cb6:	18ed      	addgt	r5, r5, r3
 c004cb8:	42b5      	cmp	r5, r6
 c004cba:	d11a      	bne.n	c004cf2 <_printf_common+0xd2>
 c004cbc:	2000      	movs	r0, #0
 c004cbe:	e008      	b.n	c004cd2 <_printf_common+0xb2>
 c004cc0:	2301      	movs	r3, #1
 c004cc2:	4652      	mov	r2, sl
 c004cc4:	4641      	mov	r1, r8
 c004cc6:	4638      	mov	r0, r7
 c004cc8:	47c8      	blx	r9
 c004cca:	3001      	adds	r0, #1
 c004ccc:	d103      	bne.n	c004cd6 <_printf_common+0xb6>
 c004cce:	f04f 30ff 	mov.w	r0, #4294967295
 c004cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c004cd6:	3501      	adds	r5, #1
 c004cd8:	e7c1      	b.n	c004c5e <_printf_common+0x3e>
 c004cda:	18e1      	adds	r1, r4, r3
 c004cdc:	1c5a      	adds	r2, r3, #1
 c004cde:	2030      	movs	r0, #48	@ 0x30
 c004ce0:	3302      	adds	r3, #2
 c004ce2:	4422      	add	r2, r4
 c004ce4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 c004ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 c004cec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 c004cf0:	e7c2      	b.n	c004c78 <_printf_common+0x58>
 c004cf2:	2301      	movs	r3, #1
 c004cf4:	4622      	mov	r2, r4
 c004cf6:	4641      	mov	r1, r8
 c004cf8:	4638      	mov	r0, r7
 c004cfa:	47c8      	blx	r9
 c004cfc:	3001      	adds	r0, #1
 c004cfe:	d0e6      	beq.n	c004cce <_printf_common+0xae>
 c004d00:	3601      	adds	r6, #1
 c004d02:	e7d9      	b.n	c004cb8 <_printf_common+0x98>

0c004d04 <_printf_i>:
 c004d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c004d08:	7e0f      	ldrb	r7, [r1, #24]
 c004d0a:	4691      	mov	r9, r2
 c004d0c:	4680      	mov	r8, r0
 c004d0e:	460c      	mov	r4, r1
 c004d10:	2f78      	cmp	r7, #120	@ 0x78
 c004d12:	469a      	mov	sl, r3
 c004d14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 c004d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 c004d1a:	d807      	bhi.n	c004d2c <_printf_i+0x28>
 c004d1c:	2f62      	cmp	r7, #98	@ 0x62
 c004d1e:	d80a      	bhi.n	c004d36 <_printf_i+0x32>
 c004d20:	2f00      	cmp	r7, #0
 c004d22:	f000 80d2 	beq.w	c004eca <_printf_i+0x1c6>
 c004d26:	2f58      	cmp	r7, #88	@ 0x58
 c004d28:	f000 80b9 	beq.w	c004e9e <_printf_i+0x19a>
 c004d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 c004d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 c004d34:	e03a      	b.n	c004dac <_printf_i+0xa8>
 c004d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 c004d3a:	2b15      	cmp	r3, #21
 c004d3c:	d8f6      	bhi.n	c004d2c <_printf_i+0x28>
 c004d3e:	a101      	add	r1, pc, #4	@ (adr r1, c004d44 <_printf_i+0x40>)
 c004d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c004d44:	0c004d9d 	.word	0x0c004d9d
 c004d48:	0c004db1 	.word	0x0c004db1
 c004d4c:	0c004d2d 	.word	0x0c004d2d
 c004d50:	0c004d2d 	.word	0x0c004d2d
 c004d54:	0c004d2d 	.word	0x0c004d2d
 c004d58:	0c004d2d 	.word	0x0c004d2d
 c004d5c:	0c004db1 	.word	0x0c004db1
 c004d60:	0c004d2d 	.word	0x0c004d2d
 c004d64:	0c004d2d 	.word	0x0c004d2d
 c004d68:	0c004d2d 	.word	0x0c004d2d
 c004d6c:	0c004d2d 	.word	0x0c004d2d
 c004d70:	0c004eb1 	.word	0x0c004eb1
 c004d74:	0c004ddb 	.word	0x0c004ddb
 c004d78:	0c004e6b 	.word	0x0c004e6b
 c004d7c:	0c004d2d 	.word	0x0c004d2d
 c004d80:	0c004d2d 	.word	0x0c004d2d
 c004d84:	0c004ed3 	.word	0x0c004ed3
 c004d88:	0c004d2d 	.word	0x0c004d2d
 c004d8c:	0c004ddb 	.word	0x0c004ddb
 c004d90:	0c004d2d 	.word	0x0c004d2d
 c004d94:	0c004d2d 	.word	0x0c004d2d
 c004d98:	0c004e73 	.word	0x0c004e73
 c004d9c:	6833      	ldr	r3, [r6, #0]
 c004d9e:	1d1a      	adds	r2, r3, #4
 c004da0:	681b      	ldr	r3, [r3, #0]
 c004da2:	6032      	str	r2, [r6, #0]
 c004da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 c004da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 c004dac:	2301      	movs	r3, #1
 c004dae:	e09d      	b.n	c004eec <_printf_i+0x1e8>
 c004db0:	6833      	ldr	r3, [r6, #0]
 c004db2:	6820      	ldr	r0, [r4, #0]
 c004db4:	1d19      	adds	r1, r3, #4
 c004db6:	6031      	str	r1, [r6, #0]
 c004db8:	0606      	lsls	r6, r0, #24
 c004dba:	d501      	bpl.n	c004dc0 <_printf_i+0xbc>
 c004dbc:	681d      	ldr	r5, [r3, #0]
 c004dbe:	e003      	b.n	c004dc8 <_printf_i+0xc4>
 c004dc0:	0645      	lsls	r5, r0, #25
 c004dc2:	d5fb      	bpl.n	c004dbc <_printf_i+0xb8>
 c004dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 c004dc8:	2d00      	cmp	r5, #0
 c004dca:	da03      	bge.n	c004dd4 <_printf_i+0xd0>
 c004dcc:	232d      	movs	r3, #45	@ 0x2d
 c004dce:	426d      	negs	r5, r5
 c004dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 c004dd4:	4859      	ldr	r0, [pc, #356]	@ (c004f3c <_printf_i+0x238>)
 c004dd6:	230a      	movs	r3, #10
 c004dd8:	e011      	b.n	c004dfe <_printf_i+0xfa>
 c004dda:	6821      	ldr	r1, [r4, #0]
 c004ddc:	6833      	ldr	r3, [r6, #0]
 c004dde:	0608      	lsls	r0, r1, #24
 c004de0:	f853 5b04 	ldr.w	r5, [r3], #4
 c004de4:	d402      	bmi.n	c004dec <_printf_i+0xe8>
 c004de6:	0649      	lsls	r1, r1, #25
 c004de8:	bf48      	it	mi
 c004dea:	b2ad      	uxthmi	r5, r5
 c004dec:	2f6f      	cmp	r7, #111	@ 0x6f
 c004dee:	6033      	str	r3, [r6, #0]
 c004df0:	4852      	ldr	r0, [pc, #328]	@ (c004f3c <_printf_i+0x238>)
 c004df2:	bf14      	ite	ne
 c004df4:	230a      	movne	r3, #10
 c004df6:	2308      	moveq	r3, #8
 c004df8:	2100      	movs	r1, #0
 c004dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 c004dfe:	6866      	ldr	r6, [r4, #4]
 c004e00:	2e00      	cmp	r6, #0
 c004e02:	60a6      	str	r6, [r4, #8]
 c004e04:	bfa2      	ittt	ge
 c004e06:	6821      	ldrge	r1, [r4, #0]
 c004e08:	f021 0104 	bicge.w	r1, r1, #4
 c004e0c:	6021      	strge	r1, [r4, #0]
 c004e0e:	b90d      	cbnz	r5, c004e14 <_printf_i+0x110>
 c004e10:	2e00      	cmp	r6, #0
 c004e12:	d04b      	beq.n	c004eac <_printf_i+0x1a8>
 c004e14:	4616      	mov	r6, r2
 c004e16:	fbb5 f1f3 	udiv	r1, r5, r3
 c004e1a:	fb03 5711 	mls	r7, r3, r1, r5
 c004e1e:	5dc7      	ldrb	r7, [r0, r7]
 c004e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 c004e24:	462f      	mov	r7, r5
 c004e26:	460d      	mov	r5, r1
 c004e28:	42bb      	cmp	r3, r7
 c004e2a:	d9f4      	bls.n	c004e16 <_printf_i+0x112>
 c004e2c:	2b08      	cmp	r3, #8
 c004e2e:	d10b      	bne.n	c004e48 <_printf_i+0x144>
 c004e30:	6823      	ldr	r3, [r4, #0]
 c004e32:	07df      	lsls	r7, r3, #31
 c004e34:	d508      	bpl.n	c004e48 <_printf_i+0x144>
 c004e36:	6923      	ldr	r3, [r4, #16]
 c004e38:	6861      	ldr	r1, [r4, #4]
 c004e3a:	4299      	cmp	r1, r3
 c004e3c:	bfde      	ittt	le
 c004e3e:	2330      	movle	r3, #48	@ 0x30
 c004e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 c004e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 c004e48:	1b92      	subs	r2, r2, r6
 c004e4a:	6122      	str	r2, [r4, #16]
 c004e4c:	464b      	mov	r3, r9
 c004e4e:	aa03      	add	r2, sp, #12
 c004e50:	4621      	mov	r1, r4
 c004e52:	4640      	mov	r0, r8
 c004e54:	f8cd a000 	str.w	sl, [sp]
 c004e58:	f7ff fee2 	bl	c004c20 <_printf_common>
 c004e5c:	3001      	adds	r0, #1
 c004e5e:	d14a      	bne.n	c004ef6 <_printf_i+0x1f2>
 c004e60:	f04f 30ff 	mov.w	r0, #4294967295
 c004e64:	b004      	add	sp, #16
 c004e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c004e6a:	6823      	ldr	r3, [r4, #0]
 c004e6c:	f043 0320 	orr.w	r3, r3, #32
 c004e70:	6023      	str	r3, [r4, #0]
 c004e72:	2778      	movs	r7, #120	@ 0x78
 c004e74:	4832      	ldr	r0, [pc, #200]	@ (c004f40 <_printf_i+0x23c>)
 c004e76:	6823      	ldr	r3, [r4, #0]
 c004e78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 c004e7c:	061f      	lsls	r7, r3, #24
 c004e7e:	6831      	ldr	r1, [r6, #0]
 c004e80:	f851 5b04 	ldr.w	r5, [r1], #4
 c004e84:	d402      	bmi.n	c004e8c <_printf_i+0x188>
 c004e86:	065f      	lsls	r7, r3, #25
 c004e88:	bf48      	it	mi
 c004e8a:	b2ad      	uxthmi	r5, r5
 c004e8c:	6031      	str	r1, [r6, #0]
 c004e8e:	07d9      	lsls	r1, r3, #31
 c004e90:	bf44      	itt	mi
 c004e92:	f043 0320 	orrmi.w	r3, r3, #32
 c004e96:	6023      	strmi	r3, [r4, #0]
 c004e98:	b11d      	cbz	r5, c004ea2 <_printf_i+0x19e>
 c004e9a:	2310      	movs	r3, #16
 c004e9c:	e7ac      	b.n	c004df8 <_printf_i+0xf4>
 c004e9e:	4827      	ldr	r0, [pc, #156]	@ (c004f3c <_printf_i+0x238>)
 c004ea0:	e7e9      	b.n	c004e76 <_printf_i+0x172>
 c004ea2:	6823      	ldr	r3, [r4, #0]
 c004ea4:	f023 0320 	bic.w	r3, r3, #32
 c004ea8:	6023      	str	r3, [r4, #0]
 c004eaa:	e7f6      	b.n	c004e9a <_printf_i+0x196>
 c004eac:	4616      	mov	r6, r2
 c004eae:	e7bd      	b.n	c004e2c <_printf_i+0x128>
 c004eb0:	6833      	ldr	r3, [r6, #0]
 c004eb2:	6825      	ldr	r5, [r4, #0]
 c004eb4:	1d18      	adds	r0, r3, #4
 c004eb6:	6961      	ldr	r1, [r4, #20]
 c004eb8:	6030      	str	r0, [r6, #0]
 c004eba:	062e      	lsls	r6, r5, #24
 c004ebc:	681b      	ldr	r3, [r3, #0]
 c004ebe:	d501      	bpl.n	c004ec4 <_printf_i+0x1c0>
 c004ec0:	6019      	str	r1, [r3, #0]
 c004ec2:	e002      	b.n	c004eca <_printf_i+0x1c6>
 c004ec4:	0668      	lsls	r0, r5, #25
 c004ec6:	d5fb      	bpl.n	c004ec0 <_printf_i+0x1bc>
 c004ec8:	8019      	strh	r1, [r3, #0]
 c004eca:	2300      	movs	r3, #0
 c004ecc:	4616      	mov	r6, r2
 c004ece:	6123      	str	r3, [r4, #16]
 c004ed0:	e7bc      	b.n	c004e4c <_printf_i+0x148>
 c004ed2:	6833      	ldr	r3, [r6, #0]
 c004ed4:	2100      	movs	r1, #0
 c004ed6:	1d1a      	adds	r2, r3, #4
 c004ed8:	6032      	str	r2, [r6, #0]
 c004eda:	681e      	ldr	r6, [r3, #0]
 c004edc:	6862      	ldr	r2, [r4, #4]
 c004ede:	4630      	mov	r0, r6
 c004ee0:	f000 f830 	bl	c004f44 <memchr>
 c004ee4:	b108      	cbz	r0, c004eea <_printf_i+0x1e6>
 c004ee6:	1b80      	subs	r0, r0, r6
 c004ee8:	6060      	str	r0, [r4, #4]
 c004eea:	6863      	ldr	r3, [r4, #4]
 c004eec:	6123      	str	r3, [r4, #16]
 c004eee:	2300      	movs	r3, #0
 c004ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 c004ef4:	e7aa      	b.n	c004e4c <_printf_i+0x148>
 c004ef6:	6923      	ldr	r3, [r4, #16]
 c004ef8:	4632      	mov	r2, r6
 c004efa:	4649      	mov	r1, r9
 c004efc:	4640      	mov	r0, r8
 c004efe:	47d0      	blx	sl
 c004f00:	3001      	adds	r0, #1
 c004f02:	d0ad      	beq.n	c004e60 <_printf_i+0x15c>
 c004f04:	6823      	ldr	r3, [r4, #0]
 c004f06:	079b      	lsls	r3, r3, #30
 c004f08:	d413      	bmi.n	c004f32 <_printf_i+0x22e>
 c004f0a:	68e0      	ldr	r0, [r4, #12]
 c004f0c:	9b03      	ldr	r3, [sp, #12]
 c004f0e:	4298      	cmp	r0, r3
 c004f10:	bfb8      	it	lt
 c004f12:	4618      	movlt	r0, r3
 c004f14:	e7a6      	b.n	c004e64 <_printf_i+0x160>
 c004f16:	2301      	movs	r3, #1
 c004f18:	4632      	mov	r2, r6
 c004f1a:	4649      	mov	r1, r9
 c004f1c:	4640      	mov	r0, r8
 c004f1e:	47d0      	blx	sl
 c004f20:	3001      	adds	r0, #1
 c004f22:	d09d      	beq.n	c004e60 <_printf_i+0x15c>
 c004f24:	3501      	adds	r5, #1
 c004f26:	68e3      	ldr	r3, [r4, #12]
 c004f28:	9903      	ldr	r1, [sp, #12]
 c004f2a:	1a5b      	subs	r3, r3, r1
 c004f2c:	42ab      	cmp	r3, r5
 c004f2e:	dcf2      	bgt.n	c004f16 <_printf_i+0x212>
 c004f30:	e7eb      	b.n	c004f0a <_printf_i+0x206>
 c004f32:	2500      	movs	r5, #0
 c004f34:	f104 0619 	add.w	r6, r4, #25
 c004f38:	e7f5      	b.n	c004f26 <_printf_i+0x222>
 c004f3a:	bf00      	nop
 c004f3c:	0c0051d5 	.word	0x0c0051d5
 c004f40:	0c0051e6 	.word	0x0c0051e6

0c004f44 <memchr>:
 c004f44:	b2c9      	uxtb	r1, r1
 c004f46:	4603      	mov	r3, r0
 c004f48:	4402      	add	r2, r0
 c004f4a:	b510      	push	{r4, lr}
 c004f4c:	4293      	cmp	r3, r2
 c004f4e:	4618      	mov	r0, r3
 c004f50:	d101      	bne.n	c004f56 <memchr+0x12>
 c004f52:	2000      	movs	r0, #0
 c004f54:	e003      	b.n	c004f5e <memchr+0x1a>
 c004f56:	7804      	ldrb	r4, [r0, #0]
 c004f58:	3301      	adds	r3, #1
 c004f5a:	428c      	cmp	r4, r1
 c004f5c:	d1f6      	bne.n	c004f4c <memchr+0x8>
 c004f5e:	bd10      	pop	{r4, pc}

0c004f60 <_realloc_r>:
 c004f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c004f64:	4680      	mov	r8, r0
 c004f66:	4615      	mov	r5, r2
 c004f68:	460c      	mov	r4, r1
 c004f6a:	b921      	cbnz	r1, c004f76 <_realloc_r+0x16>
 c004f6c:	4611      	mov	r1, r2
 c004f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c004f72:	f7ff bb8b 	b.w	c00468c <_malloc_r>
 c004f76:	b92a      	cbnz	r2, c004f84 <_realloc_r+0x24>
 c004f78:	f7ff fcb0 	bl	c0048dc <_free_r>
 c004f7c:	2400      	movs	r4, #0
 c004f7e:	4620      	mov	r0, r4
 c004f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c004f84:	f000 f81a 	bl	c004fbc <_malloc_usable_size_r>
 c004f88:	4285      	cmp	r5, r0
 c004f8a:	4606      	mov	r6, r0
 c004f8c:	d802      	bhi.n	c004f94 <_realloc_r+0x34>
 c004f8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 c004f92:	d8f4      	bhi.n	c004f7e <_realloc_r+0x1e>
 c004f94:	4629      	mov	r1, r5
 c004f96:	4640      	mov	r0, r8
 c004f98:	f7ff fb78 	bl	c00468c <_malloc_r>
 c004f9c:	4607      	mov	r7, r0
 c004f9e:	2800      	cmp	r0, #0
 c004fa0:	d0ec      	beq.n	c004f7c <_realloc_r+0x1c>
 c004fa2:	42b5      	cmp	r5, r6
 c004fa4:	462a      	mov	r2, r5
 c004fa6:	4621      	mov	r1, r4
 c004fa8:	bf28      	it	cs
 c004faa:	4632      	movcs	r2, r6
 c004fac:	f7ff fc88 	bl	c0048c0 <memcpy>
 c004fb0:	4621      	mov	r1, r4
 c004fb2:	4640      	mov	r0, r8
 c004fb4:	463c      	mov	r4, r7
 c004fb6:	f7ff fc91 	bl	c0048dc <_free_r>
 c004fba:	e7e0      	b.n	c004f7e <_realloc_r+0x1e>

0c004fbc <_malloc_usable_size_r>:
 c004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c004fc0:	1f18      	subs	r0, r3, #4
 c004fc2:	2b00      	cmp	r3, #0
 c004fc4:	bfbc      	itt	lt
 c004fc6:	580b      	ldrlt	r3, [r1, r0]
 c004fc8:	18c0      	addlt	r0, r0, r3
 c004fca:	4770      	bx	lr

0c004fcc <_init>:
 c004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c004fce:	bf00      	nop
 c004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c004fd2:	bc08      	pop	{r3}
 c004fd4:	469e      	mov	lr, r3
 c004fd6:	4770      	bx	lr

0c004fd8 <_fini>:
 c004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c004fda:	bf00      	nop
 c004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c004fde:	bc08      	pop	{r3}
 c004fe0:	469e      	mov	lr, r3
 c004fe2:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 bcb2 	b.w	c00196c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_recv>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 b8b0 	b.w	c001170 <__acle_se_SECURE_recv>

0c03e010 <SECURE_setState>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 b8ee 	b.w	c0011f4 <__acle_se_SECURE_setState>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 b824 	b.w	c001068 <__acle_se_SECURE_RegisterCallback>

0c03e020 <SECURE_send>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b862 	b.w	c0010ec <__acle_se_SECURE_send>

0c03e028 <SECURE_pox>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c3 ba20 	b.w	c001470 <__acle_se_SECURE_pox>

0c03e030 <SECURE_checkState>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c3 b938 	b.w	c0012a8 <__acle_se_SECURE_checkState>
	...
