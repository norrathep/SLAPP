
SecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006c70  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .gnu.sgstubs  00000020  00007c00  00007c00  00027c00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .relocate     000000d0  20000000  00006c70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000030  200000d0  00006d40  000200d0  2**2
                  ALLOC
  4 .heap         00000200  20000100  00006d70  000200d0  2**0
                  ALLOC
  5 .stack        00001000  20000300  00006f70  000200d0  2**0
                  ALLOC
  6 .userRowBlock 0000003c  00804000  00804000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .bocorBlock   00000008  0080c000  0080c000  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .bocorcekeyBlock 00000030  0080c010  0080c010  0003c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .bocorbootkeyBlock 00000020  0080c050  0080c050  0003c050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .ARM.attributes 0000002c  00000000  00000000  0003c070  2**0
                  CONTENTS, READONLY
 11 .comment      00000059  00000000  00000000  0003c09c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014294  00000000  00000000  0003c0f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012fa  00000000  00000000  00050389  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011088  00000000  00000000  00051683  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d0  00000000  00000000  0006270b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001e48  00000000  00000000  000629db  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015294  00000000  00000000  00064823  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000532f  00000000  00000000  00079ab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00089324  00000000  00000000  0007ede6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00000b78  00000000  00000000  0010810c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
    // Not implemented
    SystemCoreClock = __SYSTEM_CLOCK;
       0:	00 13 00 20 d5 62 00 00 cd 62 00 00 d1 62 00 00     ... .b...b...b..
	...
      2c:	cd 62 00 00 00 00 00 00 00 00 00 00 cd 62 00 00     .b...........b..
      3c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      4c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      5c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      6c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      7c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      8c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      9c:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      ac:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      bc:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      cc:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      dc:	cd 62 00 00 cd 62 00 00 cd 62 00 00 cd 62 00 00     .b...b...b...b..
      ec:	cd 62 00 00 cd 62 00 00                             .b...b..

000000f4 <__acle_se_secure_pox>:

#include "secure.h"    /* Header file with secure interface API */

void __attribute__((cmse_nonsecure_entry)) secure_pox(pox_call_t *pox_fn, uint8_t *pox_token)
{
	return pox(pox_fn, pox_token);
      f4:	f246 4309 	movw	r3, #25609	; 0x6409
{
      f8:	b510      	push	{r4, lr}
	return pox(pox_fn, pox_token);
      fa:	f2c0 0300 	movt	r3, #0
      fe:	4798      	blx	r3
}
     100:	2000      	movs	r0, #0
     102:	0001      	movs	r1, r0
     104:	0002      	movs	r2, r0
     106:	0003      	movs	r3, r0
     108:	4684      	mov	ip, r0
     10a:	bc10      	pop	{r4}
     10c:	bc01      	pop	{r0}
     10e:	4686      	mov	lr, r0
     110:	f380 8800 	msr	CPSR_f, r0
     114:	4704      	bxns	r0
     116:	46c0      	nop			; (mov r8, r8)

00000118 <__do_global_dtors_aux>:
     118:	b510      	push	{r4, lr}
     11a:	f240 04d0 	movw	r4, #208	; 0xd0
     11e:	f2c2 0400 	movt	r4, #8192	; 0x2000
     122:	7823      	ldrb	r3, [r4, #0]
     124:	b963      	cbnz	r3, 140 <__do_global_dtors_aux+0x28>
     126:	f240 0300 	movw	r3, #0
     12a:	f2c0 0300 	movt	r3, #0
     12e:	b12b      	cbz	r3, 13c <__do_global_dtors_aux+0x24>
     130:	f24c 0070 	movw	r0, #49264	; 0xc070
     134:	f2c0 0080 	movt	r0, #128	; 0x80
     138:	e000      	b.n	13c <__do_global_dtors_aux+0x24>
     13a:	bf00      	nop
     13c:	2301      	movs	r3, #1
     13e:	7023      	strb	r3, [r4, #0]
     140:	bd10      	pop	{r4, pc}
     142:	46c0      	nop			; (mov r8, r8)

00000144 <frame_dummy>:
     144:	f240 0300 	movw	r3, #0
     148:	f2c0 0300 	movt	r3, #0
     14c:	b510      	push	{r4, lr}
     14e:	b14b      	cbz	r3, 164 <frame_dummy+0x20>
     150:	f240 01d4 	movw	r1, #212	; 0xd4
     154:	f24c 0070 	movw	r0, #49264	; 0xc070
     158:	f2c2 0100 	movt	r1, #8192	; 0x2000
     15c:	f2c0 0080 	movt	r0, #128	; 0x80
     160:	e000      	b.n	164 <frame_dummy+0x20>
     162:	bf00      	nop
     164:	f24c 0070 	movw	r0, #49264	; 0xc070
     168:	f2c0 0080 	movt	r0, #128	; 0x80
     16c:	6803      	ldr	r3, [r0, #0]
     16e:	b903      	cbnz	r3, 172 <frame_dummy+0x2e>
     170:	bd10      	pop	{r4, pc}
     172:	f240 0300 	movw	r3, #0
     176:	f2c0 0300 	movt	r3, #0
     17a:	2b00      	cmp	r3, #0
     17c:	d0f8      	beq.n	170 <frame_dummy+0x2c>
     17e:	4798      	blx	r3
     180:	e7f6      	b.n	170 <frame_dummy+0x2c>
     182:	46c0      	nop			; (mov r8, r8)

00000184 <sha256_initialize>:
    uint8_t		length[8];	// Changed by RKW, unsigned char becomes uint8_t
} sha256;
	
void sha256_initialize(sha256 *sha) {
    int i;
    for (i = 0; i < 17; ++i) sha->buffer[i] = 0;
     184:	b570      	push	{r4, r5, r6, lr}
     186:	f246 6567 	movw	r5, #26215	; 0x6667
    /* Prepare the inner hash key block, hashing the key if it's too long. */
    if (length <= 64) {
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
        for (; i < 64; ++i) hmac->key[i] = 0x36;
    } else {
        sha256_initialize(&(hmac->sha));
     18a:	0004      	movs	r4, r0
     18c:	f2c0 0500 	movt	r5, #0
     190:	2244      	movs	r2, #68	; 0x44
    sha->state[0] = 0x6a09e667;
     192:	2100      	movs	r1, #0
     194:	3020      	adds	r0, #32
     196:	47a8      	blx	r5
     198:	f24e 6367 	movw	r3, #58983	; 0xe667
     19c:	f6c6 2309 	movt	r3, #27145	; 0x6a09
    sha->state[1] = 0xbb67ae85;
     1a0:	6623      	str	r3, [r4, #96]	; 0x60
     1a2:	f64a 6385 	movw	r3, #44677	; 0xae85
     1a6:	f6cb 3367 	movt	r3, #47975	; 0xbb67
    sha->state[2] = 0x3c6ef372;
     1aa:	6663      	str	r3, [r4, #100]	; 0x64
     1ac:	f24f 3372 	movw	r3, #62322	; 0xf372
     1b0:	f6c3 436e 	movt	r3, #15470	; 0x3c6e
     1b4:	66a3      	str	r3, [r4, #104]	; 0x68
    sha->state[3] = 0xa54ff53a;
     1b6:	f24f 533a 	movw	r3, #62778	; 0xf53a
     1ba:	f2ca 534f 	movt	r3, #42319	; 0xa54f
     1be:	66e3      	str	r3, [r4, #108]	; 0x6c
     1c0:	f245 237f 	movw	r3, #21119	; 0x527f
    sha->state[4] = 0x510e527f;
     1c4:	f2c5 130e 	movt	r3, #20750	; 0x510e
     1c8:	6723      	str	r3, [r4, #112]	; 0x70
     1ca:	f646 038c 	movw	r3, #26764	; 0x688c
    sha->state[5] = 0x9b05688c;
     1ce:	f6c9 3305 	movt	r3, #39685	; 0x9b05
     1d2:	6763      	str	r3, [r4, #116]	; 0x74
     1d4:	f64d 13ab 	movw	r3, #55723	; 0xd9ab
     1d8:	f6c1 7383 	movt	r3, #8067	; 0x1f83
    sha->state[6] = 0x1f83d9ab;
     1dc:	67a3      	str	r3, [r4, #120]	; 0x78
     1de:	f64c 5319 	movw	r3, #52505	; 0xcd19
     1e2:	0020      	movs	r0, r4
     1e4:	f6c5 33e0 	movt	r3, #23520	; 0x5be0
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     1e8:	67e3      	str	r3, [r4, #124]	; 0x7c
    sha->state[7] = 0x5be0cd19;
     1ea:	2208      	movs	r2, #8
     1ec:	2100      	movs	r1, #0
     1ee:	3080      	adds	r0, #128	; 0x80
     1f0:	47a8      	blx	r5
     1f2:	bd70      	pop	{r4, r5, r6, pc}

000001f4 <sha256_update>:
    for (i = 0; i < 8; ++i) sha->length[i] = 0;
     1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    sha->state[7] = 0x5be0cd19;
     1f6:	4657      	mov	r7, sl
     1f8:	464e      	mov	r6, r9
     1fa:	4645      	mov	r5, r8
     1fc:	46de      	mov	lr, fp
     1fe:	00d3      	lsls	r3, r2, #3
    uint8_t terminator[64 + 8] = { 0x80 };
     200:	469c      	mov	ip, r3
     202:	b5e0      	push	{r5, r6, r7, lr}
     204:	4ce8      	ldr	r4, [pc, #928]	; (5a8 <//STACK_SIZE+0x1a8>)
     206:	23ff      	movs	r3, #255	; 0xff
     208:	44a5      	add	sp, r4
     20a:	9206      	str	r2, [sp, #24]
     20c:	4662      	mov	r2, ip
    if (length > 0) sha256_update(sha, message, length);
     20e:	401a      	ands	r2, r3
     210:	9203      	str	r2, [sp, #12]
     212:	4663      	mov	r3, ip
     214:	466a      	mov	r2, sp
     216:	7113      	strb	r3, [r2, #4]
     218:	7913      	ldrb	r3, [r2, #4]
     21a:	2702      	movs	r7, #2
     21c:	469a      	mov	sl, r3
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     21e:	0003      	movs	r3, r0
     220:	2506      	movs	r5, #6
     222:	2600      	movs	r6, #0
     224:	2407      	movs	r4, #7
     226:	f240 09ff 	movw	r9, #255	; 0xff
     22a:	9105      	str	r1, [sp, #20]
     22c:	3380      	adds	r3, #128	; 0x80
     22e:	9001      	str	r0, [sp, #4]
     230:	2c07      	cmp	r4, #7
     232:	d100      	bne.n	236 <HEAP_SIZE+0x36>
     234:	e1ba      	b.n	5ac <//STACK_SIZE+0x1ac>
     236:	2c02      	cmp	r4, #2
     238:	dd00      	ble.n	23c <HEAP_SIZE+0x3c>
    if (length < 9) length += 64;
     23a:	e1f4      	b.n	626 <//STACK_SIZE+0x226>
     23c:	2100      	movs	r1, #0
     23e:	79da      	ldrb	r2, [r3, #7]
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     240:	1852      	adds	r2, r2, r1
     242:	71da      	strb	r2, [r3, #7]
     244:	3e01      	subs	r6, #1
     246:	3d01      	subs	r5, #1
     248:	3b01      	subs	r3, #1
     24a:	3f01      	subs	r7, #1
     24c:	3c01      	subs	r4, #1
     24e:	d2ef      	bcs.n	230 <HEAP_SIZE+0x30>
     250:	9b01      	ldr	r3, [sp, #4]
     252:	469b      	mov	fp, r3
    sha256_update(sha, terminator, length);
     254:	9b06      	ldr	r3, [sp, #24]
     256:	2b00      	cmp	r3, #0
     258:	d040      	beq.n	2dc <HEAP_SIZE+0xdc>
     25a:	2386      	movs	r3, #134	; 0x86
    for (i = 0; i < 32; ++i) {
     25c:	465a      	mov	r2, fp
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     25e:	5cd2      	ldrb	r2, [r2, r3]
     260:	3b85      	subs	r3, #133	; 0x85
     262:	4013      	ands	r3, r2
     264:	4659      	mov	r1, fp
     266:	2287      	movs	r2, #135	; 0x87
     268:	2603      	movs	r6, #3
     26a:	253f      	movs	r5, #63	; 0x3f
     26c:	5c8a      	ldrb	r2, [r1, r2]
     26e:	9806      	ldr	r0, [sp, #24]
     270:	08d2      	lsrs	r2, r2, #3
     272:	015b      	lsls	r3, r3, #5
     274:	9c05      	ldr	r4, [sp, #20]
    for (i = 0; i < 32; ++i) {
     276:	189b      	adds	r3, r3, r2
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     278:	1a1b      	subs	r3, r3, r0
    for (i = 0; i < 32; ++i) {
     27a:	7821      	ldrb	r1, [r4, #0]
     27c:	439e      	bics	r6, r3
        sha256_finalize(&(hmac->sha), key, length);
        for (i = 0; i < 32; ++i) hmac->key[i] = hmac->sha.hash[i] ^ 0x36;
     27e:	401d      	ands	r5, r3
     280:	00f3      	lsls	r3, r6, #3
     282:	4099      	lsls	r1, r3
     284:	000b      	movs	r3, r1
     286:	10aa      	asrs	r2, r5, #2
     288:	0092      	lsls	r2, r2, #2
     28a:	445a      	add	r2, fp
     28c:	6a11      	ldr	r1, [r2, #32]
     28e:	430b      	orrs	r3, r1
     290:	6213      	str	r3, [r2, #32]
     292:	0002      	movs	r2, r0
     294:	1c63      	adds	r3, r4, #1
     296:	9305      	str	r3, [sp, #20]
     298:	43d3      	mvns	r3, r2
     29a:	3801      	subs	r0, #1
     29c:	1c6c      	adds	r4, r5, #1
     29e:	1b5d      	subs	r5, r3, r5
     2a0:	b1c8      	cbz	r0, 2d6 <HEAP_SIZE+0xd6>
     2a2:	465e      	mov	r6, fp
     2a4:	46ac      	mov	ip, r5
     2a6:	9905      	ldr	r1, [sp, #20]
     2a8:	2c40      	cmp	r4, #64	; 0x40
     2aa:	d020      	beq.n	2ee <HEAP_SIZE+0xee>
     2ac:	4662      	mov	r2, ip
     2ae:	2503      	movs	r5, #3
     2b0:	1812      	adds	r2, r2, r0
     2b2:	780f      	ldrb	r7, [r1, #0]
     2b4:	402a      	ands	r2, r5
     2b6:	00d2      	lsls	r2, r2, #3
     2b8:	4097      	lsls	r7, r2
     2ba:	003a      	movs	r2, r7
     2bc:	10a3      	asrs	r3, r4, #2
     2be:	009b      	lsls	r3, r3, #2
     2c0:	18f3      	adds	r3, r6, r3
     2c2:	6a1d      	ldr	r5, [r3, #32]
     2c4:	3801      	subs	r0, #1
     2c6:	432a      	orrs	r2, r5
     2c8:	621a      	str	r2, [r3, #32]
     2ca:	3101      	adds	r1, #1
     2cc:	3401      	adds	r4, #1
    sha->state[0] = 0x6a09e667;
     2ce:	2800      	cmp	r0, #0
     2d0:	d1ea      	bne.n	2a8 <HEAP_SIZE+0xa8>
     2d2:	46b3      	mov	fp, r6
     2d4:	9105      	str	r1, [sp, #20]
     2d6:	2c40      	cmp	r4, #64	; 0x40
     2d8:	d100      	bne.n	2dc <HEAP_SIZE+0xdc>
    sha->state[1] = 0xbb67ae85;
     2da:	e161      	b.n	5a0 <//STACK_SIZE+0x1a0>
     2dc:	f240 2344 	movw	r3, #580	; 0x244
     2e0:	449d      	add	sp, r3
     2e2:	bc3c      	pop	{r2, r3, r4, r5}
     2e4:	4690      	mov	r8, r2
    sha->state[2] = 0x3c6ef372;
     2e6:	4699      	mov	r9, r3
     2e8:	46a2      	mov	sl, r4
     2ea:	46ab      	mov	fp, r5
     2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ee:	46b3      	mov	fp, r6
     2f0:	9105      	str	r1, [sp, #20]
    sha->state[3] = 0xa54ff53a;
     2f2:	9006      	str	r0, [sp, #24]
     2f4:	f246 71cc 	movw	r1, #26572	; 0x67cc
     2f8:	f246 6331 	movw	r3, #26161	; 0x6631
     2fc:	f240 1200 	movw	r2, #256	; 0x100
    sha->state[4] = 0x510e527f;
     300:	f2c0 0100 	movt	r1, #0
     304:	f2c0 0300 	movt	r3, #0
     308:	a810      	add	r0, sp, #64	; 0x40
    sha->state[5] = 0x9b05688c;
     30a:	4798      	blx	r3
     30c:	2200      	movs	r2, #0
     30e:	465b      	mov	r3, fp
     310:	6a1e      	ldr	r6, [r3, #32]
     312:	621a      	str	r2, [r3, #32]
     314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    sha->state[6] = 0x1f83d9ab;
     316:	9650      	str	r6, [sp, #320]	; 0x140
     318:	9351      	str	r3, [sp, #324]	; 0x144
     31a:	465b      	mov	r3, fp
     31c:	625a      	str	r2, [r3, #36]	; 0x24
     31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     320:	4659      	mov	r1, fp
    sha->state[7] = 0x5be0cd19;
     322:	9352      	str	r3, [sp, #328]	; 0x148
     324:	465b      	mov	r3, fp
     326:	629a      	str	r2, [r3, #40]	; 0x28
     328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     32a:	2710      	movs	r7, #16
     32c:	9353      	str	r3, [sp, #332]	; 0x14c
     32e:	465b      	mov	r3, fp
     330:	62da      	str	r2, [r3, #44]	; 0x2c
     332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     334:	f240 0807 	movw	r8, #7
        for (; i < 64; ++i) hmac->key[i] = 0x36;
    }
    /* Initialize the inner hash with the key block. */
    sha256_initialize(&(hmac->sha));
    sha256_update(&(hmac->sha), hmac->key, 64);
     338:	9354      	str	r3, [sp, #336]	; 0x150
     33a:	465b      	mov	r3, fp
     33c:	631a      	str	r2, [r3, #48]	; 0x30
}
     33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     340:	f240 0c12 	movw	ip, #18
     344:	9355      	str	r3, [sp, #340]	; 0x154
     346:	465b      	mov	r3, fp
     348:	635a      	str	r2, [r3, #52]	; 0x34
     34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    if (length < 9) length += 64;
     34c:	f240 0a11 	movw	sl, #17
     350:	9356      	str	r3, [sp, #344]	; 0x158
     352:	465b      	mov	r3, fp
     354:	639a      	str	r2, [r3, #56]	; 0x38
     356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        for (i = 0; i < length; ++i) hmac->key[i] = key[i] ^ 0x36;
     358:	ad51      	add	r5, sp, #324	; 0x144
     35a:	9357      	str	r3, [sp, #348]	; 0x15c
     35c:	465b      	mov	r3, fp
     35e:	63da      	str	r2, [r3, #60]	; 0x3c
     360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     362:	9358      	str	r3, [sp, #352]	; 0x160
     364:	465b      	mov	r3, fp
     366:	641a      	str	r2, [r3, #64]	; 0x40
     368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     36a:	9359      	str	r3, [sp, #356]	; 0x164
     36c:	465b      	mov	r3, fp
     36e:	645a      	str	r2, [r3, #68]	; 0x44
     370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
     372:	935a      	str	r3, [sp, #360]	; 0x168
     374:	465b      	mov	r3, fp
     376:	649a      	str	r2, [r3, #72]	; 0x48
     378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     37a:	9701      	str	r7, [sp, #4]
     37c:	935b      	str	r3, [sp, #364]	; 0x16c
     37e:	465b      	mov	r3, fp
     380:	64da      	str	r2, [r3, #76]	; 0x4c
                w[t] = sha->buffer[t];
     382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     384:	935c      	str	r3, [sp, #368]	; 0x170
                sha->buffer[t] = 0;
     386:	465b      	mov	r3, fp
     388:	651a      	str	r2, [r3, #80]	; 0x50
                w[t] = sha->buffer[t];
     38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
     38c:	935d      	str	r3, [sp, #372]	; 0x174
                sha->buffer[t] = 0;
     38e:	465b      	mov	r3, fp
                w[t] = sha->buffer[t];
     390:	6d9c      	ldr	r4, [r3, #88]	; 0x58
                sha->buffer[t] = 0;
     392:	655a      	str	r2, [r3, #84]	; 0x54
     394:	659a      	str	r2, [r3, #88]	; 0x58
                w[t] = sha->buffer[t];
     396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
     398:	945e      	str	r4, [sp, #376]	; 0x178
     39a:	935f      	str	r3, [sp, #380]	; 0x17c
                sha->buffer[t] = 0;
     39c:	65ca      	str	r2, [r1, #92]	; 0x5c
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     39e:	682a      	ldr	r2, [r5, #0]
     3a0:	4640      	mov	r0, r8
     3a2:	0011      	movs	r1, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3a4:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3a6:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3a8:	0010      	movs	r0, r2
     3aa:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3ac:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3ae:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3b0:	0020      	movs	r0, r4
     3b2:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3b4:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3b6:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3b8:	0020      	movs	r0, r4
     3ba:	41f8      	rors	r0, r7
     3bc:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     3be:	0aa4      	lsrs	r4, r4, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3c0:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     3c2:	4044      	eors	r4, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     3c4:	6a28      	ldr	r0, [r5, #32]
     3c6:	19a4      	adds	r4, r4, r6
     3c8:	4681      	mov	r9, r0
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3ca:	686e      	ldr	r6, [r5, #4]
                s0 ^= (w[t - 15] >> 3);
     3cc:	08d0      	lsrs	r0, r2, #3
     3ce:	4041      	eors	r1, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     3d0:	444c      	add	r4, r9
     3d2:	1864      	adds	r4, r4, r1
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3d4:	4640      	mov	r0, r8
     3d6:	0031      	movs	r1, r6
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3d8:	4667      	mov	r7, ip
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     3da:	41c1      	rors	r1, r0
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3dc:	0030      	movs	r0, r6
     3de:	41f8      	rors	r0, r7
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3e0:	4657      	mov	r7, sl
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     3e2:	4041      	eors	r1, r0
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3e4:	0018      	movs	r0, r3
     3e6:	41f8      	rors	r0, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3e8:	2713      	movs	r7, #19
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     3ea:	4681      	mov	r9, r0
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3ec:	0018      	movs	r0, r3
     3ee:	41f8      	rors	r0, r7
     3f0:	464f      	mov	r7, r9
                s1 ^= (w[t - 2] >> 10);
     3f2:	0a9b      	lsrs	r3, r3, #10
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     3f4:	4078      	eors	r0, r7
                s1 ^= (w[t - 2] >> 10);
     3f6:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     3f8:	6a68      	ldr	r0, [r5, #36]	; 0x24
     3fa:	63ec      	str	r4, [r5, #60]	; 0x3c
     3fc:	4681      	mov	r9, r0
     3fe:	444b      	add	r3, r9
     400:	189b      	adds	r3, r3, r2
                s0 ^= (w[t - 15] >> 3);
     402:	08f2      	lsrs	r2, r6, #3
     404:	4051      	eors	r1, r2
     406:	9a01      	ldr	r2, [sp, #4]
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     408:	185b      	adds	r3, r3, r1
     40a:	3202      	adds	r2, #2
     40c:	642b      	str	r3, [r5, #64]	; 0x40
     40e:	9201      	str	r2, [sp, #4]
     410:	3508      	adds	r5, #8
     412:	2a3e      	cmp	r2, #62	; 0x3e
     414:	d1c3      	bne.n	39e <HEAP_SIZE+0x19e>
     416:	ab80      	add	r3, sp, #512	; 0x200
     418:	4699      	mov	r9, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     41a:	465b      	mov	r3, fp
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     41c:	f240 0807 	movw	r8, #7
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     420:	f240 0c12 	movw	ip, #18
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     424:	2711      	movs	r7, #17
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     426:	2613      	movs	r6, #19
     428:	ad7e      	add	r5, sp, #504	; 0x1f8
     42a:	9301      	str	r3, [sp, #4]
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     42c:	686a      	ldr	r2, [r5, #4]
     42e:	4641      	mov	r1, r8
     430:	0013      	movs	r3, r2
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     432:	0014      	movs	r4, r2
                s0 = (w[t - 15] >> 7 | w[t - 15] << 25);
     434:	41cb      	rors	r3, r1
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     436:	4661      	mov	r1, ip
     438:	41cc      	rors	r4, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     43a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
                s0 ^= (w[t - 15] >> 18 | w[t - 15] << 14);
     43c:	405c      	eors	r4, r3
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     43e:	0008      	movs	r0, r1
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     440:	000b      	movs	r3, r1
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     442:	41f0      	rors	r0, r6
                s1 = (w[t - 2] >> 17 | w[t - 2] << 15);
     444:	41fb      	rors	r3, r7
                s1 ^= (w[t - 2] >> 19 | w[t - 2] << 13);
     446:	4058      	eors	r0, r3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     448:	682b      	ldr	r3, [r5, #0]
                s0 ^= (w[t - 15] >> 3);
     44a:	08d2      	lsrs	r2, r2, #3
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     44c:	469b      	mov	fp, r3
     44e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
                s0 ^= (w[t - 15] >> 3);
     450:	4062      	eors	r2, r4
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     452:	469a      	mov	sl, r3
     454:	44d3      	add	fp, sl
     456:	465b      	mov	r3, fp
     458:	189a      	adds	r2, r3, r2
                s1 ^= (w[t - 2] >> 10);
     45a:	0a8b      	lsrs	r3, r1, #10
     45c:	4043      	eors	r3, r0
                w[t] = (s1 + w[t - 7] + s0 + w[t - 16]) & 0xffffffffU;
     45e:	18d3      	adds	r3, r2, r3
     460:	642b      	str	r3, [r5, #64]	; 0x40
     462:	3504      	adds	r5, #4
            for (t = 16; t < 64; ++t) {
     464:	45a9      	cmp	r9, r5
     466:	d1e1      	bne.n	42c <//STACK_SIZE+0x2c>
     468:	9b01      	ldr	r3, [sp, #4]
     46a:	469b      	mov	fp, r3
            a = sha->state[0];
     46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
     46e:	001e      	movs	r6, r3
     470:	9307      	str	r3, [sp, #28]
            b = sha->state[1];
     472:	465b      	mov	r3, fp
     474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
     476:	001a      	movs	r2, r3
     478:	9308      	str	r3, [sp, #32]
            c = sha->state[2];
     47a:	465b      	mov	r3, fp
     47c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
     47e:	0019      	movs	r1, r3
     480:	9309      	str	r3, [sp, #36]	; 0x24
            d = sha->state[3];
     482:	465b      	mov	r3, fp
     484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     486:	0018      	movs	r0, r3
     488:	930a      	str	r3, [sp, #40]	; 0x28
            e = sha->state[4];
     48a:	465b      	mov	r3, fp
     48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     48e:	001d      	movs	r5, r3
     490:	930b      	str	r3, [sp, #44]	; 0x2c
            f = sha->state[5];
     492:	465b      	mov	r3, fp
     494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
     496:	001c      	movs	r4, r3
     498:	930c      	str	r3, [sp, #48]	; 0x30
            g = sha->state[6];
     49a:	465b      	mov	r3, fp
     49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
            f = sha->state[5];
     49e:	46a2      	mov	sl, r4
            g = sha->state[6];
     4a0:	001f      	movs	r7, r3
     4a2:	930d      	str	r3, [sp, #52]	; 0x34
            h = sha->state[7];
     4a4:	465b      	mov	r3, fp
     4a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            d = sha->state[3];
     4a8:	0004      	movs	r4, r0
            h = sha->state[7];
     4aa:	930e      	str	r3, [sp, #56]	; 0x38
     4ac:	469c      	mov	ip, r3
     4ae:	465b      	mov	r3, fp
            g = sha->state[6];
     4b0:	46b9      	mov	r9, r7
     4b2:	930f      	str	r3, [sp, #60]	; 0x3c
            h = sha->state[7];
     4b4:	2700      	movs	r7, #0
     4b6:	0010      	movs	r0, r2
     4b8:	46a0      	mov	r8, r4
     4ba:	000b      	movs	r3, r1
     4bc:	e005      	b.n	4ca <//STACK_SIZE+0xca>
     4be:	46d1      	mov	r9, sl
     4c0:	0003      	movs	r3, r0
     4c2:	46aa      	mov	sl, r5
     4c4:	0030      	movs	r0, r6
                e = d + t1;
     4c6:	000d      	movs	r5, r1
                a = t1 + t2;
     4c8:	0016      	movs	r6, r2
                e0 ^= (a >> 13 | a << 19);
     4ca:	220d      	movs	r2, #13
     4cc:	0034      	movs	r4, r6
     4ce:	2102      	movs	r1, #2
     4d0:	41d4      	rors	r4, r2
     4d2:	0032      	movs	r2, r6
     4d4:	41ca      	rors	r2, r1
                e1 ^= (e >> 11 | e << 21);
     4d6:	0029      	movs	r1, r5
                e0 ^= (a >> 13 | a << 19);
     4d8:	4054      	eors	r4, r2
                e1 ^= (e >> 11 | e << 21);
     4da:	220b      	movs	r2, #11
                e0 ^= (a >> 13 | a << 19);
     4dc:	9401      	str	r4, [sp, #4]
                e1 ^= (e >> 11 | e << 21);
     4de:	41d1      	rors	r1, r2
     4e0:	2406      	movs	r4, #6
     4e2:	002a      	movs	r2, r5
     4e4:	41e2      	rors	r2, r4
     4e6:	4051      	eors	r1, r2
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     4e8:	aa10      	add	r2, sp, #64	; 0x40
     4ea:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 11 | e << 21);
     4ec:	9102      	str	r1, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     4ee:	9203      	str	r2, [sp, #12]
     4f0:	aa50      	add	r2, sp, #320	; 0x140
     4f2:	59d2      	ldr	r2, [r2, r7]
                e1 ^= (e >> 25 | e << 7);
     4f4:	3413      	adds	r4, #19
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     4f6:	9204      	str	r2, [sp, #16]
     4f8:	9904      	ldr	r1, [sp, #16]
     4fa:	9a03      	ldr	r2, [sp, #12]
     4fc:	468b      	mov	fp, r1
                e1 ^= (e >> 25 | e << 7);
     4fe:	0029      	movs	r1, r5
     500:	41e1      	rors	r1, r4
     502:	9c02      	ldr	r4, [sp, #8]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     504:	445a      	add	r2, fp
                e1 ^= (e >> 25 | e << 7);
     506:	4061      	eors	r1, r4
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     508:	1852      	adds	r2, r2, r1
     50a:	4651      	mov	r1, sl
     50c:	4029      	ands	r1, r5
     50e:	468b      	mov	fp, r1
     510:	4649      	mov	r1, r9
     512:	465c      	mov	r4, fp
     514:	43a9      	bics	r1, r5
     516:	4061      	eors	r1, r4
     518:	1852      	adds	r2, r2, r1
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     51a:	0019      	movs	r1, r3
     51c:	001c      	movs	r4, r3
     51e:	4041      	eors	r1, r0
     520:	4004      	ands	r4, r0
     522:	4031      	ands	r1, r6
     524:	4061      	eors	r1, r4
     526:	468b      	mov	fp, r1
                e0 ^= (a >> 22 | a << 10);
     528:	0034      	movs	r4, r6
     52a:	2116      	movs	r1, #22
     52c:	41cc      	rors	r4, r1
     52e:	0021      	movs	r1, r4
     530:	9c01      	ldr	r4, [sp, #4]
                t1 = h + e1 + ((e & f) ^ (~e & g)) + k[t] + w[t];
     532:	4462      	add	r2, ip
                e0 ^= (a >> 22 | a << 10);
     534:	404c      	eors	r4, r1
                e = d + t1;
     536:	4641      	mov	r1, r8
                t2 = e0 + ((a & b) ^ (a & c) ^ (b & c));
     538:	445c      	add	r4, fp
                e = d + t1;
     53a:	1851      	adds	r1, r2, r1
                a = t1 + t2;
     53c:	1912      	adds	r2, r2, r4
            for (t = 0; t < 64; ++t) {
     53e:	f240 1400 	movw	r4, #256	; 0x100
     542:	3704      	adds	r7, #4
     544:	4698      	mov	r8, r3
     546:	46cc      	mov	ip, r9
     548:	42a7      	cmp	r7, r4
     54a:	d1b8      	bne.n	4be <//STACK_SIZE+0xbe>
     54c:	000c      	movs	r4, r1
     54e:	0019      	movs	r1, r3
     550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     552:	4680      	mov	r8, r0
     554:	469b      	mov	fp, r3
            sha->state[0] = (sha->state[0] + a) & 0xffffffffU;
     556:	9b07      	ldr	r3, [sp, #28]
     558:	0010      	movs	r0, r2
     55a:	469c      	mov	ip, r3
     55c:	465b      	mov	r3, fp
     55e:	4460      	add	r0, ip
     560:	6618      	str	r0, [r3, #96]	; 0x60
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     562:	9b08      	ldr	r3, [sp, #32]
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     564:	465a      	mov	r2, fp
            sha->state[1] = (sha->state[1] + b) & 0xffffffffU;
     566:	469c      	mov	ip, r3
     568:	465b      	mov	r3, fp
     56a:	4466      	add	r6, ip
     56c:	665e      	str	r6, [r3, #100]	; 0x64
            sha->state[2] = (sha->state[2] + c) & 0xffffffffU;
     56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
     570:	4443      	add	r3, r8
     572:	6693      	str	r3, [r2, #104]	; 0x68
            sha->state[3] = (sha->state[3] + d) & 0xffffffffU;
     574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     576:	185b      	adds	r3, r3, r1
     578:	66d3      	str	r3, [r2, #108]	; 0x6c
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     57c:	469c      	mov	ip, r3
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     57e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     580:	4464      	add	r4, ip
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     582:	469c      	mov	ip, r3
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     586:	4465      	add	r5, ip
            sha->state[6] = (sha->state[6] + g) & 0xffffffffU;
     588:	4453      	add	r3, sl
     58a:	6793      	str	r3, [r2, #120]	; 0x78
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
            sha->state[4] = (sha->state[4] + e) & 0xffffffffU;
     58e:	6714      	str	r4, [r2, #112]	; 0x70
            sha->state[7] = (sha->state[7] + h) & 0xffffffffU;
     590:	444b      	add	r3, r9
     592:	67d3      	str	r3, [r2, #124]	; 0x7c
    while (length > 0) {
     594:	9b06      	ldr	r3, [sp, #24]
            sha->state[5] = (sha->state[5] + f) & 0xffffffffU;
     596:	6755      	str	r5, [r2, #116]	; 0x74
    while (length > 0) {
     598:	2b00      	cmp	r3, #0
     59a:	d000      	beq.n	59e <//STACK_SIZE+0x19e>
     59c:	e65d      	b.n	25a <HEAP_SIZE+0x5a>
     59e:	e69d      	b.n	2dc <HEAP_SIZE+0xdc>
     5a0:	2300      	movs	r3, #0
     5a2:	9306      	str	r3, [sp, #24]
     5a4:	e6a6      	b.n	2f4 <HEAP_SIZE+0xf4>
     5a6:	46c0      	nop			; (mov r8, r8)
     5a8:	fffffdbc 	.word	0xfffffdbc
			bits = length << 3;
     5ac:	4660      	mov	r0, ip
        if (sha->length[i] + bits > 0xff) {
     5ae:	79da      	ldrb	r2, [r3, #7]
     5b0:	9903      	ldr	r1, [sp, #12]
			bits = length << 3;
     5b2:	9002      	str	r0, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     5b4:	1851      	adds	r1, r2, r1
     5b6:	29ff      	cmp	r1, #255	; 0xff
     5b8:	dd33      	ble.n	622 <//STACK_SIZE+0x222>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     5ba:	9a01      	ldr	r2, [sp, #4]
     5bc:	1952      	adds	r2, r2, r5
     5be:	3280      	adds	r2, #128	; 0x80
     5c0:	7811      	ldrb	r1, [r2, #0]
     5c2:	1c48      	adds	r0, r1, #1
     5c4:	7010      	strb	r0, [r2, #0]
     5c6:	29ff      	cmp	r1, #255	; 0xff
     5c8:	d127      	bne.n	61a <//STACK_SIZE+0x21a>
     5ca:	2c02      	cmp	r4, #2
     5cc:	d425      	bmi.n	61a <//STACK_SIZE+0x21a>
     5ce:	795a      	ldrb	r2, [r3, #5]
     5d0:	1c51      	adds	r1, r2, #1
     5d2:	7159      	strb	r1, [r3, #5]
     5d4:	2aff      	cmp	r2, #255	; 0xff
     5d6:	d120      	bne.n	61a <//STACK_SIZE+0x21a>
     5d8:	2c03      	cmp	r4, #3
     5da:	d41e      	bmi.n	61a <//STACK_SIZE+0x21a>
     5dc:	791a      	ldrb	r2, [r3, #4]
     5de:	1c51      	adds	r1, r2, #1
     5e0:	7119      	strb	r1, [r3, #4]
     5e2:	2aff      	cmp	r2, #255	; 0xff
     5e4:	d119      	bne.n	61a <//STACK_SIZE+0x21a>
     5e6:	2c04      	cmp	r4, #4
     5e8:	d417      	bmi.n	61a <//STACK_SIZE+0x21a>
     5ea:	78da      	ldrb	r2, [r3, #3]
     5ec:	1c51      	adds	r1, r2, #1
     5ee:	70d9      	strb	r1, [r3, #3]
     5f0:	2aff      	cmp	r2, #255	; 0xff
     5f2:	d112      	bne.n	61a <//STACK_SIZE+0x21a>
     5f4:	1c7a      	adds	r2, r7, #1
     5f6:	d010      	beq.n	61a <//STACK_SIZE+0x21a>
     5f8:	789a      	ldrb	r2, [r3, #2]
     5fa:	1c51      	adds	r1, r2, #1
     5fc:	7099      	strb	r1, [r3, #2]
     5fe:	2aff      	cmp	r2, #255	; 0xff
     600:	d10b      	bne.n	61a <//STACK_SIZE+0x21a>
     602:	2c06      	cmp	r4, #6
     604:	d409      	bmi.n	61a <//STACK_SIZE+0x21a>
     606:	785a      	ldrb	r2, [r3, #1]
     608:	1c51      	adds	r1, r2, #1
     60a:	7059      	strb	r1, [r3, #1]
     60c:	2aff      	cmp	r2, #255	; 0xff
     60e:	d104      	bne.n	61a <//STACK_SIZE+0x21a>
     610:	1c72      	adds	r2, r6, #1
     612:	d002      	beq.n	61a <//STACK_SIZE+0x21a>
     614:	781a      	ldrb	r2, [r3, #0]
     616:	1c51      	adds	r1, r2, #1
     618:	7019      	strb	r1, [r3, #0]
     61a:	4669      	mov	r1, sp
     61c:	79da      	ldrb	r2, [r3, #7]
     61e:	7a09      	ldrb	r1, [r1, #8]
     620:	e60e      	b.n	240 <HEAP_SIZE+0x40>
        if (sha->length[i] + bits > 0xff) {
     622:	4651      	mov	r1, sl
     624:	e60c      	b.n	240 <HEAP_SIZE+0x40>
			bits = length >> (53 - 8 * i);
     626:	00e2      	lsls	r2, r4, #3
     628:	4252      	negs	r2, r2
     62a:	9906      	ldr	r1, [sp, #24]
     62c:	3235      	adds	r2, #53	; 0x35
     62e:	40d1      	lsrs	r1, r2
		bits &= 0xff;
     630:	4648      	mov	r0, r9
     632:	4008      	ands	r0, r1
     634:	4683      	mov	fp, r0
        if (sha->length[i] + bits > 0xff) {
     636:	79da      	ldrb	r2, [r3, #7]
			bits = length >> (53 - 8 * i);
     638:	9102      	str	r1, [sp, #8]
        if (sha->length[i] + bits > 0xff) {
     63a:	4493      	add	fp, r2
     63c:	4658      	mov	r0, fp
     63e:	28ff      	cmp	r0, #255	; 0xff
     640:	dd01      	ble.n	646 <//STACK_SIZE+0x246>
            for (j = i - 1; j >= 0 && sha->length[j]++ == 0xff; --j);
     642:	1c68      	adds	r0, r5, #1
     644:	d1b9      	bne.n	5ba <//STACK_SIZE+0x1ba>
     646:	b2c9      	uxtb	r1, r1
     648:	e5fa      	b.n	240 <HEAP_SIZE+0x40>
     64a:	46c0      	nop			; (mov r8, r8)

0000064c <sha256_finalize>:
    uint8_t terminator[64 + 8] = { 0x80 };
     64c:	f246 6367 	movw	r3, #26215	; 0x6667
                     uint32_t length) {
     650:	b570      	push	{r4, r5, r6, lr}
     652:	b092      	sub	sp, #72	; 0x48
    uint8_t terminator[64 + 8] = { 0x80 };
     654:	f2c0 0300 	movt	r3, #0
                     uint32_t length) {
     658:	0004      	movs	r4, r0
     65a:	000e      	movs	r6, r1
     65c:	0015      	movs	r5, r2
    uint8_t terminator[64 + 8] = { 0x80 };
     65e:	2100      	movs	r1, #0
     660:	2248      	movs	r2, #72	; 0x48
     662:	4668      	mov	r0, sp
     664:	4798      	blx	r3
     666:	2380      	movs	r3, #128	; 0x80
     668:	466a      	mov	r2, sp
     66a:	7013      	strb	r3, [r2, #0]
    if (length > 0) sha256_update(sha, message, length);
     66c:	2d00      	cmp	r5, #0
     66e:	d130      	bne.n	6d2 <sha256_finalize+0x86>
     670:	f240 16f5 	movw	r6, #501	; 0x1f5
     674:	f2c0 0600 	movt	r6, #0
    length = 64 - sha->length[6] % 2 * 32 - sha->length[7] / 8;
     678:	2386      	movs	r3, #134	; 0x86
     67a:	5ce5      	ldrb	r5, [r4, r3]
     67c:	3b85      	subs	r3, #133	; 0x85
     67e:	402b      	ands	r3, r5
     680:	2287      	movs	r2, #135	; 0x87
     682:	2502      	movs	r5, #2
     684:	1aeb      	subs	r3, r5, r3
     686:	5ca5      	ldrb	r5, [r4, r2]
     688:	015b      	lsls	r3, r3, #5
     68a:	08ed      	lsrs	r5, r5, #3
     68c:	1b5d      	subs	r5, r3, r5
    if (length < 9) length += 64;
     68e:	2d08      	cmp	r5, #8
     690:	dc00      	bgt.n	694 <sha256_finalize+0x48>
     692:	3540      	adds	r5, #64	; 0x40
    for (i = 0; i < 8; ++i) terminator[length - 8 + i] = sha->length[i];
     694:	0028      	movs	r0, r5
     696:	0021      	movs	r1, r4
     698:	f246 6331 	movw	r3, #26161	; 0x6631
     69c:	3808      	subs	r0, #8
     69e:	f2c0 0300 	movt	r3, #0
     6a2:	2208      	movs	r2, #8
     6a4:	3180      	adds	r1, #128	; 0x80
     6a6:	4468      	add	r0, sp
     6a8:	4798      	blx	r3
    sha256_update(sha, terminator, length);
     6aa:	0020      	movs	r0, r4
     6ac:	002a      	movs	r2, r5
     6ae:	4669      	mov	r1, sp
     6b0:	47b0      	blx	r6
    for (i = 0; i < 32; ++i) {
     6b2:	2300      	movs	r3, #0
        sha->hash[i] = (sha->state[i / 4] >> (24 - 8 * (i % 4))) & 0xff;
     6b4:	2003      	movs	r0, #3
     6b6:	0001      	movs	r1, r0
     6b8:	109a      	asrs	r2, r3, #2
     6ba:	3218      	adds	r2, #24
     6bc:	0092      	lsls	r2, r2, #2
     6be:	4399      	bics	r1, r3
     6c0:	5912      	ldr	r2, [r2, r4]
     6c2:	00c9      	lsls	r1, r1, #3
     6c4:	40ca      	lsrs	r2, r1
     6c6:	54e2      	strb	r2, [r4, r3]
    for (i = 0; i < 32; ++i) {
     6c8:	3301      	adds	r3, #1
     6ca:	2b20      	cmp	r3, #32
     6cc:	d1f3      	bne.n	6b6 <sha256_finalize+0x6a>
}
     6ce:	b012      	add	sp, #72	; 0x48
     6d0:	bd70      	pop	{r4, r5, r6, pc}
    if (length > 0) sha256_update(sha, message, length);
     6d2:	0031      	movs	r1, r6
     6d4:	f240 16f5 	movw	r6, #501	; 0x1f5
     6d8:	002a      	movs	r2, r5
     6da:	0020      	movs	r0, r4
     6dc:	f2c0 0600 	movt	r6, #0
     6e0:	47b0      	blx	r6
     6e2:	e7c9      	b.n	678 <sha256_finalize+0x2c>
	...

000006f0 <uECC_vli_add>:
#if (uECC_OPTIMIZATION_LEVEL >= 2)

uECC_VLI_API uECC_word_t uECC_vli_add(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
     6f0:	b570      	push	{r4, r5, r6, lr}
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
     6f2:	2408      	movs	r4, #8
     6f4:	1ae3      	subs	r3, r4, r3
     6f6:	00db      	lsls	r3, r3, #3
     6f8:	3301      	adds	r3, #1
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
     6fa:	0004      	movs	r4, r0
     6fc:	2000      	movs	r0, #0
     6fe:	a503      	add	r5, pc, #12	; (adr r5, 70c <uECC_vli_add+0x1c>)
     700:	195b      	adds	r3, r3, r5
     702:	c920      	ldmia	r1!, {r5}
     704:	ca40      	ldmia	r2!, {r6}
     706:	19ad      	adds	r5, r5, r6
     708:	c420      	stmia	r4!, {r5}
     70a:	4718      	bx	r3
     70c:	c920      	ldmia	r1!, {r5}
     70e:	ca40      	ldmia	r2!, {r6}
     710:	4175      	adcs	r5, r6
     712:	c420      	stmia	r4!, {r5}
     714:	c920      	ldmia	r1!, {r5}
     716:	ca40      	ldmia	r2!, {r6}
     718:	4175      	adcs	r5, r6
     71a:	c420      	stmia	r4!, {r5}
     71c:	c920      	ldmia	r1!, {r5}
     71e:	ca40      	ldmia	r2!, {r6}
     720:	4175      	adcs	r5, r6
     722:	c420      	stmia	r4!, {r5}
     724:	c920      	ldmia	r1!, {r5}
     726:	ca40      	ldmia	r2!, {r6}
     728:	4175      	adcs	r5, r6
     72a:	c420      	stmia	r4!, {r5}
     72c:	c920      	ldmia	r1!, {r5}
     72e:	ca40      	ldmia	r2!, {r6}
     730:	4175      	adcs	r5, r6
     732:	c420      	stmia	r4!, {r5}
     734:	c920      	ldmia	r1!, {r5}
     736:	ca40      	ldmia	r2!, {r6}
     738:	4175      	adcs	r5, r6
     73a:	c420      	stmia	r4!, {r5}
     73c:	c920      	ldmia	r1!, {r5}
     73e:	ca40      	ldmia	r2!, {r6}
     740:	4175      	adcs	r5, r6
     742:	c420      	stmia	r4!, {r5}
     744:	4140      	adcs	r0, r0
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return carry;
}
     746:	bd70      	pop	{r4, r5, r6, pc}
	...

00000750 <uECC_vli_sub>:
#define asm_add 1

uECC_VLI_API uECC_word_t uECC_vli_sub(uECC_word_t *result,
                                      const uECC_word_t *left,
                                      const uECC_word_t *right,
                                      wordcount_t num_words) {
     750:	b570      	push	{r4, r5, r6, lr}
#if (uECC_MAX_WORDS != uECC_MIN_WORDS)
  #if (uECC_PLATFORM == uECC_arm_thumb) || (uECC_PLATFORM == uECC_arm_thumb2)
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
     752:	2408      	movs	r4, #8
     754:	1ae3      	subs	r3, r4, r3
     756:	00db      	lsls	r3, r3, #3
     758:	3301      	adds	r3, #1
#endif
    uint32_t carry;
    uint32_t left_word;
    uint32_t right_word;
    
    __asm__ volatile (
     75a:	2400      	movs	r4, #0
     75c:	a503      	add	r5, pc, #12	; (adr r5, 76c <uECC_vli_sub+0x1c>)
     75e:	46c0      	nop			; (mov r8, r8)
     760:	195b      	adds	r3, r3, r5
     762:	c920      	ldmia	r1!, {r5}
     764:	ca40      	ldmia	r2!, {r6}
     766:	1bad      	subs	r5, r5, r6
     768:	c020      	stmia	r0!, {r5}
     76a:	4718      	bx	r3
     76c:	c920      	ldmia	r1!, {r5}
     76e:	ca40      	ldmia	r2!, {r6}
     770:	41b5      	sbcs	r5, r6
     772:	c020      	stmia	r0!, {r5}
     774:	c920      	ldmia	r1!, {r5}
     776:	ca40      	ldmia	r2!, {r6}
     778:	41b5      	sbcs	r5, r6
     77a:	c020      	stmia	r0!, {r5}
     77c:	c920      	ldmia	r1!, {r5}
     77e:	ca40      	ldmia	r2!, {r6}
     780:	41b5      	sbcs	r5, r6
     782:	c020      	stmia	r0!, {r5}
     784:	c920      	ldmia	r1!, {r5}
     786:	ca40      	ldmia	r2!, {r6}
     788:	41b5      	sbcs	r5, r6
     78a:	c020      	stmia	r0!, {r5}
     78c:	c920      	ldmia	r1!, {r5}
     78e:	ca40      	ldmia	r2!, {r6}
     790:	41b5      	sbcs	r5, r6
     792:	c020      	stmia	r0!, {r5}
     794:	c920      	ldmia	r1!, {r5}
     796:	ca40      	ldmia	r2!, {r6}
     798:	41b5      	sbcs	r5, r6
     79a:	c020      	stmia	r0!, {r5}
     79c:	c920      	ldmia	r1!, {r5}
     79e:	ca40      	ldmia	r2!, {r6}
     7a0:	41b5      	sbcs	r5, r6
     7a2:	c020      	stmia	r0!, {r5}
     7a4:	4164      	adcs	r4, r4
          [carry] REG_WRITE_LO (carry), [left] REG_WRITE_LO (left_word),
          [right] REG_WRITE_LO (right_word)
        :
        : "cc", "memory"
    );
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
     7a6:	4260      	negs	r0, r4
     7a8:	4160      	adcs	r0, r4
                      (for some reason...) */
}
     7aa:	bd70      	pop	{r4, r5, r6, pc}

000007ac <uECC_vli_mult>:

#if !asm_mult
uECC_VLI_API void uECC_vli_mult(uECC_word_t *result,
                                const uECC_word_t *left,
                                const uECC_word_t *right,
                                wordcount_t num_words) {
     7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ae:	46de      	mov	lr, fp
     7b0:	4657      	mov	r7, sl
     7b2:	464e      	mov	r6, r9
     7b4:	4645      	mov	r5, r8
     7b6:	b5e0      	push	{r5, r6, r7, lr}
    );
    
#else /* Thumb-1 */
    uint32_t r4, r5, r6, r7;

    __asm__ volatile (
     7b8:	3b01      	subs	r3, #1
     7ba:	009b      	lsls	r3, r3, #2
     7bc:	4698      	mov	r8, r3
     7be:	005b      	lsls	r3, r3, #1
     7c0:	4699      	mov	r9, r3
     7c2:	2300      	movs	r3, #0
     7c4:	2400      	movs	r4, #0
     7c6:	2500      	movs	r5, #0
     7c8:	2600      	movs	r6, #0
     7ca:	b401      	push	{r0}
     7cc:	2700      	movs	r7, #0
     7ce:	e002      	b.n	7d6 <uECC_vli_mult+0x2a>
     7d0:	0037      	movs	r7, r6
     7d2:	4640      	mov	r0, r8
     7d4:	1a3f      	subs	r7, r7, r0
     7d6:	469a      	mov	sl, r3
     7d8:	46a3      	mov	fp, r4
     7da:	46ac      	mov	ip, r5
     7dc:	46b6      	mov	lr, r6
     7de:	1bf0      	subs	r0, r6, r7
     7e0:	5814      	ldr	r4, [r2, r0]
     7e2:	59c8      	ldr	r0, [r1, r7]
     7e4:	0c03      	lsrs	r3, r0, #16
     7e6:	b280      	uxth	r0, r0
     7e8:	0c25      	lsrs	r5, r4, #16
     7ea:	b2a4      	uxth	r4, r4
     7ec:	001e      	movs	r6, r3
     7ee:	436e      	muls	r6, r5
     7f0:	4363      	muls	r3, r4
     7f2:	4345      	muls	r5, r0
     7f4:	4360      	muls	r0, r4
     7f6:	041c      	lsls	r4, r3, #16
     7f8:	0c1b      	lsrs	r3, r3, #16
     7fa:	1900      	adds	r0, r0, r4
     7fc:	415e      	adcs	r6, r3
     7fe:	042c      	lsls	r4, r5, #16
     800:	0c2d      	lsrs	r5, r5, #16
     802:	1900      	adds	r0, r0, r4
     804:	416e      	adcs	r6, r5
     806:	4653      	mov	r3, sl
     808:	465c      	mov	r4, fp
     80a:	4665      	mov	r5, ip
     80c:	181b      	adds	r3, r3, r0
     80e:	4174      	adcs	r4, r6
     810:	2000      	movs	r0, #0
     812:	4145      	adcs	r5, r0
     814:	4676      	mov	r6, lr
     816:	3704      	adds	r7, #4
     818:	4547      	cmp	r7, r8
     81a:	dc01      	bgt.n	820 <uECC_vli_mult+0x74>
     81c:	42b7      	cmp	r7, r6
     81e:	ddda      	ble.n	7d6 <uECC_vli_mult+0x2a>
     820:	9800      	ldr	r0, [sp, #0]
     822:	5183      	str	r3, [r0, r6]
     824:	4623      	mov	r3, r4
     826:	462c      	mov	r4, r5
     828:	2500      	movs	r5, #0
     82a:	3604      	adds	r6, #4
     82c:	4546      	cmp	r6, r8
     82e:	ddcd      	ble.n	7cc <uECC_vli_mult+0x20>
     830:	454e      	cmp	r6, r9
     832:	ddcd      	ble.n	7d0 <uECC_vli_mult+0x24>
     834:	5183      	str	r3, [r0, r6]
     836:	bc01      	pop	{r0}
          [r5] "=&l" (r5), [r6] "=&l" (r6), [r7] "=&l" (r7)
        : [r0] "l" (result), [r1] "l" (left), [r2] "l" (right)
        : "r8", "r9", "r10", "r11", "r12", "r14", "cc", "memory"
    );
#endif
}
     838:	bc3c      	pop	{r2, r3, r4, r5}
     83a:	4690      	mov	r8, r2
     83c:	4699      	mov	r9, r3
     83e:	46a2      	mov	sl, r4
     840:	46ab      	mov	fp, r5
     842:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000844 <default_RNG>:

#include <stdlib.h>
#include <time.h>

static int default_RNG(uint8_t *dest, unsigned size)
{
     844:	b570      	push	{r4, r5, r6, lr}
	unsigned int i;
	for(i=0; i<size; i++){
     846:	b151      	cbz	r1, 85e <default_RNG+0x1a>
     848:	f246 7635 	movw	r6, #26421	; 0x6735
     84c:	0004      	movs	r4, r0
     84e:	1845      	adds	r5, r0, r1
     850:	f2c0 0600 	movt	r6, #0
		dest[i] = (uint8_t)(rand());
     854:	47b0      	blx	r6
     856:	7020      	strb	r0, [r4, #0]
     858:	3401      	adds	r4, #1
	for(i=0; i<size; i++){
     85a:	42ac      	cmp	r4, r5
     85c:	d1fa      	bne.n	854 <default_RNG+0x10>
	}
	return 1;
}
     85e:	2001      	movs	r0, #1
     860:	bd70      	pop	{r4, r5, r6, pc}
     862:	46c0      	nop			; (mov r8, r8)

00000864 <uECC_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
uECC_VLI_API int uECC_generate_random_int(uECC_word_t *random,
                                          const uECC_word_t *top,
                                          wordcount_t num_words) {
     864:	b5f0      	push	{r4, r5, r6, r7, lr}
     866:	4657      	mov	r7, sl
     868:	464e      	mov	r6, r9
     86a:	4645      	mov	r5, r8
     86c:	46de      	mov	lr, fp
     86e:	b5e0      	push	{r5, r6, r7, lr}
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     870:	1e55      	subs	r5, r2, #1
     872:	b2ed      	uxtb	r5, r5
                                          wordcount_t num_words) {
     874:	b08d      	sub	sp, #52	; 0x34
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     876:	b26b      	sxtb	r3, r5
                                          wordcount_t num_words) {
     878:	0007      	movs	r7, r0
     87a:	9102      	str	r1, [sp, #8]
     87c:	4691      	mov	r9, r2
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     87e:	2b00      	cmp	r3, #0
     880:	da05      	bge.n	88e <uECC_generate_random_int+0x2a>
     882:	e008      	b.n	896 <uECC_generate_random_int+0x32>
     884:	3b01      	subs	r3, #1
     886:	b25b      	sxtb	r3, r3
     888:	1c5a      	adds	r2, r3, #1
     88a:	d100      	bne.n	88e <uECC_generate_random_int+0x2a>
     88c:	e079      	b.n	982 <uECC_generate_random_int+0x11e>
     88e:	009a      	lsls	r2, r3, #2
     890:	5852      	ldr	r2, [r2, r1]
     892:	2a00      	cmp	r2, #0
     894:	d0f6      	beq.n	884 <uECC_generate_random_int+0x20>
    return (i + 1);
     896:	3301      	adds	r3, #1
     898:	b25b      	sxtb	r3, r3
        return 0;
     89a:	2100      	movs	r1, #0
    if (num_digits == 0) {
     89c:	b17b      	cbz	r3, 8be <uECC_generate_random_int+0x5a>
    digit = vli[num_digits - 1];
     89e:	4a3a      	ldr	r2, [pc, #232]	; (988 <uECC_generate_random_int+0x124>)
     8a0:	9902      	ldr	r1, [sp, #8]
     8a2:	189a      	adds	r2, r3, r2
     8a4:	0092      	lsls	r2, r2, #2
     8a6:	5852      	ldr	r2, [r2, r1]
    for (i = 0; digit; ++i) {
     8a8:	2100      	movs	r1, #0
     8aa:	b122      	cbz	r2, 8b6 <uECC_generate_random_int+0x52>
        digit >>= 1;
     8ac:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
     8ae:	3101      	adds	r1, #1
     8b0:	2a00      	cmp	r2, #0
     8b2:	d1fb      	bne.n	8ac <uECC_generate_random_int+0x48>
     8b4:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
     8b6:	3b01      	subs	r3, #1
     8b8:	015b      	lsls	r3, r3, #5
     8ba:	18c9      	adds	r1, r1, r3
     8bc:	b209      	sxth	r1, r1
    uECC_word_t mask = (uECC_word_t)-1;
    uECC_word_t tries;
    bitcount_t num_bits = uECC_vli_numBits(top, num_words);

    if (!g_rng_function) {
     8be:	f240 0a00 	movw	sl, #0
     8c2:	f2c2 0a00 	movt	sl, #8192	; 0x2000
     8c6:	4653      	mov	r3, sl
     8c8:	681a      	ldr	r2, [r3, #0]
     8ca:	b3b2      	cbz	r2, 93a <uECC_generate_random_int+0xd6>
     8cc:	464b      	mov	r3, r9
     8ce:	009b      	lsls	r3, r3, #2
     8d0:	469b      	mov	fp, r3

    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
            return 0;
        }
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     8d2:	3b04      	subs	r3, #4
     8d4:	4698      	mov	r8, r3
     8d6:	464b      	mov	r3, r9
     8d8:	015b      	lsls	r3, r3, #5
     8da:	1a59      	subs	r1, r3, r1
     8dc:	2301      	movs	r3, #1
     8de:	b209      	sxth	r1, r1
     8e0:	425b      	negs	r3, r3
     8e2:	40cb      	lsrs	r3, r1
     8e4:	9301      	str	r3, [sp, #4]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     8e6:	f240 7351 	movw	r3, #1873	; 0x751
     8ea:	3501      	adds	r5, #1
     8ec:	00ad      	lsls	r5, r5, #2
     8ee:	197c      	adds	r4, r7, r5
     8f0:	f2c0 0300 	movt	r3, #0
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     8f4:	4659      	mov	r1, fp
     8f6:	0038      	movs	r0, r7
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     8f8:	44b8      	add	r8, r7
     8fa:	2640      	movs	r6, #64	; 0x40
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     8fc:	9303      	str	r3, [sp, #12]
     8fe:	9400      	str	r4, [sp, #0]
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     900:	4790      	blx	r2
     902:	b1d0      	cbz	r0, 93a <uECC_generate_random_int+0xd6>
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     904:	4642      	mov	r2, r8
     906:	9b01      	ldr	r3, [sp, #4]
     908:	6812      	ldr	r2, [r2, #0]
    for (i = 0; i < num_words; ++i) {
     90a:	4649      	mov	r1, r9
        random[num_words - 1] &= mask >> ((bitcount_t)(num_words * uECC_WORD_SIZE * 8 - num_bits));
     90c:	4013      	ands	r3, r2
     90e:	4642      	mov	r2, r8
     910:	6013      	str	r3, [r2, #0]
     912:	003b      	movs	r3, r7
    for (i = 0; i < num_words; ++i) {
     914:	2200      	movs	r2, #0
     916:	2900      	cmp	r1, #0
     918:	dd06      	ble.n	928 <uECC_generate_random_int+0xc4>
     91a:	9c00      	ldr	r4, [sp, #0]
        bits |= vli[i];
     91c:	cb02      	ldmia	r3!, {r1}
     91e:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
     920:	429c      	cmp	r4, r3
     922:	d1fb      	bne.n	91c <uECC_generate_random_int+0xb8>
     924:	9400      	str	r4, [sp, #0]
        if (!uECC_vli_isZero(random, num_words) &&
     926:	b982      	cbnz	r2, 94a <uECC_generate_random_int+0xe6>
     928:	3e01      	subs	r6, #1
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
     92a:	b136      	cbz	r6, 93a <uECC_generate_random_int+0xd6>
     92c:	4653      	mov	r3, sl
        if (!g_rng_function((uint8_t *)random, num_words * uECC_WORD_SIZE)) {
     92e:	4659      	mov	r1, fp
     930:	681a      	ldr	r2, [r3, #0]
     932:	0038      	movs	r0, r7
     934:	4790      	blx	r2
     936:	2800      	cmp	r0, #0
     938:	d1e4      	bne.n	904 <uECC_generate_random_int+0xa0>
        return 0;
     93a:	2000      	movs	r0, #0
                uECC_vli_cmp(top, random, num_words) == 1) {
            return 1;
        }
    }
    return 0;
}
     93c:	b00d      	add	sp, #52	; 0x34
     93e:	bc3c      	pop	{r2, r3, r4, r5}
     940:	4690      	mov	r8, r2
     942:	4699      	mov	r9, r3
     944:	46a2      	mov	sl, r4
     946:	46ab      	mov	fp, r5
     948:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
     94a:	003a      	movs	r2, r7
     94c:	464b      	mov	r3, r9
     94e:	9c03      	ldr	r4, [sp, #12]
     950:	9902      	ldr	r1, [sp, #8]
     952:	a804      	add	r0, sp, #16
     954:	47a0      	blx	r4
     956:	2300      	movs	r3, #0
     958:	1e42      	subs	r2, r0, #1
     95a:	4190      	sbcs	r0, r2
     95c:	2200      	movs	r2, #0
     95e:	9c00      	ldr	r4, [sp, #0]
        bits |= vli[i];
     960:	a904      	add	r1, sp, #16
     962:	5889      	ldr	r1, [r1, r2]
     964:	3204      	adds	r2, #4
     966:	9100      	str	r1, [sp, #0]
     968:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
     96a:	42aa      	cmp	r2, r5
     96c:	d1f8      	bne.n	960 <uECC_generate_random_int+0xfc>
    return (!equal - 2 * neg);
     96e:	1e5a      	subs	r2, r3, #1
     970:	4193      	sbcs	r3, r2
     972:	0040      	lsls	r0, r0, #1
     974:	1a1b      	subs	r3, r3, r0
        if (!uECC_vli_isZero(random, num_words) &&
     976:	b2db      	uxtb	r3, r3
     978:	9400      	str	r4, [sp, #0]
     97a:	2b01      	cmp	r3, #1
     97c:	d1d4      	bne.n	928 <uECC_generate_random_int+0xc4>
            return 1;
     97e:	2001      	movs	r0, #1
     980:	e7dc      	b.n	93c <uECC_generate_random_int+0xd8>
        return 0;
     982:	2100      	movs	r1, #0
     984:	e79b      	b.n	8be <uECC_generate_random_int+0x5a>
     986:	46c0      	nop			; (mov r8, r8)
     988:	3fffffff 	.word	0x3fffffff

0000098c <uECC_vli_mmod>:
                                wordcount_t num_words) {
     98c:	b5f0      	push	{r4, r5, r6, r7, lr}
     98e:	4645      	mov	r5, r8
     990:	4688      	mov	r8, r1
     992:	46de      	mov	lr, fp
     994:	464e      	mov	r6, r9
     996:	4657      	mov	r7, sl
     998:	0019      	movs	r1, r3
     99a:	0014      	movs	r4, r2
    uECC_word_t *v[2] = {tmp, product};
     99c:	4642      	mov	r2, r8
                                wordcount_t num_words) {
     99e:	b5e0      	push	{r5, r6, r7, lr}
     9a0:	b0ab      	sub	sp, #172	; 0xac
     9a2:	9302      	str	r3, [sp, #8]
    uECC_word_t *v[2] = {tmp, product};
     9a4:	ab1a      	add	r3, sp, #104	; 0x68
     9a6:	9308      	str	r3, [sp, #32]
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     9a8:	000b      	movs	r3, r1
    uECC_word_t *v[2] = {tmp, product};
     9aa:	9209      	str	r2, [sp, #36]	; 0x24
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9ac:	466a      	mov	r2, sp
     9ae:	3b01      	subs	r3, #1
     9b0:	7013      	strb	r3, [r2, #0]
     9b2:	469b      	mov	fp, r3
     9b4:	7813      	ldrb	r3, [r2, #0]
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     9b6:	0189      	lsls	r1, r1, #6
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9b8:	7013      	strb	r3, [r2, #0]
     9ba:	4699      	mov	r9, r3
     9bc:	7813      	ldrb	r3, [r2, #0]
                                wordcount_t num_words) {
     9be:	9007      	str	r0, [sp, #28]
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9c0:	b25b      	sxtb	r3, r3
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     9c2:	b289      	uxth	r1, r1
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     9c4:	2b00      	cmp	r3, #0
     9c6:	da05      	bge.n	9d4 <uECC_vli_mmod+0x48>
     9c8:	e008      	b.n	9dc <uECC_vli_mmod+0x50>
     9ca:	3b01      	subs	r3, #1
     9cc:	b25b      	sxtb	r3, r3
     9ce:	1c5a      	adds	r2, r3, #1
     9d0:	d100      	bne.n	9d4 <uECC_vli_mmod+0x48>
     9d2:	e192      	b.n	cfa <uECC_vli_mmod+0x36e>
     9d4:	009a      	lsls	r2, r3, #2
     9d6:	5912      	ldr	r2, [r2, r4]
     9d8:	2a00      	cmp	r2, #0
     9da:	d0f6      	beq.n	9ca <uECC_vli_mmod+0x3e>
    return (i + 1);
     9dc:	3301      	adds	r3, #1
     9de:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
     9e0:	2000      	movs	r0, #0
     9e2:	b17b      	cbz	r3, a04 <uECC_vli_mmod+0x78>
    digit = vli[num_digits - 1];
     9e4:	4ad4      	ldr	r2, [pc, #848]	; (d38 <uECC_vli_mmod+0x3ac>)
     9e6:	189a      	adds	r2, r3, r2
     9e8:	0092      	lsls	r2, r2, #2
     9ea:	5912      	ldr	r2, [r2, r4]
    for (i = 0; digit; ++i) {
     9ec:	2a00      	cmp	r2, #0
     9ee:	d100      	bne.n	9f2 <uECC_vli_mmod+0x66>
     9f0:	e19f      	b.n	d32 <uECC_vli_mmod+0x3a6>
        digit >>= 1;
     9f2:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
     9f4:	3001      	adds	r0, #1
     9f6:	2a00      	cmp	r2, #0
     9f8:	d1fb      	bne.n	9f2 <uECC_vli_mmod+0x66>
     9fa:	b280      	uxth	r0, r0
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
     9fc:	3b01      	subs	r3, #1
     9fe:	015b      	lsls	r3, r3, #5
     a00:	18c0      	adds	r0, r0, r3
     a02:	b280      	uxth	r0, r0
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a04:	1a09      	subs	r1, r1, r0
     a06:	b20b      	sxth	r3, r1
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a08:	251f      	movs	r5, #31
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a0a:	0018      	movs	r0, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a0c:	002a      	movs	r2, r5
     a0e:	4684      	mov	ip, r0
    bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) - uECC_vli_numBits(mod, num_words);
     a10:	9301      	str	r3, [sp, #4]
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a12:	17db      	asrs	r3, r3, #31
     a14:	401a      	ands	r2, r3
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a16:	0edb      	lsrs	r3, r3, #27
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a18:	4462      	add	r2, ip
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a1a:	18c1      	adds	r1, r0, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a1c:	1152      	asrs	r2, r2, #5
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a1e:	400d      	ands	r5, r1
     a20:	1aed      	subs	r5, r5, r3
    wordcount_t word_shift = shift / uECC_WORD_BITS;
     a22:	b256      	sxtb	r6, r2
    wordcount_t bit_shift = shift % uECC_WORD_BITS;
     a24:	b22d      	sxth	r5, r5
    for (i = 0; i < num_words; ++i) {
     a26:	2e00      	cmp	r6, #0
     a28:	dd0b      	ble.n	a42 <uECC_vli_mmod+0xb6>
     a2a:	f246 6367 	movw	r3, #26215	; 0x6667
        vli[i] = 0;
     a2e:	3a01      	subs	r2, #1
     a30:	b2d2      	uxtb	r2, r2
     a32:	3201      	adds	r2, #1
     a34:	af0a      	add	r7, sp, #40	; 0x28
     a36:	0092      	lsls	r2, r2, #2
     a38:	2100      	movs	r1, #0
     a3a:	0038      	movs	r0, r7
     a3c:	f2c0 0300 	movt	r3, #0
     a40:	4798      	blx	r3
    if (bit_shift > 0) {
     a42:	2d00      	cmp	r5, #0
     a44:	dc00      	bgt.n	a48 <uECC_vli_mmod+0xbc>
     a46:	e15a      	b.n	cfe <uECC_vli_mmod+0x372>
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a48:	9b02      	ldr	r3, [sp, #8]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d100      	bne.n	a50 <uECC_vli_mmod+0xc4>
     a4e:	e16a      	b.n	d26 <uECC_vli_mmod+0x39a>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     a50:	6821      	ldr	r1, [r4, #0]
     a52:	00b2      	lsls	r2, r6, #2
     a54:	0008      	movs	r0, r1
     a56:	40a8      	lsls	r0, r5
     a58:	2320      	movs	r3, #32
     a5a:	af0a      	add	r7, sp, #40	; 0x28
     a5c:	50b8      	str	r0, [r7, r2]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a5e:	000a      	movs	r2, r1
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a60:	9902      	ldr	r1, [sp, #8]
     a62:	1b5b      	subs	r3, r3, r5
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a64:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a66:	2901      	cmp	r1, #1
     a68:	d800      	bhi.n	a6c <uECC_vli_mmod+0xe0>
     a6a:	e0a9      	b.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     a6c:	6861      	ldr	r1, [r4, #4]
     a6e:	1c70      	adds	r0, r6, #1
     a70:	40a9      	lsls	r1, r5
     a72:	0080      	lsls	r0, r0, #2
     a74:	4311      	orrs	r1, r2
     a76:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a78:	6862      	ldr	r2, [r4, #4]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a7a:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a7c:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a7e:	2902      	cmp	r1, #2
     a80:	d100      	bne.n	a84 <uECC_vli_mmod+0xf8>
     a82:	e09d      	b.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     a84:	68a1      	ldr	r1, [r4, #8]
     a86:	1cb0      	adds	r0, r6, #2
     a88:	40a9      	lsls	r1, r5
     a8a:	0080      	lsls	r0, r0, #2
     a8c:	4311      	orrs	r1, r2
     a8e:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a90:	68a2      	ldr	r2, [r4, #8]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a92:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     a94:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     a96:	2903      	cmp	r1, #3
     a98:	d100      	bne.n	a9c <uECC_vli_mmod+0x110>
     a9a:	e091      	b.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     a9c:	68e1      	ldr	r1, [r4, #12]
     a9e:	1cf0      	adds	r0, r6, #3
     aa0:	40a9      	lsls	r1, r5
     aa2:	0080      	lsls	r0, r0, #2
     aa4:	4311      	orrs	r1, r2
     aa6:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     aa8:	68e2      	ldr	r2, [r4, #12]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aaa:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     aac:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aae:	2904      	cmp	r1, #4
     ab0:	d100      	bne.n	ab4 <uECC_vli_mmod+0x128>
     ab2:	e085      	b.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     ab4:	6921      	ldr	r1, [r4, #16]
     ab6:	1d30      	adds	r0, r6, #4
     ab8:	40a9      	lsls	r1, r5
     aba:	0080      	lsls	r0, r0, #2
     abc:	4311      	orrs	r1, r2
     abe:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ac0:	6922      	ldr	r2, [r4, #16]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ac2:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ac4:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ac6:	2905      	cmp	r1, #5
     ac8:	d07a      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     aca:	6961      	ldr	r1, [r4, #20]
     acc:	1d70      	adds	r0, r6, #5
     ace:	40a9      	lsls	r1, r5
     ad0:	0080      	lsls	r0, r0, #2
     ad2:	4311      	orrs	r1, r2
     ad4:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ad6:	6962      	ldr	r2, [r4, #20]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     ad8:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     ada:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     adc:	2906      	cmp	r1, #6
     ade:	d06f      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     ae0:	69a1      	ldr	r1, [r4, #24]
     ae2:	1db0      	adds	r0, r6, #6
     ae4:	40a9      	lsls	r1, r5
     ae6:	0080      	lsls	r0, r0, #2
     ae8:	4311      	orrs	r1, r2
     aea:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     aec:	69a2      	ldr	r2, [r4, #24]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     aee:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     af0:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     af2:	2907      	cmp	r1, #7
     af4:	d064      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     af6:	69e1      	ldr	r1, [r4, #28]
     af8:	1df0      	adds	r0, r6, #7
     afa:	40a9      	lsls	r1, r5
     afc:	0080      	lsls	r0, r0, #2
     afe:	4311      	orrs	r1, r2
     b00:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b02:	69e2      	ldr	r2, [r4, #28]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b04:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b06:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b08:	2908      	cmp	r1, #8
     b0a:	d059      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b0c:	6a21      	ldr	r1, [r4, #32]
     b0e:	0030      	movs	r0, r6
     b10:	40a9      	lsls	r1, r5
     b12:	3008      	adds	r0, #8
     b14:	4311      	orrs	r1, r2
     b16:	0080      	lsls	r0, r0, #2
     b18:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b1a:	6a22      	ldr	r2, [r4, #32]
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b1c:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b1e:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b20:	2909      	cmp	r1, #9
     b22:	d04d      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b24:	6a61      	ldr	r1, [r4, #36]	; 0x24
     b26:	0030      	movs	r0, r6
     b28:	40a9      	lsls	r1, r5
     b2a:	3009      	adds	r0, #9
     b2c:	4311      	orrs	r1, r2
     b2e:	0080      	lsls	r0, r0, #2
     b30:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b32:	6a62      	ldr	r2, [r4, #36]	; 0x24
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b34:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b36:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b38:	290a      	cmp	r1, #10
     b3a:	d041      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
     b3e:	0030      	movs	r0, r6
     b40:	40a9      	lsls	r1, r5
     b42:	300a      	adds	r0, #10
     b44:	4311      	orrs	r1, r2
     b46:	0080      	lsls	r0, r0, #2
     b48:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b4a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b4c:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b4e:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b50:	290b      	cmp	r1, #11
     b52:	d035      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
     b56:	0030      	movs	r0, r6
     b58:	40a9      	lsls	r1, r5
     b5a:	300b      	adds	r0, #11
     b5c:	4311      	orrs	r1, r2
     b5e:	0080      	lsls	r0, r0, #2
     b60:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b64:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b66:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b68:	290c      	cmp	r1, #12
     b6a:	d029      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
     b6e:	0030      	movs	r0, r6
     b70:	40a9      	lsls	r1, r5
     b72:	300c      	adds	r0, #12
     b74:	4311      	orrs	r1, r2
     b76:	0080      	lsls	r0, r0, #2
     b78:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b7c:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b7e:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b80:	290d      	cmp	r1, #13
     b82:	d01d      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
     b86:	0030      	movs	r0, r6
     b88:	40a9      	lsls	r1, r5
     b8a:	300d      	adds	r0, #13
     b8c:	4311      	orrs	r1, r2
     b8e:	0080      	lsls	r0, r0, #2
     b90:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b92:	6b62      	ldr	r2, [r4, #52]	; 0x34
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b94:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     b96:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     b98:	290e      	cmp	r1, #14
     b9a:	d011      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     b9c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
     b9e:	0030      	movs	r0, r6
     ba0:	40a9      	lsls	r1, r5
     ba2:	300e      	adds	r0, #14
     ba4:	4311      	orrs	r1, r2
     ba6:	0080      	lsls	r0, r0, #2
     ba8:	5039      	str	r1, [r7, r0]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     baa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bac:	9902      	ldr	r1, [sp, #8]
            carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
     bae:	40da      	lsrs	r2, r3
        for(index = 0; index < (uECC_word_t)num_words; ++index) {
     bb0:	290f      	cmp	r1, #15
     bb2:	d005      	beq.n	bc0 <uECC_vli_mmod+0x234>
            mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
     bb4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
     bb6:	360f      	adds	r6, #15
     bb8:	40ab      	lsls	r3, r5
     bba:	00b6      	lsls	r6, r6, #2
     bbc:	4313      	orrs	r3, r2
     bbe:	51bb      	str	r3, [r7, r6]
    for (index = 1; shift >= 0; --shift) {
     bc0:	9b01      	ldr	r3, [sp, #4]
     bc2:	2b00      	cmp	r3, #0
     bc4:	da00      	bge.n	bc8 <uECC_vli_mmod+0x23c>
     bc6:	e080      	b.n	cca <uECC_vli_mmod+0x33e>
     bc8:	9802      	ldr	r0, [sp, #8]
    while (vli-- > end) {
     bca:	f240 0c01 	movw	ip, #1
     bce:	0083      	lsls	r3, r0, #2
     bd0:	001a      	movs	r2, r3
     bd2:	9306      	str	r3, [sp, #24]
     bd4:	18f9      	adds	r1, r7, r3
     bd6:	00c3      	lsls	r3, r0, #3
     bd8:	18fc      	adds	r4, r7, r3
     bda:	3b04      	subs	r3, #4
     bdc:	18fb      	adds	r3, r7, r3
     bde:	9305      	str	r3, [sp, #20]
     be0:	465b      	mov	r3, fp
     be2:	0040      	lsls	r0, r0, #1
     be4:	009b      	lsls	r3, r3, #2
     be6:	4680      	mov	r8, r0
     be8:	469b      	mov	fp, r3
     bea:	3a04      	subs	r2, #4
     bec:	18ba      	adds	r2, r7, r2
     bee:	9403      	str	r4, [sp, #12]
     bf0:	9204      	str	r2, [sp, #16]
        for (i = 0; i < num_words * 2; ++i) {
     bf2:	4643      	mov	r3, r8
     bf4:	2b00      	cmp	r3, #0
     bf6:	dc00      	bgt.n	bfa <uECC_vli_mmod+0x26e>
     bf8:	e07d      	b.n	cf6 <uECC_vli_mmod+0x36a>
     bfa:	4663      	mov	r3, ip
     bfc:	aa08      	add	r2, sp, #32
     bfe:	009b      	lsls	r3, r3, #2
     c00:	58d5      	ldr	r5, [r2, r3]
     c02:	4662      	mov	r2, ip
     c04:	2301      	movs	r3, #1
     c06:	1a9b      	subs	r3, r3, r2
     c08:	009b      	lsls	r3, r3, #2
     c0a:	aa08      	add	r2, sp, #32
     c0c:	58d3      	ldr	r3, [r2, r3]
     c0e:	2400      	movs	r4, #0
     c10:	4699      	mov	r9, r3
     c12:	2300      	movs	r3, #0
     c14:	4648      	mov	r0, r9
     c16:	001e      	movs	r6, r3
     c18:	4689      	mov	r9, r1
     c1a:	4643      	mov	r3, r8
     c1c:	2200      	movs	r2, #0
     c1e:	46b8      	mov	r8, r7
     c20:	0029      	movs	r1, r5
     c22:	9000      	str	r0, [sp, #0]
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
     c24:	4640      	mov	r0, r8
     c26:	00a5      	lsls	r5, r4, #2
     c28:	0092      	lsls	r2, r2, #2
     c2a:	5882      	ldr	r2, [r0, r2]
     c2c:	5948      	ldr	r0, [r1, r5]
                borrow = (diff > v[index][i]);
     c2e:	4682      	mov	sl, r0
            uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
     c30:	1a82      	subs	r2, r0, r2
     c32:	1b92      	subs	r2, r2, r6
                borrow = (diff > v[index][i]);
     c34:	4592      	cmp	sl, r2
     c36:	4180      	sbcs	r0, r0
     c38:	4657      	mov	r7, sl
     c3a:	4240      	negs	r0, r0
     c3c:	4297      	cmp	r7, r2
     c3e:	d000      	beq.n	c42 <uECC_vli_mmod+0x2b6>
     c40:	0006      	movs	r6, r0
            v[1 - index][i] = diff;
     c42:	9800      	ldr	r0, [sp, #0]
     c44:	3401      	adds	r4, #1
     c46:	b264      	sxtb	r4, r4
     c48:	5142      	str	r2, [r0, r5]
        for (i = 0; i < num_words * 2; ++i) {
     c4a:	0022      	movs	r2, r4
     c4c:	429c      	cmp	r4, r3
     c4e:	dbe9      	blt.n	c24 <uECC_vli_mmod+0x298>
     c50:	4647      	mov	r7, r8
     c52:	4649      	mov	r1, r9
     c54:	4698      	mov	r8, r3
     c56:	0033      	movs	r3, r6
        index = !(index ^ borrow); /* Swap the index if there was no borrow */
     c58:	4662      	mov	r2, ip
     c5a:	1ad3      	subs	r3, r2, r3
     c5c:	4258      	negs	r0, r3
     c5e:	4158      	adcs	r0, r3
     c60:	b2c3      	uxtb	r3, r0
     c62:	469c      	mov	ip, r3
    while (vli-- > end) {
     c64:	2300      	movs	r3, #0
     c66:	9804      	ldr	r0, [sp, #16]
     c68:	001c      	movs	r4, r3
     c6a:	42b9      	cmp	r1, r7
     c6c:	d801      	bhi.n	c72 <uECC_vli_mmod+0x2e6>
     c6e:	e008      	b.n	c82 <uECC_vli_mmod+0x2f6>
     c70:	0018      	movs	r0, r3
        uECC_word_t temp = *vli;
     c72:	6802      	ldr	r2, [r0, #0]
        *vli = (temp >> 1) | carry;
     c74:	0853      	lsrs	r3, r2, #1
     c76:	4323      	orrs	r3, r4
     c78:	6003      	str	r3, [r0, #0]
        carry = temp << (uECC_WORD_BITS - 1);
     c7a:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
     c7c:	1f03      	subs	r3, r0, #4
     c7e:	42b8      	cmp	r0, r7
     c80:	d8f6      	bhi.n	c70 <uECC_vli_mmod+0x2e4>
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
     c82:	465a      	mov	r2, fp
     c84:	9b06      	ldr	r3, [sp, #24]
     c86:	58ba      	ldr	r2, [r7, r2]
     c88:	58fb      	ldr	r3, [r7, r3]
    while (vli-- > end) {
     c8a:	9805      	ldr	r0, [sp, #20]
        mod_multiple[num_words - 1] |= mod_multiple[num_words] << (uECC_WORD_BITS - 1);
     c8c:	9300      	str	r3, [sp, #0]
     c8e:	07db      	lsls	r3, r3, #31
     c90:	4313      	orrs	r3, r2
     c92:	465a      	mov	r2, fp
     c94:	50bb      	str	r3, [r7, r2]
    while (vli-- > end) {
     c96:	2300      	movs	r3, #0
     c98:	9a03      	ldr	r2, [sp, #12]
     c9a:	001c      	movs	r4, r3
     c9c:	4291      	cmp	r1, r2
     c9e:	d301      	bcc.n	ca4 <uECC_vli_mmod+0x318>
     ca0:	e008      	b.n	cb4 <uECC_vli_mmod+0x328>
     ca2:	0018      	movs	r0, r3
        uECC_word_t temp = *vli;
     ca4:	6802      	ldr	r2, [r0, #0]
        *vli = (temp >> 1) | carry;
     ca6:	0853      	lsrs	r3, r2, #1
     ca8:	4323      	orrs	r3, r4
     caa:	6003      	str	r3, [r0, #0]
        carry = temp << (uECC_WORD_BITS - 1);
     cac:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
     cae:	1f03      	subs	r3, r0, #4
     cb0:	4288      	cmp	r0, r1
     cb2:	d8f6      	bhi.n	ca2 <uECC_vli_mmod+0x316>
     cb4:	9b01      	ldr	r3, [sp, #4]
     cb6:	3b01      	subs	r3, #1
     cb8:	b21b      	sxth	r3, r3
     cba:	9301      	str	r3, [sp, #4]
    for (index = 1; shift >= 0; --shift) {
     cbc:	2b00      	cmp	r3, #0
     cbe:	da98      	bge.n	bf2 <uECC_vli_mmod+0x266>
     cc0:	4663      	mov	r3, ip
     cc2:	009c      	lsls	r4, r3, #2
     cc4:	ab08      	add	r3, sp, #32
     cc6:	591b      	ldr	r3, [r3, r4]
     cc8:	4698      	mov	r8, r3
    for (i = 0; i < num_words; ++i) {
     cca:	9b02      	ldr	r3, [sp, #8]
     ccc:	2b00      	cmp	r3, #0
     cce:	dd0b      	ble.n	ce8 <uECC_vli_mmod+0x35c>
    while (vli-- > end) {
     cd0:	2200      	movs	r2, #0
     cd2:	2300      	movs	r3, #0
     cd4:	4640      	mov	r0, r8
     cd6:	9907      	ldr	r1, [sp, #28]
     cd8:	9c02      	ldr	r4, [sp, #8]
        dest[i] = src[i];
     cda:	5885      	ldr	r5, [r0, r2]
     cdc:	3301      	adds	r3, #1
     cde:	b25b      	sxtb	r3, r3
     ce0:	508d      	str	r5, [r1, r2]
     ce2:	3204      	adds	r2, #4
    for (i = 0; i < num_words; ++i) {
     ce4:	429c      	cmp	r4, r3
     ce6:	dcf8      	bgt.n	cda <uECC_vli_mmod+0x34e>
}
     ce8:	b02b      	add	sp, #172	; 0xac
     cea:	bc3c      	pop	{r2, r3, r4, r5}
     cec:	4690      	mov	r8, r2
     cee:	4699      	mov	r9, r3
     cf0:	46a2      	mov	sl, r4
     cf2:	46ab      	mov	fp, r5
     cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for (i = 0; i < num_words * 2; ++i) {
     cf6:	2300      	movs	r3, #0
     cf8:	e7ae      	b.n	c58 <uECC_vli_mmod+0x2cc>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
     cfa:	2000      	movs	r0, #0
     cfc:	e682      	b.n	a04 <uECC_vli_mmod+0x78>
    for (i = 0; i < num_words; ++i) {
     cfe:	9b02      	ldr	r3, [sp, #8]
     d00:	2b00      	cmp	r3, #0
     d02:	dd10      	ble.n	d26 <uECC_vli_mmod+0x39a>
        dest[i] = src[i];
     d04:	464a      	mov	r2, r9
     d06:	f246 6331 	movw	r3, #26161	; 0x6631
     d0a:	af0a      	add	r7, sp, #40	; 0x28
     d0c:	00b0      	lsls	r0, r6, #2
     d0e:	3201      	adds	r2, #1
     d10:	f2c0 0300 	movt	r3, #0
     d14:	1838      	adds	r0, r7, r0
     d16:	0092      	lsls	r2, r2, #2
     d18:	0021      	movs	r1, r4
     d1a:	4798      	blx	r3
    for (index = 1; shift >= 0; --shift) {
     d1c:	9b01      	ldr	r3, [sp, #4]
     d1e:	2b00      	cmp	r3, #0
     d20:	db00      	blt.n	d24 <uECC_vli_mmod+0x398>
     d22:	e751      	b.n	bc8 <uECC_vli_mmod+0x23c>
     d24:	e7d4      	b.n	cd0 <uECC_vli_mmod+0x344>
     d26:	9b01      	ldr	r3, [sp, #4]
     d28:	af0a      	add	r7, sp, #40	; 0x28
     d2a:	2b00      	cmp	r3, #0
     d2c:	db00      	blt.n	d30 <uECC_vli_mmod+0x3a4>
     d2e:	e74b      	b.n	bc8 <uECC_vli_mmod+0x23c>
     d30:	e7da      	b.n	ce8 <uECC_vli_mmod+0x35c>
    for (i = 0; digit; ++i) {
     d32:	2000      	movs	r0, #0
     d34:	e662      	b.n	9fc <uECC_vli_mmod+0x70>
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	3fffffff 	.word	0x3fffffff

00000d3c <XYcZ_add>:
                     uECC_Curve curve) {
     d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d3e:	4657      	mov	r7, sl
     d40:	4645      	mov	r5, r8
     d42:	464e      	mov	r6, r9
     d44:	46de      	mov	lr, fp
    wordcount_t num_words = curve->num_words;
     d46:	2400      	movs	r4, #0
                     uECC_Curve curve) {
     d48:	b5e0      	push	{r5, r6, r7, lr}
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     d4a:	f240 7851 	movw	r8, #1873	; 0x751
                     uECC_Curve curve) {
     d4e:	0016      	movs	r6, r2
     d50:	b09b      	sub	sp, #108	; 0x6c
     d52:	9d24      	ldr	r5, [sp, #144]	; 0x90
     d54:	001f      	movs	r7, r3
    wordcount_t num_words = curve->num_words;
     d56:	572c      	ldrsb	r4, [r5, r4]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
     d58:	1d2b      	adds	r3, r5, #4
                     uECC_Curve curve) {
     d5a:	4682      	mov	sl, r0
     d5c:	9100      	str	r1, [sp, #0]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
     d5e:	9301      	str	r3, [sp, #4]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     d60:	0002      	movs	r2, r0
     d62:	0023      	movs	r3, r4
     d64:	0031      	movs	r1, r6
     d66:	a802      	add	r0, sp, #8
     d68:	f2c0 0800 	movt	r8, #0
     d6c:	47c0      	blx	r8
    if (l_borrow) {
     d6e:	b140      	cbz	r0, d82 <XYcZ_add+0x46>
        uECC_vli_add(result, result, mod, num_words);
     d70:	f240 69f1 	movw	r9, #1777	; 0x6f1
     d74:	a902      	add	r1, sp, #8
     d76:	0023      	movs	r3, r4
     d78:	1d2a      	adds	r2, r5, #4
     d7a:	0008      	movs	r0, r1
     d7c:	f2c0 0900 	movt	r9, #0
     d80:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
     d82:	2300      	movs	r3, #0
     d84:	f240 79ad 	movw	r9, #1965	; 0x7ad
    curve->mmod_fast(result, product);
     d88:	f240 0bb0 	movw	fp, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
     d8c:	aa02      	add	r2, sp, #8
     d8e:	0011      	movs	r1, r2
     d90:	f2c0 0900 	movt	r9, #0
     d94:	56eb      	ldrsb	r3, [r5, r3]
     d96:	a80a      	add	r0, sp, #40	; 0x28
     d98:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     d9a:	465b      	mov	r3, fp
     d9c:	a90a      	add	r1, sp, #40	; 0x28
     d9e:	a802      	add	r0, sp, #8
     da0:	58eb      	ldr	r3, [r5, r3]
     da2:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
     da4:	2300      	movs	r3, #0
     da6:	aa02      	add	r2, sp, #8
     da8:	56eb      	ldrsb	r3, [r5, r3]
     daa:	4651      	mov	r1, sl
     dac:	a80a      	add	r0, sp, #40	; 0x28
     dae:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     db0:	465b      	mov	r3, fp
     db2:	a90a      	add	r1, sp, #40	; 0x28
     db4:	4650      	mov	r0, sl
     db6:	58eb      	ldr	r3, [r5, r3]
     db8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
     dba:	2300      	movs	r3, #0
     dbc:	aa02      	add	r2, sp, #8
     dbe:	56eb      	ldrsb	r3, [r5, r3]
     dc0:	0031      	movs	r1, r6
     dc2:	a80a      	add	r0, sp, #40	; 0x28
     dc4:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     dc6:	465b      	mov	r3, fp
     dc8:	a90a      	add	r1, sp, #40	; 0x28
     dca:	58eb      	ldr	r3, [r5, r3]
     dcc:	0030      	movs	r0, r6
     dce:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     dd0:	0023      	movs	r3, r4
     dd2:	9a00      	ldr	r2, [sp, #0]
     dd4:	0039      	movs	r1, r7
     dd6:	0038      	movs	r0, r7
     dd8:	47c0      	blx	r8
    if (l_borrow) {
     dda:	b140      	cbz	r0, dee <XYcZ_add+0xb2>
        uECC_vli_add(result, result, mod, num_words);
     ddc:	f240 6bf1 	movw	fp, #1777	; 0x6f1
     de0:	0023      	movs	r3, r4
     de2:	1d2a      	adds	r2, r5, #4
     de4:	0039      	movs	r1, r7
     de6:	0038      	movs	r0, r7
     de8:	f2c0 0b00 	movt	fp, #0
     dec:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
     dee:	2300      	movs	r3, #0
     df0:	003a      	movs	r2, r7
     df2:	56eb      	ldrsb	r3, [r5, r3]
     df4:	0039      	movs	r1, r7
     df6:	a80a      	add	r0, sp, #40	; 0x28
     df8:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     dfa:	23b0      	movs	r3, #176	; 0xb0
     dfc:	a90a      	add	r1, sp, #40	; 0x28
     dfe:	58eb      	ldr	r3, [r5, r3]
     e00:	a802      	add	r0, sp, #8
     e02:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e04:	a902      	add	r1, sp, #8
     e06:	0023      	movs	r3, r4
     e08:	4652      	mov	r2, sl
     e0a:	0008      	movs	r0, r1
     e0c:	47c0      	blx	r8
    if (l_borrow) {
     e0e:	b140      	cbz	r0, e22 <XYcZ_add+0xe6>
        uECC_vli_add(result, result, mod, num_words);
     e10:	f240 6bf1 	movw	fp, #1777	; 0x6f1
     e14:	a902      	add	r1, sp, #8
     e16:	0023      	movs	r3, r4
     e18:	1d2a      	adds	r2, r5, #4
     e1a:	0008      	movs	r0, r1
     e1c:	f2c0 0b00 	movt	fp, #0
     e20:	47d8      	blx	fp
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e22:	a902      	add	r1, sp, #8
     e24:	0023      	movs	r3, r4
     e26:	0032      	movs	r2, r6
     e28:	0008      	movs	r0, r1
     e2a:	47c0      	blx	r8
    if (l_borrow) {
     e2c:	b140      	cbz	r0, e40 <XYcZ_add+0x104>
        uECC_vli_add(result, result, mod, num_words);
     e2e:	f240 6bf1 	movw	fp, #1777	; 0x6f1
     e32:	a902      	add	r1, sp, #8
     e34:	0023      	movs	r3, r4
     e36:	1d2a      	adds	r2, r5, #4
     e38:	0008      	movs	r0, r1
     e3a:	f2c0 0b00 	movt	fp, #0
     e3e:	47d8      	blx	fp
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e40:	0023      	movs	r3, r4
     e42:	4652      	mov	r2, sl
     e44:	0031      	movs	r1, r6
     e46:	0030      	movs	r0, r6
     e48:	47c0      	blx	r8
    if (l_borrow) {
     e4a:	b140      	cbz	r0, e5e <XYcZ_add+0x122>
        uECC_vli_add(result, result, mod, num_words);
     e4c:	f240 6bf1 	movw	fp, #1777	; 0x6f1
     e50:	0023      	movs	r3, r4
     e52:	1d2a      	adds	r2, r5, #4
     e54:	0031      	movs	r1, r6
     e56:	0030      	movs	r0, r6
     e58:	f2c0 0b00 	movt	fp, #0
     e5c:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
     e5e:	2300      	movs	r3, #0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	0032      	movs	r2, r6
     e64:	56eb      	ldrsb	r3, [r5, r3]
     e66:	a80a      	add	r0, sp, #40	; 0x28
     e68:	468b      	mov	fp, r1
     e6a:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     e6c:	23b0      	movs	r3, #176	; 0xb0
     e6e:	a90a      	add	r1, sp, #40	; 0x28
     e70:	58eb      	ldr	r3, [r5, r3]
     e72:	4658      	mov	r0, fp
     e74:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     e76:	0023      	movs	r3, r4
     e78:	aa02      	add	r2, sp, #8
     e7a:	4651      	mov	r1, sl
     e7c:	0030      	movs	r0, r6
     e7e:	47c0      	blx	r8
    if (l_borrow) {
     e80:	b140      	cbz	r0, e94 <XYcZ_add+0x158>
        uECC_vli_add(result, result, mod, num_words);
     e82:	f240 6af1 	movw	sl, #1777	; 0x6f1
     e86:	0023      	movs	r3, r4
     e88:	1d2a      	adds	r2, r5, #4
     e8a:	0031      	movs	r1, r6
     e8c:	0030      	movs	r0, r6
     e8e:	f2c0 0a00 	movt	sl, #0
     e92:	47d0      	blx	sl
    uECC_vli_mult(product, left, right, curve->num_words);
     e94:	2300      	movs	r3, #0
     e96:	0032      	movs	r2, r6
     e98:	56eb      	ldrsb	r3, [r5, r3]
     e9a:	0039      	movs	r1, r7
     e9c:	a80a      	add	r0, sp, #40	; 0x28
     e9e:	47c8      	blx	r9
    curve->mmod_fast(result, product);
     ea0:	23b0      	movs	r3, #176	; 0xb0
     ea2:	a90a      	add	r1, sp, #40	; 0x28
     ea4:	58eb      	ldr	r3, [r5, r3]
     ea6:	0038      	movs	r0, r7
     ea8:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
     eaa:	0023      	movs	r3, r4
     eac:	9a00      	ldr	r2, [sp, #0]
     eae:	0039      	movs	r1, r7
     eb0:	0038      	movs	r0, r7
     eb2:	47c0      	blx	r8
    if (l_borrow) {
     eb4:	b140      	cbz	r0, ec8 <XYcZ_add+0x18c>
        uECC_vli_add(result, result, mod, num_words);
     eb6:	f240 65f1 	movw	r5, #1777	; 0x6f1
     eba:	0023      	movs	r3, r4
     ebc:	9a01      	ldr	r2, [sp, #4]
     ebe:	0039      	movs	r1, r7
     ec0:	0038      	movs	r0, r7
     ec2:	f2c0 0500 	movt	r5, #0
     ec6:	47a8      	blx	r5
    for (i = 0; i < num_words; ++i) {
     ec8:	2c00      	cmp	r4, #0
     eca:	dd0a      	ble.n	ee2 <XYcZ_add+0x1a6>
     ecc:	f246 6331 	movw	r3, #26161	; 0x6631
        dest[i] = src[i];
     ed0:	3c01      	subs	r4, #1
     ed2:	b2e2      	uxtb	r2, r4
     ed4:	3201      	adds	r2, #1
     ed6:	0092      	lsls	r2, r2, #2
     ed8:	a902      	add	r1, sp, #8
     eda:	0030      	movs	r0, r6
     edc:	f2c0 0300 	movt	r3, #0
     ee0:	4798      	blx	r3
}
     ee2:	b01b      	add	sp, #108	; 0x6c
     ee4:	bc3c      	pop	{r2, r3, r4, r5}
     ee6:	4690      	mov	r8, r2
     ee8:	4699      	mov	r9, r3
     eea:	46a2      	mov	sl, r4
     eec:	46ab      	mov	fp, r5
     eee:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ef0 <vli_mmod_fast_secp224r1>:
        }
    }
}
#elif uECC_WORD_SIZE == 4
static void vli_mmod_fast_secp224r1(uint32_t *result, uint32_t *product)
{
     ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ef2:	4657      	mov	r7, sl

    /* t */
    uECC_vli_set(result, product, num_words_secp224r1);

    /* s1 */
    tmp[0] = tmp[1] = tmp[2] = 0;
     ef4:	f240 0a00 	movw	sl, #0
        dest[i] = src[i];
     ef8:	680b      	ldr	r3, [r1, #0]
{
     efa:	46de      	mov	lr, fp
     efc:	6003      	str	r3, [r0, #0]
     efe:	684b      	ldr	r3, [r1, #4]
     f00:	464e      	mov	r6, r9
     f02:	6043      	str	r3, [r0, #4]
     f04:	688b      	ldr	r3, [r1, #8]
     f06:	4645      	mov	r5, r8
     f08:	6083      	str	r3, [r0, #8]
     f0a:	68cb      	ldr	r3, [r1, #12]
    __asm__ volatile (
     f0c:	f240 0b09 	movw	fp, #9
     f10:	60c3      	str	r3, [r0, #12]
     f12:	690b      	ldr	r3, [r1, #16]
     f14:	b5e0      	push	{r5, r6, r7, lr}
     f16:	6103      	str	r3, [r0, #16]
     f18:	694b      	ldr	r3, [r1, #20]
     f1a:	b08b      	sub	sp, #44	; 0x2c
     f1c:	6143      	str	r3, [r0, #20]
     f1e:	698b      	ldr	r3, [r1, #24]
     f20:	4689      	mov	r9, r1
     f22:	6183      	str	r3, [r0, #24]
    tmp[0] = tmp[1] = tmp[2] = 0;
     f24:	4653      	mov	r3, sl
     f26:	9305      	str	r3, [sp, #20]
     f28:	9304      	str	r3, [sp, #16]
     f2a:	9303      	str	r3, [sp, #12]
    tmp[3] = product[7];
     f2c:	69cb      	ldr	r3, [r1, #28]
     f2e:	ae03      	add	r6, sp, #12
     f30:	9306      	str	r3, [sp, #24]
    tmp[4] = product[8];
     f32:	6a0b      	ldr	r3, [r1, #32]
     f34:	465f      	mov	r7, fp
     f36:	9307      	str	r3, [sp, #28]
    tmp[5] = product[9];
     f38:	6a4b      	ldr	r3, [r1, #36]	; 0x24
     f3a:	0005      	movs	r5, r0
     f3c:	9308      	str	r3, [sp, #32]
    tmp[6] = product[10];
     f3e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
     f40:	9309      	str	r3, [sp, #36]	; 0x24
     f42:	0003      	movs	r3, r0
     f44:	2100      	movs	r1, #0
     f46:	a405      	add	r4, pc, #20	; (adr r4, f5c <vli_mmod_fast_secp224r1+0x6c>)
     f48:	46c0      	nop			; (mov r8, r8)
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	46c0      	nop			; (mov r8, r8)
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	193f      	adds	r7, r7, r4
     f52:	cd10      	ldmia	r5!, {r4}
     f54:	ce04      	ldmia	r6!, {r2}
     f56:	18a4      	adds	r4, r4, r2
     f58:	c310      	stmia	r3!, {r4}
     f5a:	4738      	bx	r7
     f5c:	cd10      	ldmia	r5!, {r4}
     f5e:	ce04      	ldmia	r6!, {r2}
     f60:	4154      	adcs	r4, r2
     f62:	c310      	stmia	r3!, {r4}
     f64:	cd10      	ldmia	r5!, {r4}
     f66:	ce04      	ldmia	r6!, {r2}
     f68:	4154      	adcs	r4, r2
     f6a:	c310      	stmia	r3!, {r4}
     f6c:	cd10      	ldmia	r5!, {r4}
     f6e:	ce04      	ldmia	r6!, {r2}
     f70:	4154      	adcs	r4, r2
     f72:	c310      	stmia	r3!, {r4}
     f74:	cd10      	ldmia	r5!, {r4}
     f76:	ce04      	ldmia	r6!, {r2}
     f78:	4154      	adcs	r4, r2
     f7a:	c310      	stmia	r3!, {r4}
     f7c:	cd10      	ldmia	r5!, {r4}
     f7e:	ce04      	ldmia	r6!, {r2}
     f80:	4154      	adcs	r4, r2
     f82:	c310      	stmia	r3!, {r4}
     f84:	cd10      	ldmia	r5!, {r4}
     f86:	ce04      	ldmia	r6!, {r2}
     f88:	4154      	adcs	r4, r2
     f8a:	c310      	stmia	r3!, {r4}
     f8c:	cd10      	ldmia	r5!, {r4}
     f8e:	ce04      	ldmia	r6!, {r2}
     f90:	4154      	adcs	r4, r2
     f92:	c310      	stmia	r3!, {r4}
     f94:	4149      	adcs	r1, r1
    carry = uECC_vli_add(result, result, tmp, num_words_secp224r1);

    /* s2 */
    tmp[3] = product[11];
     f96:	464b      	mov	r3, r9
     f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     f9a:	9100      	str	r1, [sp, #0]
     f9c:	9306      	str	r3, [sp, #24]
    tmp[4] = product[12];
     f9e:	464b      	mov	r3, r9
     fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     fa2:	ae03      	add	r6, sp, #12
     fa4:	9307      	str	r3, [sp, #28]
    tmp[5] = product[13];
     fa6:	464b      	mov	r3, r9
     fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     faa:	465f      	mov	r7, fp
     fac:	9308      	str	r3, [sp, #32]
    tmp[6] = 0;
     fae:	4653      	mov	r3, sl
     fb0:	0005      	movs	r5, r0
     fb2:	9309      	str	r3, [sp, #36]	; 0x24
     fb4:	0003      	movs	r3, r0
     fb6:	2400      	movs	r4, #0
     fb8:	a204      	add	r2, pc, #16	; (adr r2, fcc <vli_mmod_fast_secp224r1+0xdc>)
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	46c0      	nop			; (mov r8, r8)
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	18bf      	adds	r7, r7, r2
     fc2:	cd04      	ldmia	r5!, {r2}
     fc4:	ce02      	ldmia	r6!, {r1}
     fc6:	1852      	adds	r2, r2, r1
     fc8:	c304      	stmia	r3!, {r2}
     fca:	4738      	bx	r7
     fcc:	cd04      	ldmia	r5!, {r2}
     fce:	ce02      	ldmia	r6!, {r1}
     fd0:	414a      	adcs	r2, r1
     fd2:	c304      	stmia	r3!, {r2}
     fd4:	cd04      	ldmia	r5!, {r2}
     fd6:	ce02      	ldmia	r6!, {r1}
     fd8:	414a      	adcs	r2, r1
     fda:	c304      	stmia	r3!, {r2}
     fdc:	cd04      	ldmia	r5!, {r2}
     fde:	ce02      	ldmia	r6!, {r1}
     fe0:	414a      	adcs	r2, r1
     fe2:	c304      	stmia	r3!, {r2}
     fe4:	cd04      	ldmia	r5!, {r2}
     fe6:	ce02      	ldmia	r6!, {r1}
     fe8:	414a      	adcs	r2, r1
     fea:	c304      	stmia	r3!, {r2}
     fec:	cd04      	ldmia	r5!, {r2}
     fee:	ce02      	ldmia	r6!, {r1}
     ff0:	414a      	adcs	r2, r1
     ff2:	c304      	stmia	r3!, {r2}
     ff4:	cd04      	ldmia	r5!, {r2}
     ff6:	ce02      	ldmia	r6!, {r1}
     ff8:	414a      	adcs	r2, r1
     ffa:	c304      	stmia	r3!, {r2}
     ffc:	cd04      	ldmia	r5!, {r2}
     ffe:	ce02      	ldmia	r6!, {r1}
    1000:	414a      	adcs	r2, r1
    1002:	c304      	stmia	r3!, {r2}
    1004:	4164      	adcs	r4, r4
    carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);

    /* d1 */
    tmp[0] = product[7];
    1006:	464b      	mov	r3, r9
    1008:	69db      	ldr	r3, [r3, #28]
    100a:	46a4      	mov	ip, r4
    100c:	9303      	str	r3, [sp, #12]
    tmp[1] = product[8];
    100e:	464b      	mov	r3, r9
    1010:	6a1b      	ldr	r3, [r3, #32]
    __asm__ volatile (
    1012:	ae03      	add	r6, sp, #12
    1014:	9304      	str	r3, [sp, #16]
    tmp[2] = product[9];
    1016:	464b      	mov	r3, r9
    1018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    101a:	465f      	mov	r7, fp
    101c:	9305      	str	r3, [sp, #20]
    tmp[3] = product[10];
    101e:	464b      	mov	r3, r9
    1020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1022:	0004      	movs	r4, r0
    1024:	9306      	str	r3, [sp, #24]
    tmp[4] = product[11];
    1026:	464b      	mov	r3, r9
    1028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    102a:	9307      	str	r3, [sp, #28]
    tmp[5] = product[12];
    102c:	464b      	mov	r3, r9
    102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1030:	9308      	str	r3, [sp, #32]
    tmp[6] = product[13];
    1032:	464b      	mov	r3, r9
    1034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1036:	9309      	str	r3, [sp, #36]	; 0x24
    1038:	0003      	movs	r3, r0
    103a:	2500      	movs	r5, #0
    103c:	a203      	add	r2, pc, #12	; (adr r2, 104c <STACK_SIZE+0x4c>)
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	18bf      	adds	r7, r7, r2
    1042:	cc04      	ldmia	r4!, {r2}
    1044:	ce02      	ldmia	r6!, {r1}
    1046:	1a52      	subs	r2, r2, r1
    1048:	c304      	stmia	r3!, {r2}
    104a:	4738      	bx	r7
    104c:	cc04      	ldmia	r4!, {r2}
    104e:	ce02      	ldmia	r6!, {r1}
    1050:	418a      	sbcs	r2, r1
    1052:	c304      	stmia	r3!, {r2}
    1054:	cc04      	ldmia	r4!, {r2}
    1056:	ce02      	ldmia	r6!, {r1}
    1058:	418a      	sbcs	r2, r1
    105a:	c304      	stmia	r3!, {r2}
    105c:	cc04      	ldmia	r4!, {r2}
    105e:	ce02      	ldmia	r6!, {r1}
    1060:	418a      	sbcs	r2, r1
    1062:	c304      	stmia	r3!, {r2}
    1064:	cc04      	ldmia	r4!, {r2}
    1066:	ce02      	ldmia	r6!, {r1}
    1068:	418a      	sbcs	r2, r1
    106a:	c304      	stmia	r3!, {r2}
    106c:	cc04      	ldmia	r4!, {r2}
    106e:	ce02      	ldmia	r6!, {r1}
    1070:	418a      	sbcs	r2, r1
    1072:	c304      	stmia	r3!, {r2}
    1074:	cc04      	ldmia	r4!, {r2}
    1076:	ce02      	ldmia	r6!, {r1}
    1078:	418a      	sbcs	r2, r1
    107a:	c304      	stmia	r3!, {r2}
    107c:	cc04      	ldmia	r4!, {r2}
    107e:	ce02      	ldmia	r6!, {r1}
    1080:	418a      	sbcs	r2, r1
    1082:	c304      	stmia	r3!, {r2}
    1084:	416d      	adcs	r5, r5
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);

    /* d2 */
    tmp[0] = product[11];
    1086:	464b      	mov	r3, r9
    1088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    108a:	46a8      	mov	r8, r5
    108c:	9303      	str	r3, [sp, #12]
    tmp[1] = product[12];
    108e:	464b      	mov	r3, r9
    1090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    1092:	0002      	movs	r2, r0
    1094:	9304      	str	r3, [sp, #16]
    tmp[2] = product[13];
    1096:	464b      	mov	r3, r9
    1098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    109a:	4659      	mov	r1, fp
    109c:	9301      	str	r3, [sp, #4]
    109e:	9305      	str	r3, [sp, #20]
    tmp[3] = tmp[4] = tmp[5] = tmp[6] = 0;
    10a0:	4653      	mov	r3, sl
    10a2:	0004      	movs	r4, r0
    10a4:	9309      	str	r3, [sp, #36]	; 0x24
    10a6:	9308      	str	r3, [sp, #32]
    10a8:	9307      	str	r3, [sp, #28]
    10aa:	9306      	str	r3, [sp, #24]
    10ac:	ab03      	add	r3, sp, #12
    10ae:	2500      	movs	r5, #0
    10b0:	a706      	add	r7, pc, #24	; (adr r7, 10cc <STACK_SIZE+0xcc>)
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	46c0      	nop			; (mov r8, r8)
    10b6:	46c0      	nop			; (mov r8, r8)
    10b8:	46c0      	nop			; (mov r8, r8)
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	46c0      	nop			; (mov r8, r8)
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	19c9      	adds	r1, r1, r7
    10c2:	cc80      	ldmia	r4!, {r7}
    10c4:	cb40      	ldmia	r3!, {r6}
    10c6:	1bbf      	subs	r7, r7, r6
    10c8:	c280      	stmia	r2!, {r7}
    10ca:	4708      	bx	r1
    10cc:	cc80      	ldmia	r4!, {r7}
    10ce:	cb40      	ldmia	r3!, {r6}
    10d0:	41b7      	sbcs	r7, r6
    10d2:	c280      	stmia	r2!, {r7}
    10d4:	cc80      	ldmia	r4!, {r7}
    10d6:	cb40      	ldmia	r3!, {r6}
    10d8:	41b7      	sbcs	r7, r6
    10da:	c280      	stmia	r2!, {r7}
    10dc:	cc80      	ldmia	r4!, {r7}
    10de:	cb40      	ldmia	r3!, {r6}
    10e0:	41b7      	sbcs	r7, r6
    10e2:	c280      	stmia	r2!, {r7}
    10e4:	cc80      	ldmia	r4!, {r7}
    10e6:	cb40      	ldmia	r3!, {r6}
    10e8:	41b7      	sbcs	r7, r6
    10ea:	c280      	stmia	r2!, {r7}
    10ec:	cc80      	ldmia	r4!, {r7}
    10ee:	cb40      	ldmia	r3!, {r6}
    10f0:	41b7      	sbcs	r7, r6
    10f2:	c280      	stmia	r2!, {r7}
    10f4:	cc80      	ldmia	r4!, {r7}
    10f6:	cb40      	ldmia	r3!, {r6}
    10f8:	41b7      	sbcs	r7, r6
    10fa:	c280      	stmia	r2!, {r7}
    10fc:	cc80      	ldmia	r4!, {r7}
    10fe:	cb40      	ldmia	r3!, {r6}
    1100:	41b7      	sbcs	r7, r6
    1102:	c280      	stmia	r2!, {r7}
    1104:	416d      	adcs	r5, r5
    carry += uECC_vli_add(result, result, tmp, num_words_secp224r1);
    1106:	9b00      	ldr	r3, [sp, #0]
    1108:	f646 06cc 	movw	r6, #26828	; 0x68cc
    110c:	4463      	add	r3, ip
    110e:	001c      	movs	r4, r3
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    1110:	4643      	mov	r3, r8
    1112:	425a      	negs	r2, r3
    1114:	4153      	adcs	r3, r2
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
    1116:	1ae4      	subs	r4, r4, r3
    1118:	426b      	negs	r3, r5
    111a:	416b      	adcs	r3, r5
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp224r1);
    111c:	1ae3      	subs	r3, r4, r3
    111e:	469c      	mov	ip, r3
    1120:	f2c0 0600 	movt	r6, #0

    if (carry < 0) {
    1124:	2b00      	cmp	r3, #0
    1126:	da00      	bge.n	112a <STACK_SIZE+0x12a>
    1128:	e04f      	b.n	11ca <STACK_SIZE+0x1ca>
    __asm__ volatile (
    112a:	1d33      	adds	r3, r6, #4
    112c:	4698      	mov	r8, r3
    112e:	f240 0909 	movw	r9, #9
    1132:	e03d      	b.n	11b0 <STACK_SIZE+0x1b0>
        if (left[i] > right[i]) {
    1134:	6943      	ldr	r3, [r0, #20]
    1136:	3301      	adds	r3, #1
    1138:	d140      	bne.n	11bc <STACK_SIZE+0x1bc>
    113a:	6903      	ldr	r3, [r0, #16]
    113c:	3301      	adds	r3, #1
    113e:	d13d      	bne.n	11bc <STACK_SIZE+0x1bc>
    1140:	68c3      	ldr	r3, [r0, #12]
    1142:	3301      	adds	r3, #1
    1144:	d13a      	bne.n	11bc <STACK_SIZE+0x1bc>
        } else if (left[i] < right[i]) {
    1146:	6883      	ldr	r3, [r0, #8]
    1148:	b923      	cbnz	r3, 1154 <STACK_SIZE+0x154>
    114a:	6843      	ldr	r3, [r0, #4]
    114c:	b913      	cbnz	r3, 1154 <STACK_SIZE+0x154>
        if (left[i] > right[i]) {
    114e:	6803      	ldr	r3, [r0, #0]
    1150:	2b00      	cmp	r3, #0
    1152:	d033      	beq.n	11bc <STACK_SIZE+0x1bc>
    1154:	0003      	movs	r3, r0
    1156:	4642      	mov	r2, r8
    1158:	4649      	mov	r1, r9
    115a:	0006      	movs	r6, r0
    115c:	2500      	movs	r5, #0
    115e:	a703      	add	r7, pc, #12	; (adr r7, 116c <STACK_SIZE+0x16c>)
    1160:	19c9      	adds	r1, r1, r7
    1162:	ce80      	ldmia	r6!, {r7}
    1164:	ca10      	ldmia	r2!, {r4}
    1166:	1b3f      	subs	r7, r7, r4
    1168:	c380      	stmia	r3!, {r7}
    116a:	4708      	bx	r1
    116c:	ce80      	ldmia	r6!, {r7}
    116e:	ca10      	ldmia	r2!, {r4}
    1170:	41a7      	sbcs	r7, r4
    1172:	c380      	stmia	r3!, {r7}
    1174:	ce80      	ldmia	r6!, {r7}
    1176:	ca10      	ldmia	r2!, {r4}
    1178:	41a7      	sbcs	r7, r4
    117a:	c380      	stmia	r3!, {r7}
    117c:	ce80      	ldmia	r6!, {r7}
    117e:	ca10      	ldmia	r2!, {r4}
    1180:	41a7      	sbcs	r7, r4
    1182:	c380      	stmia	r3!, {r7}
    1184:	ce80      	ldmia	r6!, {r7}
    1186:	ca10      	ldmia	r2!, {r4}
    1188:	41a7      	sbcs	r7, r4
    118a:	c380      	stmia	r3!, {r7}
    118c:	ce80      	ldmia	r6!, {r7}
    118e:	ca10      	ldmia	r2!, {r4}
    1190:	41a7      	sbcs	r7, r4
    1192:	c380      	stmia	r3!, {r7}
    1194:	ce80      	ldmia	r6!, {r7}
    1196:	ca10      	ldmia	r2!, {r4}
    1198:	41a7      	sbcs	r7, r4
    119a:	c380      	stmia	r3!, {r7}
    119c:	ce80      	ldmia	r6!, {r7}
    119e:	ca10      	ldmia	r2!, {r4}
    11a0:	41a7      	sbcs	r7, r4
    11a2:	c380      	stmia	r3!, {r7}
    11a4:	416d      	adcs	r5, r5
        do {
            carry += uECC_vli_add(result, result, curve_secp224r1.p, num_words_secp224r1);
        } while (carry < 0);
    } else {
        while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
            carry -= uECC_vli_sub(result, result, curve_secp224r1.p, num_words_secp224r1);
    11a6:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    11a8:	426b      	negs	r3, r5
    11aa:	416b      	adcs	r3, r5
    11ac:	1ad3      	subs	r3, r2, r3
    11ae:	469c      	mov	ip, r3
        while (carry || uECC_vli_cmp_unsafe(curve_secp224r1.p, result, num_words_secp224r1) != 1) {
    11b0:	4663      	mov	r3, ip
    11b2:	2b00      	cmp	r3, #0
    11b4:	d1ce      	bne.n	1154 <STACK_SIZE+0x154>
    11b6:	6983      	ldr	r3, [r0, #24]
    11b8:	3301      	adds	r3, #1
    11ba:	d0bb      	beq.n	1134 <STACK_SIZE+0x134>
        }
    }
}
    11bc:	b00b      	add	sp, #44	; 0x2c
    11be:	bc3c      	pop	{r2, r3, r4, r5}
    11c0:	4690      	mov	r8, r2
    11c2:	4699      	mov	r9, r3
    11c4:	46a2      	mov	sl, r4
    11c6:	46ab      	mov	fp, r5
    11c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (
    11ca:	1d33      	adds	r3, r6, #4
    11cc:	4698      	mov	r8, r3
    11ce:	f240 0909 	movw	r9, #9
    11d2:	0003      	movs	r3, r0
    11d4:	4642      	mov	r2, r8
    11d6:	4649      	mov	r1, r9
    11d8:	0004      	movs	r4, r0
    11da:	2500      	movs	r5, #0
    11dc:	a603      	add	r6, pc, #12	; (adr r6, 11ec <STACK_SIZE+0x1ec>)
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	1989      	adds	r1, r1, r6
    11e2:	cc40      	ldmia	r4!, {r6}
    11e4:	ca80      	ldmia	r2!, {r7}
    11e6:	19f6      	adds	r6, r6, r7
    11e8:	c340      	stmia	r3!, {r6}
    11ea:	4708      	bx	r1
    11ec:	cc40      	ldmia	r4!, {r6}
    11ee:	ca80      	ldmia	r2!, {r7}
    11f0:	417e      	adcs	r6, r7
    11f2:	c340      	stmia	r3!, {r6}
    11f4:	cc40      	ldmia	r4!, {r6}
    11f6:	ca80      	ldmia	r2!, {r7}
    11f8:	417e      	adcs	r6, r7
    11fa:	c340      	stmia	r3!, {r6}
    11fc:	cc40      	ldmia	r4!, {r6}
    11fe:	ca80      	ldmia	r2!, {r7}
    1200:	417e      	adcs	r6, r7
    1202:	c340      	stmia	r3!, {r6}
    1204:	cc40      	ldmia	r4!, {r6}
    1206:	ca80      	ldmia	r2!, {r7}
    1208:	417e      	adcs	r6, r7
    120a:	c340      	stmia	r3!, {r6}
    120c:	cc40      	ldmia	r4!, {r6}
    120e:	ca80      	ldmia	r2!, {r7}
    1210:	417e      	adcs	r6, r7
    1212:	c340      	stmia	r3!, {r6}
    1214:	cc40      	ldmia	r4!, {r6}
    1216:	ca80      	ldmia	r2!, {r7}
    1218:	417e      	adcs	r6, r7
    121a:	c340      	stmia	r3!, {r6}
    121c:	cc40      	ldmia	r4!, {r6}
    121e:	ca80      	ldmia	r2!, {r7}
    1220:	417e      	adcs	r6, r7
    1222:	c340      	stmia	r3!, {r6}
    1224:	416d      	adcs	r5, r5
        } while (carry < 0);
    1226:	4663      	mov	r3, ip
    1228:	195b      	adds	r3, r3, r5
    122a:	469c      	mov	ip, r3
    122c:	d4d1      	bmi.n	11d2 <STACK_SIZE+0x1d2>
    122e:	e7c5      	b.n	11bc <STACK_SIZE+0x1bc>

00001230 <mod_sqrt_secp224r1_rs>:
                                  const uECC_word_t *f0) {
    1230:	b5f0      	push	{r4, r5, r6, r7, lr}
    1232:	46de      	mov	lr, fp
    1234:	4657      	mov	r7, sl
    1236:	464e      	mov	r6, r9
    1238:	4645      	mov	r5, r8
    123a:	4699      	mov	r9, r3
    uECC_vli_mult(product, left, right, curve->num_words);
    123c:	f240 78ad 	movw	r8, #1965	; 0x7ad
    1240:	b5e0      	push	{r5, r6, r7, lr}
    1242:	b09b      	sub	sp, #108	; 0x6c
    1244:	4683      	mov	fp, r0
    1246:	468a      	mov	sl, r1
    1248:	a80a      	add	r0, sp, #40	; 0x28
    124a:	4649      	mov	r1, r9
    124c:	f2c0 0800 	movt	r8, #0
    1250:	0014      	movs	r4, r2
    1252:	2307      	movs	r3, #7
    1254:	464a      	mov	r2, r9
    1256:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    1258:	f640 63f1 	movw	r3, #3825	; 0xef1
    125c:	a90a      	add	r1, sp, #40	; 0x28
    125e:	f2c0 0300 	movt	r3, #0
    1262:	a803      	add	r0, sp, #12
    1264:	001d      	movs	r5, r3
    1266:	9301      	str	r3, [sp, #4]
    1268:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    126a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    126c:	2307      	movs	r3, #7
    126e:	4649      	mov	r1, r9
    1270:	a80a      	add	r0, sp, #40	; 0x28
    1272:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    1274:	a90a      	add	r1, sp, #40	; 0x28
    1276:	4650      	mov	r0, sl
    1278:	47a8      	blx	r5
    127a:	465b      	mov	r3, fp
    127c:	aa03      	add	r2, sp, #12
    127e:	9925      	ldr	r1, [sp, #148]	; 0x94
    1280:	2009      	movs	r0, #9
    1282:	2700      	movs	r7, #0
    1284:	a605      	add	r6, pc, #20	; (adr r6, 129c <mod_sqrt_secp224r1_rs+0x6c>)
    1286:	46c0      	nop			; (mov r8, r8)
    1288:	46c0      	nop			; (mov r8, r8)
    128a:	46c0      	nop			; (mov r8, r8)
    128c:	46c0      	nop			; (mov r8, r8)
    128e:	46c0      	nop			; (mov r8, r8)
    1290:	1980      	adds	r0, r0, r6
    1292:	ca40      	ldmia	r2!, {r6}
    1294:	c920      	ldmia	r1!, {r5}
    1296:	1976      	adds	r6, r6, r5
    1298:	c340      	stmia	r3!, {r6}
    129a:	4700      	bx	r0
    129c:	ca40      	ldmia	r2!, {r6}
    129e:	c920      	ldmia	r1!, {r5}
    12a0:	416e      	adcs	r6, r5
    12a2:	c340      	stmia	r3!, {r6}
    12a4:	ca40      	ldmia	r2!, {r6}
    12a6:	c920      	ldmia	r1!, {r5}
    12a8:	416e      	adcs	r6, r5
    12aa:	c340      	stmia	r3!, {r6}
    12ac:	ca40      	ldmia	r2!, {r6}
    12ae:	c920      	ldmia	r1!, {r5}
    12b0:	416e      	adcs	r6, r5
    12b2:	c340      	stmia	r3!, {r6}
    12b4:	ca40      	ldmia	r2!, {r6}
    12b6:	c920      	ldmia	r1!, {r5}
    12b8:	416e      	adcs	r6, r5
    12ba:	c340      	stmia	r3!, {r6}
    12bc:	ca40      	ldmia	r2!, {r6}
    12be:	c920      	ldmia	r1!, {r5}
    12c0:	416e      	adcs	r6, r5
    12c2:	c340      	stmia	r3!, {r6}
    12c4:	ca40      	ldmia	r2!, {r6}
    12c6:	c920      	ldmia	r1!, {r5}
    12c8:	416e      	adcs	r6, r5
    12ca:	c340      	stmia	r3!, {r6}
    12cc:	ca40      	ldmia	r2!, {r6}
    12ce:	c920      	ldmia	r1!, {r5}
    12d0:	416e      	adcs	r6, r5
    12d2:	c340      	stmia	r3!, {r6}
    12d4:	417f      	adcs	r7, r7
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    12d6:	b9cf      	cbnz	r7, 130c <mod_sqrt_secp224r1_rs+0xdc>
        if (left[i] > right[i]) {
    12d8:	465b      	mov	r3, fp
    12da:	699b      	ldr	r3, [r3, #24]
    12dc:	3301      	adds	r3, #1
    12de:	d142      	bne.n	1366 <mod_sqrt_secp224r1_rs+0x136>
    12e0:	465b      	mov	r3, fp
    12e2:	695b      	ldr	r3, [r3, #20]
    12e4:	3301      	adds	r3, #1
    12e6:	d13e      	bne.n	1366 <mod_sqrt_secp224r1_rs+0x136>
    12e8:	465b      	mov	r3, fp
    12ea:	691b      	ldr	r3, [r3, #16]
    12ec:	3301      	adds	r3, #1
    12ee:	d13a      	bne.n	1366 <mod_sqrt_secp224r1_rs+0x136>
    12f0:	465b      	mov	r3, fp
    12f2:	68db      	ldr	r3, [r3, #12]
    12f4:	3301      	adds	r3, #1
    12f6:	d136      	bne.n	1366 <mod_sqrt_secp224r1_rs+0x136>
        } else if (left[i] < right[i]) {
    12f8:	465b      	mov	r3, fp
    12fa:	689b      	ldr	r3, [r3, #8]
    12fc:	b933      	cbnz	r3, 130c <mod_sqrt_secp224r1_rs+0xdc>
    12fe:	465b      	mov	r3, fp
    1300:	685b      	ldr	r3, [r3, #4]
    1302:	b91b      	cbnz	r3, 130c <mod_sqrt_secp224r1_rs+0xdc>
        if (left[i] > right[i]) {
    1304:	465b      	mov	r3, fp
    1306:	681b      	ldr	r3, [r3, #0]
    1308:	2b00      	cmp	r3, #0
    130a:	d02c      	beq.n	1366 <mod_sqrt_secp224r1_rs+0x136>
    __asm__ volatile (
    130c:	f646 03cc 	movw	r3, #26828	; 0x68cc
    1310:	f2c0 0300 	movt	r3, #0
    1314:	3304      	adds	r3, #4
    1316:	4658      	mov	r0, fp
    1318:	2209      	movs	r2, #9
    131a:	4659      	mov	r1, fp
    131c:	2600      	movs	r6, #0
    131e:	a503      	add	r5, pc, #12	; (adr r5, 132c <mod_sqrt_secp224r1_rs+0xfc>)
    1320:	1952      	adds	r2, r2, r5
    1322:	c920      	ldmia	r1!, {r5}
    1324:	cb80      	ldmia	r3!, {r7}
    1326:	1bed      	subs	r5, r5, r7
    1328:	c020      	stmia	r0!, {r5}
    132a:	4710      	bx	r2
    132c:	c920      	ldmia	r1!, {r5}
    132e:	cb80      	ldmia	r3!, {r7}
    1330:	41bd      	sbcs	r5, r7
    1332:	c020      	stmia	r0!, {r5}
    1334:	c920      	ldmia	r1!, {r5}
    1336:	cb80      	ldmia	r3!, {r7}
    1338:	41bd      	sbcs	r5, r7
    133a:	c020      	stmia	r0!, {r5}
    133c:	c920      	ldmia	r1!, {r5}
    133e:	cb80      	ldmia	r3!, {r7}
    1340:	41bd      	sbcs	r5, r7
    1342:	c020      	stmia	r0!, {r5}
    1344:	c920      	ldmia	r1!, {r5}
    1346:	cb80      	ldmia	r3!, {r7}
    1348:	41bd      	sbcs	r5, r7
    134a:	c020      	stmia	r0!, {r5}
    134c:	c920      	ldmia	r1!, {r5}
    134e:	cb80      	ldmia	r3!, {r7}
    1350:	41bd      	sbcs	r5, r7
    1352:	c020      	stmia	r0!, {r5}
    1354:	c920      	ldmia	r1!, {r5}
    1356:	cb80      	ldmia	r3!, {r7}
    1358:	41bd      	sbcs	r5, r7
    135a:	c020      	stmia	r0!, {r5}
    135c:	c920      	ldmia	r1!, {r5}
    135e:	cb80      	ldmia	r3!, {r7}
    1360:	41bd      	sbcs	r5, r7
    1362:	c020      	stmia	r0!, {r5}
    1364:	4176      	adcs	r6, r6
    __asm__ volatile (
    1366:	4653      	mov	r3, sl
    1368:	2209      	movs	r2, #9
    136a:	4650      	mov	r0, sl
    136c:	4656      	mov	r6, sl
    136e:	2100      	movs	r1, #0
    1370:	a506      	add	r5, pc, #24	; (adr r5, 138c <mod_sqrt_secp224r1_rs+0x15c>)
    1372:	46c0      	nop			; (mov r8, r8)
    1374:	46c0      	nop			; (mov r8, r8)
    1376:	46c0      	nop			; (mov r8, r8)
    1378:	46c0      	nop			; (mov r8, r8)
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	46c0      	nop			; (mov r8, r8)
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	1952      	adds	r2, r2, r5
    1382:	c820      	ldmia	r0!, {r5}
    1384:	ce80      	ldmia	r6!, {r7}
    1386:	19ed      	adds	r5, r5, r7
    1388:	c320      	stmia	r3!, {r5}
    138a:	4710      	bx	r2
    138c:	c820      	ldmia	r0!, {r5}
    138e:	ce80      	ldmia	r6!, {r7}
    1390:	417d      	adcs	r5, r7
    1392:	c320      	stmia	r3!, {r5}
    1394:	c820      	ldmia	r0!, {r5}
    1396:	ce80      	ldmia	r6!, {r7}
    1398:	417d      	adcs	r5, r7
    139a:	c320      	stmia	r3!, {r5}
    139c:	c820      	ldmia	r0!, {r5}
    139e:	ce80      	ldmia	r6!, {r7}
    13a0:	417d      	adcs	r5, r7
    13a2:	c320      	stmia	r3!, {r5}
    13a4:	c820      	ldmia	r0!, {r5}
    13a6:	ce80      	ldmia	r6!, {r7}
    13a8:	417d      	adcs	r5, r7
    13aa:	c320      	stmia	r3!, {r5}
    13ac:	c820      	ldmia	r0!, {r5}
    13ae:	ce80      	ldmia	r6!, {r7}
    13b0:	417d      	adcs	r5, r7
    13b2:	c320      	stmia	r3!, {r5}
    13b4:	c820      	ldmia	r0!, {r5}
    13b6:	ce80      	ldmia	r6!, {r7}
    13b8:	417d      	adcs	r5, r7
    13ba:	c320      	stmia	r3!, {r5}
    13bc:	c820      	ldmia	r0!, {r5}
    13be:	ce80      	ldmia	r6!, {r7}
    13c0:	417d      	adcs	r5, r7
    13c2:	c320      	stmia	r3!, {r5}
    13c4:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    13c6:	b9c9      	cbnz	r1, 13fc <mod_sqrt_secp224r1_rs+0x1cc>
        if (left[i] > right[i]) {
    13c8:	4653      	mov	r3, sl
    13ca:	699b      	ldr	r3, [r3, #24]
    13cc:	3301      	adds	r3, #1
    13ce:	d142      	bne.n	1456 <mod_sqrt_secp224r1_rs+0x226>
    13d0:	4653      	mov	r3, sl
    13d2:	695b      	ldr	r3, [r3, #20]
    13d4:	3301      	adds	r3, #1
    13d6:	d13e      	bne.n	1456 <mod_sqrt_secp224r1_rs+0x226>
    13d8:	4653      	mov	r3, sl
    13da:	691b      	ldr	r3, [r3, #16]
    13dc:	3301      	adds	r3, #1
    13de:	d13a      	bne.n	1456 <mod_sqrt_secp224r1_rs+0x226>
    13e0:	4653      	mov	r3, sl
    13e2:	68db      	ldr	r3, [r3, #12]
    13e4:	3301      	adds	r3, #1
    13e6:	d136      	bne.n	1456 <mod_sqrt_secp224r1_rs+0x226>
        } else if (left[i] < right[i]) {
    13e8:	4653      	mov	r3, sl
    13ea:	689b      	ldr	r3, [r3, #8]
    13ec:	b933      	cbnz	r3, 13fc <mod_sqrt_secp224r1_rs+0x1cc>
    13ee:	4653      	mov	r3, sl
    13f0:	685b      	ldr	r3, [r3, #4]
    13f2:	b91b      	cbnz	r3, 13fc <mod_sqrt_secp224r1_rs+0x1cc>
        if (left[i] > right[i]) {
    13f4:	4653      	mov	r3, sl
    13f6:	681b      	ldr	r3, [r3, #0]
    13f8:	2b00      	cmp	r3, #0
    13fa:	d02c      	beq.n	1456 <mod_sqrt_secp224r1_rs+0x226>
    __asm__ volatile (
    13fc:	f646 03cc 	movw	r3, #26828	; 0x68cc
    1400:	f2c0 0300 	movt	r3, #0
    1404:	3304      	adds	r3, #4
    1406:	4651      	mov	r1, sl
    1408:	2209      	movs	r2, #9
    140a:	4650      	mov	r0, sl
    140c:	2500      	movs	r5, #0
    140e:	a603      	add	r6, pc, #12	; (adr r6, 141c <mod_sqrt_secp224r1_rs+0x1ec>)
    1410:	1992      	adds	r2, r2, r6
    1412:	c840      	ldmia	r0!, {r6}
    1414:	cb80      	ldmia	r3!, {r7}
    1416:	1bf6      	subs	r6, r6, r7
    1418:	c140      	stmia	r1!, {r6}
    141a:	4710      	bx	r2
    141c:	c840      	ldmia	r0!, {r6}
    141e:	cb80      	ldmia	r3!, {r7}
    1420:	41be      	sbcs	r6, r7
    1422:	c140      	stmia	r1!, {r6}
    1424:	c840      	ldmia	r0!, {r6}
    1426:	cb80      	ldmia	r3!, {r7}
    1428:	41be      	sbcs	r6, r7
    142a:	c140      	stmia	r1!, {r6}
    142c:	c840      	ldmia	r0!, {r6}
    142e:	cb80      	ldmia	r3!, {r7}
    1430:	41be      	sbcs	r6, r7
    1432:	c140      	stmia	r1!, {r6}
    1434:	c840      	ldmia	r0!, {r6}
    1436:	cb80      	ldmia	r3!, {r7}
    1438:	41be      	sbcs	r6, r7
    143a:	c140      	stmia	r1!, {r6}
    143c:	c840      	ldmia	r0!, {r6}
    143e:	cb80      	ldmia	r3!, {r7}
    1440:	41be      	sbcs	r6, r7
    1442:	c140      	stmia	r1!, {r6}
    1444:	c840      	ldmia	r0!, {r6}
    1446:	cb80      	ldmia	r3!, {r7}
    1448:	41be      	sbcs	r6, r7
    144a:	c140      	stmia	r1!, {r6}
    144c:	c840      	ldmia	r0!, {r6}
    144e:	cb80      	ldmia	r3!, {r7}
    1450:	41be      	sbcs	r6, r7
    1452:	c140      	stmia	r1!, {r6}
    1454:	416d      	adcs	r5, r5
    uECC_vli_mult(product, left, right, curve->num_words);
    1456:	9a25      	ldr	r2, [sp, #148]	; 0x94
    1458:	a903      	add	r1, sp, #12
    145a:	a80a      	add	r0, sp, #40	; 0x28
    145c:	2307      	movs	r3, #7
    145e:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    1460:	0020      	movs	r0, r4
    1462:	9b01      	ldr	r3, [sp, #4]
    1464:	a90a      	add	r1, sp, #40	; 0x28
    1466:	4798      	blx	r3
    __asm__ volatile (
    1468:	0025      	movs	r5, r4
    146a:	0023      	movs	r3, r4
    146c:	2209      	movs	r2, #9
    146e:	0020      	movs	r0, r4
    1470:	2100      	movs	r1, #0
    1472:	a606      	add	r6, pc, #24	; (adr r6, 148c <mod_sqrt_secp224r1_rs+0x25c>)
    1474:	46c0      	nop			; (mov r8, r8)
    1476:	46c0      	nop			; (mov r8, r8)
    1478:	46c0      	nop			; (mov r8, r8)
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	46c0      	nop			; (mov r8, r8)
    147e:	46c0      	nop			; (mov r8, r8)
    1480:	1992      	adds	r2, r2, r6
    1482:	c840      	ldmia	r0!, {r6}
    1484:	cd80      	ldmia	r5!, {r7}
    1486:	19f6      	adds	r6, r6, r7
    1488:	c340      	stmia	r3!, {r6}
    148a:	4710      	bx	r2
    148c:	c840      	ldmia	r0!, {r6}
    148e:	cd80      	ldmia	r5!, {r7}
    1490:	417e      	adcs	r6, r7
    1492:	c340      	stmia	r3!, {r6}
    1494:	c840      	ldmia	r0!, {r6}
    1496:	cd80      	ldmia	r5!, {r7}
    1498:	417e      	adcs	r6, r7
    149a:	c340      	stmia	r3!, {r6}
    149c:	c840      	ldmia	r0!, {r6}
    149e:	cd80      	ldmia	r5!, {r7}
    14a0:	417e      	adcs	r6, r7
    14a2:	c340      	stmia	r3!, {r6}
    14a4:	c840      	ldmia	r0!, {r6}
    14a6:	cd80      	ldmia	r5!, {r7}
    14a8:	417e      	adcs	r6, r7
    14aa:	c340      	stmia	r3!, {r6}
    14ac:	c840      	ldmia	r0!, {r6}
    14ae:	cd80      	ldmia	r5!, {r7}
    14b0:	417e      	adcs	r6, r7
    14b2:	c340      	stmia	r3!, {r6}
    14b4:	c840      	ldmia	r0!, {r6}
    14b6:	cd80      	ldmia	r5!, {r7}
    14b8:	417e      	adcs	r6, r7
    14ba:	c340      	stmia	r3!, {r6}
    14bc:	c840      	ldmia	r0!, {r6}
    14be:	cd80      	ldmia	r5!, {r7}
    14c0:	417e      	adcs	r6, r7
    14c2:	c340      	stmia	r3!, {r6}
    14c4:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    14c6:	b991      	cbnz	r1, 14ee <mod_sqrt_secp224r1_rs+0x2be>
        if (left[i] > right[i]) {
    14c8:	69a3      	ldr	r3, [r4, #24]
    14ca:	3301      	adds	r3, #1
    14cc:	d143      	bne.n	1556 <mod_sqrt_secp224r1_rs+0x326>
    14ce:	6963      	ldr	r3, [r4, #20]
    14d0:	3301      	adds	r3, #1
    14d2:	d140      	bne.n	1556 <mod_sqrt_secp224r1_rs+0x326>
    14d4:	6923      	ldr	r3, [r4, #16]
    14d6:	3301      	adds	r3, #1
    14d8:	d13d      	bne.n	1556 <mod_sqrt_secp224r1_rs+0x326>
    14da:	68e3      	ldr	r3, [r4, #12]
    14dc:	3301      	adds	r3, #1
    14de:	d13a      	bne.n	1556 <mod_sqrt_secp224r1_rs+0x326>
        } else if (left[i] < right[i]) {
    14e0:	68a3      	ldr	r3, [r4, #8]
    14e2:	b923      	cbnz	r3, 14ee <mod_sqrt_secp224r1_rs+0x2be>
    14e4:	6863      	ldr	r3, [r4, #4]
    14e6:	b913      	cbnz	r3, 14ee <mod_sqrt_secp224r1_rs+0x2be>
        if (left[i] > right[i]) {
    14e8:	6823      	ldr	r3, [r4, #0]
    14ea:	2b00      	cmp	r3, #0
    14ec:	d033      	beq.n	1556 <mod_sqrt_secp224r1_rs+0x326>
    __asm__ volatile (
    14ee:	f646 02cc 	movw	r2, #26828	; 0x68cc
    14f2:	f2c0 0200 	movt	r2, #0
    14f6:	3204      	adds	r2, #4
    14f8:	0023      	movs	r3, r4
    14fa:	2109      	movs	r1, #9
    14fc:	0020      	movs	r0, r4
    14fe:	2500      	movs	r5, #0
    1500:	a606      	add	r6, pc, #24	; (adr r6, 151c <mod_sqrt_secp224r1_rs+0x2ec>)
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	46c0      	nop			; (mov r8, r8)
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	46c0      	nop			; (mov r8, r8)
    150a:	46c0      	nop			; (mov r8, r8)
    150c:	46c0      	nop			; (mov r8, r8)
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	1989      	adds	r1, r1, r6
    1512:	c840      	ldmia	r0!, {r6}
    1514:	ca80      	ldmia	r2!, {r7}
    1516:	1bf6      	subs	r6, r6, r7
    1518:	c340      	stmia	r3!, {r6}
    151a:	4708      	bx	r1
    151c:	c840      	ldmia	r0!, {r6}
    151e:	ca80      	ldmia	r2!, {r7}
    1520:	41be      	sbcs	r6, r7
    1522:	c340      	stmia	r3!, {r6}
    1524:	c840      	ldmia	r0!, {r6}
    1526:	ca80      	ldmia	r2!, {r7}
    1528:	41be      	sbcs	r6, r7
    152a:	c340      	stmia	r3!, {r6}
    152c:	c840      	ldmia	r0!, {r6}
    152e:	ca80      	ldmia	r2!, {r7}
    1530:	41be      	sbcs	r6, r7
    1532:	c340      	stmia	r3!, {r6}
    1534:	c840      	ldmia	r0!, {r6}
    1536:	ca80      	ldmia	r2!, {r7}
    1538:	41be      	sbcs	r6, r7
    153a:	c340      	stmia	r3!, {r6}
    153c:	c840      	ldmia	r0!, {r6}
    153e:	ca80      	ldmia	r2!, {r7}
    1540:	41be      	sbcs	r6, r7
    1542:	c340      	stmia	r3!, {r6}
    1544:	c840      	ldmia	r0!, {r6}
    1546:	ca80      	ldmia	r2!, {r7}
    1548:	41be      	sbcs	r6, r7
    154a:	c340      	stmia	r3!, {r6}
    154c:	c840      	ldmia	r0!, {r6}
    154e:	ca80      	ldmia	r2!, {r7}
    1550:	41be      	sbcs	r6, r7
    1552:	c340      	stmia	r3!, {r6}
    1554:	416d      	adcs	r5, r5
    __asm__ volatile (
    1556:	0023      	movs	r3, r4
    1558:	2209      	movs	r2, #9
    155a:	0020      	movs	r0, r4
    155c:	0025      	movs	r5, r4
    155e:	2100      	movs	r1, #0
    1560:	a606      	add	r6, pc, #24	; (adr r6, 157c <mod_sqrt_secp224r1_rs+0x34c>)
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	46c0      	nop			; (mov r8, r8)
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	46c0      	nop			; (mov r8, r8)
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	46c0      	nop			; (mov r8, r8)
    156e:	46c0      	nop			; (mov r8, r8)
    1570:	1992      	adds	r2, r2, r6
    1572:	c840      	ldmia	r0!, {r6}
    1574:	cd80      	ldmia	r5!, {r7}
    1576:	19f6      	adds	r6, r6, r7
    1578:	c340      	stmia	r3!, {r6}
    157a:	4710      	bx	r2
    157c:	c840      	ldmia	r0!, {r6}
    157e:	cd80      	ldmia	r5!, {r7}
    1580:	417e      	adcs	r6, r7
    1582:	c340      	stmia	r3!, {r6}
    1584:	c840      	ldmia	r0!, {r6}
    1586:	cd80      	ldmia	r5!, {r7}
    1588:	417e      	adcs	r6, r7
    158a:	c340      	stmia	r3!, {r6}
    158c:	c840      	ldmia	r0!, {r6}
    158e:	cd80      	ldmia	r5!, {r7}
    1590:	417e      	adcs	r6, r7
    1592:	c340      	stmia	r3!, {r6}
    1594:	c840      	ldmia	r0!, {r6}
    1596:	cd80      	ldmia	r5!, {r7}
    1598:	417e      	adcs	r6, r7
    159a:	c340      	stmia	r3!, {r6}
    159c:	c840      	ldmia	r0!, {r6}
    159e:	cd80      	ldmia	r5!, {r7}
    15a0:	417e      	adcs	r6, r7
    15a2:	c340      	stmia	r3!, {r6}
    15a4:	c840      	ldmia	r0!, {r6}
    15a6:	cd80      	ldmia	r5!, {r7}
    15a8:	417e      	adcs	r6, r7
    15aa:	c340      	stmia	r3!, {r6}
    15ac:	c840      	ldmia	r0!, {r6}
    15ae:	cd80      	ldmia	r5!, {r7}
    15b0:	417e      	adcs	r6, r7
    15b2:	c340      	stmia	r3!, {r6}
    15b4:	4149      	adcs	r1, r1
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    15b6:	b991      	cbnz	r1, 15de <mod_sqrt_secp224r1_rs+0x3ae>
        if (left[i] > right[i]) {
    15b8:	69a3      	ldr	r3, [r4, #24]
    15ba:	3301      	adds	r3, #1
    15bc:	d13b      	bne.n	1636 <mod_sqrt_secp224r1_rs+0x406>
    15be:	6963      	ldr	r3, [r4, #20]
    15c0:	3301      	adds	r3, #1
    15c2:	d138      	bne.n	1636 <mod_sqrt_secp224r1_rs+0x406>
    15c4:	6923      	ldr	r3, [r4, #16]
    15c6:	3301      	adds	r3, #1
    15c8:	d135      	bne.n	1636 <mod_sqrt_secp224r1_rs+0x406>
    15ca:	68e3      	ldr	r3, [r4, #12]
    15cc:	3301      	adds	r3, #1
    15ce:	d132      	bne.n	1636 <mod_sqrt_secp224r1_rs+0x406>
        } else if (left[i] < right[i]) {
    15d0:	68a3      	ldr	r3, [r4, #8]
    15d2:	b923      	cbnz	r3, 15de <mod_sqrt_secp224r1_rs+0x3ae>
    15d4:	6863      	ldr	r3, [r4, #4]
    15d6:	b913      	cbnz	r3, 15de <mod_sqrt_secp224r1_rs+0x3ae>
        if (left[i] > right[i]) {
    15d8:	6823      	ldr	r3, [r4, #0]
    15da:	2b00      	cmp	r3, #0
    15dc:	d02b      	beq.n	1636 <mod_sqrt_secp224r1_rs+0x406>
    __asm__ volatile (
    15de:	f646 03cc 	movw	r3, #26828	; 0x68cc
    15e2:	f2c0 0300 	movt	r3, #0
    15e6:	3304      	adds	r3, #4
    15e8:	2209      	movs	r2, #9
    15ea:	0021      	movs	r1, r4
    15ec:	2000      	movs	r0, #0
    15ee:	a503      	add	r5, pc, #12	; (adr r5, 15fc <mod_sqrt_secp224r1_rs+0x3cc>)
    15f0:	1952      	adds	r2, r2, r5
    15f2:	c920      	ldmia	r1!, {r5}
    15f4:	cb40      	ldmia	r3!, {r6}
    15f6:	1bad      	subs	r5, r5, r6
    15f8:	c420      	stmia	r4!, {r5}
    15fa:	4710      	bx	r2
    15fc:	c920      	ldmia	r1!, {r5}
    15fe:	cb40      	ldmia	r3!, {r6}
    1600:	41b5      	sbcs	r5, r6
    1602:	c420      	stmia	r4!, {r5}
    1604:	c920      	ldmia	r1!, {r5}
    1606:	cb40      	ldmia	r3!, {r6}
    1608:	41b5      	sbcs	r5, r6
    160a:	c420      	stmia	r4!, {r5}
    160c:	c920      	ldmia	r1!, {r5}
    160e:	cb40      	ldmia	r3!, {r6}
    1610:	41b5      	sbcs	r5, r6
    1612:	c420      	stmia	r4!, {r5}
    1614:	c920      	ldmia	r1!, {r5}
    1616:	cb40      	ldmia	r3!, {r6}
    1618:	41b5      	sbcs	r5, r6
    161a:	c420      	stmia	r4!, {r5}
    161c:	c920      	ldmia	r1!, {r5}
    161e:	cb40      	ldmia	r3!, {r6}
    1620:	41b5      	sbcs	r5, r6
    1622:	c420      	stmia	r4!, {r5}
    1624:	c920      	ldmia	r1!, {r5}
    1626:	cb40      	ldmia	r3!, {r6}
    1628:	41b5      	sbcs	r5, r6
    162a:	c420      	stmia	r4!, {r5}
    162c:	c920      	ldmia	r1!, {r5}
    162e:	cb40      	ldmia	r3!, {r6}
    1630:	41b5      	sbcs	r5, r6
    1632:	c420      	stmia	r4!, {r5}
    1634:	4140      	adcs	r0, r0
}
    1636:	b01b      	add	sp, #108	; 0x6c
    1638:	bc3c      	pop	{r2, r3, r4, r5}
    163a:	4690      	mov	r8, r2
    163c:	4699      	mov	r9, r3
    163e:	46a2      	mov	sl, r4
    1640:	46ab      	mov	fp, r5
    1642:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001644 <mod_sqrt_default>:
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1644:	b5f0      	push	{r4, r5, r6, r7, lr}
    1646:	46de      	mov	lr, fp
    1648:	4657      	mov	r7, sl
    164a:	464e      	mov	r6, r9
    164c:	4645      	mov	r5, r8
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    164e:	f246 6467 	movw	r4, #26215	; 0x6667
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1652:	b5e0      	push	{r5, r6, r7, lr}
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    1654:	2701      	movs	r7, #1
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    1656:	b0a7      	sub	sp, #156	; 0x9c
    1658:	000e      	movs	r6, r1
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    165a:	f2c0 0400 	movt	r4, #0
static void mod_sqrt_default(uECC_word_t *a, uECC_Curve curve) {
    165e:	9003      	str	r0, [sp, #12]
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    1660:	2220      	movs	r2, #32
    1662:	2100      	movs	r1, #0
    1664:	a806      	add	r0, sp, #24
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    1666:	ad0e      	add	r5, sp, #56	; 0x38
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    1668:	47a0      	blx	r4
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    166a:	2220      	movs	r2, #32
    166c:	2100      	movs	r1, #0
    166e:	0028      	movs	r0, r5
    uECC_word_t p1[uECC_MAX_WORDS] = {1};
    1670:	9706      	str	r7, [sp, #24]
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    1672:	47a0      	blx	r4
    wordcount_t num_words = curve->num_words;
    1674:	2300      	movs	r3, #0
    uECC_word_t l_result[uECC_MAX_WORDS] = {1};
    1676:	970e      	str	r7, [sp, #56]	; 0x38
    wordcount_t num_words = curve->num_words;
    1678:	56f3      	ldrsb	r3, [r6, r3]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    167a:	f240 64f1 	movw	r4, #1777	; 0x6f1
    wordcount_t num_words = curve->num_words;
    167e:	001f      	movs	r7, r3
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    1680:	aa06      	add	r2, sp, #24
    1682:	0010      	movs	r0, r2
    1684:	1d31      	adds	r1, r6, #4
    1686:	f2c0 0400 	movt	r4, #0
    wordcount_t num_words = curve->num_words;
    168a:	9304      	str	r3, [sp, #16]
    uECC_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
    168c:	47a0      	blx	r4
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    168e:	1e7a      	subs	r2, r7, #1
    1690:	b2d3      	uxtb	r3, r2
    1692:	9305      	str	r3, [sp, #20]
    1694:	b25b      	sxtb	r3, r3
    1696:	2b00      	cmp	r3, #0
    1698:	da05      	bge.n	16a6 <mod_sqrt_default+0x62>
    169a:	e00c      	b.n	16b6 <mod_sqrt_default+0x72>
    169c:	3b01      	subs	r3, #1
    169e:	b25b      	sxtb	r3, r3
    16a0:	1c5a      	adds	r2, r3, #1
    16a2:	d100      	bne.n	16a6 <mod_sqrt_default+0x62>
    16a4:	e09b      	b.n	17de <mod_sqrt_default+0x19a>
    16a6:	a926      	add	r1, sp, #152	; 0x98
    16a8:	468c      	mov	ip, r1
    16aa:	009a      	lsls	r2, r3, #2
    16ac:	4462      	add	r2, ip
    16ae:	3a80      	subs	r2, #128	; 0x80
    16b0:	6812      	ldr	r2, [r2, #0]
    16b2:	2a00      	cmp	r2, #0
    16b4:	d0f2      	beq.n	169c <mod_sqrt_default+0x58>
    return (i + 1);
    16b6:	3301      	adds	r3, #1
    16b8:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
    16ba:	2b00      	cmp	r3, #0
    16bc:	d100      	bne.n	16c0 <mod_sqrt_default+0x7c>
    16be:	e08e      	b.n	17de <mod_sqrt_default+0x19a>
    digit = vli[num_digits - 1];
    16c0:	a926      	add	r1, sp, #152	; 0x98
    16c2:	468c      	mov	ip, r1
    16c4:	4a50      	ldr	r2, [pc, #320]	; (1808 <mod_sqrt_default+0x1c4>)
    for (i = 0; digit; ++i) {
    16c6:	2400      	movs	r4, #0
    digit = vli[num_digits - 1];
    16c8:	189a      	adds	r2, r3, r2
    16ca:	0092      	lsls	r2, r2, #2
    16cc:	4462      	add	r2, ip
    16ce:	3a80      	subs	r2, #128	; 0x80
    16d0:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    16d2:	b122      	cbz	r2, 16de <mod_sqrt_default+0x9a>
        digit >>= 1;
    16d4:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    16d6:	3401      	adds	r4, #1
    16d8:	2a00      	cmp	r2, #0
    16da:	d1fb      	bne.n	16d4 <mod_sqrt_default+0x90>
    16dc:	b2a4      	uxth	r4, r4
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    16de:	015b      	lsls	r3, r3, #5
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
    16e0:	3b21      	subs	r3, #33	; 0x21
    16e2:	18e4      	adds	r4, r4, r3
    16e4:	b224      	sxth	r4, r4
    16e6:	2c01      	cmp	r4, #1
    16e8:	dc00      	bgt.n	16ec <mod_sqrt_default+0xa8>
    16ea:	e078      	b.n	17de <mod_sqrt_default+0x19a>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    16ec:	9601      	str	r6, [sp, #4]
    16ee:	e005      	b.n	16fc <mod_sqrt_default+0xb8>
    16f0:	3f01      	subs	r7, #1
    16f2:	b2bf      	uxth	r7, r7
    16f4:	b23c      	sxth	r4, r7
    16f6:	2f01      	cmp	r7, #1
    16f8:	d100      	bne.n	16fc <mod_sqrt_default+0xb8>
    16fa:	e070      	b.n	17de <mod_sqrt_default+0x19a>
    __asm__ volatile (
    16fc:	9a01      	ldr	r2, [sp, #4]
    16fe:	ae16      	add	r6, sp, #88	; 0x58
    1700:	7813      	ldrb	r3, [r2, #0]
    1702:	3b01      	subs	r3, #1
    1704:	009b      	lsls	r3, r3, #2
    1706:	4698      	mov	r8, r3
    1708:	005b      	lsls	r3, r3, #1
    170a:	4699      	mov	r9, r3
    170c:	2300      	movs	r3, #0
    170e:	2200      	movs	r2, #0
    1710:	2100      	movs	r1, #0
    1712:	2000      	movs	r0, #0
    1714:	b440      	push	{r6}
    1716:	2700      	movs	r7, #0
    1718:	e002      	b.n	1720 <mod_sqrt_default+0xdc>
    171a:	0007      	movs	r7, r0
    171c:	4646      	mov	r6, r8
    171e:	1bbf      	subs	r7, r7, r6
    1720:	469a      	mov	sl, r3
    1722:	4693      	mov	fp, r2
    1724:	468c      	mov	ip, r1
    1726:	4686      	mov	lr, r0
    1728:	1bc6      	subs	r6, r0, r7
    172a:	59aa      	ldr	r2, [r5, r6]
    172c:	59ee      	ldr	r6, [r5, r7]
    172e:	0c33      	lsrs	r3, r6, #16
    1730:	b2b6      	uxth	r6, r6
    1732:	0c11      	lsrs	r1, r2, #16
    1734:	b292      	uxth	r2, r2
    1736:	0018      	movs	r0, r3
    1738:	4348      	muls	r0, r1
    173a:	4353      	muls	r3, r2
    173c:	4371      	muls	r1, r6
    173e:	4356      	muls	r6, r2
    1740:	041a      	lsls	r2, r3, #16
    1742:	0c1b      	lsrs	r3, r3, #16
    1744:	18b6      	adds	r6, r6, r2
    1746:	4158      	adcs	r0, r3
    1748:	040a      	lsls	r2, r1, #16
    174a:	0c09      	lsrs	r1, r1, #16
    174c:	18b6      	adds	r6, r6, r2
    174e:	4148      	adcs	r0, r1
    1750:	4653      	mov	r3, sl
    1752:	465a      	mov	r2, fp
    1754:	4661      	mov	r1, ip
    1756:	199b      	adds	r3, r3, r6
    1758:	4142      	adcs	r2, r0
    175a:	2600      	movs	r6, #0
    175c:	4171      	adcs	r1, r6
    175e:	4670      	mov	r0, lr
    1760:	3704      	adds	r7, #4
    1762:	4547      	cmp	r7, r8
    1764:	dc01      	bgt.n	176a <mod_sqrt_default+0x126>
    1766:	4287      	cmp	r7, r0
    1768:	ddda      	ble.n	1720 <mod_sqrt_default+0xdc>
    176a:	9e00      	ldr	r6, [sp, #0]
    176c:	5033      	str	r3, [r6, r0]
    176e:	4613      	mov	r3, r2
    1770:	460a      	mov	r2, r1
    1772:	2100      	movs	r1, #0
    1774:	3004      	adds	r0, #4
    1776:	4540      	cmp	r0, r8
    1778:	ddcd      	ble.n	1716 <mod_sqrt_default+0xd2>
    177a:	4548      	cmp	r0, r9
    177c:	ddcd      	ble.n	171a <mod_sqrt_default+0xd6>
    177e:	5033      	str	r3, [r6, r0]
    1780:	bc40      	pop	{r6}
    curve->mmod_fast(result, product);
    1782:	23b0      	movs	r3, #176	; 0xb0
    1784:	9a01      	ldr	r2, [sp, #4]
    1786:	0031      	movs	r1, r6
    1788:	58d3      	ldr	r3, [r2, r3]
    178a:	0028      	movs	r0, r5
    178c:	9302      	str	r3, [sp, #8]
    178e:	4798      	blx	r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    1790:	ab26      	add	r3, sp, #152	; 0x98
    1792:	469c      	mov	ip, r3
    1794:	231f      	movs	r3, #31
    1796:	2201      	movs	r2, #1
    1798:	b2a7      	uxth	r7, r4
    179a:	403b      	ands	r3, r7
    179c:	409a      	lsls	r2, r3
    179e:	0013      	movs	r3, r2
    17a0:	1164      	asrs	r4, r4, #5
    17a2:	00a4      	lsls	r4, r4, #2
    17a4:	4464      	add	r4, ip
    17a6:	3c80      	subs	r4, #128	; 0x80
    17a8:	6822      	ldr	r2, [r4, #0]
        if (uECC_vli_testBit(p1, i)) {
    17aa:	421a      	tst	r2, r3
    17ac:	d100      	bne.n	17b0 <mod_sqrt_default+0x16c>
    17ae:	e79f      	b.n	16f0 <mod_sqrt_default+0xac>
    uECC_vli_mult(product, left, right, curve->num_words);
    17b0:	2300      	movs	r3, #0
    17b2:	f240 74ad 	movw	r4, #1965	; 0x7ad
    17b6:	9e01      	ldr	r6, [sp, #4]
    17b8:	9a03      	ldr	r2, [sp, #12]
    17ba:	56f3      	ldrsb	r3, [r6, r3]
    17bc:	0029      	movs	r1, r5
    17be:	a816      	add	r0, sp, #88	; 0x58
    17c0:	f2c0 0400 	movt	r4, #0
    17c4:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    17c6:	23b0      	movs	r3, #176	; 0xb0
    17c8:	3f01      	subs	r7, #1
    17ca:	58f3      	ldr	r3, [r6, r3]
    17cc:	a916      	add	r1, sp, #88	; 0x58
    17ce:	0028      	movs	r0, r5
    17d0:	b2bf      	uxth	r7, r7
    17d2:	9302      	str	r3, [sp, #8]
    17d4:	b23c      	sxth	r4, r7
    17d6:	4798      	blx	r3
    for (i = uECC_vli_numBits(p1, num_words) - 1; i > 1; --i) {
    17d8:	2f01      	cmp	r7, #1
    17da:	d000      	beq.n	17de <mod_sqrt_default+0x19a>
    17dc:	e78e      	b.n	16fc <mod_sqrt_default+0xb8>
    for (i = 0; i < num_words; ++i) {
    17de:	9b04      	ldr	r3, [sp, #16]
    17e0:	2b00      	cmp	r3, #0
    17e2:	dd09      	ble.n	17f8 <mod_sqrt_default+0x1b4>
    17e4:	f246 6331 	movw	r3, #26161	; 0x6631
        dest[i] = src[i];
    17e8:	9a05      	ldr	r2, [sp, #20]
    17ea:	0029      	movs	r1, r5
    17ec:	3201      	adds	r2, #1
    17ee:	0092      	lsls	r2, r2, #2
    17f0:	9803      	ldr	r0, [sp, #12]
    17f2:	f2c0 0300 	movt	r3, #0
    17f6:	4798      	blx	r3
}
    17f8:	b027      	add	sp, #156	; 0x9c
    17fa:	bc3c      	pop	{r2, r3, r4, r5}
    17fc:	4690      	mov	r8, r2
    17fe:	4699      	mov	r9, r3
    1800:	46a2      	mov	sl, r4
    1802:	46ab      	mov	fp, r5
    1804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	3fffffff 	.word	0x3fffffff

0000180c <bits2int>:
/* -------- ECDSA code -------- */

static void bits2int(uECC_word_t *native,
                     const uint8_t *bits,
                     unsigned bits_size,
                     uECC_Curve curve) {
    180c:	b5f0      	push	{r4, r5, r6, r7, lr}
    180e:	4657      	mov	r7, sl
    1810:	4645      	mov	r5, r8
    1812:	464e      	mov	r6, r9
    1814:	46de      	mov	lr, fp
    1816:	b5e0      	push	{r5, r6, r7, lr}
    1818:	468a      	mov	sl, r1
    181a:	4698      	mov	r8, r3
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    181c:	2102      	movs	r1, #2
    181e:	5e5b      	ldrsh	r3, [r3, r1]
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1820:	241f      	movs	r4, #31
    1822:	0019      	movs	r1, r3
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1824:	4699      	mov	r9, r3
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1826:	311f      	adds	r1, #31
    1828:	17cb      	asrs	r3, r1, #31
    182a:	401c      	ands	r4, r3
    182c:	1864      	adds	r4, r4, r1
    182e:	1163      	asrs	r3, r4, #5
                     uECC_Curve curve) {
    1830:	b083      	sub	sp, #12
    unsigned num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    1832:	9301      	str	r3, [sp, #4]
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1834:	464b      	mov	r3, r9
    1836:	2707      	movs	r7, #7
    1838:	3307      	adds	r3, #7
    183a:	17d9      	asrs	r1, r3, #31
    183c:	400f      	ands	r7, r1
    183e:	18ff      	adds	r7, r7, r3
                     uECC_Curve curve) {
    1840:	0005      	movs	r5, r0
    unsigned num_n_bytes = BITS_TO_BYTES(curve->num_n_bits);
    1842:	10ff      	asrs	r7, r7, #3
    1844:	4297      	cmp	r7, r2
    1846:	d900      	bls.n	184a <bits2int+0x3e>
    1848:	0017      	movs	r7, r2

    if (bits_size > num_n_bytes) {
        bits_size = num_n_bytes;
    }

    uECC_vli_clear(native, num_n_words);
    184a:	466b      	mov	r3, sp
    184c:	791b      	ldrb	r3, [r3, #4]
    184e:	b25b      	sxtb	r3, r3
    1850:	469b      	mov	fp, r3
    for (i = 0; i < num_words; ++i) {
    1852:	2b00      	cmp	r3, #0
    1854:	dd0b      	ble.n	186e <bits2int+0x62>
        vli[i] = 0;
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	2100      	movs	r1, #0
    185a:	1e5a      	subs	r2, r3, #1
    185c:	f246 6367 	movw	r3, #26215	; 0x6667
    1860:	b2d2      	uxtb	r2, r2
    1862:	3201      	adds	r2, #1
    1864:	0092      	lsls	r2, r2, #2
    1866:	0028      	movs	r0, r5
    1868:	f2c0 0300 	movt	r3, #0
    186c:	4798      	blx	r3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    186e:	2303      	movs	r3, #3
    1870:	1cfa      	adds	r2, r7, #3
    1872:	17d1      	asrs	r1, r2, #31
    1874:	400b      	ands	r3, r1
    1876:	189b      	adds	r3, r3, r2
    1878:	109b      	asrs	r3, r3, #2
    for (i = 0; i < num_words; ++i) {
    187a:	b25a      	sxtb	r2, r3
    187c:	2a00      	cmp	r2, #0
    187e:	dd0a      	ble.n	1896 <bits2int+0x8a>
        vli[i] = 0;
    1880:	3b01      	subs	r3, #1
    1882:	b2da      	uxtb	r2, r3
    1884:	f246 6367 	movw	r3, #26215	; 0x6667
    1888:	3201      	adds	r2, #1
    188a:	0092      	lsls	r2, r2, #2
    188c:	2100      	movs	r1, #0
    188e:	0028      	movs	r0, r5
    1890:	f2c0 0300 	movt	r3, #0
    1894:	4798      	blx	r3
    1896:	1e7b      	subs	r3, r7, #1
    1898:	4651      	mov	r1, sl
        native[b / uECC_WORD_SIZE] |=
    189a:	2403      	movs	r4, #3
    for (i = 0; i < num_bytes; ++i) {
    189c:	2f00      	cmp	r7, #0
    189e:	dd0d      	ble.n	18bc <bits2int+0xb0>
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    18a0:	0026      	movs	r6, r4
        native[b / uECC_WORD_SIZE] |=
    18a2:	001a      	movs	r2, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    18a4:	7808      	ldrb	r0, [r1, #0]
    18a6:	401e      	ands	r6, r3
    18a8:	00f6      	lsls	r6, r6, #3
    18aa:	40b0      	lsls	r0, r6
        native[b / uECC_WORD_SIZE] |=
    18ac:	43a2      	bics	r2, r4
    18ae:	18aa      	adds	r2, r5, r2
    18b0:	6816      	ldr	r6, [r2, #0]
    18b2:	3101      	adds	r1, #1
    18b4:	4330      	orrs	r0, r6
    18b6:	6010      	str	r0, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    18b8:	3b01      	subs	r3, #1
    18ba:	d2f1      	bcs.n	18a0 <bits2int+0x94>
#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) native, bits, bits_size);
#else
    uECC_vli_bytesToNative(native, bits, bits_size);
#endif
    if (bits_size * 8 <= (unsigned)curve->num_n_bits) {
    18bc:	00ff      	lsls	r7, r7, #3
    18be:	454f      	cmp	r7, r9
    18c0:	d930      	bls.n	1924 <bits2int+0x118>
        return;
    }
    shift = bits_size * 8 - curve->num_n_bits;
    18c2:	464b      	mov	r3, r9
    18c4:	1aff      	subs	r7, r7, r3
    carry = 0;
    ptr = native + num_n_words;
    18c6:	9b01      	ldr	r3, [sp, #4]
    18c8:	009a      	lsls	r2, r3, #2
    18ca:	18aa      	adds	r2, r5, r2
    while (ptr-- > native) {
    18cc:	1f13      	subs	r3, r2, #4
    18ce:	4295      	cmp	r5, r2
    18d0:	d215      	bcs.n	18fe <bits2int+0xf2>
    18d2:	2120      	movs	r1, #32
    18d4:	1bc9      	subs	r1, r1, r7
    18d6:	4689      	mov	r9, r1
    18d8:	1b59      	subs	r1, r3, r5
    18da:	3103      	adds	r1, #3
    18dc:	0889      	lsrs	r1, r1, #2
    18de:	0089      	lsls	r1, r1, #2
    18e0:	1a52      	subs	r2, r2, r1
    18e2:	3a08      	subs	r2, #8
    18e4:	0016      	movs	r6, r2
    18e6:	2000      	movs	r0, #0
        uECC_word_t temp = *ptr;
    18e8:	6819      	ldr	r1, [r3, #0]
    while (ptr-- > native) {
    18ea:	3b04      	subs	r3, #4
        *ptr = (temp >> shift) | carry;
    18ec:	000a      	movs	r2, r1
    18ee:	40fa      	lsrs	r2, r7
    18f0:	4302      	orrs	r2, r0
    18f2:	605a      	str	r2, [r3, #4]
        carry = temp << (uECC_WORD_BITS - shift);
    18f4:	464a      	mov	r2, r9
    18f6:	4091      	lsls	r1, r2
    18f8:	0008      	movs	r0, r1
    while (ptr-- > native) {
    18fa:	42b3      	cmp	r3, r6
    18fc:	d1f4      	bne.n	18e8 <bits2int+0xdc>
    }

    /* Reduce mod curve_n */
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
    18fe:	4642      	mov	r2, r8
    for (i = num_words - 1; i >= 0; --i) {
    1900:	9c01      	ldr	r4, [sp, #4]
    if (uECC_vli_cmp_unsafe(curve->n, native, num_n_words) != 1) {
    1902:	3224      	adds	r2, #36	; 0x24
    for (i = num_words - 1; i >= 0; --i) {
    1904:	3c01      	subs	r4, #1
    1906:	b261      	sxtb	r1, r4
    1908:	2900      	cmp	r1, #0
    190a:	da06      	bge.n	191a <bits2int+0x10e>
    190c:	e011      	b.n	1932 <bits2int+0x126>
        } else if (left[i] < right[i]) {
    190e:	4298      	cmp	r0, r3
    1910:	d30f      	bcc.n	1932 <bits2int+0x126>
    1912:	3901      	subs	r1, #1
    1914:	b249      	sxtb	r1, r1
    for (i = num_words - 1; i >= 0; --i) {
    1916:	1c4b      	adds	r3, r1, #1
    1918:	d00b      	beq.n	1932 <bits2int+0x126>
        if (left[i] > right[i]) {
    191a:	008b      	lsls	r3, r1, #2
    191c:	58d0      	ldr	r0, [r2, r3]
    191e:	58eb      	ldr	r3, [r5, r3]
    1920:	4298      	cmp	r0, r3
    1922:	d9f4      	bls.n	190e <bits2int+0x102>
        uECC_vli_sub(native, native, curve->n, num_n_words);
    }
}
    1924:	b003      	add	sp, #12
    1926:	bc3c      	pop	{r2, r3, r4, r5}
    1928:	4690      	mov	r8, r2
    192a:	4699      	mov	r9, r3
    192c:	46a2      	mov	sl, r4
    192e:	46ab      	mov	fp, r5
    1930:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_sub(native, native, curve->n, num_n_words);
    1932:	f240 7451 	movw	r4, #1873	; 0x751
    1936:	465b      	mov	r3, fp
    1938:	0029      	movs	r1, r5
    193a:	0028      	movs	r0, r5
    193c:	f2c0 0400 	movt	r4, #0
    1940:	47a0      	blx	r4
    1942:	e7ef      	b.n	1924 <bits2int+0x118>
	...

00001950 <uECC_vli_modSub>:
                                  wordcount_t num_words) {
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	46c6      	mov	lr, r8
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1954:	2408      	movs	r4, #8
    1956:	b500      	push	{lr}
    1958:	4698      	mov	r8, r3
    195a:	ab06      	add	r3, sp, #24
    195c:	781b      	ldrb	r3, [r3, #0]
    __asm__ volatile (
    195e:	0006      	movs	r6, r0
    1960:	b25b      	sxtb	r3, r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1962:	1ae4      	subs	r4, r4, r3
    1964:	00e4      	lsls	r4, r4, #3
    1966:	469c      	mov	ip, r3
    1968:	3401      	adds	r4, #1
    __asm__ volatile (
    196a:	0015      	movs	r5, r2
    196c:	2200      	movs	r2, #0
    196e:	a703      	add	r7, pc, #12	; (adr r7, 197c <uECC_vli_modSub+0x2c>)
    1970:	19e4      	adds	r4, r4, r7
    1972:	c980      	ldmia	r1!, {r7}
    1974:	cd08      	ldmia	r5!, {r3}
    1976:	1aff      	subs	r7, r7, r3
    1978:	c680      	stmia	r6!, {r7}
    197a:	4720      	bx	r4
    197c:	c980      	ldmia	r1!, {r7}
    197e:	cd08      	ldmia	r5!, {r3}
    1980:	419f      	sbcs	r7, r3
    1982:	c680      	stmia	r6!, {r7}
    1984:	c980      	ldmia	r1!, {r7}
    1986:	cd08      	ldmia	r5!, {r3}
    1988:	419f      	sbcs	r7, r3
    198a:	c680      	stmia	r6!, {r7}
    198c:	c980      	ldmia	r1!, {r7}
    198e:	cd08      	ldmia	r5!, {r3}
    1990:	419f      	sbcs	r7, r3
    1992:	c680      	stmia	r6!, {r7}
    1994:	c980      	ldmia	r1!, {r7}
    1996:	cd08      	ldmia	r5!, {r3}
    1998:	419f      	sbcs	r7, r3
    199a:	c680      	stmia	r6!, {r7}
    199c:	c980      	ldmia	r1!, {r7}
    199e:	cd08      	ldmia	r5!, {r3}
    19a0:	419f      	sbcs	r7, r3
    19a2:	c680      	stmia	r6!, {r7}
    19a4:	c980      	ldmia	r1!, {r7}
    19a6:	cd08      	ldmia	r5!, {r3}
    19a8:	419f      	sbcs	r7, r3
    19aa:	c680      	stmia	r6!, {r7}
    19ac:	c980      	ldmia	r1!, {r7}
    19ae:	cd08      	ldmia	r5!, {r3}
    19b0:	419f      	sbcs	r7, r3
    19b2:	c680      	stmia	r6!, {r7}
    19b4:	4152      	adcs	r2, r2
    if (l_borrow) {
    19b6:	b93a      	cbnz	r2, 19c8 <uECC_vli_modSub+0x78>
        uECC_vli_add(result, result, mod, num_words);
    19b8:	f240 64f1 	movw	r4, #1777	; 0x6f1
    19bc:	4663      	mov	r3, ip
    19be:	4642      	mov	r2, r8
    19c0:	0001      	movs	r1, r0
    19c2:	f2c0 0400 	movt	r4, #0
    19c6:	47a0      	blx	r4
}
    19c8:	bc04      	pop	{r2}
    19ca:	4690      	mov	r8, r2
    19cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ce:	46c0      	nop			; (mov r8, r8)

000019d0 <uECC_vli_modAdd>:
                                  wordcount_t num_words) {
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	46c6      	mov	lr, r8
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    19d4:	2408      	movs	r4, #8
    19d6:	b500      	push	{lr}
    19d8:	469c      	mov	ip, r3
    19da:	ab06      	add	r3, sp, #24
    19dc:	781b      	ldrb	r3, [r3, #0]
    __asm__ volatile (
    19de:	0005      	movs	r5, r0
    19e0:	b25b      	sxtb	r3, r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    19e2:	1ae4      	subs	r4, r4, r3
    19e4:	00e4      	lsls	r4, r4, #3
    19e6:	4698      	mov	r8, r3
    19e8:	3401      	adds	r4, #1
    __asm__ volatile (
    19ea:	2700      	movs	r7, #0
    19ec:	a303      	add	r3, pc, #12	; (adr r3, 19fc <uECC_vli_modAdd+0x2c>)
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	18e4      	adds	r4, r4, r3
    19f2:	c908      	ldmia	r1!, {r3}
    19f4:	ca40      	ldmia	r2!, {r6}
    19f6:	199b      	adds	r3, r3, r6
    19f8:	c508      	stmia	r5!, {r3}
    19fa:	4720      	bx	r4
    19fc:	c908      	ldmia	r1!, {r3}
    19fe:	ca40      	ldmia	r2!, {r6}
    1a00:	4173      	adcs	r3, r6
    1a02:	c508      	stmia	r5!, {r3}
    1a04:	c908      	ldmia	r1!, {r3}
    1a06:	ca40      	ldmia	r2!, {r6}
    1a08:	4173      	adcs	r3, r6
    1a0a:	c508      	stmia	r5!, {r3}
    1a0c:	c908      	ldmia	r1!, {r3}
    1a0e:	ca40      	ldmia	r2!, {r6}
    1a10:	4173      	adcs	r3, r6
    1a12:	c508      	stmia	r5!, {r3}
    1a14:	c908      	ldmia	r1!, {r3}
    1a16:	ca40      	ldmia	r2!, {r6}
    1a18:	4173      	adcs	r3, r6
    1a1a:	c508      	stmia	r5!, {r3}
    1a1c:	c908      	ldmia	r1!, {r3}
    1a1e:	ca40      	ldmia	r2!, {r6}
    1a20:	4173      	adcs	r3, r6
    1a22:	c508      	stmia	r5!, {r3}
    1a24:	c908      	ldmia	r1!, {r3}
    1a26:	ca40      	ldmia	r2!, {r6}
    1a28:	4173      	adcs	r3, r6
    1a2a:	c508      	stmia	r5!, {r3}
    1a2c:	c908      	ldmia	r1!, {r3}
    1a2e:	ca40      	ldmia	r2!, {r6}
    1a30:	4173      	adcs	r3, r6
    1a32:	c508      	stmia	r5!, {r3}
    1a34:	417f      	adcs	r7, r7
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1a36:	b9bf      	cbnz	r7, 1a68 <uECC_vli_modAdd+0x98>
    for (i = num_words - 1; i >= 0; --i) {
    1a38:	4643      	mov	r3, r8
    1a3a:	1e59      	subs	r1, r3, #1
    1a3c:	b249      	sxtb	r1, r1
    1a3e:	2900      	cmp	r1, #0
    1a40:	db12      	blt.n	1a68 <uECC_vli_modAdd+0x98>
        if (left[i] > right[i]) {
    1a42:	4663      	mov	r3, ip
    1a44:	008a      	lsls	r2, r1, #2
    1a46:	589c      	ldr	r4, [r3, r2]
    1a48:	5882      	ldr	r2, [r0, r2]
    1a4a:	4294      	cmp	r4, r2
    1a4c:	d814      	bhi.n	1a78 <uECC_vli_modAdd+0xa8>
        } else if (left[i] < right[i]) {
    1a4e:	d207      	bcs.n	1a60 <uECC_vli_modAdd+0x90>
    1a50:	e00a      	b.n	1a68 <uECC_vli_modAdd+0x98>
        if (left[i] > right[i]) {
    1a52:	4663      	mov	r3, ip
    1a54:	008c      	lsls	r4, r1, #2
    1a56:	591d      	ldr	r5, [r3, r4]
    1a58:	5904      	ldr	r4, [r0, r4]
    1a5a:	42a5      	cmp	r5, r4
    1a5c:	d80c      	bhi.n	1a78 <uECC_vli_modAdd+0xa8>
        } else if (left[i] < right[i]) {
    1a5e:	d303      	bcc.n	1a68 <uECC_vli_modAdd+0x98>
    1a60:	3901      	subs	r1, #1
    1a62:	b249      	sxtb	r1, r1
    for (i = num_words - 1; i >= 0; --i) {
    1a64:	1c4a      	adds	r2, r1, #1
    1a66:	d1f4      	bne.n	1a52 <uECC_vli_modAdd+0x82>
        uECC_vli_sub(result, result, mod, num_words);
    1a68:	f240 7451 	movw	r4, #1873	; 0x751
    1a6c:	4643      	mov	r3, r8
    1a6e:	4662      	mov	r2, ip
    1a70:	0001      	movs	r1, r0
    1a72:	f2c0 0400 	movt	r4, #0
    1a76:	47a0      	blx	r4
}
    1a78:	bc04      	pop	{r2}
    1a7a:	4690      	mov	r8, r2
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a7e:	46c0      	nop			; (mov r8, r8)

00001a80 <vli_mmod_fast_secp160r1>:
static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
    1a80:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a82:	46de      	mov	lr, fp
    1a84:	4657      	mov	r7, sl
    1a86:	464e      	mov	r6, r9
    1a88:	4645      	mov	r5, r8
        vli[i] = 0;
    1a8a:	2300      	movs	r3, #0
    1a8c:	4689      	mov	r9, r1
    1a8e:	f246 6b31 	movw	fp, #26161	; 0x6631
    1a92:	b5e0      	push	{r5, r6, r7, lr}
    1a94:	b093      	sub	sp, #76	; 0x4c
    1a96:	930e      	str	r3, [sp, #56]	; 0x38
    1a98:	930f      	str	r3, [sp, #60]	; 0x3c
    1a9a:	9310      	str	r3, [sp, #64]	; 0x40
    1a9c:	9311      	str	r3, [sp, #68]	; 0x44
    omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
    1a9e:	3314      	adds	r3, #20
    1aa0:	444b      	add	r3, r9
    1aa2:	0019      	movs	r1, r3
static void vli_mmod_fast_secp160r1(uECC_word_t *result, uECC_word_t *product) {
    1aa4:	4680      	mov	r8, r0
    1aa6:	2214      	movs	r2, #20
    1aa8:	a809      	add	r0, sp, #36	; 0x24
    1aaa:	f2c0 0b00 	movt	fp, #0
    omega_mult_secp160r1(tmp, product + num_words_secp160r1); /* (Rq, q) = q * c */
    1aae:	469a      	mov	sl, r3
    1ab0:	47d8      	blx	fp
        uECC_word_t temp = *vli;
    1ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ab4:	2019      	movs	r0, #25
        *vli = (temp >> 1) | carry;
    1ab6:	085a      	lsrs	r2, r3, #1
    1ab8:	920d      	str	r2, [sp, #52]	; 0x34
        uECC_word_t temp = *vli;
    1aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        carry = temp << (uECC_WORD_BITS - 1);
    1abc:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    1abe:	0851      	lsrs	r1, r2, #1
    1ac0:	430b      	orrs	r3, r1
    1ac2:	930c      	str	r3, [sp, #48]	; 0x30
        uECC_word_t temp = *vli;
    1ac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        carry = temp << (uECC_WORD_BITS - 1);
    1ac6:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    1ac8:	0859      	lsrs	r1, r3, #1
    1aca:	430a      	orrs	r2, r1
    1acc:	920b      	str	r2, [sp, #44]	; 0x2c
        uECC_word_t temp = *vli;
    1ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
        carry = temp << (uECC_WORD_BITS - 1);
    1ad0:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    1ad2:	0851      	lsrs	r1, r2, #1
    1ad4:	430b      	orrs	r3, r1
    1ad6:	930a      	str	r3, [sp, #40]	; 0x28
    1ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
        carry = temp << (uECC_WORD_BITS - 1);
    1ada:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    1adc:	085b      	lsrs	r3, r3, #1
    1ade:	4313      	orrs	r3, r2
    1ae0:	9309      	str	r3, [sp, #36]	; 0x24
    result[0] = right[0] << 31; /* get last bit from shift */
    1ae2:	464b      	mov	r3, r9
    1ae4:	695b      	ldr	r3, [r3, #20]
    1ae6:	aa08      	add	r2, sp, #32
    1ae8:	07db      	lsls	r3, r3, #31
    1aea:	9308      	str	r3, [sp, #32]
    1aec:	4651      	mov	r1, sl
    1aee:	0014      	movs	r4, r2
    1af0:	2300      	movs	r3, #0
    1af2:	a506      	add	r5, pc, #24	; (adr r5, 1b0c <vli_mmod_fast_secp160r1+0x8c>)
    1af4:	46c0      	nop			; (mov r8, r8)
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	46c0      	nop			; (mov r8, r8)
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	46c0      	nop			; (mov r8, r8)
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	1940      	adds	r0, r0, r5
    1b02:	cc20      	ldmia	r4!, {r5}
    1b04:	c940      	ldmia	r1!, {r6}
    1b06:	19ad      	adds	r5, r5, r6
    1b08:	c220      	stmia	r2!, {r5}
    1b0a:	4700      	bx	r0
    1b0c:	cc20      	ldmia	r4!, {r5}
    1b0e:	c940      	ldmia	r1!, {r6}
    1b10:	4175      	adcs	r5, r6
    1b12:	c220      	stmia	r2!, {r5}
    1b14:	cc20      	ldmia	r4!, {r5}
    1b16:	c940      	ldmia	r1!, {r6}
    1b18:	4175      	adcs	r5, r6
    1b1a:	c220      	stmia	r2!, {r5}
    1b1c:	cc20      	ldmia	r4!, {r5}
    1b1e:	c940      	ldmia	r1!, {r6}
    1b20:	4175      	adcs	r5, r6
    1b22:	c220      	stmia	r2!, {r5}
    1b24:	cc20      	ldmia	r4!, {r5}
    1b26:	c940      	ldmia	r1!, {r6}
    1b28:	4175      	adcs	r5, r6
    1b2a:	c220      	stmia	r2!, {r5}
    1b2c:	cc20      	ldmia	r4!, {r5}
    1b2e:	c940      	ldmia	r1!, {r6}
    1b30:	4175      	adcs	r5, r6
    1b32:	c220      	stmia	r2!, {r5}
    1b34:	cc20      	ldmia	r4!, {r5}
    1b36:	c940      	ldmia	r1!, {r6}
    1b38:	4175      	adcs	r5, r6
    1b3a:	c220      	stmia	r2!, {r5}
    1b3c:	cc20      	ldmia	r4!, {r5}
    1b3e:	c940      	ldmia	r1!, {r6}
    1b40:	4175      	adcs	r5, r6
    1b42:	c220      	stmia	r2!, {r5}
    1b44:	415b      	adcs	r3, r3
    1b46:	a908      	add	r1, sp, #32
    for (i = num_words_secp160r1; carry; ++i) {
    1b48:	b15b      	cbz	r3, 1b62 <vli_mmod_fast_secp160r1+0xe2>
        uint64_t sum = (uint64_t)result[i] + carry;
    1b4a:	2700      	movs	r7, #0
    1b4c:	694e      	ldr	r6, [r1, #20]
    1b4e:	001c      	movs	r4, r3
    1b50:	2500      	movs	r5, #0
    1b52:	0032      	movs	r2, r6
    1b54:	003b      	movs	r3, r7
    1b56:	1912      	adds	r2, r2, r4
    1b58:	416b      	adcs	r3, r5
    1b5a:	3104      	adds	r1, #4
        result[i] = (uint32_t)sum;
    1b5c:	610a      	str	r2, [r1, #16]
    for (i = num_words_secp160r1; carry; ++i) {
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d1f3      	bne.n	1b4a <vli_mmod_fast_secp160r1+0xca>
    1b62:	4642      	mov	r2, r8
    1b64:	4649      	mov	r1, r9
    1b66:	ab08      	add	r3, sp, #32
    1b68:	2019      	movs	r0, #25
    1b6a:	2400      	movs	r4, #0
    1b6c:	a503      	add	r5, pc, #12	; (adr r5, 1b7c <vli_mmod_fast_secp160r1+0xfc>)
    1b6e:	46c0      	nop			; (mov r8, r8)
    1b70:	1940      	adds	r0, r0, r5
    1b72:	c920      	ldmia	r1!, {r5}
    1b74:	cb40      	ldmia	r3!, {r6}
    1b76:	19ad      	adds	r5, r5, r6
    1b78:	c220      	stmia	r2!, {r5}
    1b7a:	4700      	bx	r0
    1b7c:	c920      	ldmia	r1!, {r5}
    1b7e:	cb40      	ldmia	r3!, {r6}
    1b80:	4175      	adcs	r5, r6
    1b82:	c220      	stmia	r2!, {r5}
    1b84:	c920      	ldmia	r1!, {r5}
    1b86:	cb40      	ldmia	r3!, {r6}
    1b88:	4175      	adcs	r5, r6
    1b8a:	c220      	stmia	r2!, {r5}
    1b8c:	c920      	ldmia	r1!, {r5}
    1b8e:	cb40      	ldmia	r3!, {r6}
    1b90:	4175      	adcs	r5, r6
    1b92:	c220      	stmia	r2!, {r5}
    1b94:	c920      	ldmia	r1!, {r5}
    1b96:	cb40      	ldmia	r3!, {r6}
    1b98:	4175      	adcs	r5, r6
    1b9a:	c220      	stmia	r2!, {r5}
    1b9c:	c920      	ldmia	r1!, {r5}
    1b9e:	cb40      	ldmia	r3!, {r6}
    1ba0:	4175      	adcs	r5, r6
    1ba2:	c220      	stmia	r2!, {r5}
    1ba4:	c920      	ldmia	r1!, {r5}
    1ba6:	cb40      	ldmia	r3!, {r6}
    1ba8:	4175      	adcs	r5, r6
    1baa:	c220      	stmia	r2!, {r5}
    1bac:	c920      	ldmia	r1!, {r5}
    1bae:	cb40      	ldmia	r3!, {r6}
    1bb0:	4175      	adcs	r5, r6
    1bb2:	c220      	stmia	r2!, {r5}
    1bb4:	4164      	adcs	r4, r4
    1bb6:	f246 6367 	movw	r3, #26215	; 0x6667
    1bba:	2214      	movs	r2, #20
    1bbc:	2100      	movs	r1, #0
    1bbe:	f2c0 0300 	movt	r3, #0
    1bc2:	4648      	mov	r0, r9
    1bc4:	4798      	blx	r3
    uECC_vli_set(result + 1, right, num_words_secp160r1); /* 2^32 */
    1bc6:	464b      	mov	r3, r9
    1bc8:	1d1d      	adds	r5, r3, #4
    1bca:	2214      	movs	r2, #20
    1bcc:	a90d      	add	r1, sp, #52	; 0x34
    1bce:	0028      	movs	r0, r5
    1bd0:	47d8      	blx	fp
    while (vli-- > end) {
    1bd2:	4649      	mov	r1, r9
    1bd4:	2300      	movs	r3, #0
    1bd6:	3118      	adds	r1, #24
    1bd8:	4652      	mov	r2, sl
    1bda:	0018      	movs	r0, r3
    1bdc:	428d      	cmp	r5, r1
    1bde:	d301      	bcc.n	1be4 <vli_mmod_fast_secp160r1+0x164>
    1be0:	e008      	b.n	1bf4 <vli_mmod_fast_secp160r1+0x174>
    1be2:	001a      	movs	r2, r3
        uECC_word_t temp = *vli;
    1be4:	6811      	ldr	r1, [r2, #0]
        *vli = (temp >> 1) | carry;
    1be6:	084b      	lsrs	r3, r1, #1
    1be8:	4303      	orrs	r3, r0
    1bea:	6013      	str	r3, [r2, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    1bec:	07c8      	lsls	r0, r1, #31
    while (vli-- > end) {
    1bee:	1f13      	subs	r3, r2, #4
    1bf0:	4295      	cmp	r5, r2
    1bf2:	d3f6      	bcc.n	1be2 <vli_mmod_fast_secp160r1+0x162>
    result[0] = right[0] << 31; /* get last bit from shift */
    1bf4:	464a      	mov	r2, r9
    1bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bf8:	a90d      	add	r1, sp, #52	; 0x34
    1bfa:	07db      	lsls	r3, r3, #31
    1bfc:	6013      	str	r3, [r2, #0]
    1bfe:	2019      	movs	r0, #25
    1c00:	464d      	mov	r5, r9
    1c02:	2300      	movs	r3, #0
    1c04:	a605      	add	r6, pc, #20	; (adr r6, 1c1c <vli_mmod_fast_secp160r1+0x19c>)
    1c06:	46c0      	nop			; (mov r8, r8)
    1c08:	46c0      	nop			; (mov r8, r8)
    1c0a:	46c0      	nop			; (mov r8, r8)
    1c0c:	46c0      	nop			; (mov r8, r8)
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	1980      	adds	r0, r0, r6
    1c12:	cd40      	ldmia	r5!, {r6}
    1c14:	c980      	ldmia	r1!, {r7}
    1c16:	19f6      	adds	r6, r6, r7
    1c18:	c240      	stmia	r2!, {r6}
    1c1a:	4700      	bx	r0
    1c1c:	cd40      	ldmia	r5!, {r6}
    1c1e:	c980      	ldmia	r1!, {r7}
    1c20:	417e      	adcs	r6, r7
    1c22:	c240      	stmia	r2!, {r6}
    1c24:	cd40      	ldmia	r5!, {r6}
    1c26:	c980      	ldmia	r1!, {r7}
    1c28:	417e      	adcs	r6, r7
    1c2a:	c240      	stmia	r2!, {r6}
    1c2c:	cd40      	ldmia	r5!, {r6}
    1c2e:	c980      	ldmia	r1!, {r7}
    1c30:	417e      	adcs	r6, r7
    1c32:	c240      	stmia	r2!, {r6}
    1c34:	cd40      	ldmia	r5!, {r6}
    1c36:	c980      	ldmia	r1!, {r7}
    1c38:	417e      	adcs	r6, r7
    1c3a:	c240      	stmia	r2!, {r6}
    1c3c:	cd40      	ldmia	r5!, {r6}
    1c3e:	c980      	ldmia	r1!, {r7}
    1c40:	417e      	adcs	r6, r7
    1c42:	c240      	stmia	r2!, {r6}
    1c44:	cd40      	ldmia	r5!, {r6}
    1c46:	c980      	ldmia	r1!, {r7}
    1c48:	417e      	adcs	r6, r7
    1c4a:	c240      	stmia	r2!, {r6}
    1c4c:	cd40      	ldmia	r5!, {r6}
    1c4e:	c980      	ldmia	r1!, {r7}
    1c50:	417e      	adcs	r6, r7
    1c52:	c240      	stmia	r2!, {r6}
    1c54:	415b      	adcs	r3, r3
    1c56:	4655      	mov	r5, sl
    1c58:	001e      	movs	r6, r3
    for (i = num_words_secp160r1; carry; ++i) {
    1c5a:	b15b      	cbz	r3, 1c74 <vli_mmod_fast_secp160r1+0x1f4>
        uint64_t sum = (uint64_t)result[i] + carry;
    1c5c:	2300      	movs	r3, #0
    1c5e:	682a      	ldr	r2, [r5, #0]
    1c60:	0030      	movs	r0, r6
    1c62:	2100      	movs	r1, #0
    1c64:	0016      	movs	r6, r2
    1c66:	001f      	movs	r7, r3
    1c68:	1836      	adds	r6, r6, r0
    1c6a:	414f      	adcs	r7, r1
        result[i] = (uint32_t)sum;
    1c6c:	c540      	stmia	r5!, {r6}
        carry = sum >> 32;
    1c6e:	003e      	movs	r6, r7
    for (i = num_words_secp160r1; carry; ++i) {
    1c70:	2f00      	cmp	r7, #0
    1c72:	d1f3      	bne.n	1c5c <vli_mmod_fast_secp160r1+0x1dc>
    1c74:	4643      	mov	r3, r8
    1c76:	464a      	mov	r2, r9
    1c78:	2119      	movs	r1, #25
    1c7a:	4645      	mov	r5, r8
    1c7c:	2000      	movs	r0, #0
    1c7e:	a603      	add	r6, pc, #12	; (adr r6, 1c8c <vli_mmod_fast_secp160r1+0x20c>)
    1c80:	1989      	adds	r1, r1, r6
    1c82:	cd40      	ldmia	r5!, {r6}
    1c84:	ca80      	ldmia	r2!, {r7}
    1c86:	19f6      	adds	r6, r6, r7
    1c88:	c340      	stmia	r3!, {r6}
    1c8a:	4708      	bx	r1
    1c8c:	cd40      	ldmia	r5!, {r6}
    1c8e:	ca80      	ldmia	r2!, {r7}
    1c90:	417e      	adcs	r6, r7
    1c92:	c340      	stmia	r3!, {r6}
    1c94:	cd40      	ldmia	r5!, {r6}
    1c96:	ca80      	ldmia	r2!, {r7}
    1c98:	417e      	adcs	r6, r7
    1c9a:	c340      	stmia	r3!, {r6}
    1c9c:	cd40      	ldmia	r5!, {r6}
    1c9e:	ca80      	ldmia	r2!, {r7}
    1ca0:	417e      	adcs	r6, r7
    1ca2:	c340      	stmia	r3!, {r6}
    1ca4:	cd40      	ldmia	r5!, {r6}
    1ca6:	ca80      	ldmia	r2!, {r7}
    1ca8:	417e      	adcs	r6, r7
    1caa:	c340      	stmia	r3!, {r6}
    1cac:	cd40      	ldmia	r5!, {r6}
    1cae:	ca80      	ldmia	r2!, {r7}
    1cb0:	417e      	adcs	r6, r7
    1cb2:	c340      	stmia	r3!, {r6}
    1cb4:	cd40      	ldmia	r5!, {r6}
    1cb6:	ca80      	ldmia	r2!, {r7}
    1cb8:	417e      	adcs	r6, r7
    1cba:	c340      	stmia	r3!, {r6}
    1cbc:	cd40      	ldmia	r5!, {r6}
    1cbe:	ca80      	ldmia	r2!, {r7}
    1cc0:	417e      	adcs	r6, r7
    1cc2:	c340      	stmia	r3!, {r6}
    1cc4:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, product, num_words_secp160r1); /* (C1, r) = r + Rq*c */
    1cc6:	1824      	adds	r4, r4, r0
    while (carry > 0) {
    1cc8:	2c00      	cmp	r4, #0
    1cca:	d037      	beq.n	1d3c <vli_mmod_fast_secp160r1+0x2bc>
    1ccc:	f646 104c 	movw	r0, #26956	; 0x694c
    __asm__ volatile (
    1cd0:	f240 0938 	movw	r9, #56	; 0x38
    1cd4:	f240 0a19 	movw	sl, #25
    1cd8:	46c4      	mov	ip, r8
    1cda:	f2c0 0000 	movt	r0, #0
    1cde:	4481      	add	r9, r0
        --carry;
    1ce0:	3c01      	subs	r4, #1
    1ce2:	4663      	mov	r3, ip
    1ce4:	464a      	mov	r2, r9
    1ce6:	4651      	mov	r1, sl
    1ce8:	4667      	mov	r7, ip
    1cea:	2000      	movs	r0, #0
    1cec:	a503      	add	r5, pc, #12	; (adr r5, 1cfc <vli_mmod_fast_secp160r1+0x27c>)
    1cee:	46c0      	nop			; (mov r8, r8)
    1cf0:	1949      	adds	r1, r1, r5
    1cf2:	cf20      	ldmia	r7!, {r5}
    1cf4:	ca40      	ldmia	r2!, {r6}
    1cf6:	1bad      	subs	r5, r5, r6
    1cf8:	c320      	stmia	r3!, {r5}
    1cfa:	4708      	bx	r1
    1cfc:	cf20      	ldmia	r7!, {r5}
    1cfe:	ca40      	ldmia	r2!, {r6}
    1d00:	41b5      	sbcs	r5, r6
    1d02:	c320      	stmia	r3!, {r5}
    1d04:	cf20      	ldmia	r7!, {r5}
    1d06:	ca40      	ldmia	r2!, {r6}
    1d08:	41b5      	sbcs	r5, r6
    1d0a:	c320      	stmia	r3!, {r5}
    1d0c:	cf20      	ldmia	r7!, {r5}
    1d0e:	ca40      	ldmia	r2!, {r6}
    1d10:	41b5      	sbcs	r5, r6
    1d12:	c320      	stmia	r3!, {r5}
    1d14:	cf20      	ldmia	r7!, {r5}
    1d16:	ca40      	ldmia	r2!, {r6}
    1d18:	41b5      	sbcs	r5, r6
    1d1a:	c320      	stmia	r3!, {r5}
    1d1c:	cf20      	ldmia	r7!, {r5}
    1d1e:	ca40      	ldmia	r2!, {r6}
    1d20:	41b5      	sbcs	r5, r6
    1d22:	c320      	stmia	r3!, {r5}
    1d24:	cf20      	ldmia	r7!, {r5}
    1d26:	ca40      	ldmia	r2!, {r6}
    1d28:	41b5      	sbcs	r5, r6
    1d2a:	c320      	stmia	r3!, {r5}
    1d2c:	cf20      	ldmia	r7!, {r5}
    1d2e:	ca40      	ldmia	r2!, {r6}
    1d30:	41b5      	sbcs	r5, r6
    1d32:	c320      	stmia	r3!, {r5}
    1d34:	4140      	adcs	r0, r0
    while (carry > 0) {
    1d36:	2c00      	cmp	r4, #0
    1d38:	d1d2      	bne.n	1ce0 <vli_mmod_fast_secp160r1+0x260>
    1d3a:	46e0      	mov	r8, ip
        } else if (left[i] < right[i]) {
    1d3c:	4643      	mov	r3, r8
    1d3e:	691b      	ldr	r3, [r3, #16]
    1d40:	3301      	adds	r3, #1
    1d42:	d140      	bne.n	1dc6 <vli_mmod_fast_secp160r1+0x346>
    1d44:	4643      	mov	r3, r8
    1d46:	68db      	ldr	r3, [r3, #12]
    1d48:	3301      	adds	r3, #1
    1d4a:	d13c      	bne.n	1dc6 <vli_mmod_fast_secp160r1+0x346>
    1d4c:	4643      	mov	r3, r8
    1d4e:	689b      	ldr	r3, [r3, #8]
    1d50:	3301      	adds	r3, #1
    1d52:	d138      	bne.n	1dc6 <vli_mmod_fast_secp160r1+0x346>
    1d54:	4643      	mov	r3, r8
    1d56:	685b      	ldr	r3, [r3, #4]
    1d58:	3301      	adds	r3, #1
    1d5a:	d134      	bne.n	1dc6 <vli_mmod_fast_secp160r1+0x346>
        if (left[i] > right[i]) {
    1d5c:	4643      	mov	r3, r8
    1d5e:	681b      	ldr	r3, [r3, #0]
    1d60:	2b00      	cmp	r3, #0
    1d62:	da30      	bge.n	1dc6 <vli_mmod_fast_secp160r1+0x346>
    1d64:	f646 124c 	movw	r2, #26956	; 0x694c
    1d68:	f2c0 0200 	movt	r2, #0
    1d6c:	3238      	adds	r2, #56	; 0x38
    1d6e:	4643      	mov	r3, r8
    1d70:	2119      	movs	r1, #25
    1d72:	4640      	mov	r0, r8
    1d74:	2400      	movs	r4, #0
    1d76:	a505      	add	r5, pc, #20	; (adr r5, 1d8c <vli_mmod_fast_secp160r1+0x30c>)
    1d78:	46c0      	nop			; (mov r8, r8)
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	46c0      	nop			; (mov r8, r8)
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	1949      	adds	r1, r1, r5
    1d82:	c820      	ldmia	r0!, {r5}
    1d84:	ca40      	ldmia	r2!, {r6}
    1d86:	1bad      	subs	r5, r5, r6
    1d88:	c320      	stmia	r3!, {r5}
    1d8a:	4708      	bx	r1
    1d8c:	c820      	ldmia	r0!, {r5}
    1d8e:	ca40      	ldmia	r2!, {r6}
    1d90:	41b5      	sbcs	r5, r6
    1d92:	c320      	stmia	r3!, {r5}
    1d94:	c820      	ldmia	r0!, {r5}
    1d96:	ca40      	ldmia	r2!, {r6}
    1d98:	41b5      	sbcs	r5, r6
    1d9a:	c320      	stmia	r3!, {r5}
    1d9c:	c820      	ldmia	r0!, {r5}
    1d9e:	ca40      	ldmia	r2!, {r6}
    1da0:	41b5      	sbcs	r5, r6
    1da2:	c320      	stmia	r3!, {r5}
    1da4:	c820      	ldmia	r0!, {r5}
    1da6:	ca40      	ldmia	r2!, {r6}
    1da8:	41b5      	sbcs	r5, r6
    1daa:	c320      	stmia	r3!, {r5}
    1dac:	c820      	ldmia	r0!, {r5}
    1dae:	ca40      	ldmia	r2!, {r6}
    1db0:	41b5      	sbcs	r5, r6
    1db2:	c320      	stmia	r3!, {r5}
    1db4:	c820      	ldmia	r0!, {r5}
    1db6:	ca40      	ldmia	r2!, {r6}
    1db8:	41b5      	sbcs	r5, r6
    1dba:	c320      	stmia	r3!, {r5}
    1dbc:	c820      	ldmia	r0!, {r5}
    1dbe:	ca40      	ldmia	r2!, {r6}
    1dc0:	41b5      	sbcs	r5, r6
    1dc2:	c320      	stmia	r3!, {r5}
    1dc4:	4164      	adcs	r4, r4
}
    1dc6:	b013      	add	sp, #76	; 0x4c
    1dc8:	bc3c      	pop	{r2, r3, r4, r5}
    1dca:	4690      	mov	r8, r2
    1dcc:	4699      	mov	r9, r3
    1dce:	46a2      	mov	sl, r4
    1dd0:	46ab      	mov	fp, r5
    1dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00001de0 <x_side_default>:
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1de2:	46de      	mov	lr, fp
    1de4:	4645      	mov	r5, r8
    1de6:	4657      	mov	r7, sl
    1de8:	464e      	mov	r6, r9
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
    1dea:	f246 6367 	movw	r3, #26215	; 0x6667
static void x_side_default(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1dee:	b5e0      	push	{r5, r6, r7, lr}
    1df0:	b09d      	sub	sp, #116	; 0x74
    1df2:	0004      	movs	r4, r0
    1df4:	4690      	mov	r8, r2
    1df6:	468a      	mov	sl, r1
    uECC_word_t _3[uECC_MAX_WORDS] = {3}; /* -a = 3 */
    1df8:	2220      	movs	r2, #32
    1dfa:	2100      	movs	r1, #0
    1dfc:	f2c0 0300 	movt	r3, #0
    1e00:	a804      	add	r0, sp, #16
    1e02:	4798      	blx	r3
    1e04:	2303      	movs	r3, #3
    1e06:	9304      	str	r3, [sp, #16]
    wordcount_t num_words = curve->num_words;
    1e08:	4643      	mov	r3, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    1e0a:	f240 79ad 	movw	r9, #1965	; 0x7ad
    1e0e:	781b      	ldrb	r3, [r3, #0]
    1e10:	4652      	mov	r2, sl
    1e12:	b25b      	sxtb	r3, r3
    1e14:	4651      	mov	r1, sl
    1e16:	a80c      	add	r0, sp, #48	; 0x30
    1e18:	f2c0 0900 	movt	r9, #0
    1e1c:	001d      	movs	r5, r3
    1e1e:	9302      	str	r3, [sp, #8]
    1e20:	47c8      	blx	r9
    curve->mmod_fast(result, product);
    1e22:	4642      	mov	r2, r8
    1e24:	23b0      	movs	r3, #176	; 0xb0
    1e26:	a90c      	add	r1, sp, #48	; 0x30
    1e28:	58d3      	ldr	r3, [r2, r3]
    1e2a:	0020      	movs	r0, r4
    1e2c:	4798      	blx	r3
    uECC_vli_modSub(result, result, _3, curve->p, num_words);       /* r = x^2 - 3 */
    1e2e:	4643      	mov	r3, r8
    1e30:	1d1a      	adds	r2, r3, #4
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    1e32:	002b      	movs	r3, r5
    1e34:	f240 7551 	movw	r5, #1873	; 0x751
    1e38:	9201      	str	r2, [sp, #4]
    1e3a:	f2c0 0500 	movt	r5, #0
    1e3e:	aa04      	add	r2, sp, #16
    1e40:	0021      	movs	r1, r4
    1e42:	0020      	movs	r0, r4
    1e44:	9503      	str	r5, [sp, #12]
    1e46:	47a8      	blx	r5
    if (l_borrow) {
    1e48:	b140      	cbz	r0, 1e5c <x_side_default+0x7c>
        uECC_vli_add(result, result, mod, num_words);
    1e4a:	f240 6bf1 	movw	fp, #1777	; 0x6f1
    1e4e:	9b02      	ldr	r3, [sp, #8]
    1e50:	9a01      	ldr	r2, [sp, #4]
    1e52:	0021      	movs	r1, r4
    1e54:	0020      	movs	r0, r4
    1e56:	f2c0 0b00 	movt	fp, #0
    1e5a:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
    1e5c:	4643      	mov	r3, r8
    1e5e:	781b      	ldrb	r3, [r3, #0]
    1e60:	4652      	mov	r2, sl
    1e62:	0021      	movs	r1, r4
    1e64:	a80c      	add	r0, sp, #48	; 0x30
    1e66:	b25b      	sxtb	r3, r3
    1e68:	47c8      	blx	r9
    curve->mmod_fast(result, product);
    1e6a:	4642      	mov	r2, r8
    1e6c:	23b0      	movs	r3, #176	; 0xb0
    1e6e:	a90c      	add	r1, sp, #48	; 0x30
    1e70:	58d3      	ldr	r3, [r2, r3]
    1e72:	0020      	movs	r0, r4
    1e74:	4798      	blx	r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1e76:	2308      	movs	r3, #8
    1e78:	9a02      	ldr	r2, [sp, #8]
    __asm__ volatile (
    1e7a:	0021      	movs	r1, r4
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    1e7c:	1a9b      	subs	r3, r3, r2
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words); /* r = x^3 - 3x + b */
    1e7e:	4642      	mov	r2, r8
    1e80:	00db      	lsls	r3, r3, #3
    1e82:	3301      	adds	r3, #1
    1e84:	3284      	adds	r2, #132	; 0x84
    __asm__ volatile (
    1e86:	0027      	movs	r7, r4
    1e88:	2000      	movs	r0, #0
    1e8a:	a604      	add	r6, pc, #16	; (adr r6, 1e9c <x_side_default+0xbc>)
    1e8c:	46c0      	nop			; (mov r8, r8)
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	199b      	adds	r3, r3, r6
    1e92:	cf40      	ldmia	r7!, {r6}
    1e94:	ca20      	ldmia	r2!, {r5}
    1e96:	1976      	adds	r6, r6, r5
    1e98:	c140      	stmia	r1!, {r6}
    1e9a:	4718      	bx	r3
    1e9c:	cf40      	ldmia	r7!, {r6}
    1e9e:	ca20      	ldmia	r2!, {r5}
    1ea0:	416e      	adcs	r6, r5
    1ea2:	c140      	stmia	r1!, {r6}
    1ea4:	cf40      	ldmia	r7!, {r6}
    1ea6:	ca20      	ldmia	r2!, {r5}
    1ea8:	416e      	adcs	r6, r5
    1eaa:	c140      	stmia	r1!, {r6}
    1eac:	cf40      	ldmia	r7!, {r6}
    1eae:	ca20      	ldmia	r2!, {r5}
    1eb0:	416e      	adcs	r6, r5
    1eb2:	c140      	stmia	r1!, {r6}
    1eb4:	cf40      	ldmia	r7!, {r6}
    1eb6:	ca20      	ldmia	r2!, {r5}
    1eb8:	416e      	adcs	r6, r5
    1eba:	c140      	stmia	r1!, {r6}
    1ebc:	cf40      	ldmia	r7!, {r6}
    1ebe:	ca20      	ldmia	r2!, {r5}
    1ec0:	416e      	adcs	r6, r5
    1ec2:	c140      	stmia	r1!, {r6}
    1ec4:	cf40      	ldmia	r7!, {r6}
    1ec6:	ca20      	ldmia	r2!, {r5}
    1ec8:	416e      	adcs	r6, r5
    1eca:	c140      	stmia	r1!, {r6}
    1ecc:	cf40      	ldmia	r7!, {r6}
    1ece:	ca20      	ldmia	r2!, {r5}
    1ed0:	416e      	adcs	r6, r5
    1ed2:	c140      	stmia	r1!, {r6}
    1ed4:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1ed6:	b9c0      	cbnz	r0, 1f0a <x_side_default+0x12a>
    for (i = num_words - 1; i >= 0; --i) {
    1ed8:	9b02      	ldr	r3, [sp, #8]
    1eda:	3b01      	subs	r3, #1
    1edc:	b25b      	sxtb	r3, r3
    1ede:	2b00      	cmp	r3, #0
    1ee0:	da06      	bge.n	1ef0 <x_side_default+0x110>
    1ee2:	e012      	b.n	1f0a <x_side_default+0x12a>
        } else if (left[i] < right[i]) {
    1ee4:	4291      	cmp	r1, r2
    1ee6:	d310      	bcc.n	1f0a <x_side_default+0x12a>
    1ee8:	3b01      	subs	r3, #1
    1eea:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    1eec:	1c5a      	adds	r2, r3, #1
    1eee:	d00c      	beq.n	1f0a <x_side_default+0x12a>
        if (left[i] > right[i]) {
    1ef0:	9901      	ldr	r1, [sp, #4]
    1ef2:	009a      	lsls	r2, r3, #2
    1ef4:	5889      	ldr	r1, [r1, r2]
    1ef6:	58a2      	ldr	r2, [r4, r2]
    1ef8:	4291      	cmp	r1, r2
    1efa:	d9f3      	bls.n	1ee4 <x_side_default+0x104>
}
    1efc:	b01d      	add	sp, #116	; 0x74
    1efe:	bc3c      	pop	{r2, r3, r4, r5}
    1f00:	4690      	mov	r8, r2
    1f02:	4699      	mov	r9, r3
    1f04:	46a2      	mov	sl, r4
    1f06:	46ab      	mov	fp, r5
    1f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uECC_vli_sub(result, result, mod, num_words);
    1f0a:	0021      	movs	r1, r4
    1f0c:	9b02      	ldr	r3, [sp, #8]
    1f0e:	9a01      	ldr	r2, [sp, #4]
    1f10:	0020      	movs	r0, r4
    1f12:	9c03      	ldr	r4, [sp, #12]
    1f14:	47a0      	blx	r4
    1f16:	e7f1      	b.n	1efc <x_side_default+0x11c>
	...

00001f20 <x_side_secp256k1>:
    uECC_vli_modMult_fast(Y1, Y1, t4, curve);                   /* t2 = B * (A - x3) */
    uECC_vli_modSub(Y1, Y1, t5, curve->p, num_words_secp256k1); /* t2 = B * (A - x3) - y1^4 = y3 */
}

/* Computes result = x^3 + b. result must not overlap x. */
static void x_side_secp256k1(uECC_word_t *result, const uECC_word_t *x, uECC_Curve curve) {
    1f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f22:	46ce      	mov	lr, r9
    1f24:	4647      	mov	r7, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    1f26:	2300      	movs	r3, #0
    1f28:	f240 76ad 	movw	r6, #1965	; 0x7ad
    curve->mmod_fast(result, product);
    1f2c:	f240 08b0 	movw	r8, #176	; 0xb0
    1f30:	b580      	push	{r7, lr}
    1f32:	b091      	sub	sp, #68	; 0x44
    1f34:	4681      	mov	r9, r0
    1f36:	0015      	movs	r5, r2
    uECC_vli_mult(product, left, right, curve->num_words);
    1f38:	56d3      	ldrsb	r3, [r2, r3]
    1f3a:	4668      	mov	r0, sp
    1f3c:	000a      	movs	r2, r1
    1f3e:	f2c0 0600 	movt	r6, #0
    1f42:	000f      	movs	r7, r1
    1f44:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    1f46:	4643      	mov	r3, r8
    1f48:	4669      	mov	r1, sp
    1f4a:	4648      	mov	r0, r9
    1f4c:	58eb      	ldr	r3, [r5, r3]
    1f4e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    1f50:	2300      	movs	r3, #0
    1f52:	003a      	movs	r2, r7
    1f54:	56eb      	ldrsb	r3, [r5, r3]
    1f56:	4649      	mov	r1, r9
    1f58:	4668      	mov	r0, sp
    1f5a:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    1f5c:	4643      	mov	r3, r8
    1f5e:	4648      	mov	r0, r9
    1f60:	58eb      	ldr	r3, [r5, r3]
    1f62:	4669      	mov	r1, sp
    1f64:	4798      	blx	r3
    uECC_vli_modSquare_fast(result, x, curve);                                /* r = x^2 */
    uECC_vli_modMult_fast(result, result, x, curve);                          /* r = x^3 */
    uECC_vli_modAdd(result, result, curve->b, curve->p, num_words_secp256k1); /* r = x^3 + b */
    1f66:	002a      	movs	r2, r5
    1f68:	1d2b      	adds	r3, r5, #4
    1f6a:	469c      	mov	ip, r3
    1f6c:	3284      	adds	r2, #132	; 0x84
    1f6e:	464b      	mov	r3, r9
    1f70:	2001      	movs	r0, #1
    1f72:	464f      	mov	r7, r9
    1f74:	2600      	movs	r6, #0
    1f76:	a105      	add	r1, pc, #20	; (adr r1, 1f8c <x_side_secp256k1+0x6c>)
    1f78:	46c0      	nop			; (mov r8, r8)
    1f7a:	46c0      	nop			; (mov r8, r8)
    1f7c:	46c0      	nop			; (mov r8, r8)
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	1840      	adds	r0, r0, r1
    1f82:	cf02      	ldmia	r7!, {r1}
    1f84:	ca10      	ldmia	r2!, {r4}
    1f86:	1909      	adds	r1, r1, r4
    1f88:	c302      	stmia	r3!, {r1}
    1f8a:	4700      	bx	r0
    1f8c:	cf02      	ldmia	r7!, {r1}
    1f8e:	ca10      	ldmia	r2!, {r4}
    1f90:	4161      	adcs	r1, r4
    1f92:	c302      	stmia	r3!, {r1}
    1f94:	cf02      	ldmia	r7!, {r1}
    1f96:	ca10      	ldmia	r2!, {r4}
    1f98:	4161      	adcs	r1, r4
    1f9a:	c302      	stmia	r3!, {r1}
    1f9c:	cf02      	ldmia	r7!, {r1}
    1f9e:	ca10      	ldmia	r2!, {r4}
    1fa0:	4161      	adcs	r1, r4
    1fa2:	c302      	stmia	r3!, {r1}
    1fa4:	cf02      	ldmia	r7!, {r1}
    1fa6:	ca10      	ldmia	r2!, {r4}
    1fa8:	4161      	adcs	r1, r4
    1faa:	c302      	stmia	r3!, {r1}
    1fac:	cf02      	ldmia	r7!, {r1}
    1fae:	ca10      	ldmia	r2!, {r4}
    1fb0:	4161      	adcs	r1, r4
    1fb2:	c302      	stmia	r3!, {r1}
    1fb4:	cf02      	ldmia	r7!, {r1}
    1fb6:	ca10      	ldmia	r2!, {r4}
    1fb8:	4161      	adcs	r1, r4
    1fba:	c302      	stmia	r3!, {r1}
    1fbc:	cf02      	ldmia	r7!, {r1}
    1fbe:	ca10      	ldmia	r2!, {r4}
    1fc0:	4161      	adcs	r1, r4
    1fc2:	c302      	stmia	r3!, {r1}
    1fc4:	4176      	adcs	r6, r6
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    1fc6:	bb86      	cbnz	r6, 202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    1fc8:	464a      	mov	r2, r9
    1fca:	6a2b      	ldr	r3, [r5, #32]
    1fcc:	69d2      	ldr	r2, [r2, #28]
    1fce:	429a      	cmp	r2, r3
    1fd0:	d200      	bcs.n	1fd4 <x_side_secp256k1+0xb4>
    1fd2:	e058      	b.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    1fd4:	d829      	bhi.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    1fd6:	464b      	mov	r3, r9
    1fd8:	69ea      	ldr	r2, [r5, #28]
    1fda:	699b      	ldr	r3, [r3, #24]
    1fdc:	429a      	cmp	r2, r3
    1fde:	d900      	bls.n	1fe2 <x_side_secp256k1+0xc2>
    1fe0:	e051      	b.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    1fe2:	d322      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    1fe4:	464b      	mov	r3, r9
    1fe6:	69aa      	ldr	r2, [r5, #24]
    1fe8:	695b      	ldr	r3, [r3, #20]
    1fea:	429a      	cmp	r2, r3
    1fec:	d84b      	bhi.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    1fee:	d31c      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    1ff0:	464b      	mov	r3, r9
    1ff2:	696a      	ldr	r2, [r5, #20]
    1ff4:	691b      	ldr	r3, [r3, #16]
    1ff6:	429a      	cmp	r2, r3
    1ff8:	d845      	bhi.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    1ffa:	d316      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    1ffc:	464b      	mov	r3, r9
    1ffe:	692a      	ldr	r2, [r5, #16]
    2000:	68db      	ldr	r3, [r3, #12]
    2002:	429a      	cmp	r2, r3
    2004:	d83f      	bhi.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2006:	d310      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2008:	464b      	mov	r3, r9
    200a:	68ea      	ldr	r2, [r5, #12]
    200c:	689b      	ldr	r3, [r3, #8]
    200e:	429a      	cmp	r2, r3
    2010:	d839      	bhi.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    2012:	d30a      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2014:	464b      	mov	r3, r9
    2016:	68aa      	ldr	r2, [r5, #8]
    2018:	685b      	ldr	r3, [r3, #4]
    201a:	429a      	cmp	r2, r3
    201c:	d833      	bhi.n	2086 <x_side_secp256k1+0x166>
        } else if (left[i] < right[i]) {
    201e:	d304      	bcc.n	202a <x_side_secp256k1+0x10a>
        if (left[i] > right[i]) {
    2020:	464a      	mov	r2, r9
    2022:	686b      	ldr	r3, [r5, #4]
    2024:	6812      	ldr	r2, [r2, #0]
    2026:	4293      	cmp	r3, r2
    2028:	d82d      	bhi.n	2086 <x_side_secp256k1+0x166>
    __asm__ volatile (
    202a:	4648      	mov	r0, r9
    202c:	4663      	mov	r3, ip
    202e:	2201      	movs	r2, #1
    2030:	4649      	mov	r1, r9
    2032:	2400      	movs	r4, #0
    2034:	a505      	add	r5, pc, #20	; (adr r5, 204c <x_side_secp256k1+0x12c>)
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	46c0      	nop			; (mov r8, r8)
    203a:	46c0      	nop			; (mov r8, r8)
    203c:	46c0      	nop			; (mov r8, r8)
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	1952      	adds	r2, r2, r5
    2042:	c920      	ldmia	r1!, {r5}
    2044:	cb40      	ldmia	r3!, {r6}
    2046:	1bad      	subs	r5, r5, r6
    2048:	c020      	stmia	r0!, {r5}
    204a:	4710      	bx	r2
    204c:	c920      	ldmia	r1!, {r5}
    204e:	cb40      	ldmia	r3!, {r6}
    2050:	41b5      	sbcs	r5, r6
    2052:	c020      	stmia	r0!, {r5}
    2054:	c920      	ldmia	r1!, {r5}
    2056:	cb40      	ldmia	r3!, {r6}
    2058:	41b5      	sbcs	r5, r6
    205a:	c020      	stmia	r0!, {r5}
    205c:	c920      	ldmia	r1!, {r5}
    205e:	cb40      	ldmia	r3!, {r6}
    2060:	41b5      	sbcs	r5, r6
    2062:	c020      	stmia	r0!, {r5}
    2064:	c920      	ldmia	r1!, {r5}
    2066:	cb40      	ldmia	r3!, {r6}
    2068:	41b5      	sbcs	r5, r6
    206a:	c020      	stmia	r0!, {r5}
    206c:	c920      	ldmia	r1!, {r5}
    206e:	cb40      	ldmia	r3!, {r6}
    2070:	41b5      	sbcs	r5, r6
    2072:	c020      	stmia	r0!, {r5}
    2074:	c920      	ldmia	r1!, {r5}
    2076:	cb40      	ldmia	r3!, {r6}
    2078:	41b5      	sbcs	r5, r6
    207a:	c020      	stmia	r0!, {r5}
    207c:	c920      	ldmia	r1!, {r5}
    207e:	cb40      	ldmia	r3!, {r6}
    2080:	41b5      	sbcs	r5, r6
    2082:	c020      	stmia	r0!, {r5}
    2084:	4164      	adcs	r4, r4
}
    2086:	b011      	add	sp, #68	; 0x44
    2088:	bc0c      	pop	{r2, r3}
    208a:	4690      	mov	r8, r2
    208c:	4699      	mov	r9, r3
    208e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002090 <vli_mmod_fast_secp192r1>:
static void vli_mmod_fast_secp192r1(uint32_t *result, uint32_t *product) {
    2090:	b5f0      	push	{r4, r5, r6, r7, lr}
    2092:	46de      	mov	lr, fp
    2094:	4657      	mov	r7, sl
    2096:	4645      	mov	r5, r8
    2098:	464e      	mov	r6, r9
        dest[i] = src[i];
    209a:	680b      	ldr	r3, [r1, #0]
    209c:	b5e0      	push	{r5, r6, r7, lr}
    209e:	6003      	str	r3, [r0, #0]
    20a0:	684b      	ldr	r3, [r1, #4]
    20a2:	0004      	movs	r4, r0
    20a4:	6043      	str	r3, [r0, #4]
    20a6:	688b      	ldr	r3, [r1, #8]
    __asm__ volatile (
    20a8:	f240 0a11 	movw	sl, #17
    20ac:	6083      	str	r3, [r0, #8]
    20ae:	68cb      	ldr	r3, [r1, #12]
    20b0:	b087      	sub	sp, #28
    20b2:	60c3      	str	r3, [r0, #12]
    20b4:	690b      	ldr	r3, [r1, #16]
    20b6:	4688      	mov	r8, r1
    20b8:	6103      	str	r3, [r0, #16]
    20ba:	694b      	ldr	r3, [r1, #20]
    20bc:	2218      	movs	r2, #24
    20be:	6143      	str	r3, [r0, #20]
    20c0:	f246 6331 	movw	r3, #26161	; 0x6631
    20c4:	3118      	adds	r1, #24
    20c6:	4668      	mov	r0, sp
    20c8:	f2c0 0300 	movt	r3, #0
    20cc:	4798      	blx	r3
    20ce:	0025      	movs	r5, r4
    20d0:	0023      	movs	r3, r4
    20d2:	466a      	mov	r2, sp
    20d4:	4650      	mov	r0, sl
    20d6:	2600      	movs	r6, #0
    20d8:	a104      	add	r1, pc, #16	; (adr r1, 20ec <vli_mmod_fast_secp192r1+0x5c>)
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	46c0      	nop			; (mov r8, r8)
    20de:	46c0      	nop			; (mov r8, r8)
    20e0:	1840      	adds	r0, r0, r1
    20e2:	cd02      	ldmia	r5!, {r1}
    20e4:	ca80      	ldmia	r2!, {r7}
    20e6:	19c9      	adds	r1, r1, r7
    20e8:	c302      	stmia	r3!, {r1}
    20ea:	4700      	bx	r0
    20ec:	cd02      	ldmia	r5!, {r1}
    20ee:	ca80      	ldmia	r2!, {r7}
    20f0:	4179      	adcs	r1, r7
    20f2:	c302      	stmia	r3!, {r1}
    20f4:	cd02      	ldmia	r5!, {r1}
    20f6:	ca80      	ldmia	r2!, {r7}
    20f8:	4179      	adcs	r1, r7
    20fa:	c302      	stmia	r3!, {r1}
    20fc:	cd02      	ldmia	r5!, {r1}
    20fe:	ca80      	ldmia	r2!, {r7}
    2100:	4179      	adcs	r1, r7
    2102:	c302      	stmia	r3!, {r1}
    2104:	cd02      	ldmia	r5!, {r1}
    2106:	ca80      	ldmia	r2!, {r7}
    2108:	4179      	adcs	r1, r7
    210a:	c302      	stmia	r3!, {r1}
    210c:	cd02      	ldmia	r5!, {r1}
    210e:	ca80      	ldmia	r2!, {r7}
    2110:	4179      	adcs	r1, r7
    2112:	c302      	stmia	r3!, {r1}
    2114:	cd02      	ldmia	r5!, {r1}
    2116:	ca80      	ldmia	r2!, {r7}
    2118:	4179      	adcs	r1, r7
    211a:	c302      	stmia	r3!, {r1}
    211c:	cd02      	ldmia	r5!, {r1}
    211e:	ca80      	ldmia	r2!, {r7}
    2120:	4179      	adcs	r1, r7
    2122:	c302      	stmia	r3!, {r1}
    2124:	4176      	adcs	r6, r6
    tmp[0] = tmp[1] = 0;
    2126:	f240 0900 	movw	r9, #0
    212a:	464b      	mov	r3, r9
    212c:	9301      	str	r3, [sp, #4]
    212e:	9300      	str	r3, [sp, #0]
    tmp[2] = product[6];
    2130:	4643      	mov	r3, r8
    2132:	699b      	ldr	r3, [r3, #24]
    2134:	46b3      	mov	fp, r6
    2136:	9302      	str	r3, [sp, #8]
    tmp[3] = product[7];
    2138:	4643      	mov	r3, r8
    213a:	69db      	ldr	r3, [r3, #28]
    213c:	466a      	mov	r2, sp
    213e:	9303      	str	r3, [sp, #12]
    tmp[4] = product[8];
    2140:	4643      	mov	r3, r8
    2142:	6a1b      	ldr	r3, [r3, #32]
    2144:	4650      	mov	r0, sl
    2146:	9304      	str	r3, [sp, #16]
    tmp[5] = product[9];
    2148:	4643      	mov	r3, r8
    214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    214c:	0027      	movs	r7, r4
    214e:	9305      	str	r3, [sp, #20]
    2150:	0023      	movs	r3, r4
    2152:	2100      	movs	r1, #0
    2154:	a505      	add	r5, pc, #20	; (adr r5, 216c <vli_mmod_fast_secp192r1+0xdc>)
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	46c0      	nop			; (mov r8, r8)
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	46c0      	nop			; (mov r8, r8)
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	1940      	adds	r0, r0, r5
    2162:	cf20      	ldmia	r7!, {r5}
    2164:	ca40      	ldmia	r2!, {r6}
    2166:	19ad      	adds	r5, r5, r6
    2168:	c320      	stmia	r3!, {r5}
    216a:	4700      	bx	r0
    216c:	cf20      	ldmia	r7!, {r5}
    216e:	ca40      	ldmia	r2!, {r6}
    2170:	4175      	adcs	r5, r6
    2172:	c320      	stmia	r3!, {r5}
    2174:	cf20      	ldmia	r7!, {r5}
    2176:	ca40      	ldmia	r2!, {r6}
    2178:	4175      	adcs	r5, r6
    217a:	c320      	stmia	r3!, {r5}
    217c:	cf20      	ldmia	r7!, {r5}
    217e:	ca40      	ldmia	r2!, {r6}
    2180:	4175      	adcs	r5, r6
    2182:	c320      	stmia	r3!, {r5}
    2184:	cf20      	ldmia	r7!, {r5}
    2186:	ca40      	ldmia	r2!, {r6}
    2188:	4175      	adcs	r5, r6
    218a:	c320      	stmia	r3!, {r5}
    218c:	cf20      	ldmia	r7!, {r5}
    218e:	ca40      	ldmia	r2!, {r6}
    2190:	4175      	adcs	r5, r6
    2192:	c320      	stmia	r3!, {r5}
    2194:	cf20      	ldmia	r7!, {r5}
    2196:	ca40      	ldmia	r2!, {r6}
    2198:	4175      	adcs	r5, r6
    219a:	c320      	stmia	r3!, {r5}
    219c:	cf20      	ldmia	r7!, {r5}
    219e:	ca40      	ldmia	r2!, {r6}
    21a0:	4175      	adcs	r5, r6
    21a2:	c320      	stmia	r3!, {r5}
    21a4:	4149      	adcs	r1, r1
    tmp[0] = tmp[2] = product[10];
    21a6:	4643      	mov	r3, r8
    21a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21aa:	468c      	mov	ip, r1
    21ac:	9302      	str	r3, [sp, #8]
    21ae:	9300      	str	r3, [sp, #0]
    tmp[1] = tmp[3] = product[11];
    21b0:	4643      	mov	r3, r8
    21b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    21b4:	0022      	movs	r2, r4
    21b6:	9303      	str	r3, [sp, #12]
    21b8:	9301      	str	r3, [sp, #4]
    tmp[4] = tmp[5] = 0;
    21ba:	464b      	mov	r3, r9
    21bc:	4651      	mov	r1, sl
    21be:	9305      	str	r3, [sp, #20]
    21c0:	9304      	str	r3, [sp, #16]
    21c2:	0025      	movs	r5, r4
    21c4:	466b      	mov	r3, sp
    21c6:	2000      	movs	r0, #0
    21c8:	a604      	add	r6, pc, #16	; (adr r6, 21dc <vli_mmod_fast_secp192r1+0x14c>)
    21ca:	46c0      	nop			; (mov r8, r8)
    21cc:	46c0      	nop			; (mov r8, r8)
    21ce:	46c0      	nop			; (mov r8, r8)
    21d0:	1989      	adds	r1, r1, r6
    21d2:	cd40      	ldmia	r5!, {r6}
    21d4:	cb80      	ldmia	r3!, {r7}
    21d6:	19f6      	adds	r6, r6, r7
    21d8:	c240      	stmia	r2!, {r6}
    21da:	4708      	bx	r1
    21dc:	cd40      	ldmia	r5!, {r6}
    21de:	cb80      	ldmia	r3!, {r7}
    21e0:	417e      	adcs	r6, r7
    21e2:	c240      	stmia	r2!, {r6}
    21e4:	cd40      	ldmia	r5!, {r6}
    21e6:	cb80      	ldmia	r3!, {r7}
    21e8:	417e      	adcs	r6, r7
    21ea:	c240      	stmia	r2!, {r6}
    21ec:	cd40      	ldmia	r5!, {r6}
    21ee:	cb80      	ldmia	r3!, {r7}
    21f0:	417e      	adcs	r6, r7
    21f2:	c240      	stmia	r2!, {r6}
    21f4:	cd40      	ldmia	r5!, {r6}
    21f6:	cb80      	ldmia	r3!, {r7}
    21f8:	417e      	adcs	r6, r7
    21fa:	c240      	stmia	r2!, {r6}
    21fc:	cd40      	ldmia	r5!, {r6}
    21fe:	cb80      	ldmia	r3!, {r7}
    2200:	417e      	adcs	r6, r7
    2202:	c240      	stmia	r2!, {r6}
    2204:	cd40      	ldmia	r5!, {r6}
    2206:	cb80      	ldmia	r3!, {r7}
    2208:	417e      	adcs	r6, r7
    220a:	c240      	stmia	r2!, {r6}
    220c:	cd40      	ldmia	r5!, {r6}
    220e:	cb80      	ldmia	r3!, {r7}
    2210:	417e      	adcs	r6, r7
    2212:	c240      	stmia	r2!, {r6}
    2214:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
    2216:	465d      	mov	r5, fp
    __asm__ volatile (
    2218:	f646 16cc 	movw	r6, #27084	; 0x69cc
    221c:	4465      	add	r5, ip
    carry += uECC_vli_add(result, result, tmp, num_words_secp192r1);
    221e:	46ac      	mov	ip, r5
    2220:	f240 086c 	movw	r8, #108	; 0x6c
    2224:	f2c0 0600 	movt	r6, #0
    2228:	4484      	add	ip, r0
    222a:	44b0      	add	r8, r6
    222c:	f240 0911 	movw	r9, #17
    while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
    2230:	e03e      	b.n	22b0 <vli_mmod_fast_secp192r1+0x220>
        if (left[i] > right[i]) {
    2232:	6923      	ldr	r3, [r4, #16]
    2234:	3301      	adds	r3, #1
    2236:	d141      	bne.n	22bc <vli_mmod_fast_secp192r1+0x22c>
    2238:	68e3      	ldr	r3, [r4, #12]
    223a:	3301      	adds	r3, #1
    223c:	d13e      	bne.n	22bc <vli_mmod_fast_secp192r1+0x22c>
    223e:	68a3      	ldr	r3, [r4, #8]
    2240:	1cda      	adds	r2, r3, #3
    2242:	d93b      	bls.n	22bc <vli_mmod_fast_secp192r1+0x22c>
        } else if (left[i] < right[i]) {
    2244:	3301      	adds	r3, #1
    2246:	d005      	beq.n	2254 <vli_mmod_fast_secp192r1+0x1c4>
        if (left[i] > right[i]) {
    2248:	6863      	ldr	r3, [r4, #4]
    224a:	3301      	adds	r3, #1
    224c:	d136      	bne.n	22bc <vli_mmod_fast_secp192r1+0x22c>
    224e:	6823      	ldr	r3, [r4, #0]
    2250:	3301      	adds	r3, #1
    2252:	d133      	bne.n	22bc <vli_mmod_fast_secp192r1+0x22c>
    2254:	0023      	movs	r3, r4
    2256:	4642      	mov	r2, r8
    2258:	4649      	mov	r1, r9
    225a:	0026      	movs	r6, r4
    225c:	2000      	movs	r0, #0
    225e:	a703      	add	r7, pc, #12	; (adr r7, 226c <vli_mmod_fast_secp192r1+0x1dc>)
    2260:	19c9      	adds	r1, r1, r7
    2262:	ce80      	ldmia	r6!, {r7}
    2264:	ca20      	ldmia	r2!, {r5}
    2266:	1b7f      	subs	r7, r7, r5
    2268:	c380      	stmia	r3!, {r7}
    226a:	4708      	bx	r1
    226c:	ce80      	ldmia	r6!, {r7}
    226e:	ca20      	ldmia	r2!, {r5}
    2270:	41af      	sbcs	r7, r5
    2272:	c380      	stmia	r3!, {r7}
    2274:	ce80      	ldmia	r6!, {r7}
    2276:	ca20      	ldmia	r2!, {r5}
    2278:	41af      	sbcs	r7, r5
    227a:	c380      	stmia	r3!, {r7}
    227c:	ce80      	ldmia	r6!, {r7}
    227e:	ca20      	ldmia	r2!, {r5}
    2280:	41af      	sbcs	r7, r5
    2282:	c380      	stmia	r3!, {r7}
    2284:	ce80      	ldmia	r6!, {r7}
    2286:	ca20      	ldmia	r2!, {r5}
    2288:	41af      	sbcs	r7, r5
    228a:	c380      	stmia	r3!, {r7}
    228c:	ce80      	ldmia	r6!, {r7}
    228e:	ca20      	ldmia	r2!, {r5}
    2290:	41af      	sbcs	r7, r5
    2292:	c380      	stmia	r3!, {r7}
    2294:	ce80      	ldmia	r6!, {r7}
    2296:	ca20      	ldmia	r2!, {r5}
    2298:	41af      	sbcs	r7, r5
    229a:	c380      	stmia	r3!, {r7}
    229c:	ce80      	ldmia	r6!, {r7}
    229e:	ca20      	ldmia	r2!, {r5}
    22a0:	41af      	sbcs	r7, r5
    22a2:	c380      	stmia	r3!, {r7}
    22a4:	4140      	adcs	r0, r0
        carry -= uECC_vli_sub(result, result, curve_secp192r1.p, num_words_secp192r1);
    22a6:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    22a8:	4243      	negs	r3, r0
    22aa:	4143      	adcs	r3, r0
    22ac:	1ad3      	subs	r3, r2, r3
    22ae:	469c      	mov	ip, r3
    while (carry || uECC_vli_cmp_unsafe(curve_secp192r1.p, result, num_words_secp192r1) != 1) {
    22b0:	4663      	mov	r3, ip
    22b2:	2b00      	cmp	r3, #0
    22b4:	d1ce      	bne.n	2254 <vli_mmod_fast_secp192r1+0x1c4>
    22b6:	6963      	ldr	r3, [r4, #20]
    22b8:	3301      	adds	r3, #1
    22ba:	d0ba      	beq.n	2232 <vli_mmod_fast_secp192r1+0x1a2>
}
    22bc:	b007      	add	sp, #28
    22be:	bc3c      	pop	{r2, r3, r4, r5}
    22c0:	4690      	mov	r8, r2
    22c2:	4699      	mov	r9, r3
    22c4:	46a2      	mov	sl, r4
    22c6:	46ab      	mov	fp, r5
    22c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	0000      	movs	r0, r0
	...

000022d0 <vli_mmod_fast_secp256k1>:

#if (uECC_OPTIMIZATION_LEVEL > 0 && !asm_mmod_fast_secp256k1)
static void omega_mult_secp256k1(uECC_word_t *result, const uECC_word_t *right);
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    22d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    22d2:	46de      	mov	lr, fp
    22d4:	4657      	mov	r7, sl
    22d6:	464e      	mov	r6, r9
    22d8:	4645      	mov	r5, r8
        vli[i] = 0;
    22da:	2300      	movs	r3, #0
    22dc:	b5e0      	push	{r5, r6, r7, lr}
    22de:	b093      	sub	sp, #76	; 0x4c
    22e0:	930b      	str	r3, [sp, #44]	; 0x2c
    22e2:	930c      	str	r3, [sp, #48]	; 0x30
    22e4:	930d      	str	r3, [sp, #52]	; 0x34
    22e6:	930e      	str	r3, [sp, #56]	; 0x38
    22e8:	930f      	str	r3, [sp, #60]	; 0x3c
    22ea:	9310      	str	r3, [sp, #64]	; 0x40
    22ec:	9311      	str	r3, [sp, #68]	; 0x44
    /* Multiply by (2^9 + 2^8 + 2^7 + 2^6 + 2^4 + 1). */
    uint32_t carry = 0;
    wordcount_t k;
    
    for (k = 0; k < num_words_secp256k1; ++k) {
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    22ee:	f246 5371 	movw	r3, #25969	; 0x6571
    22f2:	f2c0 0300 	movt	r3, #0
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    22f6:	000c      	movs	r4, r1
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    22f8:	001d      	movs	r5, r3
static void vli_mmod_fast_secp256k1(uECC_word_t *result, uECC_word_t *product) {
    22fa:	4683      	mov	fp, r0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    22fc:	f240 32d1 	movw	r2, #977	; 0x3d1
    2300:	6a08      	ldr	r0, [r1, #32]
    2302:	2300      	movs	r3, #0
    2304:	2100      	movs	r1, #0
    2306:	47a8      	blx	r5
    2308:	000f      	movs	r7, r1
        result[k] = (uint32_t) p;
    230a:	9002      	str	r0, [sp, #8]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    230c:	f240 32d1 	movw	r2, #977	; 0x3d1
    2310:	2300      	movs	r3, #0
    2312:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2314:	2100      	movs	r1, #0
    2316:	47a8      	blx	r5
        carry = p >> 32;
    2318:	003a      	movs	r2, r7
    231a:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    231c:	1880      	adds	r0, r0, r2
    231e:	4159      	adcs	r1, r3
        carry = p >> 32;
    2320:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2322:	46a9      	mov	r9, r5
        carry = p >> 32;
    2324:	001e      	movs	r6, r3
    2326:	000d      	movs	r5, r1
        result[k] = (uint32_t) p;
    2328:	9003      	str	r0, [sp, #12]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    232a:	f240 32d1 	movw	r2, #977	; 0x3d1
    232e:	2300      	movs	r3, #0
    2330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2332:	2100      	movs	r1, #0
    2334:	47c8      	blx	r9
    2336:	002a      	movs	r2, r5
    2338:	0033      	movs	r3, r6
    233a:	1880      	adds	r0, r0, r2
    233c:	4159      	adcs	r1, r3
        carry = p >> 32;
    233e:	2300      	movs	r3, #0
    2340:	000d      	movs	r5, r1
    2342:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2344:	9004      	str	r0, [sp, #16]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2346:	f240 32d1 	movw	r2, #977	; 0x3d1
    234a:	2300      	movs	r3, #0
    234c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    234e:	2100      	movs	r1, #0
    2350:	47c8      	blx	r9
    2352:	002a      	movs	r2, r5
    2354:	0033      	movs	r3, r6
    2356:	1880      	adds	r0, r0, r2
    2358:	4159      	adcs	r1, r3
        carry = p >> 32;
    235a:	2300      	movs	r3, #0
    235c:	000d      	movs	r5, r1
    235e:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2360:	9005      	str	r0, [sp, #20]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2362:	f240 32d1 	movw	r2, #977	; 0x3d1
    2366:	2300      	movs	r3, #0
    2368:	6b20      	ldr	r0, [r4, #48]	; 0x30
    236a:	2100      	movs	r1, #0
    236c:	47c8      	blx	r9
    236e:	002a      	movs	r2, r5
    2370:	0033      	movs	r3, r6
    2372:	1880      	adds	r0, r0, r2
    2374:	4159      	adcs	r1, r3
        carry = p >> 32;
    2376:	2300      	movs	r3, #0
    2378:	000d      	movs	r5, r1
    237a:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    237c:	9006      	str	r0, [sp, #24]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    237e:	f240 32d1 	movw	r2, #977	; 0x3d1
    2382:	2300      	movs	r3, #0
    2384:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2386:	2100      	movs	r1, #0
    2388:	47c8      	blx	r9
    238a:	002a      	movs	r2, r5
    238c:	0033      	movs	r3, r6
    238e:	1880      	adds	r0, r0, r2
    2390:	4159      	adcs	r1, r3
        carry = p >> 32;
    2392:	2300      	movs	r3, #0
    2394:	000d      	movs	r5, r1
    2396:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2398:	9007      	str	r0, [sp, #28]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    239a:	f240 32d1 	movw	r2, #977	; 0x3d1
    239e:	2300      	movs	r3, #0
    23a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    23a2:	2100      	movs	r1, #0
    23a4:	47c8      	blx	r9
    23a6:	002a      	movs	r2, r5
    23a8:	0033      	movs	r3, r6
    23aa:	1880      	adds	r0, r0, r2
    23ac:	4159      	adcs	r1, r3
        carry = p >> 32;
    23ae:	2300      	movs	r3, #0
    23b0:	000d      	movs	r5, r1
    23b2:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    23b4:	9008      	str	r0, [sp, #32]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    23b6:	f240 32d1 	movw	r2, #977	; 0x3d1
    23ba:	2300      	movs	r3, #0
    23bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    23be:	2100      	movs	r1, #0
    23c0:	47c8      	blx	r9
    23c2:	002a      	movs	r2, r5
    23c4:	0033      	movs	r3, r6
    __asm__ volatile (
    23c6:	f240 0801 	movw	r8, #1
    23ca:	1880      	adds	r0, r0, r2
    23cc:	4159      	adcs	r1, r3
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
    23ce:	0022      	movs	r2, r4
    23d0:	ab03      	add	r3, sp, #12
        carry = p >> 32;
    23d2:	910a      	str	r1, [sp, #40]	; 0x28
        result[k] = (uint32_t) p;
    23d4:	9009      	str	r0, [sp, #36]	; 0x24
    omega_mult_secp256k1(tmp, product + num_words_secp256k1); /* (Rq, q) = q * c */
    23d6:	3220      	adds	r2, #32
    23d8:	4641      	mov	r1, r8
    23da:	001d      	movs	r5, r3
    23dc:	2000      	movs	r0, #0
    23de:	a703      	add	r7, pc, #12	; (adr r7, 23ec <vli_mmod_fast_secp256k1+0x11c>)
    23e0:	19c9      	adds	r1, r1, r7
    23e2:	cd80      	ldmia	r5!, {r7}
    23e4:	ca40      	ldmia	r2!, {r6}
    23e6:	19bf      	adds	r7, r7, r6
    23e8:	c380      	stmia	r3!, {r7}
    23ea:	4708      	bx	r1
    23ec:	cd80      	ldmia	r5!, {r7}
    23ee:	ca40      	ldmia	r2!, {r6}
    23f0:	4177      	adcs	r7, r6
    23f2:	c380      	stmia	r3!, {r7}
    23f4:	cd80      	ldmia	r5!, {r7}
    23f6:	ca40      	ldmia	r2!, {r6}
    23f8:	4177      	adcs	r7, r6
    23fa:	c380      	stmia	r3!, {r7}
    23fc:	cd80      	ldmia	r5!, {r7}
    23fe:	ca40      	ldmia	r2!, {r6}
    2400:	4177      	adcs	r7, r6
    2402:	c380      	stmia	r3!, {r7}
    2404:	cd80      	ldmia	r5!, {r7}
    2406:	ca40      	ldmia	r2!, {r6}
    2408:	4177      	adcs	r7, r6
    240a:	c380      	stmia	r3!, {r7}
    240c:	cd80      	ldmia	r5!, {r7}
    240e:	ca40      	ldmia	r2!, {r6}
    2410:	4177      	adcs	r7, r6
    2412:	c380      	stmia	r3!, {r7}
    2414:	cd80      	ldmia	r5!, {r7}
    2416:	ca40      	ldmia	r2!, {r6}
    2418:	4177      	adcs	r7, r6
    241a:	c380      	stmia	r3!, {r7}
    241c:	cd80      	ldmia	r5!, {r7}
    241e:	ca40      	ldmia	r2!, {r6}
    2420:	4177      	adcs	r7, r6
    2422:	c380      	stmia	r3!, {r7}
    2424:	4140      	adcs	r0, r0
    }
    result[num_words_secp256k1] = carry;
    /* add the 2^32 multiple */
    result[1 + num_words_secp256k1] =
    2426:	900b      	str	r0, [sp, #44]	; 0x2c
    2428:	465b      	mov	r3, fp
    242a:	0022      	movs	r2, r4
    242c:	a902      	add	r1, sp, #8
    242e:	4640      	mov	r0, r8
    2430:	2500      	movs	r5, #0
    2432:	a706      	add	r7, pc, #24	; (adr r7, 244c <vli_mmod_fast_secp256k1+0x17c>)
    2434:	46c0      	nop			; (mov r8, r8)
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	46c0      	nop			; (mov r8, r8)
    243a:	46c0      	nop			; (mov r8, r8)
    243c:	46c0      	nop			; (mov r8, r8)
    243e:	46c0      	nop			; (mov r8, r8)
    2440:	19c0      	adds	r0, r0, r7
    2442:	ca80      	ldmia	r2!, {r7}
    2444:	c940      	ldmia	r1!, {r6}
    2446:	19bf      	adds	r7, r7, r6
    2448:	c380      	stmia	r3!, {r7}
    244a:	4700      	bx	r0
    244c:	ca80      	ldmia	r2!, {r7}
    244e:	c940      	ldmia	r1!, {r6}
    2450:	4177      	adcs	r7, r6
    2452:	c380      	stmia	r3!, {r7}
    2454:	ca80      	ldmia	r2!, {r7}
    2456:	c940      	ldmia	r1!, {r6}
    2458:	4177      	adcs	r7, r6
    245a:	c380      	stmia	r3!, {r7}
    245c:	ca80      	ldmia	r2!, {r7}
    245e:	c940      	ldmia	r1!, {r6}
    2460:	4177      	adcs	r7, r6
    2462:	c380      	stmia	r3!, {r7}
    2464:	ca80      	ldmia	r2!, {r7}
    2466:	c940      	ldmia	r1!, {r6}
    2468:	4177      	adcs	r7, r6
    246a:	c380      	stmia	r3!, {r7}
    246c:	ca80      	ldmia	r2!, {r7}
    246e:	c940      	ldmia	r1!, {r6}
    2470:	4177      	adcs	r7, r6
    2472:	c380      	stmia	r3!, {r7}
    2474:	ca80      	ldmia	r2!, {r7}
    2476:	c940      	ldmia	r1!, {r6}
    2478:	4177      	adcs	r7, r6
    247a:	c380      	stmia	r3!, {r7}
    247c:	ca80      	ldmia	r2!, {r7}
    247e:	c940      	ldmia	r1!, {r6}
    2480:	4177      	adcs	r7, r6
    2482:	c380      	stmia	r3!, {r7}
    2484:	416d      	adcs	r5, r5
    2486:	f246 6367 	movw	r3, #26215	; 0x6667
    248a:	2220      	movs	r2, #32
    248c:	2100      	movs	r1, #0
    248e:	0020      	movs	r0, r4
    2490:	f2c0 0300 	movt	r3, #0
    2494:	4798      	blx	r3
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2496:	f240 32d1 	movw	r2, #977	; 0x3d1
    249a:	2300      	movs	r3, #0
    249c:	980a      	ldr	r0, [sp, #40]	; 0x28
    249e:	2100      	movs	r1, #0
    24a0:	47c8      	blx	r9
        result[k] = (uint32_t) p;
    24a2:	0023      	movs	r3, r4
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24a4:	464f      	mov	r7, r9
    24a6:	4689      	mov	r9, r1
        result[k] = (uint32_t) p;
    24a8:	c301      	stmia	r3!, {r0}
    24aa:	9301      	str	r3, [sp, #4]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24ac:	f240 32d1 	movw	r2, #977	; 0x3d1
    24b0:	2300      	movs	r3, #0
    24b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    24b4:	2100      	movs	r1, #0
    24b6:	47b8      	blx	r7
        carry = p >> 32;
    24b8:	464a      	mov	r2, r9
    24ba:	2300      	movs	r3, #0
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24bc:	1880      	adds	r0, r0, r2
    24be:	4159      	adcs	r1, r3
        carry = p >> 32;
    24c0:	2300      	movs	r3, #0
    24c2:	46aa      	mov	sl, r5
    24c4:	001e      	movs	r6, r3
    24c6:	000d      	movs	r5, r1
        result[k] = (uint32_t) p;
    24c8:	6060      	str	r0, [r4, #4]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24ca:	f240 32d1 	movw	r2, #977	; 0x3d1
    24ce:	2300      	movs	r3, #0
    24d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    24d2:	2100      	movs	r1, #0
    24d4:	47b8      	blx	r7
    24d6:	002a      	movs	r2, r5
    24d8:	0033      	movs	r3, r6
    24da:	1880      	adds	r0, r0, r2
    24dc:	4159      	adcs	r1, r3
        carry = p >> 32;
    24de:	2300      	movs	r3, #0
    24e0:	000d      	movs	r5, r1
    24e2:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    24e4:	60a0      	str	r0, [r4, #8]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    24e6:	f240 32d1 	movw	r2, #977	; 0x3d1
    24ea:	2300      	movs	r3, #0
    24ec:	980d      	ldr	r0, [sp, #52]	; 0x34
    24ee:	2100      	movs	r1, #0
    24f0:	47b8      	blx	r7
    24f2:	002a      	movs	r2, r5
    24f4:	0033      	movs	r3, r6
    24f6:	1880      	adds	r0, r0, r2
    24f8:	4159      	adcs	r1, r3
        carry = p >> 32;
    24fa:	2300      	movs	r3, #0
    24fc:	000d      	movs	r5, r1
    24fe:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2500:	60e0      	str	r0, [r4, #12]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2502:	f240 32d1 	movw	r2, #977	; 0x3d1
    2506:	2300      	movs	r3, #0
    2508:	980e      	ldr	r0, [sp, #56]	; 0x38
    250a:	2100      	movs	r1, #0
    250c:	47b8      	blx	r7
    250e:	002a      	movs	r2, r5
    2510:	0033      	movs	r3, r6
    2512:	1880      	adds	r0, r0, r2
    2514:	4159      	adcs	r1, r3
        carry = p >> 32;
    2516:	2300      	movs	r3, #0
    2518:	000d      	movs	r5, r1
    251a:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    251c:	6120      	str	r0, [r4, #16]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    251e:	f240 32d1 	movw	r2, #977	; 0x3d1
    2522:	2300      	movs	r3, #0
    2524:	980f      	ldr	r0, [sp, #60]	; 0x3c
    2526:	2100      	movs	r1, #0
    2528:	47b8      	blx	r7
    252a:	002a      	movs	r2, r5
    252c:	0033      	movs	r3, r6
    252e:	1880      	adds	r0, r0, r2
    2530:	4159      	adcs	r1, r3
        carry = p >> 32;
    2532:	2300      	movs	r3, #0
    2534:	000d      	movs	r5, r1
    2536:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2538:	6160      	str	r0, [r4, #20]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    253a:	f240 32d1 	movw	r2, #977	; 0x3d1
    253e:	2300      	movs	r3, #0
    2540:	9810      	ldr	r0, [sp, #64]	; 0x40
    2542:	2100      	movs	r1, #0
    2544:	47b8      	blx	r7
    2546:	002a      	movs	r2, r5
    2548:	0033      	movs	r3, r6
    254a:	1880      	adds	r0, r0, r2
    254c:	4159      	adcs	r1, r3
        carry = p >> 32;
    254e:	2300      	movs	r3, #0
    2550:	000d      	movs	r5, r1
    2552:	001e      	movs	r6, r3
        result[k] = (uint32_t) p;
    2554:	61a0      	str	r0, [r4, #24]
        uint64_t p = (uint64_t)0x3D1 * right[k] + carry;
    2556:	f240 32d1 	movw	r2, #977	; 0x3d1
    255a:	2300      	movs	r3, #0
    255c:	9811      	ldr	r0, [sp, #68]	; 0x44
    255e:	2100      	movs	r1, #0
    2560:	47b8      	blx	r7
    2562:	002a      	movs	r2, r5
    2564:	0033      	movs	r3, r6
    2566:	1880      	adds	r0, r0, r2
    2568:	4159      	adcs	r1, r3
    256a:	9f01      	ldr	r7, [sp, #4]
        result[k] = (uint32_t) p;
    256c:	61e0      	str	r0, [r4, #28]
        carry = p >> 32;
    256e:	6221      	str	r1, [r4, #32]
    2570:	ab0a      	add	r3, sp, #40	; 0x28
    2572:	4642      	mov	r2, r8
    2574:	0038      	movs	r0, r7
    2576:	2100      	movs	r1, #0
    2578:	a604      	add	r6, pc, #16	; (adr r6, 258c <vli_mmod_fast_secp256k1+0x2bc>)
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	46c0      	nop			; (mov r8, r8)
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	1992      	adds	r2, r2, r6
    2582:	c840      	ldmia	r0!, {r6}
    2584:	cb20      	ldmia	r3!, {r5}
    2586:	1976      	adds	r6, r6, r5
    2588:	c740      	stmia	r7!, {r6}
    258a:	4710      	bx	r2
    258c:	c840      	ldmia	r0!, {r6}
    258e:	cb20      	ldmia	r3!, {r5}
    2590:	416e      	adcs	r6, r5
    2592:	c740      	stmia	r7!, {r6}
    2594:	c840      	ldmia	r0!, {r6}
    2596:	cb20      	ldmia	r3!, {r5}
    2598:	416e      	adcs	r6, r5
    259a:	c740      	stmia	r7!, {r6}
    259c:	c840      	ldmia	r0!, {r6}
    259e:	cb20      	ldmia	r3!, {r5}
    25a0:	416e      	adcs	r6, r5
    25a2:	c740      	stmia	r7!, {r6}
    25a4:	c840      	ldmia	r0!, {r6}
    25a6:	cb20      	ldmia	r3!, {r5}
    25a8:	416e      	adcs	r6, r5
    25aa:	c740      	stmia	r7!, {r6}
    25ac:	c840      	ldmia	r0!, {r6}
    25ae:	cb20      	ldmia	r3!, {r5}
    25b0:	416e      	adcs	r6, r5
    25b2:	c740      	stmia	r7!, {r6}
    25b4:	c840      	ldmia	r0!, {r6}
    25b6:	cb20      	ldmia	r3!, {r5}
    25b8:	416e      	adcs	r6, r5
    25ba:	c740      	stmia	r7!, {r6}
    25bc:	c840      	ldmia	r0!, {r6}
    25be:	cb20      	ldmia	r3!, {r5}
    25c0:	416e      	adcs	r6, r5
    25c2:	c740      	stmia	r7!, {r6}
    25c4:	4149      	adcs	r1, r1
    result[1 + num_words_secp256k1] =
    25c6:	6261      	str	r1, [r4, #36]	; 0x24
    25c8:	465b      	mov	r3, fp
    25ca:	4642      	mov	r2, r8
    25cc:	4659      	mov	r1, fp
    25ce:	2000      	movs	r0, #0
    25d0:	a606      	add	r6, pc, #24	; (adr r6, 25ec <vli_mmod_fast_secp256k1+0x31c>)
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	46c0      	nop			; (mov r8, r8)
    25d6:	46c0      	nop			; (mov r8, r8)
    25d8:	46c0      	nop			; (mov r8, r8)
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	46c0      	nop			; (mov r8, r8)
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	1992      	adds	r2, r2, r6
    25e2:	c940      	ldmia	r1!, {r6}
    25e4:	cc80      	ldmia	r4!, {r7}
    25e6:	19f6      	adds	r6, r6, r7
    25e8:	c340      	stmia	r3!, {r6}
    25ea:	4710      	bx	r2
    25ec:	c940      	ldmia	r1!, {r6}
    25ee:	cc80      	ldmia	r4!, {r7}
    25f0:	417e      	adcs	r6, r7
    25f2:	c340      	stmia	r3!, {r6}
    25f4:	c940      	ldmia	r1!, {r6}
    25f6:	cc80      	ldmia	r4!, {r7}
    25f8:	417e      	adcs	r6, r7
    25fa:	c340      	stmia	r3!, {r6}
    25fc:	c940      	ldmia	r1!, {r6}
    25fe:	cc80      	ldmia	r4!, {r7}
    2600:	417e      	adcs	r6, r7
    2602:	c340      	stmia	r3!, {r6}
    2604:	c940      	ldmia	r1!, {r6}
    2606:	cc80      	ldmia	r4!, {r7}
    2608:	417e      	adcs	r6, r7
    260a:	c340      	stmia	r3!, {r6}
    260c:	c940      	ldmia	r1!, {r6}
    260e:	cc80      	ldmia	r4!, {r7}
    2610:	417e      	adcs	r6, r7
    2612:	c340      	stmia	r3!, {r6}
    2614:	c940      	ldmia	r1!, {r6}
    2616:	cc80      	ldmia	r4!, {r7}
    2618:	417e      	adcs	r6, r7
    261a:	c340      	stmia	r3!, {r6}
    261c:	c940      	ldmia	r1!, {r6}
    261e:	cc80      	ldmia	r4!, {r7}
    2620:	417e      	adcs	r6, r7
    2622:	c340      	stmia	r3!, {r6}
    2624:	4140      	adcs	r0, r0
    carry += uECC_vli_add(result, result, product, num_words_secp256k1); /* (C1, r) = r + Rq*c */
    2626:	4450      	add	r0, sl
    while (carry > 0) {
    2628:	2800      	cmp	r0, #0
    262a:	d036      	beq.n	269a <vli_mmod_fast_secp256k1+0x3ca>
    262c:	f646 24cc 	movw	r4, #27340	; 0x6acc
    __asm__ volatile (
    2630:	f240 0c20 	movw	ip, #32
    2634:	f240 0801 	movw	r8, #1
    2638:	f2c0 0400 	movt	r4, #0
    263c:	44a4      	add	ip, r4
        --carry;
    263e:	3801      	subs	r0, #1
    2640:	465b      	mov	r3, fp
    2642:	4662      	mov	r2, ip
    2644:	4641      	mov	r1, r8
    2646:	465f      	mov	r7, fp
    2648:	2400      	movs	r4, #0
    264a:	a604      	add	r6, pc, #16	; (adr r6, 265c <vli_mmod_fast_secp256k1+0x38c>)
    264c:	46c0      	nop			; (mov r8, r8)
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	1989      	adds	r1, r1, r6
    2652:	cf40      	ldmia	r7!, {r6}
    2654:	ca20      	ldmia	r2!, {r5}
    2656:	1b76      	subs	r6, r6, r5
    2658:	c340      	stmia	r3!, {r6}
    265a:	4708      	bx	r1
    265c:	cf40      	ldmia	r7!, {r6}
    265e:	ca20      	ldmia	r2!, {r5}
    2660:	41ae      	sbcs	r6, r5
    2662:	c340      	stmia	r3!, {r6}
    2664:	cf40      	ldmia	r7!, {r6}
    2666:	ca20      	ldmia	r2!, {r5}
    2668:	41ae      	sbcs	r6, r5
    266a:	c340      	stmia	r3!, {r6}
    266c:	cf40      	ldmia	r7!, {r6}
    266e:	ca20      	ldmia	r2!, {r5}
    2670:	41ae      	sbcs	r6, r5
    2672:	c340      	stmia	r3!, {r6}
    2674:	cf40      	ldmia	r7!, {r6}
    2676:	ca20      	ldmia	r2!, {r5}
    2678:	41ae      	sbcs	r6, r5
    267a:	c340      	stmia	r3!, {r6}
    267c:	cf40      	ldmia	r7!, {r6}
    267e:	ca20      	ldmia	r2!, {r5}
    2680:	41ae      	sbcs	r6, r5
    2682:	c340      	stmia	r3!, {r6}
    2684:	cf40      	ldmia	r7!, {r6}
    2686:	ca20      	ldmia	r2!, {r5}
    2688:	41ae      	sbcs	r6, r5
    268a:	c340      	stmia	r3!, {r6}
    268c:	cf40      	ldmia	r7!, {r6}
    268e:	ca20      	ldmia	r2!, {r5}
    2690:	41ae      	sbcs	r6, r5
    2692:	c340      	stmia	r3!, {r6}
    2694:	4164      	adcs	r4, r4
    while (carry > 0) {
    2696:	2800      	cmp	r0, #0
    2698:	d1d1      	bne.n	263e <vli_mmod_fast_secp256k1+0x36e>
        } else if (left[i] < right[i]) {
    269a:	465b      	mov	r3, fp
    269c:	69db      	ldr	r3, [r3, #28]
    269e:	3301      	adds	r3, #1
    26a0:	d11e      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    26a2:	465b      	mov	r3, fp
    26a4:	699b      	ldr	r3, [r3, #24]
    26a6:	3301      	adds	r3, #1
    26a8:	d11a      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    26aa:	465b      	mov	r3, fp
    26ac:	695b      	ldr	r3, [r3, #20]
    26ae:	3301      	adds	r3, #1
    26b0:	d116      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    26b2:	465b      	mov	r3, fp
    26b4:	691b      	ldr	r3, [r3, #16]
    26b6:	3301      	adds	r3, #1
    26b8:	d112      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    26ba:	465b      	mov	r3, fp
    26bc:	68db      	ldr	r3, [r3, #12]
    26be:	3301      	adds	r3, #1
    26c0:	d10e      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    26c2:	465b      	mov	r3, fp
    26c4:	689b      	ldr	r3, [r3, #8]
    26c6:	3301      	adds	r3, #1
    26c8:	d10a      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
        if (left[i] > right[i]) {
    26ca:	465b      	mov	r3, fp
    26cc:	685b      	ldr	r3, [r3, #4]
    26ce:	1c5a      	adds	r2, r3, #1
    26d0:	d00d      	beq.n	26ee <vli_mmod_fast_secp256k1+0x41e>
        } else if (left[i] < right[i]) {
    26d2:	3302      	adds	r3, #2
    26d4:	d104      	bne.n	26e0 <vli_mmod_fast_secp256k1+0x410>
        if (left[i] > right[i]) {
    26d6:	465a      	mov	r2, fp
    26d8:	4b1f      	ldr	r3, [pc, #124]	; (2758 <vli_mmod_fast_secp256k1+0x488>)
    26da:	6812      	ldr	r2, [r2, #0]
    26dc:	429a      	cmp	r2, r3
    26de:	d806      	bhi.n	26ee <vli_mmod_fast_secp256k1+0x41e>
}
    26e0:	b013      	add	sp, #76	; 0x4c
    26e2:	bc3c      	pop	{r2, r3, r4, r5}
    26e4:	4690      	mov	r8, r2
    26e6:	4699      	mov	r9, r3
    26e8:	46a2      	mov	sl, r4
    26ea:	46ab      	mov	fp, r5
    26ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26ee:	f646 23cc 	movw	r3, #27340	; 0x6acc
    26f2:	f2c0 0300 	movt	r3, #0
    26f6:	3320      	adds	r3, #32
    26f8:	465d      	mov	r5, fp
    26fa:	2201      	movs	r2, #1
    26fc:	4659      	mov	r1, fp
    26fe:	2000      	movs	r0, #0
    2700:	a406      	add	r4, pc, #24	; (adr r4, 271c <vli_mmod_fast_secp256k1+0x44c>)
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	46c0      	nop			; (mov r8, r8)
    2706:	46c0      	nop			; (mov r8, r8)
    2708:	46c0      	nop			; (mov r8, r8)
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	46c0      	nop			; (mov r8, r8)
    270e:	46c0      	nop			; (mov r8, r8)
    2710:	1912      	adds	r2, r2, r4
    2712:	c910      	ldmia	r1!, {r4}
    2714:	cb40      	ldmia	r3!, {r6}
    2716:	1ba4      	subs	r4, r4, r6
    2718:	c510      	stmia	r5!, {r4}
    271a:	4710      	bx	r2
    271c:	c910      	ldmia	r1!, {r4}
    271e:	cb40      	ldmia	r3!, {r6}
    2720:	41b4      	sbcs	r4, r6
    2722:	c510      	stmia	r5!, {r4}
    2724:	c910      	ldmia	r1!, {r4}
    2726:	cb40      	ldmia	r3!, {r6}
    2728:	41b4      	sbcs	r4, r6
    272a:	c510      	stmia	r5!, {r4}
    272c:	c910      	ldmia	r1!, {r4}
    272e:	cb40      	ldmia	r3!, {r6}
    2730:	41b4      	sbcs	r4, r6
    2732:	c510      	stmia	r5!, {r4}
    2734:	c910      	ldmia	r1!, {r4}
    2736:	cb40      	ldmia	r3!, {r6}
    2738:	41b4      	sbcs	r4, r6
    273a:	c510      	stmia	r5!, {r4}
    273c:	c910      	ldmia	r1!, {r4}
    273e:	cb40      	ldmia	r3!, {r6}
    2740:	41b4      	sbcs	r4, r6
    2742:	c510      	stmia	r5!, {r4}
    2744:	c910      	ldmia	r1!, {r4}
    2746:	cb40      	ldmia	r3!, {r6}
    2748:	41b4      	sbcs	r4, r6
    274a:	c510      	stmia	r5!, {r4}
    274c:	c910      	ldmia	r1!, {r4}
    274e:	cb40      	ldmia	r3!, {r6}
    2750:	41b4      	sbcs	r4, r6
    2752:	c510      	stmia	r5!, {r4}
    2754:	4140      	adcs	r0, r0
    2756:	e7c3      	b.n	26e0 <vli_mmod_fast_secp256k1+0x410>
    2758:	fffffc2f 	.word	0xfffffc2f
    275c:	00000000 	.word	0x00000000

00002760 <XYcZ_addC>:
                      uECC_Curve curve) {
    2760:	b5f0      	push	{r4, r5, r6, r7, lr}
    2762:	4657      	mov	r7, sl
    2764:	464e      	mov	r6, r9
    2766:	4645      	mov	r5, r8
    2768:	46de      	mov	lr, fp
    wordcount_t num_words = curve->num_words;
    276a:	2400      	movs	r4, #0
                      uECC_Curve curve) {
    276c:	4691      	mov	r9, r2
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    276e:	f240 7851 	movw	r8, #1873	; 0x751
                      uECC_Curve curve) {
    2772:	b5e0      	push	{r5, r6, r7, lr}
    2774:	b0af      	sub	sp, #188	; 0xbc
    2776:	469a      	mov	sl, r3
    2778:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    277a:	9003      	str	r0, [sp, #12]
    wordcount_t num_words = curve->num_words;
    277c:	571c      	ldrsb	r4, [r3, r4]
                      uECC_Curve curve) {
    277e:	9302      	str	r3, [sp, #8]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    2780:	3304      	adds	r3, #4
                      uECC_Curve curve) {
    2782:	9104      	str	r1, [sp, #16]
    uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
    2784:	9301      	str	r3, [sp, #4]
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2786:	0002      	movs	r2, r0
    2788:	0023      	movs	r3, r4
    278a:	4649      	mov	r1, r9
    278c:	a806      	add	r0, sp, #24
    278e:	f2c0 0800 	movt	r8, #0
    2792:	47c0      	blx	r8
    if (l_borrow) {
    2794:	b140      	cbz	r0, 27a8 <XYcZ_addC+0x48>
        uECC_vli_add(result, result, mod, num_words);
    2796:	f240 66f1 	movw	r6, #1777	; 0x6f1
    279a:	a906      	add	r1, sp, #24
    279c:	0023      	movs	r3, r4
    279e:	9a01      	ldr	r2, [sp, #4]
    27a0:	0008      	movs	r0, r1
    27a2:	f2c0 0600 	movt	r6, #0
    27a6:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    27a8:	f240 7bad 	movw	fp, #1965	; 0x7ad
    curve->mmod_fast(result, product);
    27ac:	26b0      	movs	r6, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    27ae:	9f02      	ldr	r7, [sp, #8]
    27b0:	aa06      	add	r2, sp, #24
    27b2:	783b      	ldrb	r3, [r7, #0]
    27b4:	0011      	movs	r1, r2
    27b6:	f2c0 0b00 	movt	fp, #0
    27ba:	a81e      	add	r0, sp, #120	; 0x78
    27bc:	b25b      	sxtb	r3, r3
    27be:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    27c0:	a91e      	add	r1, sp, #120	; 0x78
    27c2:	a806      	add	r0, sp, #24
    27c4:	59bb      	ldr	r3, [r7, r6]
    27c6:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    27c8:	9d03      	ldr	r5, [sp, #12]
    27ca:	783b      	ldrb	r3, [r7, #0]
    27cc:	aa06      	add	r2, sp, #24
    27ce:	0029      	movs	r1, r5
    27d0:	a81e      	add	r0, sp, #120	; 0x78
    27d2:	b25b      	sxtb	r3, r3
    27d4:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    27d6:	a91e      	add	r1, sp, #120	; 0x78
    27d8:	0028      	movs	r0, r5
    27da:	59bb      	ldr	r3, [r7, r6]
    27dc:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    27de:	783b      	ldrb	r3, [r7, #0]
    27e0:	aa06      	add	r2, sp, #24
    27e2:	4649      	mov	r1, r9
    27e4:	a81e      	add	r0, sp, #120	; 0x78
    27e6:	b25b      	sxtb	r3, r3
    27e8:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    27ea:	59bb      	ldr	r3, [r7, r6]
    27ec:	a91e      	add	r1, sp, #120	; 0x78
    27ee:	4648      	mov	r0, r9
    27f0:	4798      	blx	r3
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    27f2:	2308      	movs	r3, #8
    27f4:	1b1b      	subs	r3, r3, r4
    27f6:	00db      	lsls	r3, r3, #3
    27f8:	3301      	adds	r3, #1
    27fa:	0018      	movs	r0, r3
    27fc:	9305      	str	r3, [sp, #20]
    __asm__ volatile (
    27fe:	4652      	mov	r2, sl
    2800:	ab06      	add	r3, sp, #24
    2802:	9904      	ldr	r1, [sp, #16]
    2804:	2600      	movs	r6, #0
    2806:	a505      	add	r5, pc, #20	; (adr r5, 281c <XYcZ_addC+0xbc>)
    2808:	46c0      	nop			; (mov r8, r8)
    280a:	46c0      	nop			; (mov r8, r8)
    280c:	46c0      	nop			; (mov r8, r8)
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	1940      	adds	r0, r0, r5
    2812:	ca20      	ldmia	r2!, {r5}
    2814:	c980      	ldmia	r1!, {r7}
    2816:	19ed      	adds	r5, r5, r7
    2818:	c320      	stmia	r3!, {r5}
    281a:	4700      	bx	r0
    281c:	ca20      	ldmia	r2!, {r5}
    281e:	c980      	ldmia	r1!, {r7}
    2820:	417d      	adcs	r5, r7
    2822:	c320      	stmia	r3!, {r5}
    2824:	ca20      	ldmia	r2!, {r5}
    2826:	c980      	ldmia	r1!, {r7}
    2828:	417d      	adcs	r5, r7
    282a:	c320      	stmia	r3!, {r5}
    282c:	ca20      	ldmia	r2!, {r5}
    282e:	c980      	ldmia	r1!, {r7}
    2830:	417d      	adcs	r5, r7
    2832:	c320      	stmia	r3!, {r5}
    2834:	ca20      	ldmia	r2!, {r5}
    2836:	c980      	ldmia	r1!, {r7}
    2838:	417d      	adcs	r5, r7
    283a:	c320      	stmia	r3!, {r5}
    283c:	ca20      	ldmia	r2!, {r5}
    283e:	c980      	ldmia	r1!, {r7}
    2840:	417d      	adcs	r5, r7
    2842:	c320      	stmia	r3!, {r5}
    2844:	ca20      	ldmia	r2!, {r5}
    2846:	c980      	ldmia	r1!, {r7}
    2848:	417d      	adcs	r5, r7
    284a:	c320      	stmia	r3!, {r5}
    284c:	ca20      	ldmia	r2!, {r5}
    284e:	c980      	ldmia	r1!, {r7}
    2850:	417d      	adcs	r5, r7
    2852:	c320      	stmia	r3!, {r5}
    2854:	4176      	adcs	r6, r6
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    2856:	b9e6      	cbnz	r6, 2892 <XYcZ_addC+0x132>
    for (i = num_words - 1; i >= 0; --i) {
    2858:	1e63      	subs	r3, r4, #1
    285a:	b25b      	sxtb	r3, r3
    285c:	2b00      	cmp	r3, #0
    285e:	db18      	blt.n	2892 <XYcZ_addC+0x132>
        if (left[i] > right[i]) {
    2860:	9901      	ldr	r1, [sp, #4]
    2862:	009a      	lsls	r2, r3, #2
    2864:	a806      	add	r0, sp, #24
    2866:	5889      	ldr	r1, [r1, r2]
    2868:	5882      	ldr	r2, [r0, r2]
    286a:	428a      	cmp	r2, r1
    286c:	d316      	bcc.n	289c <XYcZ_addC+0x13c>
        } else if (left[i] < right[i]) {
    286e:	d810      	bhi.n	2892 <XYcZ_addC+0x132>
    2870:	9d01      	ldr	r5, [sp, #4]
    2872:	9f02      	ldr	r7, [sp, #8]
    2874:	e007      	b.n	2886 <XYcZ_addC+0x126>
        if (left[i] > right[i]) {
    2876:	009a      	lsls	r2, r3, #2
    2878:	a806      	add	r0, sp, #24
    287a:	58a9      	ldr	r1, [r5, r2]
    287c:	5882      	ldr	r2, [r0, r2]
    287e:	4291      	cmp	r1, r2
    2880:	d900      	bls.n	2884 <XYcZ_addC+0x124>
    2882:	e12d      	b.n	2ae0 <XYcZ_addC+0x380>
        } else if (left[i] < right[i]) {
    2884:	d303      	bcc.n	288e <XYcZ_addC+0x12e>
    2886:	3b01      	subs	r3, #1
    2888:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    288a:	1c5a      	adds	r2, r3, #1
    288c:	d1f3      	bne.n	2876 <XYcZ_addC+0x116>
    288e:	9501      	str	r5, [sp, #4]
    2890:	9702      	str	r7, [sp, #8]
        uECC_vli_sub(result, result, mod, num_words);
    2892:	a906      	add	r1, sp, #24
    2894:	0023      	movs	r3, r4
    2896:	9a01      	ldr	r2, [sp, #4]
    2898:	0008      	movs	r0, r1
    289a:	47c0      	blx	r8
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    289c:	0023      	movs	r3, r4
    289e:	9a04      	ldr	r2, [sp, #16]
    28a0:	4651      	mov	r1, sl
    28a2:	4650      	mov	r0, sl
    28a4:	47c0      	blx	r8
    if (l_borrow) {
    28a6:	b140      	cbz	r0, 28ba <XYcZ_addC+0x15a>
        uECC_vli_add(result, result, mod, num_words);
    28a8:	f240 66f1 	movw	r6, #1777	; 0x6f1
    28ac:	0023      	movs	r3, r4
    28ae:	9a01      	ldr	r2, [sp, #4]
    28b0:	4651      	mov	r1, sl
    28b2:	4650      	mov	r0, sl
    28b4:	f2c0 0600 	movt	r6, #0
    28b8:	47b0      	blx	r6
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    28ba:	ab0e      	add	r3, sp, #56	; 0x38
    28bc:	0018      	movs	r0, r3
    28be:	9300      	str	r3, [sp, #0]
    28c0:	9a03      	ldr	r2, [sp, #12]
    28c2:	0023      	movs	r3, r4
    28c4:	4649      	mov	r1, r9
    28c6:	47c0      	blx	r8
    if (l_borrow) {
    28c8:	b140      	cbz	r0, 28dc <XYcZ_addC+0x17c>
        uECC_vli_add(result, result, mod, num_words);
    28ca:	f240 65f1 	movw	r5, #1777	; 0x6f1
    28ce:	9800      	ldr	r0, [sp, #0]
    28d0:	0023      	movs	r3, r4
    28d2:	9a01      	ldr	r2, [sp, #4]
    28d4:	0001      	movs	r1, r0
    28d6:	f2c0 0500 	movt	r5, #0
    28da:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    28dc:	2300      	movs	r3, #0
    28de:	9e00      	ldr	r6, [sp, #0]
    28e0:	9f02      	ldr	r7, [sp, #8]
    28e2:	9d04      	ldr	r5, [sp, #16]
    28e4:	0032      	movs	r2, r6
    28e6:	56fb      	ldrsb	r3, [r7, r3]
    28e8:	0029      	movs	r1, r5
    28ea:	a81e      	add	r0, sp, #120	; 0x78
    28ec:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    28ee:	23b0      	movs	r3, #176	; 0xb0
    28f0:	a91e      	add	r1, sp, #120	; 0x78
    28f2:	58fb      	ldr	r3, [r7, r3]
    28f4:	0028      	movs	r0, r5
    28f6:	4798      	blx	r3
    28f8:	9600      	str	r6, [sp, #0]
    28fa:	0032      	movs	r2, r6
    28fc:	9903      	ldr	r1, [sp, #12]
    28fe:	4648      	mov	r0, r9
    2900:	9b05      	ldr	r3, [sp, #20]
    2902:	2500      	movs	r5, #0
    2904:	a705      	add	r7, pc, #20	; (adr r7, 291c <XYcZ_addC+0x1bc>)
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	46c0      	nop			; (mov r8, r8)
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	46c0      	nop			; (mov r8, r8)
    290e:	46c0      	nop			; (mov r8, r8)
    2910:	19db      	adds	r3, r3, r7
    2912:	c980      	ldmia	r1!, {r7}
    2914:	c840      	ldmia	r0!, {r6}
    2916:	19bf      	adds	r7, r7, r6
    2918:	c280      	stmia	r2!, {r7}
    291a:	4718      	bx	r3
    291c:	c980      	ldmia	r1!, {r7}
    291e:	c840      	ldmia	r0!, {r6}
    2920:	4177      	adcs	r7, r6
    2922:	c280      	stmia	r2!, {r7}
    2924:	c980      	ldmia	r1!, {r7}
    2926:	c840      	ldmia	r0!, {r6}
    2928:	4177      	adcs	r7, r6
    292a:	c280      	stmia	r2!, {r7}
    292c:	c980      	ldmia	r1!, {r7}
    292e:	c840      	ldmia	r0!, {r6}
    2930:	4177      	adcs	r7, r6
    2932:	c280      	stmia	r2!, {r7}
    2934:	c980      	ldmia	r1!, {r7}
    2936:	c840      	ldmia	r0!, {r6}
    2938:	4177      	adcs	r7, r6
    293a:	c280      	stmia	r2!, {r7}
    293c:	c980      	ldmia	r1!, {r7}
    293e:	c840      	ldmia	r0!, {r6}
    2940:	4177      	adcs	r7, r6
    2942:	c280      	stmia	r2!, {r7}
    2944:	c980      	ldmia	r1!, {r7}
    2946:	c840      	ldmia	r0!, {r6}
    2948:	4177      	adcs	r7, r6
    294a:	c280      	stmia	r2!, {r7}
    294c:	c980      	ldmia	r1!, {r7}
    294e:	c840      	ldmia	r0!, {r6}
    2950:	4177      	adcs	r7, r6
    2952:	c280      	stmia	r2!, {r7}
    2954:	416d      	adcs	r5, r5
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    2956:	b9e5      	cbnz	r5, 2992 <XYcZ_addC+0x232>
    for (i = num_words - 1; i >= 0; --i) {
    2958:	1e63      	subs	r3, r4, #1
    295a:	b25b      	sxtb	r3, r3
    295c:	2b00      	cmp	r3, #0
    295e:	db18      	blt.n	2992 <XYcZ_addC+0x232>
        if (left[i] > right[i]) {
    2960:	9901      	ldr	r1, [sp, #4]
    2962:	9800      	ldr	r0, [sp, #0]
    2964:	009a      	lsls	r2, r3, #2
    2966:	5889      	ldr	r1, [r1, r2]
    2968:	5882      	ldr	r2, [r0, r2]
    296a:	4291      	cmp	r1, r2
    296c:	d816      	bhi.n	299c <XYcZ_addC+0x23c>
        } else if (left[i] < right[i]) {
    296e:	d310      	bcc.n	2992 <XYcZ_addC+0x232>
    2970:	9d01      	ldr	r5, [sp, #4]
    2972:	9f02      	ldr	r7, [sp, #8]
    2974:	e007      	b.n	2986 <XYcZ_addC+0x226>
        if (left[i] > right[i]) {
    2976:	9800      	ldr	r0, [sp, #0]
    2978:	009a      	lsls	r2, r3, #2
    297a:	58a9      	ldr	r1, [r5, r2]
    297c:	5882      	ldr	r2, [r0, r2]
    297e:	4291      	cmp	r1, r2
    2980:	d900      	bls.n	2984 <XYcZ_addC+0x224>
    2982:	e0aa      	b.n	2ada <XYcZ_addC+0x37a>
        } else if (left[i] < right[i]) {
    2984:	d303      	bcc.n	298e <XYcZ_addC+0x22e>
    2986:	3b01      	subs	r3, #1
    2988:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    298a:	1c5a      	adds	r2, r3, #1
    298c:	d1f3      	bne.n	2976 <XYcZ_addC+0x216>
    298e:	9501      	str	r5, [sp, #4]
    2990:	9702      	str	r7, [sp, #8]
        uECC_vli_sub(result, result, mod, num_words);
    2992:	9800      	ldr	r0, [sp, #0]
    2994:	0023      	movs	r3, r4
    2996:	9a01      	ldr	r2, [sp, #4]
    2998:	0001      	movs	r1, r0
    299a:	47c0      	blx	r8
    uECC_vli_mult(product, left, right, curve->num_words);
    299c:	2300      	movs	r3, #0
    299e:	9d02      	ldr	r5, [sp, #8]
    29a0:	4652      	mov	r2, sl
    29a2:	56eb      	ldrsb	r3, [r5, r3]
    29a4:	4651      	mov	r1, sl
    29a6:	a81e      	add	r0, sp, #120	; 0x78
    29a8:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    29aa:	23b0      	movs	r3, #176	; 0xb0
    29ac:	a91e      	add	r1, sp, #120	; 0x78
    29ae:	58eb      	ldr	r3, [r5, r3]
    29b0:	4648      	mov	r0, r9
    29b2:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    29b4:	0023      	movs	r3, r4
    29b6:	9a00      	ldr	r2, [sp, #0]
    29b8:	4649      	mov	r1, r9
    29ba:	4648      	mov	r0, r9
    29bc:	47c0      	blx	r8
    if (l_borrow) {
    29be:	b140      	cbz	r0, 29d2 <XYcZ_addC+0x272>
        uECC_vli_add(result, result, mod, num_words);
    29c0:	f240 65f1 	movw	r5, #1777	; 0x6f1
    29c4:	0023      	movs	r3, r4
    29c6:	9a01      	ldr	r2, [sp, #4]
    29c8:	4649      	mov	r1, r9
    29ca:	4648      	mov	r0, r9
    29cc:	f2c0 0500 	movt	r5, #0
    29d0:	47a8      	blx	r5
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    29d2:	0023      	movs	r3, r4
    29d4:	464a      	mov	r2, r9
    29d6:	9903      	ldr	r1, [sp, #12]
    29d8:	a816      	add	r0, sp, #88	; 0x58
    29da:	47c0      	blx	r8
    if (l_borrow) {
    29dc:	b140      	cbz	r0, 29f0 <XYcZ_addC+0x290>
        uECC_vli_add(result, result, mod, num_words);
    29de:	f240 69f1 	movw	r9, #1777	; 0x6f1
    29e2:	a916      	add	r1, sp, #88	; 0x58
    29e4:	0023      	movs	r3, r4
    29e6:	9a01      	ldr	r2, [sp, #4]
    29e8:	0008      	movs	r0, r1
    29ea:	f2c0 0900 	movt	r9, #0
    29ee:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    29f0:	2300      	movs	r3, #0
    29f2:	9d02      	ldr	r5, [sp, #8]
    29f4:	aa16      	add	r2, sp, #88	; 0x58
    29f6:	56eb      	ldrsb	r3, [r5, r3]
    29f8:	4651      	mov	r1, sl
    29fa:	a81e      	add	r0, sp, #120	; 0x78
    29fc:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    29fe:	23b0      	movs	r3, #176	; 0xb0
    2a00:	a91e      	add	r1, sp, #120	; 0x78
    2a02:	58eb      	ldr	r3, [r5, r3]
    2a04:	4650      	mov	r0, sl
    2a06:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a08:	0023      	movs	r3, r4
    2a0a:	9a04      	ldr	r2, [sp, #16]
    2a0c:	4651      	mov	r1, sl
    2a0e:	4650      	mov	r0, sl
    2a10:	47c0      	blx	r8
    if (l_borrow) {
    2a12:	b140      	cbz	r0, 2a26 <XYcZ_addC+0x2c6>
        uECC_vli_add(result, result, mod, num_words);
    2a14:	f240 69f1 	movw	r9, #1777	; 0x6f1
    2a18:	0023      	movs	r3, r4
    2a1a:	9a01      	ldr	r2, [sp, #4]
    2a1c:	4651      	mov	r1, sl
    2a1e:	4650      	mov	r0, sl
    2a20:	f2c0 0900 	movt	r9, #0
    2a24:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    2a26:	2300      	movs	r3, #0
    2a28:	9d02      	ldr	r5, [sp, #8]
    2a2a:	aa06      	add	r2, sp, #24
    2a2c:	0011      	movs	r1, r2
    2a2e:	56eb      	ldrsb	r3, [r5, r3]
    2a30:	a81e      	add	r0, sp, #120	; 0x78
    2a32:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2a34:	23b0      	movs	r3, #176	; 0xb0
    2a36:	a91e      	add	r1, sp, #120	; 0x78
    2a38:	58eb      	ldr	r3, [r5, r3]
    2a3a:	a816      	add	r0, sp, #88	; 0x58
    2a3c:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a3e:	a916      	add	r1, sp, #88	; 0x58
    2a40:	0023      	movs	r3, r4
    2a42:	9a00      	ldr	r2, [sp, #0]
    2a44:	0008      	movs	r0, r1
    2a46:	47c0      	blx	r8
    if (l_borrow) {
    2a48:	b140      	cbz	r0, 2a5c <XYcZ_addC+0x2fc>
        uECC_vli_add(result, result, mod, num_words);
    2a4a:	f240 69f1 	movw	r9, #1777	; 0x6f1
    2a4e:	a916      	add	r1, sp, #88	; 0x58
    2a50:	0023      	movs	r3, r4
    2a52:	9a01      	ldr	r2, [sp, #4]
    2a54:	0008      	movs	r0, r1
    2a56:	f2c0 0900 	movt	r9, #0
    2a5a:	47c8      	blx	r9
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a5c:	0023      	movs	r3, r4
    2a5e:	9a03      	ldr	r2, [sp, #12]
    2a60:	a916      	add	r1, sp, #88	; 0x58
    2a62:	9800      	ldr	r0, [sp, #0]
    2a64:	47c0      	blx	r8
    if (l_borrow) {
    2a66:	b140      	cbz	r0, 2a7a <XYcZ_addC+0x31a>
        uECC_vli_add(result, result, mod, num_words);
    2a68:	f240 69f1 	movw	r9, #1777	; 0x6f1
    2a6c:	9800      	ldr	r0, [sp, #0]
    2a6e:	0023      	movs	r3, r4
    2a70:	9a01      	ldr	r2, [sp, #4]
    2a72:	0001      	movs	r1, r0
    2a74:	f2c0 0900 	movt	r9, #0
    2a78:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, curve->num_words);
    2a7a:	2300      	movs	r3, #0
    2a7c:	9d00      	ldr	r5, [sp, #0]
    2a7e:	9e02      	ldr	r6, [sp, #8]
    2a80:	aa06      	add	r2, sp, #24
    2a82:	56f3      	ldrsb	r3, [r6, r3]
    2a84:	0029      	movs	r1, r5
    2a86:	a81e      	add	r0, sp, #120	; 0x78
    2a88:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    2a8a:	23b0      	movs	r3, #176	; 0xb0
    2a8c:	a91e      	add	r1, sp, #120	; 0x78
    2a8e:	58f3      	ldr	r3, [r6, r3]
    2a90:	0028      	movs	r0, r5
    2a92:	4798      	blx	r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    2a94:	9804      	ldr	r0, [sp, #16]
    2a96:	0023      	movs	r3, r4
    2a98:	0002      	movs	r2, r0
    2a9a:	0029      	movs	r1, r5
    2a9c:	47c0      	blx	r8
    if (l_borrow) {
    2a9e:	b140      	cbz	r0, 2ab2 <XYcZ_addC+0x352>
        uECC_vli_add(result, result, mod, num_words);
    2aa0:	f240 65f1 	movw	r5, #1777	; 0x6f1
    2aa4:	9804      	ldr	r0, [sp, #16]
    2aa6:	0023      	movs	r3, r4
    2aa8:	9a01      	ldr	r2, [sp, #4]
    2aaa:	0001      	movs	r1, r0
    2aac:	f2c0 0500 	movt	r5, #0
    2ab0:	47a8      	blx	r5
    for (i = 0; i < num_words; ++i) {
    2ab2:	2c00      	cmp	r4, #0
    2ab4:	dd0a      	ble.n	2acc <XYcZ_addC+0x36c>
    2ab6:	f246 6331 	movw	r3, #26161	; 0x6631
        dest[i] = src[i];
    2aba:	3c01      	subs	r4, #1
    2abc:	b2e2      	uxtb	r2, r4
    2abe:	3201      	adds	r2, #1
    2ac0:	0092      	lsls	r2, r2, #2
    2ac2:	a916      	add	r1, sp, #88	; 0x58
    2ac4:	9803      	ldr	r0, [sp, #12]
    2ac6:	f2c0 0300 	movt	r3, #0
    2aca:	4798      	blx	r3
}
    2acc:	b02f      	add	sp, #188	; 0xbc
    2ace:	bc3c      	pop	{r2, r3, r4, r5}
    2ad0:	4690      	mov	r8, r2
    2ad2:	4699      	mov	r9, r3
    2ad4:	46a2      	mov	sl, r4
    2ad6:	46ab      	mov	fp, r5
    2ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ada:	9501      	str	r5, [sp, #4]
    2adc:	9702      	str	r7, [sp, #8]
    2ade:	e75d      	b.n	299c <XYcZ_addC+0x23c>
    2ae0:	9501      	str	r5, [sp, #4]
    2ae2:	9702      	str	r7, [sp, #8]
    2ae4:	e6da      	b.n	289c <XYcZ_addC+0x13c>
    2ae6:	46c0      	nop			; (mov r8, r8)
	...

00002af0 <vli_mmod_fast_secp256r1>:
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
    2af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2af2:	4657      	mov	r7, sl
    2af4:	464e      	mov	r6, r9
    2af6:	4645      	mov	r5, r8
    2af8:	46de      	mov	lr, fp
    tmp[0] = tmp[1] = tmp[2] = 0;
    2afa:	f240 0900 	movw	r9, #0
        dest[i] = src[i];
    2afe:	680b      	ldr	r3, [r1, #0]
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
    2b00:	b5e0      	push	{r5, r6, r7, lr}
    2b02:	6003      	str	r3, [r0, #0]
    2b04:	684b      	ldr	r3, [r1, #4]
    2b06:	b091      	sub	sp, #68	; 0x44
    2b08:	6043      	str	r3, [r0, #4]
    2b0a:	688b      	ldr	r3, [r1, #8]
    2b0c:	ac08      	add	r4, sp, #32
    2b0e:	6083      	str	r3, [r0, #8]
    2b10:	68cb      	ldr	r3, [r1, #12]
    2b12:	4682      	mov	sl, r0
    2b14:	60c3      	str	r3, [r0, #12]
    2b16:	690b      	ldr	r3, [r1, #16]
    2b18:	2501      	movs	r5, #1
    2b1a:	6103      	str	r3, [r0, #16]
    2b1c:	694b      	ldr	r3, [r1, #20]
    2b1e:	0026      	movs	r6, r4
    2b20:	6143      	str	r3, [r0, #20]
    2b22:	698b      	ldr	r3, [r1, #24]
    2b24:	0027      	movs	r7, r4
    2b26:	6183      	str	r3, [r0, #24]
    2b28:	69cb      	ldr	r3, [r1, #28]
    2b2a:	61c3      	str	r3, [r0, #28]
    tmp[0] = tmp[1] = tmp[2] = 0;
    2b2c:	464b      	mov	r3, r9
    2b2e:	930a      	str	r3, [sp, #40]	; 0x28
    2b30:	9309      	str	r3, [sp, #36]	; 0x24
    2b32:	9308      	str	r3, [sp, #32]
    tmp[3] = product[11];
    2b34:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    2b36:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[4] = product[12];
    2b38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    2b3a:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[5] = product[13];
    2b3c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    2b3e:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[6] = product[14];
    2b40:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    2b42:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[7] = product[15];
    2b44:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    2b46:	930f      	str	r3, [sp, #60]	; 0x3c
    2b48:	2300      	movs	r3, #0
    2b4a:	a204      	add	r2, pc, #16	; (adr r2, 2b5c <vli_mmod_fast_secp256r1+0x6c>)
    2b4c:	46c0      	nop			; (mov r8, r8)
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	18ad      	adds	r5, r5, r2
    2b52:	ce04      	ldmia	r6!, {r2}
    2b54:	cf01      	ldmia	r7!, {r0}
    2b56:	1812      	adds	r2, r2, r0
    2b58:	c404      	stmia	r4!, {r2}
    2b5a:	4728      	bx	r5
    2b5c:	ce04      	ldmia	r6!, {r2}
    2b5e:	cf01      	ldmia	r7!, {r0}
    2b60:	4142      	adcs	r2, r0
    2b62:	c404      	stmia	r4!, {r2}
    2b64:	ce04      	ldmia	r6!, {r2}
    2b66:	cf01      	ldmia	r7!, {r0}
    2b68:	4142      	adcs	r2, r0
    2b6a:	c404      	stmia	r4!, {r2}
    2b6c:	ce04      	ldmia	r6!, {r2}
    2b6e:	cf01      	ldmia	r7!, {r0}
    2b70:	4142      	adcs	r2, r0
    2b72:	c404      	stmia	r4!, {r2}
    2b74:	ce04      	ldmia	r6!, {r2}
    2b76:	cf01      	ldmia	r7!, {r0}
    2b78:	4142      	adcs	r2, r0
    2b7a:	c404      	stmia	r4!, {r2}
    2b7c:	ce04      	ldmia	r6!, {r2}
    2b7e:	cf01      	ldmia	r7!, {r0}
    2b80:	4142      	adcs	r2, r0
    2b82:	c404      	stmia	r4!, {r2}
    2b84:	ce04      	ldmia	r6!, {r2}
    2b86:	cf01      	ldmia	r7!, {r0}
    2b88:	4142      	adcs	r2, r0
    2b8a:	c404      	stmia	r4!, {r2}
    2b8c:	ce04      	ldmia	r6!, {r2}
    2b8e:	cf01      	ldmia	r7!, {r0}
    2b90:	4142      	adcs	r2, r0
    2b92:	c404      	stmia	r4!, {r2}
    2b94:	415b      	adcs	r3, r3
    2b96:	2601      	movs	r6, #1
    2b98:	9301      	str	r3, [sp, #4]
    2b9a:	4654      	mov	r4, sl
    2b9c:	ad08      	add	r5, sp, #32
    2b9e:	4653      	mov	r3, sl
    2ba0:	2700      	movs	r7, #0
    2ba2:	a206      	add	r2, pc, #24	; (adr r2, 2bbc <vli_mmod_fast_secp256r1+0xcc>)
    2ba4:	46c0      	nop			; (mov r8, r8)
    2ba6:	46c0      	nop			; (mov r8, r8)
    2ba8:	46c0      	nop			; (mov r8, r8)
    2baa:	46c0      	nop			; (mov r8, r8)
    2bac:	46c0      	nop			; (mov r8, r8)
    2bae:	46c0      	nop			; (mov r8, r8)
    2bb0:	18b6      	adds	r6, r6, r2
    2bb2:	cb04      	ldmia	r3!, {r2}
    2bb4:	cd01      	ldmia	r5!, {r0}
    2bb6:	1812      	adds	r2, r2, r0
    2bb8:	c404      	stmia	r4!, {r2}
    2bba:	4730      	bx	r6
    2bbc:	cb04      	ldmia	r3!, {r2}
    2bbe:	cd01      	ldmia	r5!, {r0}
    2bc0:	4142      	adcs	r2, r0
    2bc2:	c404      	stmia	r4!, {r2}
    2bc4:	cb04      	ldmia	r3!, {r2}
    2bc6:	cd01      	ldmia	r5!, {r0}
    2bc8:	4142      	adcs	r2, r0
    2bca:	c404      	stmia	r4!, {r2}
    2bcc:	cb04      	ldmia	r3!, {r2}
    2bce:	cd01      	ldmia	r5!, {r0}
    2bd0:	4142      	adcs	r2, r0
    2bd2:	c404      	stmia	r4!, {r2}
    2bd4:	cb04      	ldmia	r3!, {r2}
    2bd6:	cd01      	ldmia	r5!, {r0}
    2bd8:	4142      	adcs	r2, r0
    2bda:	c404      	stmia	r4!, {r2}
    2bdc:	cb04      	ldmia	r3!, {r2}
    2bde:	cd01      	ldmia	r5!, {r0}
    2be0:	4142      	adcs	r2, r0
    2be2:	c404      	stmia	r4!, {r2}
    2be4:	cb04      	ldmia	r3!, {r2}
    2be6:	cd01      	ldmia	r5!, {r0}
    2be8:	4142      	adcs	r2, r0
    2bea:	c404      	stmia	r4!, {r2}
    2bec:	cb04      	ldmia	r3!, {r2}
    2bee:	cd01      	ldmia	r5!, {r0}
    2bf0:	4142      	adcs	r2, r0
    2bf2:	c404      	stmia	r4!, {r2}
    2bf4:	417f      	adcs	r7, r7
    tmp[7] = 0;
    2bf6:	464b      	mov	r3, r9
    tmp[3] = product[12];
    2bf8:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[7] = 0;
    2bfa:	930f      	str	r3, [sp, #60]	; 0x3c
    tmp[3] = product[12];
    2bfc:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[13];
    2bfe:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    2c00:	9702      	str	r7, [sp, #8]
    2c02:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[14];
    2c04:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2c06:	2501      	movs	r5, #1
    2c08:	940d      	str	r4, [sp, #52]	; 0x34
    tmp[6] = product[15];
    2c0a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2c0c:	940e      	str	r4, [sp, #56]	; 0x38
    2c0e:	ac08      	add	r4, sp, #32
    2c10:	0026      	movs	r6, r4
    2c12:	0023      	movs	r3, r4
    2c14:	2700      	movs	r7, #0
    2c16:	a205      	add	r2, pc, #20	; (adr r2, 2c2c <vli_mmod_fast_secp256r1+0x13c>)
    2c18:	46c0      	nop			; (mov r8, r8)
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	46c0      	nop			; (mov r8, r8)
    2c1e:	46c0      	nop			; (mov r8, r8)
    2c20:	18ad      	adds	r5, r5, r2
    2c22:	ce04      	ldmia	r6!, {r2}
    2c24:	cb01      	ldmia	r3!, {r0}
    2c26:	1812      	adds	r2, r2, r0
    2c28:	c404      	stmia	r4!, {r2}
    2c2a:	4728      	bx	r5
    2c2c:	ce04      	ldmia	r6!, {r2}
    2c2e:	cb01      	ldmia	r3!, {r0}
    2c30:	4142      	adcs	r2, r0
    2c32:	c404      	stmia	r4!, {r2}
    2c34:	ce04      	ldmia	r6!, {r2}
    2c36:	cb01      	ldmia	r3!, {r0}
    2c38:	4142      	adcs	r2, r0
    2c3a:	c404      	stmia	r4!, {r2}
    2c3c:	ce04      	ldmia	r6!, {r2}
    2c3e:	cb01      	ldmia	r3!, {r0}
    2c40:	4142      	adcs	r2, r0
    2c42:	c404      	stmia	r4!, {r2}
    2c44:	ce04      	ldmia	r6!, {r2}
    2c46:	cb01      	ldmia	r3!, {r0}
    2c48:	4142      	adcs	r2, r0
    2c4a:	c404      	stmia	r4!, {r2}
    2c4c:	ce04      	ldmia	r6!, {r2}
    2c4e:	cb01      	ldmia	r3!, {r0}
    2c50:	4142      	adcs	r2, r0
    2c52:	c404      	stmia	r4!, {r2}
    2c54:	ce04      	ldmia	r6!, {r2}
    2c56:	cb01      	ldmia	r3!, {r0}
    2c58:	4142      	adcs	r2, r0
    2c5a:	c404      	stmia	r4!, {r2}
    2c5c:	ce04      	ldmia	r6!, {r2}
    2c5e:	cb01      	ldmia	r3!, {r0}
    2c60:	4142      	adcs	r2, r0
    2c62:	c404      	stmia	r4!, {r2}
    2c64:	417f      	adcs	r7, r7
    2c66:	2601      	movs	r6, #1
    2c68:	9703      	str	r7, [sp, #12]
    2c6a:	4654      	mov	r4, sl
    2c6c:	ad08      	add	r5, sp, #32
    2c6e:	4653      	mov	r3, sl
    2c70:	2700      	movs	r7, #0
    2c72:	a206      	add	r2, pc, #24	; (adr r2, 2c8c <vli_mmod_fast_secp256r1+0x19c>)
    2c74:	46c0      	nop			; (mov r8, r8)
    2c76:	46c0      	nop			; (mov r8, r8)
    2c78:	46c0      	nop			; (mov r8, r8)
    2c7a:	46c0      	nop			; (mov r8, r8)
    2c7c:	46c0      	nop			; (mov r8, r8)
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	18b6      	adds	r6, r6, r2
    2c82:	cb04      	ldmia	r3!, {r2}
    2c84:	cd01      	ldmia	r5!, {r0}
    2c86:	1812      	adds	r2, r2, r0
    2c88:	c404      	stmia	r4!, {r2}
    2c8a:	4730      	bx	r6
    2c8c:	cb04      	ldmia	r3!, {r2}
    2c8e:	cd01      	ldmia	r5!, {r0}
    2c90:	4142      	adcs	r2, r0
    2c92:	c404      	stmia	r4!, {r2}
    2c94:	cb04      	ldmia	r3!, {r2}
    2c96:	cd01      	ldmia	r5!, {r0}
    2c98:	4142      	adcs	r2, r0
    2c9a:	c404      	stmia	r4!, {r2}
    2c9c:	cb04      	ldmia	r3!, {r2}
    2c9e:	cd01      	ldmia	r5!, {r0}
    2ca0:	4142      	adcs	r2, r0
    2ca2:	c404      	stmia	r4!, {r2}
    2ca4:	cb04      	ldmia	r3!, {r2}
    2ca6:	cd01      	ldmia	r5!, {r0}
    2ca8:	4142      	adcs	r2, r0
    2caa:	c404      	stmia	r4!, {r2}
    2cac:	cb04      	ldmia	r3!, {r2}
    2cae:	cd01      	ldmia	r5!, {r0}
    2cb0:	4142      	adcs	r2, r0
    2cb2:	c404      	stmia	r4!, {r2}
    2cb4:	cb04      	ldmia	r3!, {r2}
    2cb6:	cd01      	ldmia	r5!, {r0}
    2cb8:	4142      	adcs	r2, r0
    2cba:	c404      	stmia	r4!, {r2}
    2cbc:	cb04      	ldmia	r3!, {r2}
    2cbe:	cd01      	ldmia	r5!, {r0}
    2cc0:	4142      	adcs	r2, r0
    2cc2:	c404      	stmia	r4!, {r2}
    2cc4:	417f      	adcs	r7, r7
    tmp[3] = tmp[4] = tmp[5] = 0;
    2cc6:	464b      	mov	r3, r9
    tmp[0] = product[8];
    2cc8:	6a0c      	ldr	r4, [r1, #32]
    tmp[3] = tmp[4] = tmp[5] = 0;
    2cca:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[8];
    2ccc:	9408      	str	r4, [sp, #32]
    tmp[1] = product[9];
    2cce:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[3] = tmp[4] = tmp[5] = 0;
    2cd0:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[9];
    2cd2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[10];
    2cd4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[3] = tmp[4] = tmp[5] = 0;
    2cd6:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[2] = product[10];
    2cd8:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[6] = product[14];
    2cda:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2cdc:	9704      	str	r7, [sp, #16]
    2cde:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[15];
    2ce0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2ce2:	ad08      	add	r5, sp, #32
    2ce4:	940f      	str	r4, [sp, #60]	; 0x3c
    2ce6:	2601      	movs	r6, #1
    2ce8:	4654      	mov	r4, sl
    2cea:	4653      	mov	r3, sl
    2cec:	2700      	movs	r7, #0
    2cee:	a203      	add	r2, pc, #12	; (adr r2, 2cfc <vli_mmod_fast_secp256r1+0x20c>)
    2cf0:	18b6      	adds	r6, r6, r2
    2cf2:	cb04      	ldmia	r3!, {r2}
    2cf4:	cd01      	ldmia	r5!, {r0}
    2cf6:	1812      	adds	r2, r2, r0
    2cf8:	c404      	stmia	r4!, {r2}
    2cfa:	4730      	bx	r6
    2cfc:	cb04      	ldmia	r3!, {r2}
    2cfe:	cd01      	ldmia	r5!, {r0}
    2d00:	4142      	adcs	r2, r0
    2d02:	c404      	stmia	r4!, {r2}
    2d04:	cb04      	ldmia	r3!, {r2}
    2d06:	cd01      	ldmia	r5!, {r0}
    2d08:	4142      	adcs	r2, r0
    2d0a:	c404      	stmia	r4!, {r2}
    2d0c:	cb04      	ldmia	r3!, {r2}
    2d0e:	cd01      	ldmia	r5!, {r0}
    2d10:	4142      	adcs	r2, r0
    2d12:	c404      	stmia	r4!, {r2}
    2d14:	cb04      	ldmia	r3!, {r2}
    2d16:	cd01      	ldmia	r5!, {r0}
    2d18:	4142      	adcs	r2, r0
    2d1a:	c404      	stmia	r4!, {r2}
    2d1c:	cb04      	ldmia	r3!, {r2}
    2d1e:	cd01      	ldmia	r5!, {r0}
    2d20:	4142      	adcs	r2, r0
    2d22:	c404      	stmia	r4!, {r2}
    2d24:	cb04      	ldmia	r3!, {r2}
    2d26:	cd01      	ldmia	r5!, {r0}
    2d28:	4142      	adcs	r2, r0
    2d2a:	c404      	stmia	r4!, {r2}
    2d2c:	cb04      	ldmia	r3!, {r2}
    2d2e:	cd01      	ldmia	r5!, {r0}
    2d30:	4142      	adcs	r2, r0
    2d32:	c404      	stmia	r4!, {r2}
    2d34:	417f      	adcs	r7, r7
    tmp[0] = product[9];
    2d36:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[4] = product[14];
    2d38:	6b8d      	ldr	r5, [r1, #56]	; 0x38
    tmp[0] = product[9];
    2d3a:	9408      	str	r4, [sp, #32]
    tmp[1] = product[10];
    2d3c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[4] = product[14];
    2d3e:	950c      	str	r5, [sp, #48]	; 0x30
    tmp[1] = product[10];
    2d40:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[11];
    2d42:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[5] = product[15];
    2d44:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
    tmp[2] = product[11];
    2d46:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[13];
    2d48:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[5] = product[15];
    2d4a:	950d      	str	r5, [sp, #52]	; 0x34
    tmp[3] = product[13];
    2d4c:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[6] = product[13];
    2d4e:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[8];
    2d50:	6a0c      	ldr	r4, [r1, #32]
    2d52:	9705      	str	r7, [sp, #20]
    2d54:	940f      	str	r4, [sp, #60]	; 0x3c
    2d56:	ad08      	add	r5, sp, #32
    2d58:	4654      	mov	r4, sl
    2d5a:	2601      	movs	r6, #1
    2d5c:	4653      	mov	r3, sl
    2d5e:	2700      	movs	r7, #0
    2d60:	a206      	add	r2, pc, #24	; (adr r2, 2d7c <vli_mmod_fast_secp256r1+0x28c>)
    2d62:	46c0      	nop			; (mov r8, r8)
    2d64:	46c0      	nop			; (mov r8, r8)
    2d66:	46c0      	nop			; (mov r8, r8)
    2d68:	46c0      	nop			; (mov r8, r8)
    2d6a:	46c0      	nop			; (mov r8, r8)
    2d6c:	46c0      	nop			; (mov r8, r8)
    2d6e:	46c0      	nop			; (mov r8, r8)
    2d70:	18b6      	adds	r6, r6, r2
    2d72:	cb04      	ldmia	r3!, {r2}
    2d74:	cd01      	ldmia	r5!, {r0}
    2d76:	1812      	adds	r2, r2, r0
    2d78:	c404      	stmia	r4!, {r2}
    2d7a:	4730      	bx	r6
    2d7c:	cb04      	ldmia	r3!, {r2}
    2d7e:	cd01      	ldmia	r5!, {r0}
    2d80:	4142      	adcs	r2, r0
    2d82:	c404      	stmia	r4!, {r2}
    2d84:	cb04      	ldmia	r3!, {r2}
    2d86:	cd01      	ldmia	r5!, {r0}
    2d88:	4142      	adcs	r2, r0
    2d8a:	c404      	stmia	r4!, {r2}
    2d8c:	cb04      	ldmia	r3!, {r2}
    2d8e:	cd01      	ldmia	r5!, {r0}
    2d90:	4142      	adcs	r2, r0
    2d92:	c404      	stmia	r4!, {r2}
    2d94:	cb04      	ldmia	r3!, {r2}
    2d96:	cd01      	ldmia	r5!, {r0}
    2d98:	4142      	adcs	r2, r0
    2d9a:	c404      	stmia	r4!, {r2}
    2d9c:	cb04      	ldmia	r3!, {r2}
    2d9e:	cd01      	ldmia	r5!, {r0}
    2da0:	4142      	adcs	r2, r0
    2da2:	c404      	stmia	r4!, {r2}
    2da4:	cb04      	ldmia	r3!, {r2}
    2da6:	cd01      	ldmia	r5!, {r0}
    2da8:	4142      	adcs	r2, r0
    2daa:	c404      	stmia	r4!, {r2}
    2dac:	cb04      	ldmia	r3!, {r2}
    2dae:	cd01      	ldmia	r5!, {r0}
    2db0:	4142      	adcs	r2, r0
    2db2:	c404      	stmia	r4!, {r2}
    2db4:	417f      	adcs	r7, r7
    tmp[3] = tmp[4] = tmp[5] = 0;
    2db6:	464b      	mov	r3, r9
    tmp[0] = product[11];
    2db8:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[3] = tmp[4] = tmp[5] = 0;
    2dba:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[11];
    2dbc:	9408      	str	r4, [sp, #32]
    tmp[1] = product[12];
    2dbe:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[3] = tmp[4] = tmp[5] = 0;
    2dc0:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[12];
    2dc2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[13];
    2dc4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[3] = tmp[4] = tmp[5] = 0;
    2dc6:	930b      	str	r3, [sp, #44]	; 0x2c
    tmp[2] = product[13];
    2dc8:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[6] = product[8];
    2dca:	6a0c      	ldr	r4, [r1, #32]
    2dcc:	46b8      	mov	r8, r7
    2dce:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[10];
    2dd0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    __asm__ volatile (
    2dd2:	ad08      	add	r5, sp, #32
    2dd4:	940f      	str	r4, [sp, #60]	; 0x3c
    2dd6:	2601      	movs	r6, #1
    2dd8:	4654      	mov	r4, sl
    2dda:	4653      	mov	r3, sl
    2ddc:	2700      	movs	r7, #0
    2dde:	a203      	add	r2, pc, #12	; (adr r2, 2dec <vli_mmod_fast_secp256r1+0x2fc>)
    2de0:	18b6      	adds	r6, r6, r2
    2de2:	cb04      	ldmia	r3!, {r2}
    2de4:	cd01      	ldmia	r5!, {r0}
    2de6:	1a12      	subs	r2, r2, r0
    2de8:	c404      	stmia	r4!, {r2}
    2dea:	4730      	bx	r6
    2dec:	cb04      	ldmia	r3!, {r2}
    2dee:	cd01      	ldmia	r5!, {r0}
    2df0:	4182      	sbcs	r2, r0
    2df2:	c404      	stmia	r4!, {r2}
    2df4:	cb04      	ldmia	r3!, {r2}
    2df6:	cd01      	ldmia	r5!, {r0}
    2df8:	4182      	sbcs	r2, r0
    2dfa:	c404      	stmia	r4!, {r2}
    2dfc:	cb04      	ldmia	r3!, {r2}
    2dfe:	cd01      	ldmia	r5!, {r0}
    2e00:	4182      	sbcs	r2, r0
    2e02:	c404      	stmia	r4!, {r2}
    2e04:	cb04      	ldmia	r3!, {r2}
    2e06:	cd01      	ldmia	r5!, {r0}
    2e08:	4182      	sbcs	r2, r0
    2e0a:	c404      	stmia	r4!, {r2}
    2e0c:	cb04      	ldmia	r3!, {r2}
    2e0e:	cd01      	ldmia	r5!, {r0}
    2e10:	4182      	sbcs	r2, r0
    2e12:	c404      	stmia	r4!, {r2}
    2e14:	cb04      	ldmia	r3!, {r2}
    2e16:	cd01      	ldmia	r5!, {r0}
    2e18:	4182      	sbcs	r2, r0
    2e1a:	c404      	stmia	r4!, {r2}
    2e1c:	cb04      	ldmia	r3!, {r2}
    2e1e:	cd01      	ldmia	r5!, {r0}
    2e20:	4182      	sbcs	r2, r0
    2e22:	c404      	stmia	r4!, {r2}
    2e24:	417f      	adcs	r7, r7
    tmp[4] = tmp[5] = 0;
    2e26:	464b      	mov	r3, r9
    tmp[0] = product[12];
    2e28:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    tmp[4] = tmp[5] = 0;
    2e2a:	930d      	str	r3, [sp, #52]	; 0x34
    tmp[0] = product[12];
    2e2c:	9408      	str	r4, [sp, #32]
    tmp[1] = product[13];
    2e2e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[4] = tmp[5] = 0;
    2e30:	930c      	str	r3, [sp, #48]	; 0x30
    tmp[1] = product[13];
    2e32:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[14];
    2e34:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2e36:	46bc      	mov	ip, r7
    2e38:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[15];
    2e3a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2e3c:	ad08      	add	r5, sp, #32
    2e3e:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[6] = product[9];
    2e40:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    2e42:	2601      	movs	r6, #1
    2e44:	940e      	str	r4, [sp, #56]	; 0x38
    tmp[7] = product[11];
    2e46:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    2e48:	4653      	mov	r3, sl
    2e4a:	940f      	str	r4, [sp, #60]	; 0x3c
    2e4c:	4654      	mov	r4, sl
    2e4e:	2700      	movs	r7, #0
    2e50:	a206      	add	r2, pc, #24	; (adr r2, 2e6c <vli_mmod_fast_secp256r1+0x37c>)
    2e52:	46c0      	nop			; (mov r8, r8)
    2e54:	46c0      	nop			; (mov r8, r8)
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	46c0      	nop			; (mov r8, r8)
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	46c0      	nop			; (mov r8, r8)
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	18b6      	adds	r6, r6, r2
    2e62:	cb04      	ldmia	r3!, {r2}
    2e64:	cd01      	ldmia	r5!, {r0}
    2e66:	1a12      	subs	r2, r2, r0
    2e68:	c404      	stmia	r4!, {r2}
    2e6a:	4730      	bx	r6
    2e6c:	cb04      	ldmia	r3!, {r2}
    2e6e:	cd01      	ldmia	r5!, {r0}
    2e70:	4182      	sbcs	r2, r0
    2e72:	c404      	stmia	r4!, {r2}
    2e74:	cb04      	ldmia	r3!, {r2}
    2e76:	cd01      	ldmia	r5!, {r0}
    2e78:	4182      	sbcs	r2, r0
    2e7a:	c404      	stmia	r4!, {r2}
    2e7c:	cb04      	ldmia	r3!, {r2}
    2e7e:	cd01      	ldmia	r5!, {r0}
    2e80:	4182      	sbcs	r2, r0
    2e82:	c404      	stmia	r4!, {r2}
    2e84:	cb04      	ldmia	r3!, {r2}
    2e86:	cd01      	ldmia	r5!, {r0}
    2e88:	4182      	sbcs	r2, r0
    2e8a:	c404      	stmia	r4!, {r2}
    2e8c:	cb04      	ldmia	r3!, {r2}
    2e8e:	cd01      	ldmia	r5!, {r0}
    2e90:	4182      	sbcs	r2, r0
    2e92:	c404      	stmia	r4!, {r2}
    2e94:	cb04      	ldmia	r3!, {r2}
    2e96:	cd01      	ldmia	r5!, {r0}
    2e98:	4182      	sbcs	r2, r0
    2e9a:	c404      	stmia	r4!, {r2}
    2e9c:	cb04      	ldmia	r3!, {r2}
    2e9e:	cd01      	ldmia	r5!, {r0}
    2ea0:	4182      	sbcs	r2, r0
    2ea2:	c404      	stmia	r4!, {r2}
    2ea4:	417f      	adcs	r7, r7
    tmp[6] = 0;
    2ea6:	464b      	mov	r3, r9
    tmp[0] = product[13];
    2ea8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    tmp[6] = 0;
    2eaa:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[0] = product[13];
    2eac:	9408      	str	r4, [sp, #32]
    tmp[1] = product[14];
    2eae:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    2eb0:	46bb      	mov	fp, r7
    2eb2:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[2] = product[15];
    2eb4:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    2eb6:	ad08      	add	r5, sp, #32
    2eb8:	940a      	str	r4, [sp, #40]	; 0x28
    tmp[3] = product[8];
    2eba:	6a0c      	ldr	r4, [r1, #32]
    2ebc:	2601      	movs	r6, #1
    2ebe:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[9];
    2ec0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    2ec2:	4653      	mov	r3, sl
    2ec4:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[10];
    2ec6:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    2ec8:	940d      	str	r4, [sp, #52]	; 0x34
    tmp[7] = product[12];
    2eca:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    2ecc:	940f      	str	r4, [sp, #60]	; 0x3c
    2ece:	4654      	mov	r4, sl
    2ed0:	2700      	movs	r7, #0
    2ed2:	a206      	add	r2, pc, #24	; (adr r2, 2eec <vli_mmod_fast_secp256r1+0x3fc>)
    2ed4:	46c0      	nop			; (mov r8, r8)
    2ed6:	46c0      	nop			; (mov r8, r8)
    2ed8:	46c0      	nop			; (mov r8, r8)
    2eda:	46c0      	nop			; (mov r8, r8)
    2edc:	46c0      	nop			; (mov r8, r8)
    2ede:	46c0      	nop			; (mov r8, r8)
    2ee0:	18b6      	adds	r6, r6, r2
    2ee2:	cb04      	ldmia	r3!, {r2}
    2ee4:	cd01      	ldmia	r5!, {r0}
    2ee6:	1a12      	subs	r2, r2, r0
    2ee8:	c404      	stmia	r4!, {r2}
    2eea:	4730      	bx	r6
    2eec:	cb04      	ldmia	r3!, {r2}
    2eee:	cd01      	ldmia	r5!, {r0}
    2ef0:	4182      	sbcs	r2, r0
    2ef2:	c404      	stmia	r4!, {r2}
    2ef4:	cb04      	ldmia	r3!, {r2}
    2ef6:	cd01      	ldmia	r5!, {r0}
    2ef8:	4182      	sbcs	r2, r0
    2efa:	c404      	stmia	r4!, {r2}
    2efc:	cb04      	ldmia	r3!, {r2}
    2efe:	cd01      	ldmia	r5!, {r0}
    2f00:	4182      	sbcs	r2, r0
    2f02:	c404      	stmia	r4!, {r2}
    2f04:	cb04      	ldmia	r3!, {r2}
    2f06:	cd01      	ldmia	r5!, {r0}
    2f08:	4182      	sbcs	r2, r0
    2f0a:	c404      	stmia	r4!, {r2}
    2f0c:	cb04      	ldmia	r3!, {r2}
    2f0e:	cd01      	ldmia	r5!, {r0}
    2f10:	4182      	sbcs	r2, r0
    2f12:	c404      	stmia	r4!, {r2}
    2f14:	cb04      	ldmia	r3!, {r2}
    2f16:	cd01      	ldmia	r5!, {r0}
    2f18:	4182      	sbcs	r2, r0
    2f1a:	c404      	stmia	r4!, {r2}
    2f1c:	cb04      	ldmia	r3!, {r2}
    2f1e:	cd01      	ldmia	r5!, {r0}
    2f20:	4182      	sbcs	r2, r0
    2f22:	c404      	stmia	r4!, {r2}
    2f24:	417f      	adcs	r7, r7
    tmp[2] = 0;
    2f26:	464b      	mov	r3, r9
    tmp[0] = product[14];
    2f28:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    tmp[7] = product[13];
    2f2a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    tmp[0] = product[14];
    2f2c:	9408      	str	r4, [sp, #32]
    tmp[1] = product[15];
    2f2e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    tmp[2] = 0;
    2f30:	930a      	str	r3, [sp, #40]	; 0x28
    tmp[1] = product[15];
    2f32:	9409      	str	r4, [sp, #36]	; 0x24
    tmp[3] = product[9];
    2f34:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    tmp[6] = 0;
    2f36:	930e      	str	r3, [sp, #56]	; 0x38
    tmp[3] = product[9];
    2f38:	940b      	str	r4, [sp, #44]	; 0x2c
    tmp[4] = product[10];
    2f3a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    tmp[7] = product[13];
    2f3c:	9207      	str	r2, [sp, #28]
    tmp[4] = product[10];
    2f3e:	940c      	str	r4, [sp, #48]	; 0x30
    tmp[5] = product[11];
    2f40:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    tmp[7] = product[13];
    2f42:	920f      	str	r2, [sp, #60]	; 0x3c
    tmp[5] = product[11];
    2f44:	940d      	str	r4, [sp, #52]	; 0x34
    2f46:	9706      	str	r7, [sp, #24]
    2f48:	4651      	mov	r1, sl
    2f4a:	aa08      	add	r2, sp, #32
    2f4c:	3301      	adds	r3, #1
    2f4e:	4654      	mov	r4, sl
    2f50:	2500      	movs	r5, #0
    2f52:	a606      	add	r6, pc, #24	; (adr r6, 2f6c <vli_mmod_fast_secp256r1+0x47c>)
    2f54:	46c0      	nop			; (mov r8, r8)
    2f56:	46c0      	nop			; (mov r8, r8)
    2f58:	46c0      	nop			; (mov r8, r8)
    2f5a:	46c0      	nop			; (mov r8, r8)
    2f5c:	46c0      	nop			; (mov r8, r8)
    2f5e:	46c0      	nop			; (mov r8, r8)
    2f60:	199b      	adds	r3, r3, r6
    2f62:	cc40      	ldmia	r4!, {r6}
    2f64:	ca01      	ldmia	r2!, {r0}
    2f66:	1a36      	subs	r6, r6, r0
    2f68:	c140      	stmia	r1!, {r6}
    2f6a:	4718      	bx	r3
    2f6c:	cc40      	ldmia	r4!, {r6}
    2f6e:	ca01      	ldmia	r2!, {r0}
    2f70:	4186      	sbcs	r6, r0
    2f72:	c140      	stmia	r1!, {r6}
    2f74:	cc40      	ldmia	r4!, {r6}
    2f76:	ca01      	ldmia	r2!, {r0}
    2f78:	4186      	sbcs	r6, r0
    2f7a:	c140      	stmia	r1!, {r6}
    2f7c:	cc40      	ldmia	r4!, {r6}
    2f7e:	ca01      	ldmia	r2!, {r0}
    2f80:	4186      	sbcs	r6, r0
    2f82:	c140      	stmia	r1!, {r6}
    2f84:	cc40      	ldmia	r4!, {r6}
    2f86:	ca01      	ldmia	r2!, {r0}
    2f88:	4186      	sbcs	r6, r0
    2f8a:	c140      	stmia	r1!, {r6}
    2f8c:	cc40      	ldmia	r4!, {r6}
    2f8e:	ca01      	ldmia	r2!, {r0}
    2f90:	4186      	sbcs	r6, r0
    2f92:	c140      	stmia	r1!, {r6}
    2f94:	cc40      	ldmia	r4!, {r6}
    2f96:	ca01      	ldmia	r2!, {r0}
    2f98:	4186      	sbcs	r6, r0
    2f9a:	c140      	stmia	r1!, {r6}
    2f9c:	cc40      	ldmia	r4!, {r6}
    2f9e:	ca01      	ldmia	r2!, {r0}
    2fa0:	4186      	sbcs	r6, r0
    2fa2:	c140      	stmia	r1!, {r6}
    2fa4:	416d      	adcs	r5, r5
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fa6:	9f02      	ldr	r7, [sp, #8]
    2fa8:	9b01      	ldr	r3, [sp, #4]
    2faa:	46b9      	mov	r9, r7
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2fac:	9f03      	ldr	r7, [sp, #12]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fae:	444b      	add	r3, r9
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2fb0:	46b9      	mov	r9, r7
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fb2:	9f04      	ldr	r7, [sp, #16]
    carry += uECC_vli_add(tmp, tmp, tmp, num_words_secp256r1);
    2fb4:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fb6:	46b9      	mov	r9, r7
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    2fb8:	4662      	mov	r2, ip
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fba:	9f05      	ldr	r7, [sp, #20]
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fbc:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fbe:	46b9      	mov	r9, r7
    2fc0:	4251      	negs	r1, r2
    2fc2:	414a      	adcs	r2, r1
    2fc4:	444b      	add	r3, r9
    carry += uECC_vli_add(result, result, tmp, num_words_secp256r1);
    2fc6:	4443      	add	r3, r8
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    2fc8:	1a9b      	subs	r3, r3, r2
    2fca:	465a      	mov	r2, fp
    2fcc:	4251      	negs	r1, r2
    2fce:	414a      	adcs	r2, r1
    2fd0:	9f06      	ldr	r7, [sp, #24]
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    2fd2:	1a9b      	subs	r3, r3, r2
    2fd4:	427a      	negs	r2, r7
    2fd6:	4157      	adcs	r7, r2
    2fd8:	f646 364c 	movw	r6, #27468	; 0x6b4c
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    2fdc:	1bdf      	subs	r7, r3, r7
    2fde:	426c      	negs	r4, r5
    2fe0:	416c      	adcs	r4, r5
    2fe2:	f2c0 0600 	movt	r6, #0
    carry -= uECC_vli_sub(result, result, tmp, num_words_secp256r1);
    2fe6:	1b3c      	subs	r4, r7, r4
    if (carry < 0) {
    2fe8:	d500      	bpl.n	2fec <vli_mmod_fast_secp256r1+0x4fc>
    2fea:	e056      	b.n	309a <vli_mmod_fast_secp256r1+0x5aa>
    __asm__ volatile (
    2fec:	f240 0854 	movw	r8, #84	; 0x54
    2ff0:	f240 0901 	movw	r9, #1
    2ff4:	44b0      	add	r8, r6
    2ff6:	46a4      	mov	ip, r4
    2ff8:	4650      	mov	r0, sl
    2ffa:	e041      	b.n	3080 <vli_mmod_fast_secp256r1+0x590>
        if (left[i] > right[i]) {
    2ffc:	6983      	ldr	r3, [r0, #24]
    2ffe:	2b00      	cmp	r3, #0
    3000:	d044      	beq.n	308c <vli_mmod_fast_secp256r1+0x59c>
        } else if (left[i] < right[i]) {
    3002:	2b01      	cmp	r3, #1
    3004:	d80e      	bhi.n	3024 <vli_mmod_fast_secp256r1+0x534>
    3006:	6943      	ldr	r3, [r0, #20]
    3008:	b963      	cbnz	r3, 3024 <vli_mmod_fast_secp256r1+0x534>
    300a:	6903      	ldr	r3, [r0, #16]
    300c:	b953      	cbnz	r3, 3024 <vli_mmod_fast_secp256r1+0x534>
    300e:	68c3      	ldr	r3, [r0, #12]
    3010:	b943      	cbnz	r3, 3024 <vli_mmod_fast_secp256r1+0x534>
        if (left[i] > right[i]) {
    3012:	6883      	ldr	r3, [r0, #8]
    3014:	3301      	adds	r3, #1
    3016:	d139      	bne.n	308c <vli_mmod_fast_secp256r1+0x59c>
    3018:	6843      	ldr	r3, [r0, #4]
    301a:	3301      	adds	r3, #1
    301c:	d136      	bne.n	308c <vli_mmod_fast_secp256r1+0x59c>
    301e:	6803      	ldr	r3, [r0, #0]
    3020:	3301      	adds	r3, #1
    3022:	d133      	bne.n	308c <vli_mmod_fast_secp256r1+0x59c>
    3024:	0003      	movs	r3, r0
    3026:	4642      	mov	r2, r8
    3028:	4649      	mov	r1, r9
    302a:	0006      	movs	r6, r0
    302c:	2500      	movs	r5, #0
    302e:	a703      	add	r7, pc, #12	; (adr r7, 303c <vli_mmod_fast_secp256r1+0x54c>)
    3030:	19c9      	adds	r1, r1, r7
    3032:	ce80      	ldmia	r6!, {r7}
    3034:	ca10      	ldmia	r2!, {r4}
    3036:	1b3f      	subs	r7, r7, r4
    3038:	c380      	stmia	r3!, {r7}
    303a:	4708      	bx	r1
    303c:	ce80      	ldmia	r6!, {r7}
    303e:	ca10      	ldmia	r2!, {r4}
    3040:	41a7      	sbcs	r7, r4
    3042:	c380      	stmia	r3!, {r7}
    3044:	ce80      	ldmia	r6!, {r7}
    3046:	ca10      	ldmia	r2!, {r4}
    3048:	41a7      	sbcs	r7, r4
    304a:	c380      	stmia	r3!, {r7}
    304c:	ce80      	ldmia	r6!, {r7}
    304e:	ca10      	ldmia	r2!, {r4}
    3050:	41a7      	sbcs	r7, r4
    3052:	c380      	stmia	r3!, {r7}
    3054:	ce80      	ldmia	r6!, {r7}
    3056:	ca10      	ldmia	r2!, {r4}
    3058:	41a7      	sbcs	r7, r4
    305a:	c380      	stmia	r3!, {r7}
    305c:	ce80      	ldmia	r6!, {r7}
    305e:	ca10      	ldmia	r2!, {r4}
    3060:	41a7      	sbcs	r7, r4
    3062:	c380      	stmia	r3!, {r7}
    3064:	ce80      	ldmia	r6!, {r7}
    3066:	ca10      	ldmia	r2!, {r4}
    3068:	41a7      	sbcs	r7, r4
    306a:	c380      	stmia	r3!, {r7}
    306c:	ce80      	ldmia	r6!, {r7}
    306e:	ca10      	ldmia	r2!, {r4}
    3070:	41a7      	sbcs	r7, r4
    3072:	c380      	stmia	r3!, {r7}
    3074:	416d      	adcs	r5, r5
            carry -= uECC_vli_sub(result, result, curve_secp256r1.p, num_words_secp256r1);
    3076:	4662      	mov	r2, ip
    return !carry; /* Note that on ARM, carry flag set means "no borrow" when subtracting
    3078:	426b      	negs	r3, r5
    307a:	416b      	adcs	r3, r5
    307c:	1ad3      	subs	r3, r2, r3
    307e:	469c      	mov	ip, r3
        while (carry || uECC_vli_cmp_unsafe(curve_secp256r1.p, result, num_words_secp256r1) != 1) {
    3080:	4663      	mov	r3, ip
    3082:	2b00      	cmp	r3, #0
    3084:	d1ce      	bne.n	3024 <vli_mmod_fast_secp256r1+0x534>
    3086:	69c3      	ldr	r3, [r0, #28]
    3088:	3301      	adds	r3, #1
    308a:	d0b7      	beq.n	2ffc <vli_mmod_fast_secp256r1+0x50c>
}
    308c:	b011      	add	sp, #68	; 0x44
    308e:	bc3c      	pop	{r2, r3, r4, r5}
    3090:	4690      	mov	r8, r2
    3092:	4699      	mov	r9, r3
    3094:	46a2      	mov	sl, r4
    3096:	46ab      	mov	fp, r5
    3098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __asm__ volatile (
    309a:	f240 0c54 	movw	ip, #84	; 0x54
    309e:	f240 0801 	movw	r8, #1
    30a2:	46d1      	mov	r9, sl
    30a4:	44b4      	add	ip, r6
    30a6:	464b      	mov	r3, r9
    30a8:	4662      	mov	r2, ip
    30aa:	4641      	mov	r1, r8
    30ac:	464e      	mov	r6, r9
    30ae:	2500      	movs	r5, #0
    30b0:	a706      	add	r7, pc, #24	; (adr r7, 30cc <vli_mmod_fast_secp256r1+0x5dc>)
    30b2:	46c0      	nop			; (mov r8, r8)
    30b4:	46c0      	nop			; (mov r8, r8)
    30b6:	46c0      	nop			; (mov r8, r8)
    30b8:	46c0      	nop			; (mov r8, r8)
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	46c0      	nop			; (mov r8, r8)
    30be:	46c0      	nop			; (mov r8, r8)
    30c0:	19c9      	adds	r1, r1, r7
    30c2:	ce80      	ldmia	r6!, {r7}
    30c4:	ca01      	ldmia	r2!, {r0}
    30c6:	183f      	adds	r7, r7, r0
    30c8:	c380      	stmia	r3!, {r7}
    30ca:	4708      	bx	r1
    30cc:	ce80      	ldmia	r6!, {r7}
    30ce:	ca01      	ldmia	r2!, {r0}
    30d0:	4147      	adcs	r7, r0
    30d2:	c380      	stmia	r3!, {r7}
    30d4:	ce80      	ldmia	r6!, {r7}
    30d6:	ca01      	ldmia	r2!, {r0}
    30d8:	4147      	adcs	r7, r0
    30da:	c380      	stmia	r3!, {r7}
    30dc:	ce80      	ldmia	r6!, {r7}
    30de:	ca01      	ldmia	r2!, {r0}
    30e0:	4147      	adcs	r7, r0
    30e2:	c380      	stmia	r3!, {r7}
    30e4:	ce80      	ldmia	r6!, {r7}
    30e6:	ca01      	ldmia	r2!, {r0}
    30e8:	4147      	adcs	r7, r0
    30ea:	c380      	stmia	r3!, {r7}
    30ec:	ce80      	ldmia	r6!, {r7}
    30ee:	ca01      	ldmia	r2!, {r0}
    30f0:	4147      	adcs	r7, r0
    30f2:	c380      	stmia	r3!, {r7}
    30f4:	ce80      	ldmia	r6!, {r7}
    30f6:	ca01      	ldmia	r2!, {r0}
    30f8:	4147      	adcs	r7, r0
    30fa:	c380      	stmia	r3!, {r7}
    30fc:	ce80      	ldmia	r6!, {r7}
    30fe:	ca01      	ldmia	r2!, {r0}
    3100:	4147      	adcs	r7, r0
    3102:	c380      	stmia	r3!, {r7}
    3104:	416d      	adcs	r5, r5
        } while (carry < 0);
    3106:	1964      	adds	r4, r4, r5
    3108:	d4cd      	bmi.n	30a6 <vli_mmod_fast_secp256r1+0x5b6>
    310a:	e7bf      	b.n	308c <vli_mmod_fast_secp256r1+0x59c>
    310c:	0000      	movs	r0, r0
	...

00003110 <double_jacobian_secp256k1.part.2>:
static void double_jacobian_secp256k1(uECC_word_t * X1,
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	46de      	mov	lr, fp
    3114:	4657      	mov	r7, sl
    3116:	464e      	mov	r6, r9
    3118:	4645      	mov	r5, r8
    uECC_vli_mult(product, left, right, curve->num_words);
    311a:	f240 78ad 	movw	r8, #1965	; 0x7ad
    311e:	469a      	mov	sl, r3
    3120:	b5e0      	push	{r5, r6, r7, lr}
    3122:	781b      	ldrb	r3, [r3, #0]
    3124:	b0a3      	sub	sp, #140	; 0x8c
    3126:	4683      	mov	fp, r0
    3128:	f2c0 0800 	movt	r8, #0
    312c:	4691      	mov	r9, r2
    312e:	a812      	add	r0, sp, #72	; 0x48
    3130:	000a      	movs	r2, r1
    3132:	b25b      	sxtb	r3, r3
    curve->mmod_fast(result, product);
    3134:	27b0      	movs	r7, #176	; 0xb0
    3136:	000c      	movs	r4, r1
    uECC_vli_mult(product, left, right, curve->num_words);
    3138:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    313a:	4653      	mov	r3, sl
    313c:	a912      	add	r1, sp, #72	; 0x48
    313e:	a80a      	add	r0, sp, #40	; 0x28
    3140:	59db      	ldr	r3, [r3, r7]
    3142:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3144:	4653      	mov	r3, sl
    3146:	781b      	ldrb	r3, [r3, #0]
    3148:	aa0a      	add	r2, sp, #40	; 0x28
    314a:	4659      	mov	r1, fp
    314c:	a812      	add	r0, sp, #72	; 0x48
    314e:	b25b      	sxtb	r3, r3
    3150:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    3152:	4653      	mov	r3, sl
    3154:	a912      	add	r1, sp, #72	; 0x48
    3156:	a802      	add	r0, sp, #8
    3158:	59db      	ldr	r3, [r3, r7]
    315a:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    315c:	4653      	mov	r3, sl
    315e:	781b      	ldrb	r3, [r3, #0]
    3160:	465a      	mov	r2, fp
    3162:	4659      	mov	r1, fp
    3164:	a812      	add	r0, sp, #72	; 0x48
    3166:	b25b      	sxtb	r3, r3
    3168:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    316a:	4653      	mov	r3, sl
    316c:	a912      	add	r1, sp, #72	; 0x48
    316e:	4658      	mov	r0, fp
    3170:	59db      	ldr	r3, [r3, r7]
    3172:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3174:	4653      	mov	r3, sl
    3176:	781b      	ldrb	r3, [r3, #0]
    3178:	aa0a      	add	r2, sp, #40	; 0x28
    317a:	0011      	movs	r1, r2
    317c:	a812      	add	r0, sp, #72	; 0x48
    317e:	b25b      	sxtb	r3, r3
    3180:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    3182:	4653      	mov	r3, sl
    3184:	a912      	add	r1, sp, #72	; 0x48
    3186:	a80a      	add	r0, sp, #40	; 0x28
    3188:	59db      	ldr	r3, [r3, r7]
    318a:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    318c:	4653      	mov	r3, sl
    318e:	781b      	ldrb	r3, [r3, #0]
    3190:	464a      	mov	r2, r9
    3192:	0021      	movs	r1, r4
    3194:	a812      	add	r0, sp, #72	; 0x48
    3196:	b25b      	sxtb	r3, r3
    3198:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    319a:	4653      	mov	r3, sl
    319c:	a912      	add	r1, sp, #72	; 0x48
    319e:	59db      	ldr	r3, [r3, r7]
    31a0:	4648      	mov	r0, r9
    31a2:	4798      	blx	r3
    uECC_vli_modAdd(Y1, X1, X1, curve->p, num_words_secp256k1); /* t2 = 2*x1^2 */
    31a4:	4653      	mov	r3, sl
    31a6:	3304      	adds	r3, #4
    31a8:	9301      	str	r3, [sp, #4]
    31aa:	0022      	movs	r2, r4
    31ac:	465b      	mov	r3, fp
    31ae:	2101      	movs	r1, #1
    31b0:	465f      	mov	r7, fp
    31b2:	2000      	movs	r0, #0
    31b4:	a605      	add	r6, pc, #20	; (adr r6, 31cc <double_jacobian_secp256k1.part.2+0xbc>)
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	46c0      	nop			; (mov r8, r8)
    31ba:	46c0      	nop			; (mov r8, r8)
    31bc:	46c0      	nop			; (mov r8, r8)
    31be:	46c0      	nop			; (mov r8, r8)
    31c0:	1989      	adds	r1, r1, r6
    31c2:	cb40      	ldmia	r3!, {r6}
    31c4:	cf20      	ldmia	r7!, {r5}
    31c6:	1976      	adds	r6, r6, r5
    31c8:	c240      	stmia	r2!, {r6}
    31ca:	4708      	bx	r1
    31cc:	cb40      	ldmia	r3!, {r6}
    31ce:	cf20      	ldmia	r7!, {r5}
    31d0:	416e      	adcs	r6, r5
    31d2:	c240      	stmia	r2!, {r6}
    31d4:	cb40      	ldmia	r3!, {r6}
    31d6:	cf20      	ldmia	r7!, {r5}
    31d8:	416e      	adcs	r6, r5
    31da:	c240      	stmia	r2!, {r6}
    31dc:	cb40      	ldmia	r3!, {r6}
    31de:	cf20      	ldmia	r7!, {r5}
    31e0:	416e      	adcs	r6, r5
    31e2:	c240      	stmia	r2!, {r6}
    31e4:	cb40      	ldmia	r3!, {r6}
    31e6:	cf20      	ldmia	r7!, {r5}
    31e8:	416e      	adcs	r6, r5
    31ea:	c240      	stmia	r2!, {r6}
    31ec:	cb40      	ldmia	r3!, {r6}
    31ee:	cf20      	ldmia	r7!, {r5}
    31f0:	416e      	adcs	r6, r5
    31f2:	c240      	stmia	r2!, {r6}
    31f4:	cb40      	ldmia	r3!, {r6}
    31f6:	cf20      	ldmia	r7!, {r5}
    31f8:	416e      	adcs	r6, r5
    31fa:	c240      	stmia	r2!, {r6}
    31fc:	cb40      	ldmia	r3!, {r6}
    31fe:	cf20      	ldmia	r7!, {r5}
    3200:	416e      	adcs	r6, r5
    3202:	c240      	stmia	r2!, {r6}
    3204:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    3206:	bb80      	cbnz	r0, 326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3208:	4653      	mov	r3, sl
    320a:	6a1a      	ldr	r2, [r3, #32]
    320c:	69e3      	ldr	r3, [r4, #28]
    320e:	429a      	cmp	r2, r3
    3210:	d900      	bls.n	3214 <double_jacobian_secp256k1.part.2+0x104>
    3212:	e058      	b.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3214:	d329      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3216:	4653      	mov	r3, sl
    3218:	69da      	ldr	r2, [r3, #28]
    321a:	69a3      	ldr	r3, [r4, #24]
    321c:	429a      	cmp	r2, r3
    321e:	d900      	bls.n	3222 <double_jacobian_secp256k1.part.2+0x112>
    3220:	e051      	b.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3222:	d322      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3224:	4653      	mov	r3, sl
    3226:	699a      	ldr	r2, [r3, #24]
    3228:	6963      	ldr	r3, [r4, #20]
    322a:	429a      	cmp	r2, r3
    322c:	d84b      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    322e:	d31c      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3230:	4653      	mov	r3, sl
    3232:	695a      	ldr	r2, [r3, #20]
    3234:	6923      	ldr	r3, [r4, #16]
    3236:	429a      	cmp	r2, r3
    3238:	d845      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    323a:	d316      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    323c:	4653      	mov	r3, sl
    323e:	691a      	ldr	r2, [r3, #16]
    3240:	68e3      	ldr	r3, [r4, #12]
    3242:	429a      	cmp	r2, r3
    3244:	d83f      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3246:	d310      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3248:	4653      	mov	r3, sl
    324a:	68da      	ldr	r2, [r3, #12]
    324c:	68a3      	ldr	r3, [r4, #8]
    324e:	429a      	cmp	r2, r3
    3250:	d839      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    3252:	d30a      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3254:	4653      	mov	r3, sl
    3256:	689a      	ldr	r2, [r3, #8]
    3258:	6863      	ldr	r3, [r4, #4]
    325a:	429a      	cmp	r2, r3
    325c:	d833      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
        } else if (left[i] < right[i]) {
    325e:	d304      	bcc.n	326a <double_jacobian_secp256k1.part.2+0x15a>
        if (left[i] > right[i]) {
    3260:	4653      	mov	r3, sl
    3262:	6822      	ldr	r2, [r4, #0]
    3264:	685b      	ldr	r3, [r3, #4]
    3266:	4293      	cmp	r3, r2
    3268:	d82d      	bhi.n	32c6 <double_jacobian_secp256k1.part.2+0x1b6>
    __asm__ volatile (
    326a:	0023      	movs	r3, r4
    326c:	9a01      	ldr	r2, [sp, #4]
    326e:	2101      	movs	r1, #1
    3270:	0020      	movs	r0, r4
    3272:	2500      	movs	r5, #0
    3274:	a605      	add	r6, pc, #20	; (adr r6, 328c <double_jacobian_secp256k1.part.2+0x17c>)
    3276:	46c0      	nop			; (mov r8, r8)
    3278:	46c0      	nop			; (mov r8, r8)
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	46c0      	nop			; (mov r8, r8)
    327e:	46c0      	nop			; (mov r8, r8)
    3280:	1989      	adds	r1, r1, r6
    3282:	c840      	ldmia	r0!, {r6}
    3284:	ca80      	ldmia	r2!, {r7}
    3286:	1bf6      	subs	r6, r6, r7
    3288:	c340      	stmia	r3!, {r6}
    328a:	4708      	bx	r1
    328c:	c840      	ldmia	r0!, {r6}
    328e:	ca80      	ldmia	r2!, {r7}
    3290:	41be      	sbcs	r6, r7
    3292:	c340      	stmia	r3!, {r6}
    3294:	c840      	ldmia	r0!, {r6}
    3296:	ca80      	ldmia	r2!, {r7}
    3298:	41be      	sbcs	r6, r7
    329a:	c340      	stmia	r3!, {r6}
    329c:	c840      	ldmia	r0!, {r6}
    329e:	ca80      	ldmia	r2!, {r7}
    32a0:	41be      	sbcs	r6, r7
    32a2:	c340      	stmia	r3!, {r6}
    32a4:	c840      	ldmia	r0!, {r6}
    32a6:	ca80      	ldmia	r2!, {r7}
    32a8:	41be      	sbcs	r6, r7
    32aa:	c340      	stmia	r3!, {r6}
    32ac:	c840      	ldmia	r0!, {r6}
    32ae:	ca80      	ldmia	r2!, {r7}
    32b0:	41be      	sbcs	r6, r7
    32b2:	c340      	stmia	r3!, {r6}
    32b4:	c840      	ldmia	r0!, {r6}
    32b6:	ca80      	ldmia	r2!, {r7}
    32b8:	41be      	sbcs	r6, r7
    32ba:	c340      	stmia	r3!, {r6}
    32bc:	c840      	ldmia	r0!, {r6}
    32be:	ca80      	ldmia	r2!, {r7}
    32c0:	41be      	sbcs	r6, r7
    32c2:	c340      	stmia	r3!, {r6}
    32c4:	416d      	adcs	r5, r5
    __asm__ volatile (
    32c6:	0023      	movs	r3, r4
    32c8:	465a      	mov	r2, fp
    32ca:	2101      	movs	r1, #1
    32cc:	0027      	movs	r7, r4
    32ce:	2000      	movs	r0, #0
    32d0:	a506      	add	r5, pc, #24	; (adr r5, 32ec <double_jacobian_secp256k1.part.2+0x1dc>)
    32d2:	46c0      	nop			; (mov r8, r8)
    32d4:	46c0      	nop			; (mov r8, r8)
    32d6:	46c0      	nop			; (mov r8, r8)
    32d8:	46c0      	nop			; (mov r8, r8)
    32da:	46c0      	nop			; (mov r8, r8)
    32dc:	46c0      	nop			; (mov r8, r8)
    32de:	46c0      	nop			; (mov r8, r8)
    32e0:	1949      	adds	r1, r1, r5
    32e2:	cf20      	ldmia	r7!, {r5}
    32e4:	ca40      	ldmia	r2!, {r6}
    32e6:	19ad      	adds	r5, r5, r6
    32e8:	c320      	stmia	r3!, {r5}
    32ea:	4708      	bx	r1
    32ec:	cf20      	ldmia	r7!, {r5}
    32ee:	ca40      	ldmia	r2!, {r6}
    32f0:	4175      	adcs	r5, r6
    32f2:	c320      	stmia	r3!, {r5}
    32f4:	cf20      	ldmia	r7!, {r5}
    32f6:	ca40      	ldmia	r2!, {r6}
    32f8:	4175      	adcs	r5, r6
    32fa:	c320      	stmia	r3!, {r5}
    32fc:	cf20      	ldmia	r7!, {r5}
    32fe:	ca40      	ldmia	r2!, {r6}
    3300:	4175      	adcs	r5, r6
    3302:	c320      	stmia	r3!, {r5}
    3304:	cf20      	ldmia	r7!, {r5}
    3306:	ca40      	ldmia	r2!, {r6}
    3308:	4175      	adcs	r5, r6
    330a:	c320      	stmia	r3!, {r5}
    330c:	cf20      	ldmia	r7!, {r5}
    330e:	ca40      	ldmia	r2!, {r6}
    3310:	4175      	adcs	r5, r6
    3312:	c320      	stmia	r3!, {r5}
    3314:	cf20      	ldmia	r7!, {r5}
    3316:	ca40      	ldmia	r2!, {r6}
    3318:	4175      	adcs	r5, r6
    331a:	c320      	stmia	r3!, {r5}
    331c:	cf20      	ldmia	r7!, {r5}
    331e:	ca40      	ldmia	r2!, {r6}
    3320:	4175      	adcs	r5, r6
    3322:	c320      	stmia	r3!, {r5}
    3324:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    3326:	bb80      	cbnz	r0, 338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3328:	4653      	mov	r3, sl
    332a:	6a1a      	ldr	r2, [r3, #32]
    332c:	69e3      	ldr	r3, [r4, #28]
    332e:	429a      	cmp	r2, r3
    3330:	d900      	bls.n	3334 <double_jacobian_secp256k1.part.2+0x224>
    3332:	e058      	b.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3334:	d329      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3336:	4653      	mov	r3, sl
    3338:	69da      	ldr	r2, [r3, #28]
    333a:	69a3      	ldr	r3, [r4, #24]
    333c:	429a      	cmp	r2, r3
    333e:	d900      	bls.n	3342 <double_jacobian_secp256k1.part.2+0x232>
    3340:	e051      	b.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3342:	d322      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3344:	4653      	mov	r3, sl
    3346:	699a      	ldr	r2, [r3, #24]
    3348:	6963      	ldr	r3, [r4, #20]
    334a:	429a      	cmp	r2, r3
    334c:	d84b      	bhi.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    334e:	d31c      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3350:	4653      	mov	r3, sl
    3352:	695a      	ldr	r2, [r3, #20]
    3354:	6923      	ldr	r3, [r4, #16]
    3356:	429a      	cmp	r2, r3
    3358:	d845      	bhi.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    335a:	d316      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    335c:	4653      	mov	r3, sl
    335e:	691a      	ldr	r2, [r3, #16]
    3360:	68e3      	ldr	r3, [r4, #12]
    3362:	429a      	cmp	r2, r3
    3364:	d83f      	bhi.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3366:	d310      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3368:	4653      	mov	r3, sl
    336a:	68da      	ldr	r2, [r3, #12]
    336c:	68a3      	ldr	r3, [r4, #8]
    336e:	429a      	cmp	r2, r3
    3370:	d839      	bhi.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    3372:	d30a      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3374:	4653      	mov	r3, sl
    3376:	689a      	ldr	r2, [r3, #8]
    3378:	6863      	ldr	r3, [r4, #4]
    337a:	429a      	cmp	r2, r3
    337c:	d833      	bhi.n	33e6 <double_jacobian_secp256k1.part.2+0x2d6>
        } else if (left[i] < right[i]) {
    337e:	d304      	bcc.n	338a <double_jacobian_secp256k1.part.2+0x27a>
        if (left[i] > right[i]) {
    3380:	4652      	mov	r2, sl
    3382:	6823      	ldr	r3, [r4, #0]
    3384:	6852      	ldr	r2, [r2, #4]
    3386:	429a      	cmp	r2, r3
    3388:	d82e      	bhi.n	33e8 <double_jacobian_secp256k1.part.2+0x2d8>
    __asm__ volatile (
    338a:	0023      	movs	r3, r4
    338c:	9a01      	ldr	r2, [sp, #4]
    338e:	2101      	movs	r1, #1
    3390:	0020      	movs	r0, r4
    3392:	2500      	movs	r5, #0
    3394:	a605      	add	r6, pc, #20	; (adr r6, 33ac <double_jacobian_secp256k1.part.2+0x29c>)
    3396:	46c0      	nop			; (mov r8, r8)
    3398:	46c0      	nop			; (mov r8, r8)
    339a:	46c0      	nop			; (mov r8, r8)
    339c:	46c0      	nop			; (mov r8, r8)
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	1989      	adds	r1, r1, r6
    33a2:	c840      	ldmia	r0!, {r6}
    33a4:	ca80      	ldmia	r2!, {r7}
    33a6:	1bf6      	subs	r6, r6, r7
    33a8:	c340      	stmia	r3!, {r6}
    33aa:	4708      	bx	r1
    33ac:	c840      	ldmia	r0!, {r6}
    33ae:	ca80      	ldmia	r2!, {r7}
    33b0:	41be      	sbcs	r6, r7
    33b2:	c340      	stmia	r3!, {r6}
    33b4:	c840      	ldmia	r0!, {r6}
    33b6:	ca80      	ldmia	r2!, {r7}
    33b8:	41be      	sbcs	r6, r7
    33ba:	c340      	stmia	r3!, {r6}
    33bc:	c840      	ldmia	r0!, {r6}
    33be:	ca80      	ldmia	r2!, {r7}
    33c0:	41be      	sbcs	r6, r7
    33c2:	c340      	stmia	r3!, {r6}
    33c4:	c840      	ldmia	r0!, {r6}
    33c6:	ca80      	ldmia	r2!, {r7}
    33c8:	41be      	sbcs	r6, r7
    33ca:	c340      	stmia	r3!, {r6}
    33cc:	c840      	ldmia	r0!, {r6}
    33ce:	ca80      	ldmia	r2!, {r7}
    33d0:	41be      	sbcs	r6, r7
    33d2:	c340      	stmia	r3!, {r6}
    33d4:	c840      	ldmia	r0!, {r6}
    33d6:	ca80      	ldmia	r2!, {r7}
    33d8:	41be      	sbcs	r6, r7
    33da:	c340      	stmia	r3!, {r6}
    33dc:	c840      	ldmia	r0!, {r6}
    33de:	ca80      	ldmia	r2!, {r7}
    33e0:	41be      	sbcs	r6, r7
    33e2:	c340      	stmia	r3!, {r6}
    33e4:	416d      	adcs	r5, r5
    33e6:	6823      	ldr	r3, [r4, #0]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    33e8:	2201      	movs	r2, #1
    if (uECC_vli_testBit(Y1, 0)) {
    33ea:	4213      	tst	r3, r2
    33ec:	d000      	beq.n	33f0 <double_jacobian_secp256k1.part.2+0x2e0>
    33ee:	e1e1      	b.n	37b4 <double_jacobian_secp256k1.part.2+0x6a4>
        uECC_word_t temp = *vli;
    33f0:	69e2      	ldr	r2, [r4, #28]
    while (vli-- > end) {
    33f2:	f240 0918 	movw	r9, #24
        *vli = (temp >> 1) | carry;
    33f6:	0851      	lsrs	r1, r2, #1
    33f8:	61e1      	str	r1, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
    33fa:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    33fc:	0022      	movs	r2, r4
    33fe:	321c      	adds	r2, #28
    3400:	44a1      	add	r9, r4
    3402:	4294      	cmp	r4, r2
    3404:	d23a      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
    3406:	f240 0c14 	movw	ip, #20
        uECC_word_t temp = *vli;
    340a:	69a2      	ldr	r2, [r4, #24]
    while (vli-- > end) {
    340c:	44a4      	add	ip, r4
        *vli = (temp >> 1) | carry;
    340e:	0850      	lsrs	r0, r2, #1
    3410:	4301      	orrs	r1, r0
    3412:	61a1      	str	r1, [r4, #24]
        carry = temp << (uECC_WORD_BITS - 1);
    3414:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    3416:	454c      	cmp	r4, r9
    3418:	d230      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
    341a:	f240 0910 	movw	r9, #16
        uECC_word_t temp = *vli;
    341e:	6962      	ldr	r2, [r4, #20]
    while (vli-- > end) {
    3420:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    3422:	0850      	lsrs	r0, r2, #1
    3424:	4301      	orrs	r1, r0
    3426:	6161      	str	r1, [r4, #20]
        carry = temp << (uECC_WORD_BITS - 1);
    3428:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    342a:	4564      	cmp	r4, ip
    342c:	d226      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
    342e:	f240 0c0c 	movw	ip, #12
        uECC_word_t temp = *vli;
    3432:	6922      	ldr	r2, [r4, #16]
    while (vli-- > end) {
    3434:	44a4      	add	ip, r4
        *vli = (temp >> 1) | carry;
    3436:	0850      	lsrs	r0, r2, #1
    3438:	4301      	orrs	r1, r0
    343a:	6121      	str	r1, [r4, #16]
        carry = temp << (uECC_WORD_BITS - 1);
    343c:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    343e:	454c      	cmp	r4, r9
    3440:	d21c      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
    3442:	f240 0908 	movw	r9, #8
        uECC_word_t temp = *vli;
    3446:	68e2      	ldr	r2, [r4, #12]
    while (vli-- > end) {
    3448:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    344a:	0850      	lsrs	r0, r2, #1
    344c:	4301      	orrs	r1, r0
    344e:	60e1      	str	r1, [r4, #12]
        carry = temp << (uECC_WORD_BITS - 1);
    3450:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    3452:	4564      	cmp	r4, ip
    3454:	d212      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
        uECC_word_t temp = *vli;
    3456:	68a2      	ldr	r2, [r4, #8]
        *vli = (temp >> 1) | carry;
    3458:	0850      	lsrs	r0, r2, #1
    345a:	4301      	orrs	r1, r0
    345c:	60a1      	str	r1, [r4, #8]
        carry = temp << (uECC_WORD_BITS - 1);
    345e:	07d1      	lsls	r1, r2, #31
    while (vli-- > end) {
    3460:	1d22      	adds	r2, r4, #4
    3462:	4694      	mov	ip, r2
    3464:	454c      	cmp	r4, r9
    3466:	d209      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
        uECC_word_t temp = *vli;
    3468:	6862      	ldr	r2, [r4, #4]
        *vli = (temp >> 1) | carry;
    346a:	0850      	lsrs	r0, r2, #1
    346c:	4301      	orrs	r1, r0
    346e:	6061      	str	r1, [r4, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3470:	07d2      	lsls	r2, r2, #31
    while (vli-- > end) {
    3472:	4564      	cmp	r4, ip
    3474:	d202      	bcs.n	347c <double_jacobian_secp256k1.part.2+0x36c>
        *vli = (temp >> 1) | carry;
    3476:	085b      	lsrs	r3, r3, #1
    3478:	4313      	orrs	r3, r2
    347a:	6023      	str	r3, [r4, #0]
    uECC_vli_mult(product, left, right, curve->num_words);
    347c:	4653      	mov	r3, sl
    347e:	781b      	ldrb	r3, [r3, #0]
    3480:	0022      	movs	r2, r4
    3482:	0021      	movs	r1, r4
    3484:	a812      	add	r0, sp, #72	; 0x48
    3486:	b25b      	sxtb	r3, r3
    3488:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    348a:	4652      	mov	r2, sl
    348c:	23b0      	movs	r3, #176	; 0xb0
    348e:	f240 0901 	movw	r9, #1
    3492:	58d3      	ldr	r3, [r2, r3]
    3494:	a912      	add	r1, sp, #72	; 0x48
    3496:	4658      	mov	r0, fp
    3498:	4798      	blx	r3
    349a:	465f      	mov	r7, fp
    349c:	465b      	mov	r3, fp
    349e:	aa02      	add	r2, sp, #8
    34a0:	4649      	mov	r1, r9
    34a2:	2000      	movs	r0, #0
    34a4:	a505      	add	r5, pc, #20	; (adr r5, 34bc <double_jacobian_secp256k1.part.2+0x3ac>)
    34a6:	46c0      	nop			; (mov r8, r8)
    34a8:	46c0      	nop			; (mov r8, r8)
    34aa:	46c0      	nop			; (mov r8, r8)
    34ac:	46c0      	nop			; (mov r8, r8)
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	1949      	adds	r1, r1, r5
    34b2:	cf20      	ldmia	r7!, {r5}
    34b4:	ca40      	ldmia	r2!, {r6}
    34b6:	1bad      	subs	r5, r5, r6
    34b8:	c320      	stmia	r3!, {r5}
    34ba:	4708      	bx	r1
    34bc:	cf20      	ldmia	r7!, {r5}
    34be:	ca40      	ldmia	r2!, {r6}
    34c0:	41b5      	sbcs	r5, r6
    34c2:	c320      	stmia	r3!, {r5}
    34c4:	cf20      	ldmia	r7!, {r5}
    34c6:	ca40      	ldmia	r2!, {r6}
    34c8:	41b5      	sbcs	r5, r6
    34ca:	c320      	stmia	r3!, {r5}
    34cc:	cf20      	ldmia	r7!, {r5}
    34ce:	ca40      	ldmia	r2!, {r6}
    34d0:	41b5      	sbcs	r5, r6
    34d2:	c320      	stmia	r3!, {r5}
    34d4:	cf20      	ldmia	r7!, {r5}
    34d6:	ca40      	ldmia	r2!, {r6}
    34d8:	41b5      	sbcs	r5, r6
    34da:	c320      	stmia	r3!, {r5}
    34dc:	cf20      	ldmia	r7!, {r5}
    34de:	ca40      	ldmia	r2!, {r6}
    34e0:	41b5      	sbcs	r5, r6
    34e2:	c320      	stmia	r3!, {r5}
    34e4:	cf20      	ldmia	r7!, {r5}
    34e6:	ca40      	ldmia	r2!, {r6}
    34e8:	41b5      	sbcs	r5, r6
    34ea:	c320      	stmia	r3!, {r5}
    34ec:	cf20      	ldmia	r7!, {r5}
    34ee:	ca40      	ldmia	r2!, {r6}
    34f0:	41b5      	sbcs	r5, r6
    34f2:	c320      	stmia	r3!, {r5}
    34f4:	4140      	adcs	r0, r0
    if (l_borrow) {
    34f6:	2800      	cmp	r0, #0
    34f8:	d12d      	bne.n	3556 <double_jacobian_secp256k1.part.2+0x446>
    __asm__ volatile (
    34fa:	465b      	mov	r3, fp
    34fc:	9901      	ldr	r1, [sp, #4]
    34fe:	464a      	mov	r2, r9
    3500:	4658      	mov	r0, fp
    3502:	2500      	movs	r5, #0
    3504:	a605      	add	r6, pc, #20	; (adr r6, 351c <double_jacobian_secp256k1.part.2+0x40c>)
    3506:	46c0      	nop			; (mov r8, r8)
    3508:	46c0      	nop			; (mov r8, r8)
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	46c0      	nop			; (mov r8, r8)
    350e:	46c0      	nop			; (mov r8, r8)
    3510:	1992      	adds	r2, r2, r6
    3512:	c840      	ldmia	r0!, {r6}
    3514:	c980      	ldmia	r1!, {r7}
    3516:	19f6      	adds	r6, r6, r7
    3518:	c340      	stmia	r3!, {r6}
    351a:	4710      	bx	r2
    351c:	c840      	ldmia	r0!, {r6}
    351e:	c980      	ldmia	r1!, {r7}
    3520:	417e      	adcs	r6, r7
    3522:	c340      	stmia	r3!, {r6}
    3524:	c840      	ldmia	r0!, {r6}
    3526:	c980      	ldmia	r1!, {r7}
    3528:	417e      	adcs	r6, r7
    352a:	c340      	stmia	r3!, {r6}
    352c:	c840      	ldmia	r0!, {r6}
    352e:	c980      	ldmia	r1!, {r7}
    3530:	417e      	adcs	r6, r7
    3532:	c340      	stmia	r3!, {r6}
    3534:	c840      	ldmia	r0!, {r6}
    3536:	c980      	ldmia	r1!, {r7}
    3538:	417e      	adcs	r6, r7
    353a:	c340      	stmia	r3!, {r6}
    353c:	c840      	ldmia	r0!, {r6}
    353e:	c980      	ldmia	r1!, {r7}
    3540:	417e      	adcs	r6, r7
    3542:	c340      	stmia	r3!, {r6}
    3544:	c840      	ldmia	r0!, {r6}
    3546:	c980      	ldmia	r1!, {r7}
    3548:	417e      	adcs	r6, r7
    354a:	c340      	stmia	r3!, {r6}
    354c:	c840      	ldmia	r0!, {r6}
    354e:	c980      	ldmia	r1!, {r7}
    3550:	417e      	adcs	r6, r7
    3552:	c340      	stmia	r3!, {r6}
    3554:	416d      	adcs	r5, r5
    __asm__ volatile (
    3556:	f240 0901 	movw	r9, #1
    355a:	465b      	mov	r3, fp
    355c:	aa02      	add	r2, sp, #8
    355e:	4649      	mov	r1, r9
    3560:	465f      	mov	r7, fp
    3562:	2000      	movs	r0, #0
    3564:	a505      	add	r5, pc, #20	; (adr r5, 357c <double_jacobian_secp256k1.part.2+0x46c>)
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	46c0      	nop			; (mov r8, r8)
    356a:	46c0      	nop			; (mov r8, r8)
    356c:	46c0      	nop			; (mov r8, r8)
    356e:	46c0      	nop			; (mov r8, r8)
    3570:	1949      	adds	r1, r1, r5
    3572:	cf20      	ldmia	r7!, {r5}
    3574:	ca40      	ldmia	r2!, {r6}
    3576:	1bad      	subs	r5, r5, r6
    3578:	c320      	stmia	r3!, {r5}
    357a:	4708      	bx	r1
    357c:	cf20      	ldmia	r7!, {r5}
    357e:	ca40      	ldmia	r2!, {r6}
    3580:	41b5      	sbcs	r5, r6
    3582:	c320      	stmia	r3!, {r5}
    3584:	cf20      	ldmia	r7!, {r5}
    3586:	ca40      	ldmia	r2!, {r6}
    3588:	41b5      	sbcs	r5, r6
    358a:	c320      	stmia	r3!, {r5}
    358c:	cf20      	ldmia	r7!, {r5}
    358e:	ca40      	ldmia	r2!, {r6}
    3590:	41b5      	sbcs	r5, r6
    3592:	c320      	stmia	r3!, {r5}
    3594:	cf20      	ldmia	r7!, {r5}
    3596:	ca40      	ldmia	r2!, {r6}
    3598:	41b5      	sbcs	r5, r6
    359a:	c320      	stmia	r3!, {r5}
    359c:	cf20      	ldmia	r7!, {r5}
    359e:	ca40      	ldmia	r2!, {r6}
    35a0:	41b5      	sbcs	r5, r6
    35a2:	c320      	stmia	r3!, {r5}
    35a4:	cf20      	ldmia	r7!, {r5}
    35a6:	ca40      	ldmia	r2!, {r6}
    35a8:	41b5      	sbcs	r5, r6
    35aa:	c320      	stmia	r3!, {r5}
    35ac:	cf20      	ldmia	r7!, {r5}
    35ae:	ca40      	ldmia	r2!, {r6}
    35b0:	41b5      	sbcs	r5, r6
    35b2:	c320      	stmia	r3!, {r5}
    35b4:	4140      	adcs	r0, r0
    35b6:	2800      	cmp	r0, #0
    35b8:	d12d      	bne.n	3616 <double_jacobian_secp256k1.part.2+0x506>
    __asm__ volatile (
    35ba:	465b      	mov	r3, fp
    35bc:	9901      	ldr	r1, [sp, #4]
    35be:	464a      	mov	r2, r9
    35c0:	4658      	mov	r0, fp
    35c2:	2500      	movs	r5, #0
    35c4:	a605      	add	r6, pc, #20	; (adr r6, 35dc <double_jacobian_secp256k1.part.2+0x4cc>)
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	46c0      	nop			; (mov r8, r8)
    35ca:	46c0      	nop			; (mov r8, r8)
    35cc:	46c0      	nop			; (mov r8, r8)
    35ce:	46c0      	nop			; (mov r8, r8)
    35d0:	1992      	adds	r2, r2, r6
    35d2:	c840      	ldmia	r0!, {r6}
    35d4:	c980      	ldmia	r1!, {r7}
    35d6:	19f6      	adds	r6, r6, r7
    35d8:	c340      	stmia	r3!, {r6}
    35da:	4710      	bx	r2
    35dc:	c840      	ldmia	r0!, {r6}
    35de:	c980      	ldmia	r1!, {r7}
    35e0:	417e      	adcs	r6, r7
    35e2:	c340      	stmia	r3!, {r6}
    35e4:	c840      	ldmia	r0!, {r6}
    35e6:	c980      	ldmia	r1!, {r7}
    35e8:	417e      	adcs	r6, r7
    35ea:	c340      	stmia	r3!, {r6}
    35ec:	c840      	ldmia	r0!, {r6}
    35ee:	c980      	ldmia	r1!, {r7}
    35f0:	417e      	adcs	r6, r7
    35f2:	c340      	stmia	r3!, {r6}
    35f4:	c840      	ldmia	r0!, {r6}
    35f6:	c980      	ldmia	r1!, {r7}
    35f8:	417e      	adcs	r6, r7
    35fa:	c340      	stmia	r3!, {r6}
    35fc:	c840      	ldmia	r0!, {r6}
    35fe:	c980      	ldmia	r1!, {r7}
    3600:	417e      	adcs	r6, r7
    3602:	c340      	stmia	r3!, {r6}
    3604:	c840      	ldmia	r0!, {r6}
    3606:	c980      	ldmia	r1!, {r7}
    3608:	417e      	adcs	r6, r7
    360a:	c340      	stmia	r3!, {r6}
    360c:	c840      	ldmia	r0!, {r6}
    360e:	c980      	ldmia	r1!, {r7}
    3610:	417e      	adcs	r6, r7
    3612:	c340      	stmia	r3!, {r6}
    3614:	416d      	adcs	r5, r5
    __asm__ volatile (
    3616:	f240 0c01 	movw	ip, #1
    361a:	ab02      	add	r3, sp, #8
    361c:	465e      	mov	r6, fp
    361e:	4662      	mov	r2, ip
    3620:	001f      	movs	r7, r3
    3622:	2000      	movs	r0, #0
    3624:	a505      	add	r5, pc, #20	; (adr r5, 363c <double_jacobian_secp256k1.part.2+0x52c>)
    3626:	46c0      	nop			; (mov r8, r8)
    3628:	46c0      	nop			; (mov r8, r8)
    362a:	46c0      	nop			; (mov r8, r8)
    362c:	46c0      	nop			; (mov r8, r8)
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	1952      	adds	r2, r2, r5
    3632:	cf20      	ldmia	r7!, {r5}
    3634:	ce02      	ldmia	r6!, {r1}
    3636:	1a6d      	subs	r5, r5, r1
    3638:	c320      	stmia	r3!, {r5}
    363a:	4710      	bx	r2
    363c:	cf20      	ldmia	r7!, {r5}
    363e:	ce02      	ldmia	r6!, {r1}
    3640:	418d      	sbcs	r5, r1
    3642:	c320      	stmia	r3!, {r5}
    3644:	cf20      	ldmia	r7!, {r5}
    3646:	ce02      	ldmia	r6!, {r1}
    3648:	418d      	sbcs	r5, r1
    364a:	c320      	stmia	r3!, {r5}
    364c:	cf20      	ldmia	r7!, {r5}
    364e:	ce02      	ldmia	r6!, {r1}
    3650:	418d      	sbcs	r5, r1
    3652:	c320      	stmia	r3!, {r5}
    3654:	cf20      	ldmia	r7!, {r5}
    3656:	ce02      	ldmia	r6!, {r1}
    3658:	418d      	sbcs	r5, r1
    365a:	c320      	stmia	r3!, {r5}
    365c:	cf20      	ldmia	r7!, {r5}
    365e:	ce02      	ldmia	r6!, {r1}
    3660:	418d      	sbcs	r5, r1
    3662:	c320      	stmia	r3!, {r5}
    3664:	cf20      	ldmia	r7!, {r5}
    3666:	ce02      	ldmia	r6!, {r1}
    3668:	418d      	sbcs	r5, r1
    366a:	c320      	stmia	r3!, {r5}
    366c:	cf20      	ldmia	r7!, {r5}
    366e:	ce02      	ldmia	r6!, {r1}
    3670:	418d      	sbcs	r5, r1
    3672:	c320      	stmia	r3!, {r5}
    3674:	4140      	adcs	r0, r0
    3676:	2800      	cmp	r0, #0
    3678:	d12d      	bne.n	36d6 <double_jacobian_secp256k1.part.2+0x5c6>
    __asm__ volatile (
    367a:	ab02      	add	r3, sp, #8
    367c:	9801      	ldr	r0, [sp, #4]
    367e:	4662      	mov	r2, ip
    3680:	0019      	movs	r1, r3
    3682:	2600      	movs	r6, #0
    3684:	a505      	add	r5, pc, #20	; (adr r5, 369c <double_jacobian_secp256k1.part.2+0x58c>)
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	46c0      	nop			; (mov r8, r8)
    368a:	46c0      	nop			; (mov r8, r8)
    368c:	46c0      	nop			; (mov r8, r8)
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	1952      	adds	r2, r2, r5
    3692:	c920      	ldmia	r1!, {r5}
    3694:	c880      	ldmia	r0!, {r7}
    3696:	19ed      	adds	r5, r5, r7
    3698:	c320      	stmia	r3!, {r5}
    369a:	4710      	bx	r2
    369c:	c920      	ldmia	r1!, {r5}
    369e:	c880      	ldmia	r0!, {r7}
    36a0:	417d      	adcs	r5, r7
    36a2:	c320      	stmia	r3!, {r5}
    36a4:	c920      	ldmia	r1!, {r5}
    36a6:	c880      	ldmia	r0!, {r7}
    36a8:	417d      	adcs	r5, r7
    36aa:	c320      	stmia	r3!, {r5}
    36ac:	c920      	ldmia	r1!, {r5}
    36ae:	c880      	ldmia	r0!, {r7}
    36b0:	417d      	adcs	r5, r7
    36b2:	c320      	stmia	r3!, {r5}
    36b4:	c920      	ldmia	r1!, {r5}
    36b6:	c880      	ldmia	r0!, {r7}
    36b8:	417d      	adcs	r5, r7
    36ba:	c320      	stmia	r3!, {r5}
    36bc:	c920      	ldmia	r1!, {r5}
    36be:	c880      	ldmia	r0!, {r7}
    36c0:	417d      	adcs	r5, r7
    36c2:	c320      	stmia	r3!, {r5}
    36c4:	c920      	ldmia	r1!, {r5}
    36c6:	c880      	ldmia	r0!, {r7}
    36c8:	417d      	adcs	r5, r7
    36ca:	c320      	stmia	r3!, {r5}
    36cc:	c920      	ldmia	r1!, {r5}
    36ce:	c880      	ldmia	r0!, {r7}
    36d0:	417d      	adcs	r5, r7
    36d2:	c320      	stmia	r3!, {r5}
    36d4:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    36d6:	4653      	mov	r3, sl
    36d8:	781b      	ldrb	r3, [r3, #0]
    36da:	aa02      	add	r2, sp, #8
    36dc:	0021      	movs	r1, r4
    36de:	a812      	add	r0, sp, #72	; 0x48
    36e0:	b25b      	sxtb	r3, r3
    36e2:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    36e4:	4652      	mov	r2, sl
    36e6:	23b0      	movs	r3, #176	; 0xb0
    36e8:	a912      	add	r1, sp, #72	; 0x48
    36ea:	58d3      	ldr	r3, [r2, r3]
    36ec:	0020      	movs	r0, r4
    36ee:	4798      	blx	r3
    __asm__ volatile (
    36f0:	f240 0c01 	movw	ip, #1
    36f4:	0023      	movs	r3, r4
    36f6:	aa0a      	add	r2, sp, #40	; 0x28
    36f8:	4661      	mov	r1, ip
    36fa:	0026      	movs	r6, r4
    36fc:	2500      	movs	r5, #0
    36fe:	a703      	add	r7, pc, #12	; (adr r7, 370c <double_jacobian_secp256k1.part.2+0x5fc>)
    3700:	19c9      	adds	r1, r1, r7
    3702:	ce80      	ldmia	r6!, {r7}
    3704:	ca01      	ldmia	r2!, {r0}
    3706:	1a3f      	subs	r7, r7, r0
    3708:	c380      	stmia	r3!, {r7}
    370a:	4708      	bx	r1
    370c:	ce80      	ldmia	r6!, {r7}
    370e:	ca01      	ldmia	r2!, {r0}
    3710:	4187      	sbcs	r7, r0
    3712:	c380      	stmia	r3!, {r7}
    3714:	ce80      	ldmia	r6!, {r7}
    3716:	ca01      	ldmia	r2!, {r0}
    3718:	4187      	sbcs	r7, r0
    371a:	c380      	stmia	r3!, {r7}
    371c:	ce80      	ldmia	r6!, {r7}
    371e:	ca01      	ldmia	r2!, {r0}
    3720:	4187      	sbcs	r7, r0
    3722:	c380      	stmia	r3!, {r7}
    3724:	ce80      	ldmia	r6!, {r7}
    3726:	ca01      	ldmia	r2!, {r0}
    3728:	4187      	sbcs	r7, r0
    372a:	c380      	stmia	r3!, {r7}
    372c:	ce80      	ldmia	r6!, {r7}
    372e:	ca01      	ldmia	r2!, {r0}
    3730:	4187      	sbcs	r7, r0
    3732:	c380      	stmia	r3!, {r7}
    3734:	ce80      	ldmia	r6!, {r7}
    3736:	ca01      	ldmia	r2!, {r0}
    3738:	4187      	sbcs	r7, r0
    373a:	c380      	stmia	r3!, {r7}
    373c:	ce80      	ldmia	r6!, {r7}
    373e:	ca01      	ldmia	r2!, {r0}
    3740:	4187      	sbcs	r7, r0
    3742:	c380      	stmia	r3!, {r7}
    3744:	416d      	adcs	r5, r5
    if (l_borrow) {
    3746:	2d00      	cmp	r5, #0
    3748:	d12d      	bne.n	37a6 <double_jacobian_secp256k1.part.2+0x696>
    __asm__ volatile (
    374a:	9f01      	ldr	r7, [sp, #4]
    374c:	4663      	mov	r3, ip
    374e:	0022      	movs	r2, r4
    3750:	2100      	movs	r1, #0
    3752:	a006      	add	r0, pc, #24	; (adr r0, 376c <double_jacobian_secp256k1.part.2+0x65c>)
    3754:	46c0      	nop			; (mov r8, r8)
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	46c0      	nop			; (mov r8, r8)
    375a:	46c0      	nop			; (mov r8, r8)
    375c:	46c0      	nop			; (mov r8, r8)
    375e:	46c0      	nop			; (mov r8, r8)
    3760:	181b      	adds	r3, r3, r0
    3762:	ca01      	ldmia	r2!, {r0}
    3764:	cf20      	ldmia	r7!, {r5}
    3766:	1940      	adds	r0, r0, r5
    3768:	c401      	stmia	r4!, {r0}
    376a:	4718      	bx	r3
    376c:	ca01      	ldmia	r2!, {r0}
    376e:	cf20      	ldmia	r7!, {r5}
    3770:	4168      	adcs	r0, r5
    3772:	c401      	stmia	r4!, {r0}
    3774:	ca01      	ldmia	r2!, {r0}
    3776:	cf20      	ldmia	r7!, {r5}
    3778:	4168      	adcs	r0, r5
    377a:	c401      	stmia	r4!, {r0}
    377c:	ca01      	ldmia	r2!, {r0}
    377e:	cf20      	ldmia	r7!, {r5}
    3780:	4168      	adcs	r0, r5
    3782:	c401      	stmia	r4!, {r0}
    3784:	ca01      	ldmia	r2!, {r0}
    3786:	cf20      	ldmia	r7!, {r5}
    3788:	4168      	adcs	r0, r5
    378a:	c401      	stmia	r4!, {r0}
    378c:	ca01      	ldmia	r2!, {r0}
    378e:	cf20      	ldmia	r7!, {r5}
    3790:	4168      	adcs	r0, r5
    3792:	c401      	stmia	r4!, {r0}
    3794:	ca01      	ldmia	r2!, {r0}
    3796:	cf20      	ldmia	r7!, {r5}
    3798:	4168      	adcs	r0, r5
    379a:	c401      	stmia	r4!, {r0}
    379c:	ca01      	ldmia	r2!, {r0}
    379e:	cf20      	ldmia	r7!, {r5}
    37a0:	4168      	adcs	r0, r5
    37a2:	c401      	stmia	r4!, {r0}
    37a4:	4149      	adcs	r1, r1
}
    37a6:	b023      	add	sp, #140	; 0x8c
    37a8:	bc3c      	pop	{r2, r3, r4, r5}
    37aa:	4690      	mov	r8, r2
    37ac:	4699      	mov	r9, r3
    37ae:	46a2      	mov	sl, r4
    37b0:	46ab      	mov	fp, r5
    37b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37b4:	0013      	movs	r3, r2
    37b6:	0021      	movs	r1, r4
    37b8:	9801      	ldr	r0, [sp, #4]
    37ba:	0022      	movs	r2, r4
    37bc:	2500      	movs	r5, #0
    37be:	a603      	add	r6, pc, #12	; (adr r6, 37cc <double_jacobian_secp256k1.part.2+0x6bc>)
    37c0:	199b      	adds	r3, r3, r6
    37c2:	ca40      	ldmia	r2!, {r6}
    37c4:	c880      	ldmia	r0!, {r7}
    37c6:	19f6      	adds	r6, r6, r7
    37c8:	c140      	stmia	r1!, {r6}
    37ca:	4718      	bx	r3
    37cc:	ca40      	ldmia	r2!, {r6}
    37ce:	c880      	ldmia	r0!, {r7}
    37d0:	417e      	adcs	r6, r7
    37d2:	c140      	stmia	r1!, {r6}
    37d4:	ca40      	ldmia	r2!, {r6}
    37d6:	c880      	ldmia	r0!, {r7}
    37d8:	417e      	adcs	r6, r7
    37da:	c140      	stmia	r1!, {r6}
    37dc:	ca40      	ldmia	r2!, {r6}
    37de:	c880      	ldmia	r0!, {r7}
    37e0:	417e      	adcs	r6, r7
    37e2:	c140      	stmia	r1!, {r6}
    37e4:	ca40      	ldmia	r2!, {r6}
    37e6:	c880      	ldmia	r0!, {r7}
    37e8:	417e      	adcs	r6, r7
    37ea:	c140      	stmia	r1!, {r6}
    37ec:	ca40      	ldmia	r2!, {r6}
    37ee:	c880      	ldmia	r0!, {r7}
    37f0:	417e      	adcs	r6, r7
    37f2:	c140      	stmia	r1!, {r6}
    37f4:	ca40      	ldmia	r2!, {r6}
    37f6:	c880      	ldmia	r0!, {r7}
    37f8:	417e      	adcs	r6, r7
    37fa:	c140      	stmia	r1!, {r6}
    37fc:	ca40      	ldmia	r2!, {r6}
    37fe:	c880      	ldmia	r0!, {r7}
    3800:	417e      	adcs	r6, r7
    3802:	c140      	stmia	r1!, {r6}
    3804:	416d      	adcs	r5, r5
    while (vli-- > end) {
    3806:	0023      	movs	r3, r4
    3808:	0020      	movs	r0, r4
        uECC_word_t temp = *vli;
    380a:	69e1      	ldr	r1, [r4, #28]
    while (vli-- > end) {
    380c:	331c      	adds	r3, #28
        *vli = (temp >> 1) | carry;
    380e:	084a      	lsrs	r2, r1, #1
    3810:	46ac      	mov	ip, r5
    3812:	61e2      	str	r2, [r4, #28]
        carry = temp << (uECC_WORD_BITS - 1);
    3814:	07c9      	lsls	r1, r1, #31
    while (vli-- > end) {
    3816:	3018      	adds	r0, #24
    3818:	429c      	cmp	r4, r3
    381a:	d239      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
    381c:	f240 0914 	movw	r9, #20
        uECC_word_t temp = *vli;
    3820:	69a3      	ldr	r3, [r4, #24]
    while (vli-- > end) {
    3822:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    3824:	085d      	lsrs	r5, r3, #1
    3826:	4329      	orrs	r1, r5
    3828:	61a1      	str	r1, [r4, #24]
        carry = temp << (uECC_WORD_BITS - 1);
    382a:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    382c:	4284      	cmp	r4, r0
    382e:	d22f      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    3830:	6963      	ldr	r3, [r4, #20]
        *vli = (temp >> 1) | carry;
    3832:	0858      	lsrs	r0, r3, #1
    3834:	4301      	orrs	r1, r0
    while (vli-- > end) {
    3836:	0020      	movs	r0, r4
        *vli = (temp >> 1) | carry;
    3838:	6161      	str	r1, [r4, #20]
    while (vli-- > end) {
    383a:	3010      	adds	r0, #16
        carry = temp << (uECC_WORD_BITS - 1);
    383c:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    383e:	454c      	cmp	r4, r9
    3840:	d226      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
    3842:	f240 090c 	movw	r9, #12
        uECC_word_t temp = *vli;
    3846:	6923      	ldr	r3, [r4, #16]
    while (vli-- > end) {
    3848:	44a1      	add	r9, r4
        *vli = (temp >> 1) | carry;
    384a:	085d      	lsrs	r5, r3, #1
    384c:	4329      	orrs	r1, r5
    384e:	6121      	str	r1, [r4, #16]
        carry = temp << (uECC_WORD_BITS - 1);
    3850:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    3852:	4284      	cmp	r4, r0
    3854:	d21c      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    3856:	68e3      	ldr	r3, [r4, #12]
        *vli = (temp >> 1) | carry;
    3858:	0858      	lsrs	r0, r3, #1
    385a:	4301      	orrs	r1, r0
    while (vli-- > end) {
    385c:	0020      	movs	r0, r4
        *vli = (temp >> 1) | carry;
    385e:	60e1      	str	r1, [r4, #12]
    while (vli-- > end) {
    3860:	3008      	adds	r0, #8
        carry = temp << (uECC_WORD_BITS - 1);
    3862:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    3864:	454c      	cmp	r4, r9
    3866:	d213      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    3868:	68a3      	ldr	r3, [r4, #8]
        *vli = (temp >> 1) | carry;
    386a:	085d      	lsrs	r5, r3, #1
    386c:	4329      	orrs	r1, r5
    386e:	60a1      	str	r1, [r4, #8]
        carry = temp << (uECC_WORD_BITS - 1);
    3870:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    3872:	1d23      	adds	r3, r4, #4
    3874:	4699      	mov	r9, r3
    3876:	4284      	cmp	r4, r0
    3878:	d20a      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
        uECC_word_t temp = *vli;
    387a:	6863      	ldr	r3, [r4, #4]
        *vli = (temp >> 1) | carry;
    387c:	0858      	lsrs	r0, r3, #1
    387e:	4301      	orrs	r1, r0
    3880:	6061      	str	r1, [r4, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3882:	07d9      	lsls	r1, r3, #31
    while (vli-- > end) {
    3884:	454c      	cmp	r4, r9
    3886:	d203      	bcs.n	3890 <double_jacobian_secp256k1.part.2+0x780>
        *vli = (temp >> 1) | carry;
    3888:	6823      	ldr	r3, [r4, #0]
    388a:	085b      	lsrs	r3, r3, #1
    388c:	430b      	orrs	r3, r1
    388e:	6023      	str	r3, [r4, #0]
        Y1[num_words_secp256k1 - 1] |= carry << (uECC_WORD_BITS - 1);
    3890:	4663      	mov	r3, ip
    3892:	07db      	lsls	r3, r3, #31
    3894:	431a      	orrs	r2, r3
    3896:	61e2      	str	r2, [r4, #28]
    3898:	e5f0      	b.n	347c <double_jacobian_secp256k1.part.2+0x36c>
    389a:	46c0      	nop			; (mov r8, r8)

0000389c <double_jacobian_secp256k1>:
                                      uECC_Curve curve) {
    389c:	b570      	push	{r4, r5, r6, lr}
        bits |= vli[i];
    389e:	6855      	ldr	r5, [r2, #4]
    38a0:	6814      	ldr	r4, [r2, #0]
    38a2:	432c      	orrs	r4, r5
    38a4:	6895      	ldr	r5, [r2, #8]
    38a6:	432c      	orrs	r4, r5
    38a8:	68d5      	ldr	r5, [r2, #12]
    38aa:	432c      	orrs	r4, r5
    38ac:	6915      	ldr	r5, [r2, #16]
    38ae:	432c      	orrs	r4, r5
    38b0:	6955      	ldr	r5, [r2, #20]
    38b2:	432c      	orrs	r4, r5
    38b4:	6995      	ldr	r5, [r2, #24]
    38b6:	432c      	orrs	r4, r5
    38b8:	69d5      	ldr	r5, [r2, #28]
    38ba:	432c      	orrs	r4, r5
    if (uECC_vli_isZero(Z1, num_words_secp256k1)) {
    38bc:	b904      	cbnz	r4, 38c0 <double_jacobian_secp256k1+0x24>
}
    38be:	bd70      	pop	{r4, r5, r6, pc}
    38c0:	f243 1411 	movw	r4, #12561	; 0x3111
    38c4:	f2c0 0400 	movt	r4, #0
    38c8:	47a0      	blx	r4
    38ca:	e7f8      	b.n	38be <double_jacobian_secp256k1+0x22>
    38cc:	0000      	movs	r0, r0
	...

000038d0 <uECC_vli_modInv.part.1>:
uECC_VLI_API void uECC_vli_modInv(uECC_word_t *result,
    38d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    38d2:	4645      	mov	r5, r8
    38d4:	46de      	mov	lr, fp
    38d6:	4657      	mov	r7, sl
    38d8:	464e      	mov	r6, r9
    38da:	b5e0      	push	{r5, r6, r7, lr}
    38dc:	b0b7      	sub	sp, #220	; 0xdc
    38de:	900c      	str	r0, [sp, #48]	; 0x30
    38e0:	4690      	mov	r8, r2
    38e2:	920d      	str	r2, [sp, #52]	; 0x34
    38e4:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    38e6:	2b00      	cmp	r3, #0
    38e8:	dc00      	bgt.n	38ec <uECC_vli_modInv.part.1+0x1c>
    38ea:	e2ca      	b.n	3e82 <uECC_vli_modInv.part.1+0x5b2>
        dest[i] = src[i];
    38ec:	1e5f      	subs	r7, r3, #1
    38ee:	b2fb      	uxtb	r3, r7
    38f0:	3301      	adds	r3, #1
    38f2:	009b      	lsls	r3, r3, #2
    38f4:	f246 6631 	movw	r6, #26161	; 0x6631
    38f8:	4699      	mov	r9, r3
    38fa:	f246 6a67 	movw	sl, #26215	; 0x6667
    38fe:	ac16      	add	r4, sp, #88	; 0x58
    3900:	001a      	movs	r2, r3
    3902:	f2c0 0600 	movt	r6, #0
    3906:	0020      	movs	r0, r4
    3908:	ad1e      	add	r5, sp, #120	; 0x78
    390a:	47b0      	blx	r6
    390c:	4641      	mov	r1, r8
    390e:	464a      	mov	r2, r9
    3910:	0028      	movs	r0, r5
    3912:	47b0      	blx	r6
    3914:	ae26      	add	r6, sp, #152	; 0x98
    3916:	464a      	mov	r2, r9
    3918:	2100      	movs	r1, #0
    391a:	0030      	movs	r0, r6
    391c:	f2c0 0a00 	movt	sl, #0
    3920:	47d0      	blx	sl
    u[0] = 1;
    3922:	2301      	movs	r3, #1
    3924:	9326      	str	r3, [sp, #152]	; 0x98
    3926:	ab2e      	add	r3, sp, #184	; 0xb8
    3928:	464a      	mov	r2, r9
    392a:	2100      	movs	r1, #0
    392c:	0018      	movs	r0, r3
    392e:	4698      	mov	r8, r3
    3930:	47d0      	blx	sl
    3932:	b2fb      	uxtb	r3, r7
    3934:	930b      	str	r3, [sp, #44]	; 0x2c
    3936:	b25b      	sxtb	r3, r3
        if (left[i] > right[i]) {
    3938:	009a      	lsls	r2, r3, #2
    vli += num_words;
    393a:	9905      	ldr	r1, [sp, #20]
    393c:	9303      	str	r3, [sp, #12]
        if (left[i] > right[i]) {
    393e:	18a3      	adds	r3, r4, r2
    3940:	9304      	str	r3, [sp, #16]
    3942:	18ab      	adds	r3, r5, r2
    3944:	0017      	movs	r7, r2
    3946:	469a      	mov	sl, r3
    3948:	18b2      	adds	r2, r6, r2
    vli += num_words;
    394a:	008b      	lsls	r3, r1, #2
        if (left[i] > right[i]) {
    394c:	9214      	str	r2, [sp, #80]	; 0x50
    vli += num_words;
    394e:	001a      	movs	r2, r3
    3950:	4442      	add	r2, r8
    3952:	9210      	str	r2, [sp, #64]	; 0x40
    while (vli-- > end) {
    3954:	3a04      	subs	r2, #4
    3956:	9211      	str	r2, [sp, #68]	; 0x44
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    3958:	2208      	movs	r2, #8
    395a:	1a52      	subs	r2, r2, r1
    395c:	00d2      	lsls	r2, r2, #3
    395e:	3201      	adds	r2, #1
    3960:	9212      	str	r2, [sp, #72]	; 0x48
        uv[num_words - 1] |= HIGH_BIT_SET;
    3962:	1f1a      	subs	r2, r3, #4
    3964:	0011      	movs	r1, r2
    3966:	4693      	mov	fp, r2
    3968:	4441      	add	r1, r8
    vli += num_words;
    396a:	18e8      	adds	r0, r5, r3
        uv[num_words - 1] |= HIGH_BIT_SET;
    396c:	9115      	str	r1, [sp, #84]	; 0x54
    vli += num_words;
    396e:	18e1      	adds	r1, r4, r3
    3970:	18f3      	adds	r3, r6, r3
    3972:	9306      	str	r3, [sp, #24]
    while (vli-- > end) {
    3974:	3b04      	subs	r3, #4
    3976:	9309      	str	r3, [sp, #36]	; 0x24
    3978:	1f03      	subs	r3, r0, #4
        if (left[i] > right[i]) {
    397a:	4447      	add	r7, r8
    397c:	930f      	str	r3, [sp, #60]	; 0x3c
    397e:	1f2b      	subs	r3, r5, #4
    3980:	9713      	str	r7, [sp, #76]	; 0x4c
    3982:	4699      	mov	r9, r3
    3984:	1f27      	subs	r7, r4, #4
    3986:	1f0b      	subs	r3, r1, #4
    vli += num_words;
    3988:	900e      	str	r0, [sp, #56]	; 0x38
    398a:	9107      	str	r1, [sp, #28]
        uv[num_words - 1] |= HIGH_BIT_SET;
    398c:	44b3      	add	fp, r6
    398e:	9308      	str	r3, [sp, #32]
    3990:	9702      	str	r7, [sp, #8]
    3992:	9501      	str	r5, [sp, #4]
    3994:	9600      	str	r6, [sp, #0]
    for (i = num_words - 1; i >= 0; --i) {
    3996:	9903      	ldr	r1, [sp, #12]
    3998:	2900      	cmp	r1, #0
    399a:	da00      	bge.n	399e <uECC_vli_modInv.part.1+0xce>
    399c:	e073      	b.n	3a86 <uECC_vli_modInv.part.1+0x1b6>
        if (left[i] > right[i]) {
    399e:	9b04      	ldr	r3, [sp, #16]
    39a0:	681a      	ldr	r2, [r3, #0]
    39a2:	4653      	mov	r3, sl
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	429a      	cmp	r2, r3
    39a8:	d828      	bhi.n	39fc <uECC_vli_modInv.part.1+0x12c>
        } else if (left[i] < right[i]) {
    39aa:	d200      	bcs.n	39ae <uECC_vli_modInv.part.1+0xde>
    39ac:	e0bc      	b.n	3b28 <uECC_vli_modInv.part.1+0x258>
    39ae:	000b      	movs	r3, r1
    39b0:	9f02      	ldr	r7, [sp, #8]
    39b2:	9d01      	ldr	r5, [sp, #4]
    39b4:	9e00      	ldr	r6, [sp, #0]
    39b6:	e006      	b.n	39c6 <uECC_vli_modInv.part.1+0xf6>
        if (left[i] > right[i]) {
    39b8:	009a      	lsls	r2, r3, #2
    39ba:	58a1      	ldr	r1, [r4, r2]
    39bc:	58aa      	ldr	r2, [r5, r2]
    39be:	4291      	cmp	r1, r2
    39c0:	d819      	bhi.n	39f6 <uECC_vli_modInv.part.1+0x126>
        } else if (left[i] < right[i]) {
    39c2:	d200      	bcs.n	39c6 <uECC_vli_modInv.part.1+0xf6>
    39c4:	e0ad      	b.n	3b22 <uECC_vli_modInv.part.1+0x252>
    39c6:	3b01      	subs	r3, #1
    39c8:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    39ca:	1c5a      	adds	r2, r3, #1
    39cc:	d1f4      	bne.n	39b8 <uECC_vli_modInv.part.1+0xe8>
    for (i = 0; i < num_words; ++i) {
    39ce:	9b05      	ldr	r3, [sp, #20]
    39d0:	2b00      	cmp	r3, #0
    39d2:	dd09      	ble.n	39e8 <uECC_vli_modInv.part.1+0x118>
    39d4:	f246 6331 	movw	r3, #26161	; 0x6631
        dest[i] = src[i];
    39d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    39da:	0031      	movs	r1, r6
    39dc:	3201      	adds	r2, #1
    39de:	0092      	lsls	r2, r2, #2
    39e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    39e2:	f2c0 0300 	movt	r3, #0
    39e6:	4798      	blx	r3
}
    39e8:	b037      	add	sp, #220	; 0xdc
    39ea:	bc3c      	pop	{r2, r3, r4, r5}
    39ec:	4690      	mov	r8, r2
    39ee:	4699      	mov	r9, r3
    39f0:	46a2      	mov	sl, r4
    39f2:	46ab      	mov	fp, r5
    39f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f6:	9702      	str	r7, [sp, #8]
    39f8:	9501      	str	r5, [sp, #4]
    39fa:	9600      	str	r6, [sp, #0]
            return 1;
    39fc:	2301      	movs	r3, #1
        if (EVEN(a)) {
    39fe:	2101      	movs	r1, #1
    3a00:	6822      	ldr	r2, [r4, #0]
    3a02:	420a      	tst	r2, r1
    3a04:	d141      	bne.n	3a8a <uECC_vli_modInv.part.1+0x1ba>
    while (vli-- > end) {
    3a06:	9a07      	ldr	r2, [sp, #28]
    3a08:	9908      	ldr	r1, [sp, #32]
    3a0a:	2300      	movs	r3, #0
    3a0c:	42a2      	cmp	r2, r4
    3a0e:	d90e      	bls.n	3a2e <uECC_vli_modInv.part.1+0x15e>
    3a10:	0018      	movs	r0, r3
    3a12:	9f02      	ldr	r7, [sp, #8]
    3a14:	9d01      	ldr	r5, [sp, #4]
    3a16:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3a18:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3a1a:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3a1c:	0853      	lsrs	r3, r2, #1
    3a1e:	4303      	orrs	r3, r0
    3a20:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3a22:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3a24:	42b9      	cmp	r1, r7
    3a26:	d1f7      	bne.n	3a18 <uECC_vli_modInv.part.1+0x148>
    3a28:	9702      	str	r7, [sp, #8]
    3a2a:	9501      	str	r5, [sp, #4]
    3a2c:	9600      	str	r6, [sp, #0]
    if (!EVEN(uv)) {
    3a2e:	2201      	movs	r2, #1
    3a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3a32:	4213      	tst	r3, r2
    3a34:	d000      	beq.n	3a38 <uECC_vli_modInv.part.1+0x168>
    3a36:	e0dc      	b.n	3bf2 <uECC_vli_modInv.part.1+0x322>
    while (vli-- > end) {
    3a38:	9b06      	ldr	r3, [sp, #24]
    3a3a:	9a00      	ldr	r2, [sp, #0]
    uECC_word_t carry = 0;
    3a3c:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3a40:	4293      	cmp	r3, r2
    3a42:	d9a8      	bls.n	3996 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3a44:	2300      	movs	r3, #0
    3a46:	9909      	ldr	r1, [sp, #36]	; 0x24
    3a48:	9f02      	ldr	r7, [sp, #8]
    3a4a:	0018      	movs	r0, r3
    3a4c:	9d01      	ldr	r5, [sp, #4]
    3a4e:	9e00      	ldr	r6, [sp, #0]
    3a50:	e000      	b.n	3a54 <uECC_vli_modInv.part.1+0x184>
    while (vli-- > end) {
    3a52:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3a54:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3a56:	0853      	lsrs	r3, r2, #1
    3a58:	4303      	orrs	r3, r0
    3a5a:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3a5c:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3a5e:	1f0b      	subs	r3, r1, #4
    3a60:	42b1      	cmp	r1, r6
    3a62:	d8f6      	bhi.n	3a52 <uECC_vli_modInv.part.1+0x182>
    3a64:	9702      	str	r7, [sp, #8]
    3a66:	9501      	str	r5, [sp, #4]
    3a68:	9600      	str	r6, [sp, #0]
    if (carry) {
    3a6a:	4663      	mov	r3, ip
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d092      	beq.n	3996 <uECC_vli_modInv.part.1+0xc6>
        uv[num_words - 1] |= HIGH_BIT_SET;
    3a70:	465a      	mov	r2, fp
    3a72:	2380      	movs	r3, #128	; 0x80
    3a74:	6812      	ldr	r2, [r2, #0]
    3a76:	061b      	lsls	r3, r3, #24
    3a78:	4313      	orrs	r3, r2
    3a7a:	465a      	mov	r2, fp
    for (i = num_words - 1; i >= 0; --i) {
    3a7c:	9903      	ldr	r1, [sp, #12]
        uv[num_words - 1] |= HIGH_BIT_SET;
    3a7e:	6013      	str	r3, [r2, #0]
    for (i = num_words - 1; i >= 0; --i) {
    3a80:	2900      	cmp	r1, #0
    3a82:	db00      	blt.n	3a86 <uECC_vli_modInv.part.1+0x1b6>
    3a84:	e78b      	b.n	399e <uECC_vli_modInv.part.1+0xce>
    3a86:	9e00      	ldr	r6, [sp, #0]
    3a88:	e7a1      	b.n	39ce <uECC_vli_modInv.part.1+0xfe>
        } else if (EVEN(b)) {
    3a8a:	2101      	movs	r1, #1
    3a8c:	9801      	ldr	r0, [sp, #4]
    3a8e:	6802      	ldr	r2, [r0, #0]
    3a90:	420a      	tst	r2, r1
    3a92:	d14c      	bne.n	3b2e <uECC_vli_modInv.part.1+0x25e>
    while (vli-- > end) {
    3a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3a96:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3a98:	2300      	movs	r3, #0
    3a9a:	4282      	cmp	r2, r0
    3a9c:	d912      	bls.n	3ac4 <uECC_vli_modInv.part.1+0x1f4>
    3a9e:	0005      	movs	r5, r0
    3aa0:	46a4      	mov	ip, r4
    3aa2:	0018      	movs	r0, r3
    3aa4:	464c      	mov	r4, r9
    3aa6:	9f02      	ldr	r7, [sp, #8]
    3aa8:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3aaa:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3aac:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3aae:	0853      	lsrs	r3, r2, #1
    3ab0:	4303      	orrs	r3, r0
    3ab2:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3ab4:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3ab6:	428c      	cmp	r4, r1
    3ab8:	d1f7      	bne.n	3aaa <uECC_vli_modInv.part.1+0x1da>
    3aba:	46a1      	mov	r9, r4
    3abc:	4664      	mov	r4, ip
    3abe:	9702      	str	r7, [sp, #8]
    3ac0:	9501      	str	r5, [sp, #4]
    3ac2:	9600      	str	r6, [sp, #0]
    if (!EVEN(uv)) {
    3ac4:	2201      	movs	r2, #1
    3ac6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3ac8:	4213      	tst	r3, r2
    3aca:	d000      	beq.n	3ace <uECC_vli_modInv.part.1+0x1fe>
    3acc:	e0c2      	b.n	3c54 <uECC_vli_modInv.part.1+0x384>
    while (vli-- > end) {
    3ace:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uECC_word_t carry = 0;
    3ad0:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3ad4:	4543      	cmp	r3, r8
    3ad6:	d800      	bhi.n	3ada <uECC_vli_modInv.part.1+0x20a>
    3ad8:	e75d      	b.n	3996 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3ada:	2300      	movs	r3, #0
    3adc:	4640      	mov	r0, r8
    3ade:	9911      	ldr	r1, [sp, #68]	; 0x44
    3ae0:	46a0      	mov	r8, r4
    3ae2:	9f02      	ldr	r7, [sp, #8]
    3ae4:	9d01      	ldr	r5, [sp, #4]
    3ae6:	9e00      	ldr	r6, [sp, #0]
    3ae8:	001c      	movs	r4, r3
    3aea:	e000      	b.n	3aee <uECC_vli_modInv.part.1+0x21e>
    while (vli-- > end) {
    3aec:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3aee:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3af0:	0853      	lsrs	r3, r2, #1
    3af2:	4323      	orrs	r3, r4
    3af4:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3af6:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    3af8:	1f0b      	subs	r3, r1, #4
    3afa:	4281      	cmp	r1, r0
    3afc:	d8f6      	bhi.n	3aec <uECC_vli_modInv.part.1+0x21c>
    3afe:	4644      	mov	r4, r8
    3b00:	4680      	mov	r8, r0
    3b02:	9702      	str	r7, [sp, #8]
    3b04:	9501      	str	r5, [sp, #4]
    3b06:	9600      	str	r6, [sp, #0]
    if (carry) {
    3b08:	4663      	mov	r3, ip
    3b0a:	2b00      	cmp	r3, #0
    3b0c:	d100      	bne.n	3b10 <uECC_vli_modInv.part.1+0x240>
    3b0e:	e742      	b.n	3996 <uECC_vli_modInv.part.1+0xc6>
        uv[num_words - 1] |= HIGH_BIT_SET;
    3b10:	9a15      	ldr	r2, [sp, #84]	; 0x54
    3b12:	6813      	ldr	r3, [r2, #0]
    3b14:	930a      	str	r3, [sp, #40]	; 0x28
    3b16:	2380      	movs	r3, #128	; 0x80
    3b18:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b1a:	061b      	lsls	r3, r3, #24
    3b1c:	430b      	orrs	r3, r1
    3b1e:	6013      	str	r3, [r2, #0]
    3b20:	e739      	b.n	3996 <uECC_vli_modInv.part.1+0xc6>
    3b22:	9702      	str	r7, [sp, #8]
    3b24:	9501      	str	r5, [sp, #4]
    3b26:	9600      	str	r6, [sp, #0]
            return -1;
    3b28:	2301      	movs	r3, #1
    3b2a:	425b      	negs	r3, r3
    3b2c:	e767      	b.n	39fe <uECC_vli_modInv.part.1+0x12e>
        } else if (cmpResult > 0) {
    3b2e:	2b01      	cmp	r3, #1
    3b30:	d000      	beq.n	3b34 <uECC_vli_modInv.part.1+0x264>
    3b32:	e0be      	b.n	3cb2 <uECC_vli_modInv.part.1+0x3e2>
            uECC_vli_sub(a, a, b, num_words);
    3b34:	f240 7751 	movw	r7, #1873	; 0x751
    3b38:	0002      	movs	r2, r0
    3b3a:	9b05      	ldr	r3, [sp, #20]
    3b3c:	0021      	movs	r1, r4
    3b3e:	f2c0 0700 	movt	r7, #0
    3b42:	0020      	movs	r0, r4
    3b44:	970a      	str	r7, [sp, #40]	; 0x28
    3b46:	47b8      	blx	r7
    while (vli-- > end) {
    3b48:	9a07      	ldr	r2, [sp, #28]
    3b4a:	9908      	ldr	r1, [sp, #32]
    3b4c:	2300      	movs	r3, #0
    3b4e:	42a2      	cmp	r2, r4
    3b50:	d90e      	bls.n	3b70 <uECC_vli_modInv.part.1+0x2a0>
    3b52:	0018      	movs	r0, r3
    3b54:	9f02      	ldr	r7, [sp, #8]
    3b56:	9d01      	ldr	r5, [sp, #4]
    3b58:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3b5a:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3b5c:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3b5e:	0853      	lsrs	r3, r2, #1
    3b60:	4303      	orrs	r3, r0
    3b62:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3b64:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3b66:	428f      	cmp	r7, r1
    3b68:	d1f7      	bne.n	3b5a <uECC_vli_modInv.part.1+0x28a>
    3b6a:	9702      	str	r7, [sp, #8]
    3b6c:	9501      	str	r5, [sp, #4]
    3b6e:	9600      	str	r6, [sp, #0]
        if (left[i] > right[i]) {
    3b70:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3b72:	681a      	ldr	r2, [r3, #0]
    3b74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	429a      	cmp	r2, r3
    3b7a:	d900      	bls.n	3b7e <uECC_vli_modInv.part.1+0x2ae>
    3b7c:	e10a      	b.n	3d94 <uECC_vli_modInv.part.1+0x4c4>
        } else if (left[i] < right[i]) {
    3b7e:	d200      	bcs.n	3b82 <uECC_vli_modInv.part.1+0x2b2>
    3b80:	e0ff      	b.n	3d82 <uECC_vli_modInv.part.1+0x4b2>
    3b82:	9b03      	ldr	r3, [sp, #12]
    3b84:	9f02      	ldr	r7, [sp, #8]
    3b86:	9d01      	ldr	r5, [sp, #4]
    3b88:	9e00      	ldr	r6, [sp, #0]
    3b8a:	4640      	mov	r0, r8
    3b8c:	e006      	b.n	3b9c <uECC_vli_modInv.part.1+0x2cc>
        if (left[i] > right[i]) {
    3b8e:	009a      	lsls	r2, r3, #2
    3b90:	58b1      	ldr	r1, [r6, r2]
    3b92:	5882      	ldr	r2, [r0, r2]
    3b94:	4291      	cmp	r1, r2
    3b96:	d805      	bhi.n	3ba4 <uECC_vli_modInv.part.1+0x2d4>
        } else if (left[i] < right[i]) {
    3b98:	d200      	bcs.n	3b9c <uECC_vli_modInv.part.1+0x2cc>
    3b9a:	e0ee      	b.n	3d7a <uECC_vli_modInv.part.1+0x4aa>
    3b9c:	3b01      	subs	r3, #1
    3b9e:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    3ba0:	1c5a      	adds	r2, r3, #1
    3ba2:	d1f4      	bne.n	3b8e <uECC_vli_modInv.part.1+0x2be>
    3ba4:	9501      	str	r5, [sp, #4]
    3ba6:	4680      	mov	r8, r0
    3ba8:	0035      	movs	r5, r6
    3baa:	9702      	str	r7, [sp, #8]
    3bac:	9600      	str	r6, [sp, #0]
            uECC_vli_sub(u, u, v, num_words);
    3bae:	9b05      	ldr	r3, [sp, #20]
    3bb0:	4642      	mov	r2, r8
    3bb2:	0029      	movs	r1, r5
    3bb4:	0028      	movs	r0, r5
    3bb6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    3bb8:	47b8      	blx	r7
    if (!EVEN(uv)) {
    3bba:	2201      	movs	r2, #1
    3bbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3bbe:	4213      	tst	r3, r2
    3bc0:	d000      	beq.n	3bc4 <uECC_vli_modInv.part.1+0x2f4>
    3bc2:	e0e9      	b.n	3d98 <uECC_vli_modInv.part.1+0x4c8>
    while (vli-- > end) {
    3bc4:	9b06      	ldr	r3, [sp, #24]
    uECC_word_t carry = 0;
    3bc6:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3bca:	42ab      	cmp	r3, r5
    3bcc:	d800      	bhi.n	3bd0 <uECC_vli_modInv.part.1+0x300>
    3bce:	e6e2      	b.n	3996 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3bd0:	2300      	movs	r3, #0
    3bd2:	9909      	ldr	r1, [sp, #36]	; 0x24
    3bd4:	9f02      	ldr	r7, [sp, #8]
    3bd6:	0018      	movs	r0, r3
    3bd8:	9d01      	ldr	r5, [sp, #4]
    3bda:	9e00      	ldr	r6, [sp, #0]
    3bdc:	e000      	b.n	3be0 <uECC_vli_modInv.part.1+0x310>
    while (vli-- > end) {
    3bde:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3be0:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3be2:	0853      	lsrs	r3, r2, #1
    3be4:	4303      	orrs	r3, r0
    3be6:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3be8:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3bea:	1f0b      	subs	r3, r1, #4
    3bec:	42b1      	cmp	r1, r6
    3bee:	d8f6      	bhi.n	3bde <uECC_vli_modInv.part.1+0x30e>
    3bf0:	e738      	b.n	3a64 <uECC_vli_modInv.part.1+0x194>
    __asm__ volatile (
    3bf2:	9900      	ldr	r1, [sp, #0]
    3bf4:	980d      	ldr	r0, [sp, #52]	; 0x34
    3bf6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3bf8:	000f      	movs	r7, r1
    3bfa:	2200      	movs	r2, #0
    3bfc:	a503      	add	r5, pc, #12	; (adr r5, 3c0c <uECC_vli_modInv.part.1+0x33c>)
    3bfe:	46c0      	nop			; (mov r8, r8)
    3c00:	195b      	adds	r3, r3, r5
    3c02:	cf20      	ldmia	r7!, {r5}
    3c04:	c840      	ldmia	r0!, {r6}
    3c06:	19ad      	adds	r5, r5, r6
    3c08:	c120      	stmia	r1!, {r5}
    3c0a:	4718      	bx	r3
    3c0c:	cf20      	ldmia	r7!, {r5}
    3c0e:	c840      	ldmia	r0!, {r6}
    3c10:	4175      	adcs	r5, r6
    3c12:	c120      	stmia	r1!, {r5}
    3c14:	cf20      	ldmia	r7!, {r5}
    3c16:	c840      	ldmia	r0!, {r6}
    3c18:	4175      	adcs	r5, r6
    3c1a:	c120      	stmia	r1!, {r5}
    3c1c:	cf20      	ldmia	r7!, {r5}
    3c1e:	c840      	ldmia	r0!, {r6}
    3c20:	4175      	adcs	r5, r6
    3c22:	c120      	stmia	r1!, {r5}
    3c24:	cf20      	ldmia	r7!, {r5}
    3c26:	c840      	ldmia	r0!, {r6}
    3c28:	4175      	adcs	r5, r6
    3c2a:	c120      	stmia	r1!, {r5}
    3c2c:	cf20      	ldmia	r7!, {r5}
    3c2e:	c840      	ldmia	r0!, {r6}
    3c30:	4175      	adcs	r5, r6
    3c32:	c120      	stmia	r1!, {r5}
    3c34:	cf20      	ldmia	r7!, {r5}
    3c36:	c840      	ldmia	r0!, {r6}
    3c38:	4175      	adcs	r5, r6
    3c3a:	c120      	stmia	r1!, {r5}
    3c3c:	cf20      	ldmia	r7!, {r5}
    3c3e:	c840      	ldmia	r0!, {r6}
    3c40:	4175      	adcs	r5, r6
    3c42:	c120      	stmia	r1!, {r5}
    3c44:	4152      	adcs	r2, r2
    3c46:	4694      	mov	ip, r2
    3c48:	9b06      	ldr	r3, [sp, #24]
    3c4a:	9a00      	ldr	r2, [sp, #0]
    3c4c:	4293      	cmp	r3, r2
    3c4e:	d900      	bls.n	3c52 <uECC_vli_modInv.part.1+0x382>
    3c50:	e6f8      	b.n	3a44 <uECC_vli_modInv.part.1+0x174>
    3c52:	e70a      	b.n	3a6a <uECC_vli_modInv.part.1+0x19a>
    3c54:	4643      	mov	r3, r8
    3c56:	990d      	ldr	r1, [sp, #52]	; 0x34
    3c58:	9812      	ldr	r0, [sp, #72]	; 0x48
    3c5a:	4645      	mov	r5, r8
    3c5c:	2200      	movs	r2, #0
    3c5e:	a603      	add	r6, pc, #12	; (adr r6, 3c6c <uECC_vli_modInv.part.1+0x39c>)
    3c60:	1980      	adds	r0, r0, r6
    3c62:	cd40      	ldmia	r5!, {r6}
    3c64:	c980      	ldmia	r1!, {r7}
    3c66:	19f6      	adds	r6, r6, r7
    3c68:	c340      	stmia	r3!, {r6}
    3c6a:	4700      	bx	r0
    3c6c:	cd40      	ldmia	r5!, {r6}
    3c6e:	c980      	ldmia	r1!, {r7}
    3c70:	417e      	adcs	r6, r7
    3c72:	c340      	stmia	r3!, {r6}
    3c74:	cd40      	ldmia	r5!, {r6}
    3c76:	c980      	ldmia	r1!, {r7}
    3c78:	417e      	adcs	r6, r7
    3c7a:	c340      	stmia	r3!, {r6}
    3c7c:	cd40      	ldmia	r5!, {r6}
    3c7e:	c980      	ldmia	r1!, {r7}
    3c80:	417e      	adcs	r6, r7
    3c82:	c340      	stmia	r3!, {r6}
    3c84:	cd40      	ldmia	r5!, {r6}
    3c86:	c980      	ldmia	r1!, {r7}
    3c88:	417e      	adcs	r6, r7
    3c8a:	c340      	stmia	r3!, {r6}
    3c8c:	cd40      	ldmia	r5!, {r6}
    3c8e:	c980      	ldmia	r1!, {r7}
    3c90:	417e      	adcs	r6, r7
    3c92:	c340      	stmia	r3!, {r6}
    3c94:	cd40      	ldmia	r5!, {r6}
    3c96:	c980      	ldmia	r1!, {r7}
    3c98:	417e      	adcs	r6, r7
    3c9a:	c340      	stmia	r3!, {r6}
    3c9c:	cd40      	ldmia	r5!, {r6}
    3c9e:	c980      	ldmia	r1!, {r7}
    3ca0:	417e      	adcs	r6, r7
    3ca2:	c340      	stmia	r3!, {r6}
    3ca4:	4152      	adcs	r2, r2
    3ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3ca8:	4694      	mov	ip, r2
    3caa:	4543      	cmp	r3, r8
    3cac:	d900      	bls.n	3cb0 <uECC_vli_modInv.part.1+0x3e0>
    3cae:	e714      	b.n	3ada <uECC_vli_modInv.part.1+0x20a>
    3cb0:	e72a      	b.n	3b08 <uECC_vli_modInv.part.1+0x238>
            uECC_vli_sub(b, b, a, num_words);
    3cb2:	f240 7751 	movw	r7, #1873	; 0x751
    3cb6:	9b05      	ldr	r3, [sp, #20]
    3cb8:	0022      	movs	r2, r4
    3cba:	0001      	movs	r1, r0
    3cbc:	f2c0 0700 	movt	r7, #0
    3cc0:	0005      	movs	r5, r0
    3cc2:	970a      	str	r7, [sp, #40]	; 0x28
    3cc4:	47b8      	blx	r7
    while (vli-- > end) {
    3cc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3cc8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    3cca:	2300      	movs	r3, #0
    3ccc:	42aa      	cmp	r2, r5
    3cce:	d912      	bls.n	3cf6 <uECC_vli_modInv.part.1+0x426>
    3cd0:	46a4      	mov	ip, r4
    3cd2:	0018      	movs	r0, r3
    3cd4:	464c      	mov	r4, r9
    3cd6:	9f02      	ldr	r7, [sp, #8]
    3cd8:	9d01      	ldr	r5, [sp, #4]
    3cda:	9e00      	ldr	r6, [sp, #0]
        uECC_word_t temp = *vli;
    3cdc:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    3cde:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    3ce0:	0853      	lsrs	r3, r2, #1
    3ce2:	4303      	orrs	r3, r0
    3ce4:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    3ce6:	07d0      	lsls	r0, r2, #31
    while (vli-- > end) {
    3ce8:	428c      	cmp	r4, r1
    3cea:	d1f7      	bne.n	3cdc <uECC_vli_modInv.part.1+0x40c>
    3cec:	46a1      	mov	r9, r4
    3cee:	4664      	mov	r4, ip
    3cf0:	9702      	str	r7, [sp, #8]
    3cf2:	9501      	str	r5, [sp, #4]
    3cf4:	9600      	str	r6, [sp, #0]
        if (left[i] > right[i]) {
    3cf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3cfc:	681b      	ldr	r3, [r3, #0]
    3cfe:	429a      	cmp	r2, r3
    3d00:	d900      	bls.n	3d04 <uECC_vli_modInv.part.1+0x434>
    3d02:	e08c      	b.n	3e1e <uECC_vli_modInv.part.1+0x54e>
        } else if (left[i] < right[i]) {
    3d04:	d200      	bcs.n	3d08 <uECC_vli_modInv.part.1+0x438>
    3d06:	e081      	b.n	3e0c <uECC_vli_modInv.part.1+0x53c>
    3d08:	9b03      	ldr	r3, [sp, #12]
    3d0a:	9f02      	ldr	r7, [sp, #8]
    3d0c:	9d01      	ldr	r5, [sp, #4]
    3d0e:	9e00      	ldr	r6, [sp, #0]
    3d10:	4640      	mov	r0, r8
    3d12:	e006      	b.n	3d22 <uECC_vli_modInv.part.1+0x452>
        if (left[i] > right[i]) {
    3d14:	009a      	lsls	r2, r3, #2
    3d16:	5881      	ldr	r1, [r0, r2]
    3d18:	58b2      	ldr	r2, [r6, r2]
    3d1a:	4291      	cmp	r1, r2
    3d1c:	d805      	bhi.n	3d2a <uECC_vli_modInv.part.1+0x45a>
        } else if (left[i] < right[i]) {
    3d1e:	d200      	bcs.n	3d22 <uECC_vli_modInv.part.1+0x452>
    3d20:	e070      	b.n	3e04 <uECC_vli_modInv.part.1+0x534>
    3d22:	3b01      	subs	r3, #1
    3d24:	b25b      	sxtb	r3, r3
    for (i = num_words - 1; i >= 0; --i) {
    3d26:	1c5a      	adds	r2, r3, #1
    3d28:	d1f4      	bne.n	3d14 <uECC_vli_modInv.part.1+0x444>
    3d2a:	4680      	mov	r8, r0
    3d2c:	0032      	movs	r2, r6
    3d2e:	9702      	str	r7, [sp, #8]
    3d30:	9501      	str	r5, [sp, #4]
    3d32:	9600      	str	r6, [sp, #0]
            uECC_vli_sub(v, v, u, num_words);
    3d34:	9b05      	ldr	r3, [sp, #20]
    3d36:	4641      	mov	r1, r8
    3d38:	4640      	mov	r0, r8
    3d3a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3d3c:	47a8      	blx	r5
    if (!EVEN(uv)) {
    3d3e:	2201      	movs	r2, #1
    3d40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    3d42:	4213      	tst	r3, r2
    3d44:	d000      	beq.n	3d48 <uECC_vli_modInv.part.1+0x478>
    3d46:	e06c      	b.n	3e22 <uECC_vli_modInv.part.1+0x552>
    while (vli-- > end) {
    3d48:	9b10      	ldr	r3, [sp, #64]	; 0x40
    uECC_word_t carry = 0;
    3d4a:	f240 0c00 	movw	ip, #0
    while (vli-- > end) {
    3d4e:	4543      	cmp	r3, r8
    3d50:	d800      	bhi.n	3d54 <uECC_vli_modInv.part.1+0x484>
    3d52:	e620      	b.n	3996 <uECC_vli_modInv.part.1+0xc6>
    uECC_word_t carry = 0;
    3d54:	2300      	movs	r3, #0
    3d56:	4640      	mov	r0, r8
    3d58:	9911      	ldr	r1, [sp, #68]	; 0x44
    3d5a:	46a0      	mov	r8, r4
    3d5c:	9f02      	ldr	r7, [sp, #8]
    3d5e:	9d01      	ldr	r5, [sp, #4]
    3d60:	9e00      	ldr	r6, [sp, #0]
    3d62:	001c      	movs	r4, r3
    3d64:	e000      	b.n	3d68 <uECC_vli_modInv.part.1+0x498>
    while (vli-- > end) {
    3d66:	0019      	movs	r1, r3
        uECC_word_t temp = *vli;
    3d68:	680a      	ldr	r2, [r1, #0]
        *vli = (temp >> 1) | carry;
    3d6a:	0853      	lsrs	r3, r2, #1
    3d6c:	4323      	orrs	r3, r4
    3d6e:	600b      	str	r3, [r1, #0]
        carry = temp << (uECC_WORD_BITS - 1);
    3d70:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    3d72:	1f0b      	subs	r3, r1, #4
    3d74:	4281      	cmp	r1, r0
    3d76:	d8f6      	bhi.n	3d66 <uECC_vli_modInv.part.1+0x496>
    3d78:	e6c1      	b.n	3afe <uECC_vli_modInv.part.1+0x22e>
    3d7a:	4680      	mov	r8, r0
    3d7c:	9702      	str	r7, [sp, #8]
    3d7e:	9501      	str	r5, [sp, #4]
    3d80:	9600      	str	r6, [sp, #0]
                uECC_vli_add(u, u, mod, num_words);
    3d82:	f240 65f1 	movw	r5, #1777	; 0x6f1
    3d86:	9800      	ldr	r0, [sp, #0]
    3d88:	9b05      	ldr	r3, [sp, #20]
    3d8a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3d8c:	0001      	movs	r1, r0
    3d8e:	f2c0 0500 	movt	r5, #0
    3d92:	47a8      	blx	r5
    3d94:	9d00      	ldr	r5, [sp, #0]
    3d96:	e70a      	b.n	3bae <uECC_vli_modInv.part.1+0x2de>
    3d98:	9b00      	ldr	r3, [sp, #0]
    3d9a:	990d      	ldr	r1, [sp, #52]	; 0x34
    3d9c:	9812      	ldr	r0, [sp, #72]	; 0x48
    3d9e:	001d      	movs	r5, r3
    3da0:	2200      	movs	r2, #0
    3da2:	a606      	add	r6, pc, #24	; (adr r6, 3dbc <uECC_vli_modInv.part.1+0x4ec>)
    3da4:	46c0      	nop			; (mov r8, r8)
    3da6:	46c0      	nop			; (mov r8, r8)
    3da8:	46c0      	nop			; (mov r8, r8)
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	46c0      	nop			; (mov r8, r8)
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	1980      	adds	r0, r0, r6
    3db2:	cd40      	ldmia	r5!, {r6}
    3db4:	c980      	ldmia	r1!, {r7}
    3db6:	19f6      	adds	r6, r6, r7
    3db8:	c340      	stmia	r3!, {r6}
    3dba:	4700      	bx	r0
    3dbc:	cd40      	ldmia	r5!, {r6}
    3dbe:	c980      	ldmia	r1!, {r7}
    3dc0:	417e      	adcs	r6, r7
    3dc2:	c340      	stmia	r3!, {r6}
    3dc4:	cd40      	ldmia	r5!, {r6}
    3dc6:	c980      	ldmia	r1!, {r7}
    3dc8:	417e      	adcs	r6, r7
    3dca:	c340      	stmia	r3!, {r6}
    3dcc:	cd40      	ldmia	r5!, {r6}
    3dce:	c980      	ldmia	r1!, {r7}
    3dd0:	417e      	adcs	r6, r7
    3dd2:	c340      	stmia	r3!, {r6}
    3dd4:	cd40      	ldmia	r5!, {r6}
    3dd6:	c980      	ldmia	r1!, {r7}
    3dd8:	417e      	adcs	r6, r7
    3dda:	c340      	stmia	r3!, {r6}
    3ddc:	cd40      	ldmia	r5!, {r6}
    3dde:	c980      	ldmia	r1!, {r7}
    3de0:	417e      	adcs	r6, r7
    3de2:	c340      	stmia	r3!, {r6}
    3de4:	cd40      	ldmia	r5!, {r6}
    3de6:	c980      	ldmia	r1!, {r7}
    3de8:	417e      	adcs	r6, r7
    3dea:	c340      	stmia	r3!, {r6}
    3dec:	cd40      	ldmia	r5!, {r6}
    3dee:	c980      	ldmia	r1!, {r7}
    3df0:	417e      	adcs	r6, r7
    3df2:	c340      	stmia	r3!, {r6}
    3df4:	4152      	adcs	r2, r2
    3df6:	4694      	mov	ip, r2
    while (vli-- > end) {
    3df8:	9b06      	ldr	r3, [sp, #24]
    3dfa:	9a00      	ldr	r2, [sp, #0]
    3dfc:	4293      	cmp	r3, r2
    3dfe:	d900      	bls.n	3e02 <uECC_vli_modInv.part.1+0x532>
    3e00:	e6e6      	b.n	3bd0 <uECC_vli_modInv.part.1+0x300>
    3e02:	e632      	b.n	3a6a <uECC_vli_modInv.part.1+0x19a>
    3e04:	4680      	mov	r8, r0
    3e06:	9702      	str	r7, [sp, #8]
    3e08:	9501      	str	r5, [sp, #4]
    3e0a:	9600      	str	r6, [sp, #0]
                uECC_vli_add(v, v, mod, num_words);
    3e0c:	f240 65f1 	movw	r5, #1777	; 0x6f1
    3e10:	9b05      	ldr	r3, [sp, #20]
    3e12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3e14:	4641      	mov	r1, r8
    3e16:	4640      	mov	r0, r8
    3e18:	f2c0 0500 	movt	r5, #0
    3e1c:	47a8      	blx	r5
    3e1e:	9a00      	ldr	r2, [sp, #0]
    3e20:	e788      	b.n	3d34 <uECC_vli_modInv.part.1+0x464>
    3e22:	4643      	mov	r3, r8
    3e24:	990d      	ldr	r1, [sp, #52]	; 0x34
    3e26:	9812      	ldr	r0, [sp, #72]	; 0x48
    3e28:	4645      	mov	r5, r8
    3e2a:	2200      	movs	r2, #0
    3e2c:	a603      	add	r6, pc, #12	; (adr r6, 3e3c <uECC_vli_modInv.part.1+0x56c>)
    3e2e:	46c0      	nop			; (mov r8, r8)
    3e30:	1980      	adds	r0, r0, r6
    3e32:	cd40      	ldmia	r5!, {r6}
    3e34:	c980      	ldmia	r1!, {r7}
    3e36:	19f6      	adds	r6, r6, r7
    3e38:	c340      	stmia	r3!, {r6}
    3e3a:	4700      	bx	r0
    3e3c:	cd40      	ldmia	r5!, {r6}
    3e3e:	c980      	ldmia	r1!, {r7}
    3e40:	417e      	adcs	r6, r7
    3e42:	c340      	stmia	r3!, {r6}
    3e44:	cd40      	ldmia	r5!, {r6}
    3e46:	c980      	ldmia	r1!, {r7}
    3e48:	417e      	adcs	r6, r7
    3e4a:	c340      	stmia	r3!, {r6}
    3e4c:	cd40      	ldmia	r5!, {r6}
    3e4e:	c980      	ldmia	r1!, {r7}
    3e50:	417e      	adcs	r6, r7
    3e52:	c340      	stmia	r3!, {r6}
    3e54:	cd40      	ldmia	r5!, {r6}
    3e56:	c980      	ldmia	r1!, {r7}
    3e58:	417e      	adcs	r6, r7
    3e5a:	c340      	stmia	r3!, {r6}
    3e5c:	cd40      	ldmia	r5!, {r6}
    3e5e:	c980      	ldmia	r1!, {r7}
    3e60:	417e      	adcs	r6, r7
    3e62:	c340      	stmia	r3!, {r6}
    3e64:	cd40      	ldmia	r5!, {r6}
    3e66:	c980      	ldmia	r1!, {r7}
    3e68:	417e      	adcs	r6, r7
    3e6a:	c340      	stmia	r3!, {r6}
    3e6c:	cd40      	ldmia	r5!, {r6}
    3e6e:	c980      	ldmia	r1!, {r7}
    3e70:	417e      	adcs	r6, r7
    3e72:	c340      	stmia	r3!, {r6}
    3e74:	4152      	adcs	r2, r2
    while (vli-- > end) {
    3e76:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3e78:	4694      	mov	ip, r2
    3e7a:	4543      	cmp	r3, r8
    3e7c:	d900      	bls.n	3e80 <uECC_vli_modInv.part.1+0x5b0>
    3e7e:	e769      	b.n	3d54 <uECC_vli_modInv.part.1+0x484>
    3e80:	e642      	b.n	3b08 <uECC_vli_modInv.part.1+0x238>
    u[0] = 1;
    3e82:	2301      	movs	r3, #1
    3e84:	9326      	str	r3, [sp, #152]	; 0x98
    3e86:	9b05      	ldr	r3, [sp, #20]
    3e88:	ac16      	add	r4, sp, #88	; 0x58
    3e8a:	1e5f      	subs	r7, r3, #1
    3e8c:	ab2e      	add	r3, sp, #184	; 0xb8
    3e8e:	ad1e      	add	r5, sp, #120	; 0x78
    3e90:	ae26      	add	r6, sp, #152	; 0x98
    3e92:	4698      	mov	r8, r3
    3e94:	e54d      	b.n	3932 <uECC_vli_modInv.part.1+0x62>
    3e96:	46c0      	nop			; (mov r8, r8)

00003e98 <EccPoint_mult>:
                          uECC_Curve curve) {
    3e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e9a:	4645      	mov	r5, r8
    3e9c:	46de      	mov	lr, fp
    3e9e:	4657      	mov	r7, sl
    3ea0:	464e      	mov	r6, r9
    3ea2:	b5e0      	push	{r5, r6, r7, lr}
    3ea4:	b0d1      	sub	sp, #324	; 0x144
    3ea6:	4698      	mov	r8, r3
    3ea8:	ab5a      	add	r3, sp, #360	; 0x168
    3eaa:	9204      	str	r2, [sp, #16]
    3eac:	2200      	movs	r2, #0
    3eae:	5e9a      	ldrsh	r2, [r3, r2]
    wordcount_t num_words = curve->num_words;
    3eb0:	2300      	movs	r3, #0
                          uECC_Curve curve) {
    3eb2:	9f5b      	ldr	r7, [sp, #364]	; 0x16c
    3eb4:	900d      	str	r0, [sp, #52]	; 0x34
    wordcount_t num_words = curve->num_words;
    3eb6:	56fb      	ldrsb	r3, [r7, r3]
                          uECC_Curve curve) {
    3eb8:	4689      	mov	r9, r1
    3eba:	910b      	str	r1, [sp, #44]	; 0x2c
    3ebc:	4693      	mov	fp, r2
    wordcount_t num_words = curve->num_words;
    3ebe:	9308      	str	r3, [sp, #32]
    for (i = 0; i < num_words; ++i) {
    3ec0:	1e1d      	subs	r5, r3, #0
    3ec2:	dc00      	bgt.n	3ec6 <EccPoint_mult+0x2e>
    3ec4:	e1c7      	b.n	4256 <EccPoint_mult+0x3be>
    3ec6:	f246 6a31 	movw	sl, #26161	; 0x6631
        dest[i] = src[i];
    3eca:	1e5c      	subs	r4, r3, #1
    3ecc:	b2e6      	uxtb	r6, r4
    3ece:	3601      	adds	r6, #1
    3ed0:	ab28      	add	r3, sp, #160	; 0xa0
    3ed2:	00b6      	lsls	r6, r6, #2
    3ed4:	0032      	movs	r2, r6
    3ed6:	0018      	movs	r0, r3
    3ed8:	f2c0 0a00 	movt	sl, #0
    3edc:	930a      	str	r3, [sp, #40]	; 0x28
    3ede:	47d0      	blx	sl
    uECC_vli_set(Ry[1], point + num_words, num_words);
    3ee0:	00ab      	lsls	r3, r5, #2
    3ee2:	469c      	mov	ip, r3
    3ee4:	464a      	mov	r2, r9
    3ee6:	4462      	add	r2, ip
    3ee8:	930e      	str	r3, [sp, #56]	; 0x38
    3eea:	0013      	movs	r3, r2
    3eec:	ad38      	add	r5, sp, #224	; 0xe0
    3eee:	920c      	str	r2, [sp, #48]	; 0x30
    3ef0:	0019      	movs	r1, r3
    3ef2:	0032      	movs	r2, r6
    3ef4:	0028      	movs	r0, r5
    3ef6:	47d0      	blx	sl
    if (initial_Z) {
    3ef8:	4643      	mov	r3, r8
    3efa:	2b00      	cmp	r3, #0
    3efc:	d100      	bne.n	3f00 <EccPoint_mult+0x68>
    3efe:	e19d      	b.n	423c <EccPoint_mult+0x3a4>
    3f00:	ab10      	add	r3, sp, #64	; 0x40
    3f02:	0032      	movs	r2, r6
    3f04:	4641      	mov	r1, r8
    3f06:	0018      	movs	r0, r3
    3f08:	4699      	mov	r9, r3
    3f0a:	47d0      	blx	sl
        dest[i] = src[i];
    3f0c:	9b08      	ldr	r3, [sp, #32]
    3f0e:	2b00      	cmp	r3, #0
    3f10:	dc00      	bgt.n	3f14 <EccPoint_mult+0x7c>
    3f12:	e191      	b.n	4238 <EccPoint_mult+0x3a0>
    3f14:	b2e4      	uxtb	r4, r4
    3f16:	3401      	adds	r4, #1
    3f18:	00a4      	lsls	r4, r4, #2
    3f1a:	f246 6643 	movw	r6, #26179	; 0x6643
    3f1e:	ab20      	add	r3, sp, #128	; 0x80
    3f20:	0022      	movs	r2, r4
    3f22:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f24:	0018      	movs	r0, r3
    3f26:	f2c0 0600 	movt	r6, #0
    3f2a:	469a      	mov	sl, r3
    3f2c:	47b0      	blx	r6
    3f2e:	ab30      	add	r3, sp, #192	; 0xc0
    3f30:	0018      	movs	r0, r3
    3f32:	0022      	movs	r2, r4
    3f34:	0029      	movs	r1, r5
    3f36:	9309      	str	r3, [sp, #36]	; 0x24
    3f38:	47b0      	blx	r6
    3f3a:	2300      	movs	r3, #0
    3f3c:	56fb      	ldrsb	r3, [r7, r3]
    uECC_vli_mult(product, left, right, curve->num_words);
    3f3e:	f240 74ad 	movw	r4, #1965	; 0x7ad
    3f42:	464a      	mov	r2, r9
    3f44:	f2c0 0400 	movt	r4, #0
    3f48:	4649      	mov	r1, r9
    3f4a:	a840      	add	r0, sp, #256	; 0x100
    3f4c:	9407      	str	r4, [sp, #28]
    3f4e:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    3f50:	24b0      	movs	r4, #176	; 0xb0
    3f52:	a940      	add	r1, sp, #256	; 0x100
    3f54:	a818      	add	r0, sp, #96	; 0x60
    3f56:	593b      	ldr	r3, [r7, r4]
    3f58:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f5c:	2300      	movs	r3, #0
    3f5e:	4688      	mov	r8, r1
    3f60:	aa18      	add	r2, sp, #96	; 0x60
    3f62:	56fb      	ldrsb	r3, [r7, r3]
    3f64:	a840      	add	r0, sp, #256	; 0x100
    3f66:	9e07      	ldr	r6, [sp, #28]
    3f68:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3f6a:	4640      	mov	r0, r8
    3f6c:	a940      	add	r1, sp, #256	; 0x100
    3f6e:	593b      	ldr	r3, [r7, r4]
    3f70:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3f72:	2300      	movs	r3, #0
    3f74:	464a      	mov	r2, r9
    3f76:	56fb      	ldrsb	r3, [r7, r3]
    3f78:	a918      	add	r1, sp, #96	; 0x60
    3f7a:	a840      	add	r0, sp, #256	; 0x100
    3f7c:	9e07      	ldr	r6, [sp, #28]
    3f7e:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3f80:	ab18      	add	r3, sp, #96	; 0x60
    3f82:	0018      	movs	r0, r3
    3f84:	a940      	add	r1, sp, #256	; 0x100
    3f86:	593b      	ldr	r3, [r7, r4]
    3f88:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3f8a:	2300      	movs	r3, #0
    3f8c:	aa18      	add	r2, sp, #96	; 0x60
    3f8e:	56fb      	ldrsb	r3, [r7, r3]
    3f90:	0029      	movs	r1, r5
    3f92:	a840      	add	r0, sp, #256	; 0x100
    3f94:	9e07      	ldr	r6, [sp, #28]
    3f96:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3f98:	a940      	add	r1, sp, #256	; 0x100
    3f9a:	0028      	movs	r0, r5
    3f9c:	593b      	ldr	r3, [r7, r4]
    3f9e:	4798      	blx	r3
    curve->double_jacobian(X1, Y1, z, curve);
    3fa0:	23a4      	movs	r3, #164	; 0xa4
    3fa2:	4640      	mov	r0, r8
    3fa4:	58fe      	ldr	r6, [r7, r3]
    3fa6:	464a      	mov	r2, r9
    3fa8:	003b      	movs	r3, r7
    3faa:	0029      	movs	r1, r5
    3fac:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    3fae:	2300      	movs	r3, #0
    3fb0:	9e07      	ldr	r6, [sp, #28]
    3fb2:	464a      	mov	r2, r9
    3fb4:	56fb      	ldrsb	r3, [r7, r3]
    3fb6:	4649      	mov	r1, r9
    3fb8:	a840      	add	r0, sp, #256	; 0x100
    3fba:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3fbc:	a940      	add	r1, sp, #256	; 0x100
    3fbe:	a818      	add	r0, sp, #96	; 0x60
    3fc0:	593b      	ldr	r3, [r7, r4]
    3fc2:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3fc4:	2300      	movs	r3, #0
    3fc6:	aa18      	add	r2, sp, #96	; 0x60
    3fc8:	56fb      	ldrsb	r3, [r7, r3]
    3fca:	4651      	mov	r1, sl
    3fcc:	a840      	add	r0, sp, #256	; 0x100
    3fce:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3fd0:	a940      	add	r1, sp, #256	; 0x100
    3fd2:	4650      	mov	r0, sl
    3fd4:	593b      	ldr	r3, [r7, r4]
    3fd6:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3fd8:	2300      	movs	r3, #0
    3fda:	464a      	mov	r2, r9
    3fdc:	56fb      	ldrsb	r3, [r7, r3]
    3fde:	a918      	add	r1, sp, #96	; 0x60
    3fe0:	a840      	add	r0, sp, #256	; 0x100
    3fe2:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3fe4:	a940      	add	r1, sp, #256	; 0x100
    3fe6:	a818      	add	r0, sp, #96	; 0x60
    3fe8:	593b      	ldr	r3, [r7, r4]
    3fea:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    3fec:	9909      	ldr	r1, [sp, #36]	; 0x24
    3fee:	2300      	movs	r3, #0
    3ff0:	4688      	mov	r8, r1
    3ff2:	56fb      	ldrsb	r3, [r7, r3]
    3ff4:	aa18      	add	r2, sp, #96	; 0x60
    3ff6:	a840      	add	r0, sp, #256	; 0x100
    3ff8:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    3ffa:	593b      	ldr	r3, [r7, r4]
    3ffc:	a940      	add	r1, sp, #256	; 0x100
    3ffe:	4640      	mov	r0, r8
    4000:	4798      	blx	r3
    for (i = num_bits - 2; i > 0; --i) {
    4002:	465b      	mov	r3, fp
    4004:	3b02      	subs	r3, #2
    4006:	b21b      	sxth	r3, r3
    4008:	2b00      	cmp	r3, #0
    400a:	dc00      	bgt.n	400e <EccPoint_mult+0x176>
    400c:	e136      	b.n	427c <EccPoint_mult+0x3e4>
    400e:	f242 7261 	movw	r2, #10081	; 0x2761
    4012:	f2c0 0200 	movt	r2, #0
    4016:	9206      	str	r2, [sp, #24]
    4018:	f640 523d 	movw	r2, #3389	; 0xd3d
    401c:	f2c0 0200 	movt	r2, #0
    4020:	9205      	str	r2, [sp, #20]
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    4022:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4024:	4693      	mov	fp, r2
    4026:	464a      	mov	r2, r9
    4028:	46b9      	mov	r9, r7
    402a:	920f      	str	r2, [sp, #60]	; 0x3c
    402c:	221f      	movs	r2, #31
    402e:	2101      	movs	r1, #1
    4030:	b29d      	uxth	r5, r3
    4032:	402a      	ands	r2, r5
    4034:	4091      	lsls	r1, r2
    4036:	000a      	movs	r2, r1
    4038:	115b      	asrs	r3, r3, #5
    403a:	9904      	ldr	r1, [sp, #16]
    403c:	009b      	lsls	r3, r3, #2
    403e:	585c      	ldr	r4, [r3, r1]
    4040:	3d01      	subs	r5, #1
    4042:	4014      	ands	r4, r2
        nb = !uECC_vli_testBit(scalar, i);
    4044:	4262      	negs	r2, r4
    4046:	4162      	adcs	r2, r4
        XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    4048:	2301      	movs	r3, #1
    404a:	1a9e      	subs	r6, r3, r2
    404c:	4653      	mov	r3, sl
    404e:	0154      	lsls	r4, r2, #5
    4050:	191f      	adds	r7, r3, r4
    4052:	0023      	movs	r3, r4
    4054:	0176      	lsls	r6, r6, #5
    4056:	46b0      	mov	r8, r6
    4058:	445b      	add	r3, fp
    405a:	001a      	movs	r2, r3
    405c:	464b      	mov	r3, r9
    405e:	44d0      	add	r8, sl
    4060:	445e      	add	r6, fp
    4062:	9300      	str	r3, [sp, #0]
    4064:	9203      	str	r2, [sp, #12]
    4066:	0013      	movs	r3, r2
    4068:	0031      	movs	r1, r6
    406a:	003a      	movs	r2, r7
    406c:	4640      	mov	r0, r8
    406e:	9c06      	ldr	r4, [sp, #24]
    4070:	47a0      	blx	r4
        XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    4072:	464b      	mov	r3, r9
    4074:	4642      	mov	r2, r8
    4076:	9300      	str	r3, [sp, #0]
    4078:	9903      	ldr	r1, [sp, #12]
    407a:	0033      	movs	r3, r6
    407c:	0038      	movs	r0, r7
    407e:	9c05      	ldr	r4, [sp, #20]
    4080:	b2ad      	uxth	r5, r5
    4082:	47a0      	blx	r4
    4084:	b22b      	sxth	r3, r5
    for (i = num_bits - 2; i > 0; --i) {
    4086:	2d00      	cmp	r5, #0
    4088:	d1d0      	bne.n	402c <EccPoint_mult+0x194>
    408a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    408c:	464f      	mov	r7, r9
    408e:	4699      	mov	r9, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    4090:	9b04      	ldr	r3, [sp, #16]
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    4092:	4651      	mov	r1, sl
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    4094:	681a      	ldr	r2, [r3, #0]
    4096:	2301      	movs	r3, #1
    4098:	001e      	movs	r6, r3
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    409a:	9809      	ldr	r0, [sp, #36]	; 0x24
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    409c:	4016      	ands	r6, r2
    409e:	0176      	lsls	r6, r6, #5
    40a0:	4393      	bics	r3, r2
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40a2:	1989      	adds	r1, r1, r6
    40a4:	4680      	mov	r8, r0
    40a6:	015b      	lsls	r3, r3, #5
    40a8:	000c      	movs	r4, r1
    40aa:	001a      	movs	r2, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    40ac:	f240 7551 	movw	r5, #1873	; 0x751
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
    40b0:	4446      	add	r6, r8
    40b2:	4498      	add	r8, r3
    40b4:	4452      	add	r2, sl
    40b6:	0020      	movs	r0, r4
    40b8:	9103      	str	r1, [sp, #12]
    40ba:	4643      	mov	r3, r8
    40bc:	0031      	movs	r1, r6
    40be:	9700      	str	r7, [sp, #0]
    40c0:	9c06      	ldr	r4, [sp, #24]
    40c2:	9204      	str	r2, [sp, #16]
    40c4:	47a0      	blx	r4
    uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
    40c6:	1d3b      	adds	r3, r7, #4
    40c8:	469b      	mov	fp, r3
    uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
    40ca:	4652      	mov	r2, sl
    40cc:	9b08      	ldr	r3, [sp, #32]
    40ce:	990a      	ldr	r1, [sp, #40]	; 0x28
    40d0:	4648      	mov	r0, r9
    40d2:	f2c0 0500 	movt	r5, #0
    40d6:	47a8      	blx	r5
    if (l_borrow) {
    40d8:	b140      	cbz	r0, 40ec <EccPoint_mult+0x254>
        uECC_vli_add(result, result, mod, num_words);
    40da:	f240 65f1 	movw	r5, #1777	; 0x6f1
    40de:	9b08      	ldr	r3, [sp, #32]
    40e0:	465a      	mov	r2, fp
    40e2:	4649      	mov	r1, r9
    40e4:	4648      	mov	r0, r9
    40e6:	f2c0 0500 	movt	r5, #0
    40ea:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    40ec:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    40ee:	25b0      	movs	r5, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    40f0:	0032      	movs	r2, r6
    40f2:	56fb      	ldrsb	r3, [r7, r3]
    40f4:	4649      	mov	r1, r9
    40f6:	a840      	add	r0, sp, #256	; 0x100
    40f8:	9c07      	ldr	r4, [sp, #28]
    40fa:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    40fc:	a940      	add	r1, sp, #256	; 0x100
    40fe:	4648      	mov	r0, r9
    4100:	597b      	ldr	r3, [r7, r5]
    4102:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    4104:	2300      	movs	r3, #0
    4106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4108:	56fb      	ldrsb	r3, [r7, r3]
    410a:	4649      	mov	r1, r9
    410c:	a840      	add	r0, sp, #256	; 0x100
    410e:	9c07      	ldr	r4, [sp, #28]
    4110:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    4112:	597b      	ldr	r3, [r7, r5]
    4114:	a940      	add	r1, sp, #256	; 0x100
    4116:	4648      	mov	r0, r9
    4118:	4798      	blx	r3
    for (i = 0; i < num_words; ++i) {
    411a:	9b08      	ldr	r3, [sp, #32]
    411c:	2b00      	cmp	r3, #0
    411e:	dd1a      	ble.n	4156 <EccPoint_mult+0x2be>
    4120:	1e59      	subs	r1, r3, #1
    4122:	2200      	movs	r2, #0
    4124:	2300      	movs	r3, #0
    4126:	4648      	mov	r0, r9
    4128:	b2c9      	uxtb	r1, r1
    412a:	3101      	adds	r1, #1
    412c:	9c03      	ldr	r4, [sp, #12]
    412e:	0089      	lsls	r1, r1, #2
        bits |= vli[i];
    4130:	5885      	ldr	r5, [r0, r2]
    4132:	3204      	adds	r2, #4
    4134:	432b      	orrs	r3, r5
    for (i = 0; i < num_words; ++i) {
    4136:	428a      	cmp	r2, r1
    4138:	d1fa      	bne.n	4130 <EccPoint_mult+0x298>
    413a:	9403      	str	r4, [sp, #12]
    413c:	4681      	mov	r9, r0
    if (uECC_vli_isZero(input, num_words)) {
    413e:	2b00      	cmp	r3, #0
    4140:	d100      	bne.n	4144 <EccPoint_mult+0x2ac>
    4142:	e071      	b.n	4228 <EccPoint_mult+0x390>
    4144:	f643 05d1 	movw	r5, #14545	; 0x38d1
    4148:	9b08      	ldr	r3, [sp, #32]
    414a:	465a      	mov	r2, fp
    414c:	4649      	mov	r1, r9
    414e:	4648      	mov	r0, r9
    4150:	f2c0 0500 	movt	r5, #0
    4154:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    4156:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    4158:	25b0      	movs	r5, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    415a:	9c07      	ldr	r4, [sp, #28]
    415c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    415e:	56fb      	ldrsb	r3, [r7, r3]
    4160:	4649      	mov	r1, r9
    4162:	a840      	add	r0, sp, #256	; 0x100
    4164:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    4166:	a940      	add	r1, sp, #256	; 0x100
    4168:	4648      	mov	r0, r9
    416a:	597b      	ldr	r3, [r7, r5]
    416c:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    416e:	9a03      	ldr	r2, [sp, #12]
    4170:	2300      	movs	r3, #0
    4172:	4693      	mov	fp, r2
    4174:	56fb      	ldrsb	r3, [r7, r3]
    4176:	4649      	mov	r1, r9
    4178:	a840      	add	r0, sp, #256	; 0x100
    417a:	9407      	str	r4, [sp, #28]
    417c:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    417e:	a940      	add	r1, sp, #256	; 0x100
    4180:	4648      	mov	r0, r9
    4182:	597b      	ldr	r3, [r7, r5]
    4184:	4798      	blx	r3
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
    4186:	0033      	movs	r3, r6
    4188:	4641      	mov	r1, r8
    418a:	465a      	mov	r2, fp
    418c:	9804      	ldr	r0, [sp, #16]
    418e:	9700      	str	r7, [sp, #0]
    4190:	9e05      	ldr	r6, [sp, #20]
    4192:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    4194:	2300      	movs	r3, #0
    4196:	9c07      	ldr	r4, [sp, #28]
    4198:	464a      	mov	r2, r9
    419a:	56fb      	ldrsb	r3, [r7, r3]
    419c:	4649      	mov	r1, r9
    419e:	a840      	add	r0, sp, #256	; 0x100
    41a0:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41a2:	a940      	add	r1, sp, #256	; 0x100
    41a4:	a818      	add	r0, sp, #96	; 0x60
    41a6:	597b      	ldr	r3, [r7, r5]
    41a8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41aa:	2300      	movs	r3, #0
    41ac:	aa18      	add	r2, sp, #96	; 0x60
    41ae:	56fb      	ldrsb	r3, [r7, r3]
    41b0:	4651      	mov	r1, sl
    41b2:	a840      	add	r0, sp, #256	; 0x100
    41b4:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41b6:	a940      	add	r1, sp, #256	; 0x100
    41b8:	4650      	mov	r0, sl
    41ba:	597b      	ldr	r3, [r7, r5]
    41bc:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41be:	2300      	movs	r3, #0
    41c0:	464a      	mov	r2, r9
    41c2:	56fb      	ldrsb	r3, [r7, r3]
    41c4:	a918      	add	r1, sp, #96	; 0x60
    41c6:	a840      	add	r0, sp, #256	; 0x100
    41c8:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41ca:	a940      	add	r1, sp, #256	; 0x100
    41cc:	a818      	add	r0, sp, #96	; 0x60
    41ce:	597b      	ldr	r3, [r7, r5]
    41d0:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    41d2:	9909      	ldr	r1, [sp, #36]	; 0x24
    41d4:	2300      	movs	r3, #0
    41d6:	4688      	mov	r8, r1
    41d8:	56fb      	ldrsb	r3, [r7, r3]
    41da:	aa18      	add	r2, sp, #96	; 0x60
    41dc:	a840      	add	r0, sp, #256	; 0x100
    41de:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    41e0:	597b      	ldr	r3, [r7, r5]
    41e2:	a940      	add	r1, sp, #256	; 0x100
    41e4:	4640      	mov	r0, r8
    41e6:	4798      	blx	r3
    for (i = 0; i < num_words; ++i) {
    41e8:	9b08      	ldr	r3, [sp, #32]
    41ea:	2b00      	cmp	r3, #0
    41ec:	dd15      	ble.n	421a <EccPoint_mult+0x382>
        dest[i] = src[i];
    41ee:	001c      	movs	r4, r3
    41f0:	f246 6531 	movw	r5, #26161	; 0x6631
    41f4:	3c01      	subs	r4, #1
    41f6:	b2e4      	uxtb	r4, r4
    41f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    41fa:	3401      	adds	r4, #1
    41fc:	00a4      	lsls	r4, r4, #2
    41fe:	0022      	movs	r2, r4
    4200:	4651      	mov	r1, sl
    4202:	0038      	movs	r0, r7
    4204:	f2c0 0500 	movt	r5, #0
    4208:	47a8      	blx	r5
    420a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    420c:	003b      	movs	r3, r7
    420e:	4694      	mov	ip, r2
    4210:	4463      	add	r3, ip
    4212:	0018      	movs	r0, r3
    4214:	0022      	movs	r2, r4
    4216:	4641      	mov	r1, r8
    4218:	47a8      	blx	r5
}
    421a:	b051      	add	sp, #324	; 0x144
    421c:	bc3c      	pop	{r2, r3, r4, r5}
    421e:	4690      	mov	r8, r2
    4220:	4699      	mov	r9, r3
    4222:	46a2      	mov	sl, r4
    4224:	46ab      	mov	fp, r5
    4226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4228:	f246 6367 	movw	r3, #26215	; 0x6667
    422c:	2100      	movs	r1, #0
    422e:	4648      	mov	r0, r9
    4230:	f2c0 0300 	movt	r3, #0
    4234:	4798      	blx	r3
    4236:	e78e      	b.n	4156 <EccPoint_mult+0x2be>
        dest[i] = src[i];
    4238:	2404      	movs	r4, #4
    423a:	e66e      	b.n	3f1a <EccPoint_mult+0x82>
    423c:	ab10      	add	r3, sp, #64	; 0x40
    423e:	0018      	movs	r0, r3
    4240:	4699      	mov	r9, r3
    4242:	f246 6367 	movw	r3, #26215	; 0x6667
    4246:	0032      	movs	r2, r6
    4248:	f2c0 0300 	movt	r3, #0
    424c:	2100      	movs	r1, #0
    424e:	4798      	blx	r3
        z[0] = 1;
    4250:	2301      	movs	r3, #1
    4252:	9310      	str	r3, [sp, #64]	; 0x40
    4254:	e65a      	b.n	3f0c <EccPoint_mult+0x74>
    uECC_vli_set(Ry[1], point + num_words, num_words);
    4256:	009b      	lsls	r3, r3, #2
    4258:	469c      	mov	ip, r3
    425a:	000a      	movs	r2, r1
    425c:	930e      	str	r3, [sp, #56]	; 0x38
    if (initial_Z) {
    425e:	4643      	mov	r3, r8
    uECC_vli_set(Ry[1], point + num_words, num_words);
    4260:	4462      	add	r2, ip
    4262:	920c      	str	r2, [sp, #48]	; 0x30
    if (initial_Z) {
    4264:	b1ab      	cbz	r3, 4292 <EccPoint_mult+0x3fa>
    4266:	aa28      	add	r2, sp, #160	; 0xa0
    4268:	920a      	str	r2, [sp, #40]	; 0x28
    426a:	aa10      	add	r2, sp, #64	; 0x40
    426c:	4691      	mov	r9, r2
    426e:	aa20      	add	r2, sp, #128	; 0x80
    4270:	4692      	mov	sl, r2
    4272:	aa30      	add	r2, sp, #192	; 0xc0
    4274:	9b08      	ldr	r3, [sp, #32]
    4276:	ad38      	add	r5, sp, #224	; 0xe0
    4278:	9209      	str	r2, [sp, #36]	; 0x24
    427a:	e660      	b.n	3f3e <EccPoint_mult+0xa6>
    427c:	f242 7361 	movw	r3, #10081	; 0x2761
    4280:	f2c0 0300 	movt	r3, #0
    4284:	9306      	str	r3, [sp, #24]
    4286:	f640 533d 	movw	r3, #3389	; 0xd3d
    428a:	f2c0 0300 	movt	r3, #0
    428e:	9305      	str	r3, [sp, #20]
    4290:	e6fe      	b.n	4090 <EccPoint_mult+0x1f8>
        z[0] = 1;
    4292:	2301      	movs	r3, #1
    4294:	9310      	str	r3, [sp, #64]	; 0x40
    4296:	e7e6      	b.n	4266 <EccPoint_mult+0x3ce>
	...

000042a0 <mod_sqrt_secp224r1>:
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    42a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    42a2:	46de      	mov	lr, fp
    42a4:	4645      	mov	r5, r8
    42a6:	4657      	mov	r7, sl
    42a8:	464e      	mov	r6, r9
    42aa:	b5e0      	push	{r5, r6, r7, lr}
    42ac:	b0ed      	sub	sp, #436	; 0x1b4
    uECC_word_t e0[num_words_secp224r1] = {1}; /* e0 <-- 1 */
    42ae:	ab3d      	add	r3, sp, #244	; 0xf4
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    42b0:	0004      	movs	r4, r0
    42b2:	9007      	str	r0, [sp, #28]
    uECC_word_t e0[num_words_secp224r1] = {1}; /* e0 <-- 1 */
    42b4:	0018      	movs	r0, r3
    42b6:	f246 6367 	movw	r3, #26215	; 0x6667
    42ba:	221c      	movs	r2, #28
    42bc:	2100      	movs	r1, #0
    42be:	f2c0 0300 	movt	r3, #0
    42c2:	4798      	blx	r3
    42c4:	2301      	movs	r3, #1
    42c6:	933d      	str	r3, [sp, #244]	; 0xf4
    42c8:	f246 6331 	movw	r3, #26161	; 0x6631
    42cc:	0021      	movs	r1, r4
    42ce:	f2c0 0300 	movt	r3, #0
    42d2:	221c      	movs	r2, #28
    42d4:	a836      	add	r0, sp, #216	; 0xd8
    42d6:	9318      	str	r3, [sp, #96]	; 0x60
    42d8:	4798      	blx	r3
    __asm__ volatile (
    42da:	f646 03cc 	movw	r3, #26828	; 0x68cc
    42de:	f2c0 0300 	movt	r3, #0
    42e2:	9319      	str	r3, [sp, #100]	; 0x64
    42e4:	3304      	adds	r3, #4
    42e6:	469c      	mov	ip, r3
    42e8:	2509      	movs	r5, #9
    42ea:	ab44      	add	r3, sp, #272	; 0x110
    42ec:	4662      	mov	r2, ip
    42ee:	0021      	movs	r1, r4
    42f0:	0028      	movs	r0, r5
    42f2:	2600      	movs	r6, #0
    42f4:	a705      	add	r7, pc, #20	; (adr r7, 430c <mod_sqrt_secp224r1+0x6c>)
    42f6:	46c0      	nop			; (mov r8, r8)
    42f8:	46c0      	nop			; (mov r8, r8)
    42fa:	46c0      	nop			; (mov r8, r8)
    42fc:	46c0      	nop			; (mov r8, r8)
    42fe:	46c0      	nop			; (mov r8, r8)
    4300:	19c0      	adds	r0, r0, r7
    4302:	ca80      	ldmia	r2!, {r7}
    4304:	c910      	ldmia	r1!, {r4}
    4306:	1b3f      	subs	r7, r7, r4
    4308:	c380      	stmia	r3!, {r7}
    430a:	4700      	bx	r0
    430c:	ca80      	ldmia	r2!, {r7}
    430e:	c910      	ldmia	r1!, {r4}
    4310:	41a7      	sbcs	r7, r4
    4312:	c380      	stmia	r3!, {r7}
    4314:	ca80      	ldmia	r2!, {r7}
    4316:	c910      	ldmia	r1!, {r4}
    4318:	41a7      	sbcs	r7, r4
    431a:	c380      	stmia	r3!, {r7}
    431c:	ca80      	ldmia	r2!, {r7}
    431e:	c910      	ldmia	r1!, {r4}
    4320:	41a7      	sbcs	r7, r4
    4322:	c380      	stmia	r3!, {r7}
    4324:	ca80      	ldmia	r2!, {r7}
    4326:	c910      	ldmia	r1!, {r4}
    4328:	41a7      	sbcs	r7, r4
    432a:	c380      	stmia	r3!, {r7}
    432c:	ca80      	ldmia	r2!, {r7}
    432e:	c910      	ldmia	r1!, {r4}
    4330:	41a7      	sbcs	r7, r4
    4332:	c380      	stmia	r3!, {r7}
    4334:	ca80      	ldmia	r2!, {r7}
    4336:	c910      	ldmia	r1!, {r4}
    4338:	41a7      	sbcs	r7, r4
    433a:	c380      	stmia	r3!, {r7}
    433c:	ca80      	ldmia	r2!, {r7}
    433e:	c910      	ldmia	r1!, {r4}
    4340:	41a7      	sbcs	r7, r4
    4342:	c380      	stmia	r3!, {r7}
    4344:	4176      	adcs	r6, r6
    if (l_borrow) {
    4346:	2e00      	cmp	r6, #0
    4348:	d12d      	bne.n	43a6 <mod_sqrt_secp224r1+0x106>
    __asm__ volatile (
    434a:	ab44      	add	r3, sp, #272	; 0x110
    434c:	4662      	mov	r2, ip
    434e:	0029      	movs	r1, r5
    4350:	0018      	movs	r0, r3
    4352:	2400      	movs	r4, #0
    4354:	a505      	add	r5, pc, #20	; (adr r5, 436c <mod_sqrt_secp224r1+0xcc>)
    4356:	46c0      	nop			; (mov r8, r8)
    4358:	46c0      	nop			; (mov r8, r8)
    435a:	46c0      	nop			; (mov r8, r8)
    435c:	46c0      	nop			; (mov r8, r8)
    435e:	46c0      	nop			; (mov r8, r8)
    4360:	1949      	adds	r1, r1, r5
    4362:	c820      	ldmia	r0!, {r5}
    4364:	ca40      	ldmia	r2!, {r6}
    4366:	19ad      	adds	r5, r5, r6
    4368:	c320      	stmia	r3!, {r5}
    436a:	4708      	bx	r1
    436c:	c820      	ldmia	r0!, {r5}
    436e:	ca40      	ldmia	r2!, {r6}
    4370:	4175      	adcs	r5, r6
    4372:	c320      	stmia	r3!, {r5}
    4374:	c820      	ldmia	r0!, {r5}
    4376:	ca40      	ldmia	r2!, {r6}
    4378:	4175      	adcs	r5, r6
    437a:	c320      	stmia	r3!, {r5}
    437c:	c820      	ldmia	r0!, {r5}
    437e:	ca40      	ldmia	r2!, {r6}
    4380:	4175      	adcs	r5, r6
    4382:	c320      	stmia	r3!, {r5}
    4384:	c820      	ldmia	r0!, {r5}
    4386:	ca40      	ldmia	r2!, {r6}
    4388:	4175      	adcs	r5, r6
    438a:	c320      	stmia	r3!, {r5}
    438c:	c820      	ldmia	r0!, {r5}
    438e:	ca40      	ldmia	r2!, {r6}
    4390:	4175      	adcs	r5, r6
    4392:	c320      	stmia	r3!, {r5}
    4394:	c820      	ldmia	r0!, {r5}
    4396:	ca40      	ldmia	r2!, {r6}
    4398:	4175      	adcs	r5, r6
    439a:	c320      	stmia	r3!, {r5}
    439c:	c820      	ldmia	r0!, {r5}
    439e:	ca40      	ldmia	r2!, {r6}
    43a0:	4175      	adcs	r5, r6
    43a2:	c320      	stmia	r3!, {r5}
    43a4:	4164      	adcs	r4, r4
    43a6:	f240 75ad 	movw	r5, #1965	; 0x7ad
    43aa:	9b44      	ldr	r3, [sp, #272]	; 0x110
    43ac:	f2c0 0500 	movt	r5, #0
    43b0:	9309      	str	r3, [sp, #36]	; 0x24
    43b2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    43b4:	9f38      	ldr	r7, [sp, #224]	; 0xe0
    43b6:	930a      	str	r3, [sp, #40]	; 0x28
    43b8:	9b46      	ldr	r3, [sp, #280]	; 0x118
static void mod_sqrt_secp224r1(uECC_word_t *a, uECC_Curve curve) {
    43ba:	2407      	movs	r4, #7
    43bc:	930b      	str	r3, [sp, #44]	; 0x2c
    43be:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    43c0:	f241 2b31 	movw	fp, #4657	; 0x1231
    43c4:	930c      	str	r3, [sp, #48]	; 0x30
    43c6:	9b48      	ldr	r3, [sp, #288]	; 0x120
    __asm__ volatile (
    43c8:	f240 0909 	movw	r9, #9
    43cc:	930d      	str	r3, [sp, #52]	; 0x34
    43ce:	9b49      	ldr	r3, [sp, #292]	; 0x124
    43d0:	f2c0 0b00 	movt	fp, #0
    43d4:	930e      	str	r3, [sp, #56]	; 0x38
    43d6:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    43d8:	930f      	str	r3, [sp, #60]	; 0x3c
    43da:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    43dc:	9310      	str	r3, [sp, #64]	; 0x40
    43de:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    43e0:	9311      	str	r3, [sp, #68]	; 0x44
    43e2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    43e4:	9312      	str	r3, [sp, #72]	; 0x48
    43e6:	9b40      	ldr	r3, [sp, #256]	; 0x100
    43e8:	9313      	str	r3, [sp, #76]	; 0x4c
    43ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
    43ec:	9314      	str	r3, [sp, #80]	; 0x50
    43ee:	9b42      	ldr	r3, [sp, #264]	; 0x108
    43f0:	9315      	str	r3, [sp, #84]	; 0x54
    43f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
    43f4:	9316      	str	r3, [sp, #88]	; 0x58
    43f6:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    43f8:	9317      	str	r3, [sp, #92]	; 0x5c
    43fa:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    43fc:	9839      	ldr	r0, [sp, #228]	; 0xe4
    43fe:	9505      	str	r5, [sp, #20]
    4400:	ad4c      	add	r5, sp, #304	; 0x130
    4402:	46aa      	mov	sl, r5
    4404:	f640 65f1 	movw	r5, #3825	; 0xef1
    4408:	f2c0 0500 	movt	r5, #0
    440c:	9504      	str	r5, [sp, #16]
    440e:	ad2f      	add	r5, sp, #188	; 0xbc
    4410:	9503      	str	r5, [sp, #12]
    4412:	9d19      	ldr	r5, [sp, #100]	; 0x64
    4414:	469c      	mov	ip, r3
    4416:	3504      	adds	r5, #4
    4418:	46a8      	mov	r8, r5
    441a:	9408      	str	r4, [sp, #32]
    441c:	993a      	ldr	r1, [sp, #232]	; 0xe8
    441e:	3c06      	subs	r4, #6
    4420:	9a3b      	ldr	r2, [sp, #236]	; 0xec
    4422:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    4424:	9406      	str	r4, [sp, #24]
    4426:	ac28      	add	r4, sp, #160	; 0xa0
        mod_sqrt_secp224r1_rss(d1, e1, f1, d0, e0, f0, pow2i); /* RSS (d1,e1,f1,d0,e0,f0,2^i) */
    4428:	466d      	mov	r5, sp
    442a:	2618      	movs	r6, #24
    442c:	5fad      	ldrsh	r5, [r5, r6]
        dest[i] = src[i];
    442e:	9e17      	ldr	r6, [sp, #92]	; 0x5c
    4430:	9327      	str	r3, [sp, #156]	; 0x9c
    4432:	9621      	str	r6, [sp, #132]	; 0x84
    4434:	4666      	mov	r6, ip
    4436:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4438:	9622      	str	r6, [sp, #136]	; 0x88
    443a:	9328      	str	r3, [sp, #160]	; 0xa0
    443c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    443e:	9723      	str	r7, [sp, #140]	; 0x8c
    4440:	9329      	str	r3, [sp, #164]	; 0xa4
    4442:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4444:	9024      	str	r0, [sp, #144]	; 0x90
    4446:	932a      	str	r3, [sp, #168]	; 0xa8
    4448:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    444a:	9125      	str	r1, [sp, #148]	; 0x94
    444c:	932b      	str	r3, [sp, #172]	; 0xac
    444e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4450:	9226      	str	r2, [sp, #152]	; 0x98
    4452:	932c      	str	r3, [sp, #176]	; 0xb0
    4454:	9b15      	ldr	r3, [sp, #84]	; 0x54
    for (i = 1; i <= j; i++) {
    4456:	2701      	movs	r7, #1
    4458:	932d      	str	r3, [sp, #180]	; 0xb4
    445a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    445c:	1e2e      	subs	r6, r5, #0
    445e:	932e      	str	r3, [sp, #184]	; 0xb8
    4460:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4462:	932f      	str	r3, [sp, #188]	; 0xbc
    4464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4466:	9330      	str	r3, [sp, #192]	; 0xc0
    4468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    446a:	9331      	str	r3, [sp, #196]	; 0xc4
    446c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    446e:	9332      	str	r3, [sp, #200]	; 0xc8
    4470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4472:	9333      	str	r3, [sp, #204]	; 0xcc
    4474:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4476:	9334      	str	r3, [sp, #208]	; 0xd0
    4478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    447a:	9335      	str	r3, [sp, #212]	; 0xd4
    447c:	dd0a      	ble.n	4494 <mod_sqrt_secp224r1+0x1f4>
        mod_sqrt_secp224r1_rs(d1, e1, f1, d1, e1, f1); /* RS (d1,e1,f1,d1,e1,f1) */
    447e:	9a03      	ldr	r2, [sp, #12]
    4480:	ab21      	add	r3, sp, #132	; 0x84
    4482:	3701      	adds	r7, #1
    4484:	9201      	str	r2, [sp, #4]
    4486:	9400      	str	r4, [sp, #0]
    4488:	0021      	movs	r1, r4
    448a:	0018      	movs	r0, r3
    448c:	b23f      	sxth	r7, r7
    448e:	47d8      	blx	fp
    for (i = 1; i <= j; i++) {
    4490:	42be      	cmp	r6, r7
    4492:	daf4      	bge.n	447e <mod_sqrt_secp224r1+0x1de>
    uECC_vli_mult(product, left, right, curve->num_words);
    4494:	aa3d      	add	r2, sp, #244	; 0xf4
    4496:	2307      	movs	r3, #7
    4498:	0021      	movs	r1, r4
    449a:	a85c      	add	r0, sp, #368	; 0x170
    449c:	9f05      	ldr	r7, [sp, #20]
    449e:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    44a0:	a95c      	add	r1, sp, #368	; 0x170
    44a2:	4650      	mov	r0, sl
    44a4:	9d04      	ldr	r5, [sp, #16]
    44a6:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    44a8:	9a07      	ldr	r2, [sp, #28]
    44aa:	2307      	movs	r3, #7
    44ac:	4651      	mov	r1, sl
    44ae:	a85c      	add	r0, sp, #368	; 0x170
    44b0:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    44b2:	a95c      	add	r1, sp, #368	; 0x170
    44b4:	4650      	mov	r0, sl
    44b6:	47a8      	blx	r5
    44b8:	4656      	mov	r6, sl
    44ba:	4653      	mov	r3, sl
    44bc:	4642      	mov	r2, r8
    44be:	4649      	mov	r1, r9
    44c0:	2000      	movs	r0, #0
    44c2:	a706      	add	r7, pc, #24	; (adr r7, 44dc <mod_sqrt_secp224r1+0x23c>)
    44c4:	46c0      	nop			; (mov r8, r8)
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	46c0      	nop			; (mov r8, r8)
    44ca:	46c0      	nop			; (mov r8, r8)
    44cc:	46c0      	nop			; (mov r8, r8)
    44ce:	46c0      	nop			; (mov r8, r8)
    44d0:	19c9      	adds	r1, r1, r7
    44d2:	ca80      	ldmia	r2!, {r7}
    44d4:	ce20      	ldmia	r6!, {r5}
    44d6:	1b7f      	subs	r7, r7, r5
    44d8:	c380      	stmia	r3!, {r7}
    44da:	4708      	bx	r1
    44dc:	ca80      	ldmia	r2!, {r7}
    44de:	ce20      	ldmia	r6!, {r5}
    44e0:	41af      	sbcs	r7, r5
    44e2:	c380      	stmia	r3!, {r7}
    44e4:	ca80      	ldmia	r2!, {r7}
    44e6:	ce20      	ldmia	r6!, {r5}
    44e8:	41af      	sbcs	r7, r5
    44ea:	c380      	stmia	r3!, {r7}
    44ec:	ca80      	ldmia	r2!, {r7}
    44ee:	ce20      	ldmia	r6!, {r5}
    44f0:	41af      	sbcs	r7, r5
    44f2:	c380      	stmia	r3!, {r7}
    44f4:	ca80      	ldmia	r2!, {r7}
    44f6:	ce20      	ldmia	r6!, {r5}
    44f8:	41af      	sbcs	r7, r5
    44fa:	c380      	stmia	r3!, {r7}
    44fc:	ca80      	ldmia	r2!, {r7}
    44fe:	ce20      	ldmia	r6!, {r5}
    4500:	41af      	sbcs	r7, r5
    4502:	c380      	stmia	r3!, {r7}
    4504:	ca80      	ldmia	r2!, {r7}
    4506:	ce20      	ldmia	r6!, {r5}
    4508:	41af      	sbcs	r7, r5
    450a:	c380      	stmia	r3!, {r7}
    450c:	ca80      	ldmia	r2!, {r7}
    450e:	ce20      	ldmia	r6!, {r5}
    4510:	41af      	sbcs	r7, r5
    4512:	c380      	stmia	r3!, {r7}
    4514:	4140      	adcs	r0, r0
    if (l_borrow) {
    4516:	2800      	cmp	r0, #0
    4518:	d12d      	bne.n	4576 <mod_sqrt_secp224r1+0x2d6>
    __asm__ volatile (
    451a:	4653      	mov	r3, sl
    451c:	4642      	mov	r2, r8
    451e:	4649      	mov	r1, r9
    4520:	4650      	mov	r0, sl
    4522:	2600      	movs	r6, #0
    4524:	a705      	add	r7, pc, #20	; (adr r7, 453c <mod_sqrt_secp224r1+0x29c>)
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	46c0      	nop			; (mov r8, r8)
    452a:	46c0      	nop			; (mov r8, r8)
    452c:	46c0      	nop			; (mov r8, r8)
    452e:	46c0      	nop			; (mov r8, r8)
    4530:	19c9      	adds	r1, r1, r7
    4532:	c880      	ldmia	r0!, {r7}
    4534:	ca20      	ldmia	r2!, {r5}
    4536:	197f      	adds	r7, r7, r5
    4538:	c380      	stmia	r3!, {r7}
    453a:	4708      	bx	r1
    453c:	c880      	ldmia	r0!, {r7}
    453e:	ca20      	ldmia	r2!, {r5}
    4540:	416f      	adcs	r7, r5
    4542:	c380      	stmia	r3!, {r7}
    4544:	c880      	ldmia	r0!, {r7}
    4546:	ca20      	ldmia	r2!, {r5}
    4548:	416f      	adcs	r7, r5
    454a:	c380      	stmia	r3!, {r7}
    454c:	c880      	ldmia	r0!, {r7}
    454e:	ca20      	ldmia	r2!, {r5}
    4550:	416f      	adcs	r7, r5
    4552:	c380      	stmia	r3!, {r7}
    4554:	c880      	ldmia	r0!, {r7}
    4556:	ca20      	ldmia	r2!, {r5}
    4558:	416f      	adcs	r7, r5
    455a:	c380      	stmia	r3!, {r7}
    455c:	c880      	ldmia	r0!, {r7}
    455e:	ca20      	ldmia	r2!, {r5}
    4560:	416f      	adcs	r7, r5
    4562:	c380      	stmia	r3!, {r7}
    4564:	c880      	ldmia	r0!, {r7}
    4566:	ca20      	ldmia	r2!, {r5}
    4568:	416f      	adcs	r7, r5
    456a:	c380      	stmia	r3!, {r7}
    456c:	c880      	ldmia	r0!, {r7}
    456e:	ca20      	ldmia	r2!, {r5}
    4570:	416f      	adcs	r7, r5
    4572:	c380      	stmia	r3!, {r7}
    4574:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    4576:	aa36      	add	r2, sp, #216	; 0xd8
    4578:	a921      	add	r1, sp, #132	; 0x84
    457a:	a85c      	add	r0, sp, #368	; 0x170
    457c:	9e05      	ldr	r6, [sp, #20]
    457e:	2307      	movs	r3, #7
    4580:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    4582:	a95c      	add	r1, sp, #368	; 0x170
    4584:	9b04      	ldr	r3, [sp, #16]
    4586:	a854      	add	r0, sp, #336	; 0x150
    4588:	4798      	blx	r3
    458a:	ab54      	add	r3, sp, #336	; 0x150
    458c:	4652      	mov	r2, sl
    458e:	4649      	mov	r1, r9
    4590:	001e      	movs	r6, r3
    4592:	2000      	movs	r0, #0
    4594:	a705      	add	r7, pc, #20	; (adr r7, 45ac <mod_sqrt_secp224r1+0x30c>)
    4596:	46c0      	nop			; (mov r8, r8)
    4598:	46c0      	nop			; (mov r8, r8)
    459a:	46c0      	nop			; (mov r8, r8)
    459c:	46c0      	nop			; (mov r8, r8)
    459e:	46c0      	nop			; (mov r8, r8)
    45a0:	19c9      	adds	r1, r1, r7
    45a2:	ce80      	ldmia	r6!, {r7}
    45a4:	ca20      	ldmia	r2!, {r5}
    45a6:	197f      	adds	r7, r7, r5
    45a8:	c380      	stmia	r3!, {r7}
    45aa:	4708      	bx	r1
    45ac:	ce80      	ldmia	r6!, {r7}
    45ae:	ca20      	ldmia	r2!, {r5}
    45b0:	416f      	adcs	r7, r5
    45b2:	c380      	stmia	r3!, {r7}
    45b4:	ce80      	ldmia	r6!, {r7}
    45b6:	ca20      	ldmia	r2!, {r5}
    45b8:	416f      	adcs	r7, r5
    45ba:	c380      	stmia	r3!, {r7}
    45bc:	ce80      	ldmia	r6!, {r7}
    45be:	ca20      	ldmia	r2!, {r5}
    45c0:	416f      	adcs	r7, r5
    45c2:	c380      	stmia	r3!, {r7}
    45c4:	ce80      	ldmia	r6!, {r7}
    45c6:	ca20      	ldmia	r2!, {r5}
    45c8:	416f      	adcs	r7, r5
    45ca:	c380      	stmia	r3!, {r7}
    45cc:	ce80      	ldmia	r6!, {r7}
    45ce:	ca20      	ldmia	r2!, {r5}
    45d0:	416f      	adcs	r7, r5
    45d2:	c380      	stmia	r3!, {r7}
    45d4:	ce80      	ldmia	r6!, {r7}
    45d6:	ca20      	ldmia	r2!, {r5}
    45d8:	416f      	adcs	r7, r5
    45da:	c380      	stmia	r3!, {r7}
    45dc:	ce80      	ldmia	r6!, {r7}
    45de:	ca20      	ldmia	r2!, {r5}
    45e0:	416f      	adcs	r7, r5
    45e2:	c380      	stmia	r3!, {r7}
    45e4:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    45e6:	b990      	cbnz	r0, 460e <mod_sqrt_secp224r1+0x36e>
        if (left[i] > right[i]) {
    45e8:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    45ea:	3301      	adds	r3, #1
    45ec:	d13b      	bne.n	4666 <mod_sqrt_secp224r1+0x3c6>
    45ee:	9b59      	ldr	r3, [sp, #356]	; 0x164
    45f0:	3301      	adds	r3, #1
    45f2:	d138      	bne.n	4666 <mod_sqrt_secp224r1+0x3c6>
    45f4:	9b58      	ldr	r3, [sp, #352]	; 0x160
    45f6:	3301      	adds	r3, #1
    45f8:	d135      	bne.n	4666 <mod_sqrt_secp224r1+0x3c6>
    45fa:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    45fc:	3301      	adds	r3, #1
    45fe:	d132      	bne.n	4666 <mod_sqrt_secp224r1+0x3c6>
        } else if (left[i] < right[i]) {
    4600:	9b56      	ldr	r3, [sp, #344]	; 0x158
    4602:	b923      	cbnz	r3, 460e <mod_sqrt_secp224r1+0x36e>
    4604:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4606:	b913      	cbnz	r3, 460e <mod_sqrt_secp224r1+0x36e>
        if (left[i] > right[i]) {
    4608:	9b54      	ldr	r3, [sp, #336]	; 0x150
    460a:	2b00      	cmp	r3, #0
    460c:	d02b      	beq.n	4666 <mod_sqrt_secp224r1+0x3c6>
    __asm__ volatile (
    460e:	ab54      	add	r3, sp, #336	; 0x150
    4610:	4642      	mov	r2, r8
    4612:	4649      	mov	r1, r9
    4614:	0018      	movs	r0, r3
    4616:	2600      	movs	r6, #0
    4618:	a704      	add	r7, pc, #16	; (adr r7, 462c <mod_sqrt_secp224r1+0x38c>)
    461a:	46c0      	nop			; (mov r8, r8)
    461c:	46c0      	nop			; (mov r8, r8)
    461e:	46c0      	nop			; (mov r8, r8)
    4620:	19c9      	adds	r1, r1, r7
    4622:	c880      	ldmia	r0!, {r7}
    4624:	ca20      	ldmia	r2!, {r5}
    4626:	1b7f      	subs	r7, r7, r5
    4628:	c380      	stmia	r3!, {r7}
    462a:	4708      	bx	r1
    462c:	c880      	ldmia	r0!, {r7}
    462e:	ca20      	ldmia	r2!, {r5}
    4630:	41af      	sbcs	r7, r5
    4632:	c380      	stmia	r3!, {r7}
    4634:	c880      	ldmia	r0!, {r7}
    4636:	ca20      	ldmia	r2!, {r5}
    4638:	41af      	sbcs	r7, r5
    463a:	c380      	stmia	r3!, {r7}
    463c:	c880      	ldmia	r0!, {r7}
    463e:	ca20      	ldmia	r2!, {r5}
    4640:	41af      	sbcs	r7, r5
    4642:	c380      	stmia	r3!, {r7}
    4644:	c880      	ldmia	r0!, {r7}
    4646:	ca20      	ldmia	r2!, {r5}
    4648:	41af      	sbcs	r7, r5
    464a:	c380      	stmia	r3!, {r7}
    464c:	c880      	ldmia	r0!, {r7}
    464e:	ca20      	ldmia	r2!, {r5}
    4650:	41af      	sbcs	r7, r5
    4652:	c380      	stmia	r3!, {r7}
    4654:	c880      	ldmia	r0!, {r7}
    4656:	ca20      	ldmia	r2!, {r5}
    4658:	41af      	sbcs	r7, r5
    465a:	c380      	stmia	r3!, {r7}
    465c:	c880      	ldmia	r0!, {r7}
    465e:	ca20      	ldmia	r2!, {r5}
    4660:	41af      	sbcs	r7, r5
    4662:	c380      	stmia	r3!, {r7}
    4664:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    4666:	aa3d      	add	r2, sp, #244	; 0xf4
    4668:	2307      	movs	r3, #7
    466a:	a921      	add	r1, sp, #132	; 0x84
    466c:	a85c      	add	r0, sp, #368	; 0x170
    466e:	9f05      	ldr	r7, [sp, #20]
    4670:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    4672:	a95c      	add	r1, sp, #368	; 0x170
    4674:	4650      	mov	r0, sl
    4676:	9d04      	ldr	r5, [sp, #16]
    4678:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    467a:	0022      	movs	r2, r4
    467c:	2307      	movs	r3, #7
    467e:	a936      	add	r1, sp, #216	; 0xd8
    4680:	a85c      	add	r0, sp, #368	; 0x170
    4682:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    4684:	a95c      	add	r1, sp, #368	; 0x170
    4686:	0020      	movs	r0, r4
    4688:	47a8      	blx	r5
    __asm__ volatile (
    468a:	0026      	movs	r6, r4
    468c:	0023      	movs	r3, r4
    468e:	4652      	mov	r2, sl
    4690:	4649      	mov	r1, r9
    4692:	2000      	movs	r0, #0
    4694:	a705      	add	r7, pc, #20	; (adr r7, 46ac <mod_sqrt_secp224r1+0x40c>)
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	46c0      	nop			; (mov r8, r8)
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	46c0      	nop			; (mov r8, r8)
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	19c9      	adds	r1, r1, r7
    46a2:	ce80      	ldmia	r6!, {r7}
    46a4:	ca20      	ldmia	r2!, {r5}
    46a6:	197f      	adds	r7, r7, r5
    46a8:	c380      	stmia	r3!, {r7}
    46aa:	4708      	bx	r1
    46ac:	ce80      	ldmia	r6!, {r7}
    46ae:	ca20      	ldmia	r2!, {r5}
    46b0:	416f      	adcs	r7, r5
    46b2:	c380      	stmia	r3!, {r7}
    46b4:	ce80      	ldmia	r6!, {r7}
    46b6:	ca20      	ldmia	r2!, {r5}
    46b8:	416f      	adcs	r7, r5
    46ba:	c380      	stmia	r3!, {r7}
    46bc:	ce80      	ldmia	r6!, {r7}
    46be:	ca20      	ldmia	r2!, {r5}
    46c0:	416f      	adcs	r7, r5
    46c2:	c380      	stmia	r3!, {r7}
    46c4:	ce80      	ldmia	r6!, {r7}
    46c6:	ca20      	ldmia	r2!, {r5}
    46c8:	416f      	adcs	r7, r5
    46ca:	c380      	stmia	r3!, {r7}
    46cc:	ce80      	ldmia	r6!, {r7}
    46ce:	ca20      	ldmia	r2!, {r5}
    46d0:	416f      	adcs	r7, r5
    46d2:	c380      	stmia	r3!, {r7}
    46d4:	ce80      	ldmia	r6!, {r7}
    46d6:	ca20      	ldmia	r2!, {r5}
    46d8:	416f      	adcs	r7, r5
    46da:	c380      	stmia	r3!, {r7}
    46dc:	ce80      	ldmia	r6!, {r7}
    46de:	ca20      	ldmia	r2!, {r5}
    46e0:	416f      	adcs	r7, r5
    46e2:	c380      	stmia	r3!, {r7}
    46e4:	4140      	adcs	r0, r0
    if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
    46e6:	b990      	cbnz	r0, 470e <mod_sqrt_secp224r1+0x46e>
        if (left[i] > right[i]) {
    46e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    46ea:	3301      	adds	r3, #1
    46ec:	d13b      	bne.n	4766 <mod_sqrt_secp224r1+0x4c6>
    46ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    46f0:	3301      	adds	r3, #1
    46f2:	d138      	bne.n	4766 <mod_sqrt_secp224r1+0x4c6>
    46f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    46f6:	3301      	adds	r3, #1
    46f8:	d135      	bne.n	4766 <mod_sqrt_secp224r1+0x4c6>
    46fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    46fc:	3301      	adds	r3, #1
    46fe:	d132      	bne.n	4766 <mod_sqrt_secp224r1+0x4c6>
        } else if (left[i] < right[i]) {
    4700:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    4702:	b923      	cbnz	r3, 470e <mod_sqrt_secp224r1+0x46e>
    4704:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    4706:	b913      	cbnz	r3, 470e <mod_sqrt_secp224r1+0x46e>
        if (left[i] > right[i]) {
    4708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    470a:	2b00      	cmp	r3, #0
    470c:	d02b      	beq.n	4766 <mod_sqrt_secp224r1+0x4c6>
    __asm__ volatile (
    470e:	0023      	movs	r3, r4
    4710:	4642      	mov	r2, r8
    4712:	4649      	mov	r1, r9
    4714:	0020      	movs	r0, r4
    4716:	2600      	movs	r6, #0
    4718:	a704      	add	r7, pc, #16	; (adr r7, 472c <mod_sqrt_secp224r1+0x48c>)
    471a:	46c0      	nop			; (mov r8, r8)
    471c:	46c0      	nop			; (mov r8, r8)
    471e:	46c0      	nop			; (mov r8, r8)
    4720:	19c9      	adds	r1, r1, r7
    4722:	c880      	ldmia	r0!, {r7}
    4724:	ca20      	ldmia	r2!, {r5}
    4726:	1b7f      	subs	r7, r7, r5
    4728:	c380      	stmia	r3!, {r7}
    472a:	4708      	bx	r1
    472c:	c880      	ldmia	r0!, {r7}
    472e:	ca20      	ldmia	r2!, {r5}
    4730:	41af      	sbcs	r7, r5
    4732:	c380      	stmia	r3!, {r7}
    4734:	c880      	ldmia	r0!, {r7}
    4736:	ca20      	ldmia	r2!, {r5}
    4738:	41af      	sbcs	r7, r5
    473a:	c380      	stmia	r3!, {r7}
    473c:	c880      	ldmia	r0!, {r7}
    473e:	ca20      	ldmia	r2!, {r5}
    4740:	41af      	sbcs	r7, r5
    4742:	c380      	stmia	r3!, {r7}
    4744:	c880      	ldmia	r0!, {r7}
    4746:	ca20      	ldmia	r2!, {r5}
    4748:	41af      	sbcs	r7, r5
    474a:	c380      	stmia	r3!, {r7}
    474c:	c880      	ldmia	r0!, {r7}
    474e:	ca20      	ldmia	r2!, {r5}
    4750:	41af      	sbcs	r7, r5
    4752:	c380      	stmia	r3!, {r7}
    4754:	c880      	ldmia	r0!, {r7}
    4756:	ca20      	ldmia	r2!, {r5}
    4758:	41af      	sbcs	r7, r5
    475a:	c380      	stmia	r3!, {r7}
    475c:	c880      	ldmia	r0!, {r7}
    475e:	ca20      	ldmia	r2!, {r5}
    4760:	41af      	sbcs	r7, r5
    4762:	c380      	stmia	r3!, {r7}
    4764:	4176      	adcs	r6, r6
    uECC_vli_mult(product, left, right, curve->num_words);
    4766:	0022      	movs	r2, r4
    4768:	2307      	movs	r3, #7
    476a:	0021      	movs	r1, r4
    476c:	a85c      	add	r0, sp, #368	; 0x170
    476e:	9f05      	ldr	r7, [sp, #20]
    4770:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    4772:	9e03      	ldr	r6, [sp, #12]
    4774:	a95c      	add	r1, sp, #368	; 0x170
    4776:	0030      	movs	r0, r6
    4778:	9d04      	ldr	r5, [sp, #16]
    477a:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    477c:	9a07      	ldr	r2, [sp, #28]
    477e:	2307      	movs	r3, #7
    4780:	0031      	movs	r1, r6
    4782:	a85c      	add	r0, sp, #368	; 0x170
    4784:	9603      	str	r6, [sp, #12]
    4786:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    4788:	9e03      	ldr	r6, [sp, #12]
    478a:	a95c      	add	r1, sp, #368	; 0x170
    478c:	0030      	movs	r0, r6
    478e:	47a8      	blx	r5
    4790:	0033      	movs	r3, r6
    4792:	4642      	mov	r2, r8
    4794:	4649      	mov	r1, r9
    4796:	2000      	movs	r0, #0
    4798:	a704      	add	r7, pc, #16	; (adr r7, 47ac <mod_sqrt_secp224r1+0x50c>)
    479a:	46c0      	nop			; (mov r8, r8)
    479c:	46c0      	nop			; (mov r8, r8)
    479e:	46c0      	nop			; (mov r8, r8)
    47a0:	19c9      	adds	r1, r1, r7
    47a2:	ca80      	ldmia	r2!, {r7}
    47a4:	ce20      	ldmia	r6!, {r5}
    47a6:	1b7f      	subs	r7, r7, r5
    47a8:	c380      	stmia	r3!, {r7}
    47aa:	4708      	bx	r1
    47ac:	ca80      	ldmia	r2!, {r7}
    47ae:	ce20      	ldmia	r6!, {r5}
    47b0:	41af      	sbcs	r7, r5
    47b2:	c380      	stmia	r3!, {r7}
    47b4:	ca80      	ldmia	r2!, {r7}
    47b6:	ce20      	ldmia	r6!, {r5}
    47b8:	41af      	sbcs	r7, r5
    47ba:	c380      	stmia	r3!, {r7}
    47bc:	ca80      	ldmia	r2!, {r7}
    47be:	ce20      	ldmia	r6!, {r5}
    47c0:	41af      	sbcs	r7, r5
    47c2:	c380      	stmia	r3!, {r7}
    47c4:	ca80      	ldmia	r2!, {r7}
    47c6:	ce20      	ldmia	r6!, {r5}
    47c8:	41af      	sbcs	r7, r5
    47ca:	c380      	stmia	r3!, {r7}
    47cc:	ca80      	ldmia	r2!, {r7}
    47ce:	ce20      	ldmia	r6!, {r5}
    47d0:	41af      	sbcs	r7, r5
    47d2:	c380      	stmia	r3!, {r7}
    47d4:	ca80      	ldmia	r2!, {r7}
    47d6:	ce20      	ldmia	r6!, {r5}
    47d8:	41af      	sbcs	r7, r5
    47da:	c380      	stmia	r3!, {r7}
    47dc:	ca80      	ldmia	r2!, {r7}
    47de:	ce20      	ldmia	r6!, {r5}
    47e0:	41af      	sbcs	r7, r5
    47e2:	c380      	stmia	r3!, {r7}
    47e4:	4140      	adcs	r0, r0
    if (l_borrow) {
    47e6:	2800      	cmp	r0, #0
    47e8:	d12d      	bne.n	4846 <mod_sqrt_secp224r1+0x5a6>
    __asm__ volatile (
    47ea:	9b03      	ldr	r3, [sp, #12]
    47ec:	4642      	mov	r2, r8
    47ee:	4649      	mov	r1, r9
    47f0:	0018      	movs	r0, r3
    47f2:	2600      	movs	r6, #0
    47f4:	a705      	add	r7, pc, #20	; (adr r7, 480c <mod_sqrt_secp224r1+0x56c>)
    47f6:	46c0      	nop			; (mov r8, r8)
    47f8:	46c0      	nop			; (mov r8, r8)
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	46c0      	nop			; (mov r8, r8)
    47fe:	46c0      	nop			; (mov r8, r8)
    4800:	19c9      	adds	r1, r1, r7
    4802:	c880      	ldmia	r0!, {r7}
    4804:	ca20      	ldmia	r2!, {r5}
    4806:	197f      	adds	r7, r7, r5
    4808:	c380      	stmia	r3!, {r7}
    480a:	4708      	bx	r1
    480c:	c880      	ldmia	r0!, {r7}
    480e:	ca20      	ldmia	r2!, {r5}
    4810:	416f      	adcs	r7, r5
    4812:	c380      	stmia	r3!, {r7}
    4814:	c880      	ldmia	r0!, {r7}
    4816:	ca20      	ldmia	r2!, {r5}
    4818:	416f      	adcs	r7, r5
    481a:	c380      	stmia	r3!, {r7}
    481c:	c880      	ldmia	r0!, {r7}
    481e:	ca20      	ldmia	r2!, {r5}
    4820:	416f      	adcs	r7, r5
    4822:	c380      	stmia	r3!, {r7}
    4824:	c880      	ldmia	r0!, {r7}
    4826:	ca20      	ldmia	r2!, {r5}
    4828:	416f      	adcs	r7, r5
    482a:	c380      	stmia	r3!, {r7}
    482c:	c880      	ldmia	r0!, {r7}
    482e:	ca20      	ldmia	r2!, {r5}
    4830:	416f      	adcs	r7, r5
    4832:	c380      	stmia	r3!, {r7}
    4834:	c880      	ldmia	r0!, {r7}
    4836:	ca20      	ldmia	r2!, {r5}
    4838:	416f      	adcs	r7, r5
    483a:	c380      	stmia	r3!, {r7}
    483c:	c880      	ldmia	r0!, {r7}
    483e:	ca20      	ldmia	r2!, {r5}
    4840:	416f      	adcs	r7, r5
    4842:	c380      	stmia	r3!, {r7}
    4844:	4176      	adcs	r6, r6
        dest[i] = src[i];
    4846:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4848:	9f56      	ldr	r7, [sp, #344]	; 0x158
    484a:	001e      	movs	r6, r3
    484c:	9317      	str	r3, [sp, #92]	; 0x5c
    484e:	9321      	str	r3, [sp, #132]	; 0x84
    4850:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4852:	9636      	str	r6, [sp, #216]	; 0xd8
    4854:	469c      	mov	ip, r3
    4856:	4666      	mov	r6, ip
    4858:	9637      	str	r6, [sp, #220]	; 0xdc
    485a:	9e28      	ldr	r6, [sp, #160]	; 0xa0
    485c:	9857      	ldr	r0, [sp, #348]	; 0x15c
    485e:	9610      	str	r6, [sp, #64]	; 0x40
    4860:	963d      	str	r6, [sp, #244]	; 0xf4
    4862:	9e29      	ldr	r6, [sp, #164]	; 0xa4
    4864:	9958      	ldr	r1, [sp, #352]	; 0x160
    4866:	9611      	str	r6, [sp, #68]	; 0x44
    4868:	963e      	str	r6, [sp, #248]	; 0xf8
    486a:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
    486c:	9a59      	ldr	r2, [sp, #356]	; 0x164
    486e:	9322      	str	r3, [sp, #136]	; 0x88
    4870:	9612      	str	r6, [sp, #72]	; 0x48
    4872:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4874:	963f      	str	r6, [sp, #252]	; 0xfc
    4876:	9e2b      	ldr	r6, [sp, #172]	; 0xac
    4878:	9723      	str	r7, [sp, #140]	; 0x8c
    487a:	9024      	str	r0, [sp, #144]	; 0x90
    487c:	9125      	str	r1, [sp, #148]	; 0x94
    487e:	9226      	str	r2, [sp, #152]	; 0x98
    4880:	9327      	str	r3, [sp, #156]	; 0x9c
    4882:	9738      	str	r7, [sp, #224]	; 0xe0
    4884:	9039      	str	r0, [sp, #228]	; 0xe4
    4886:	913a      	str	r1, [sp, #232]	; 0xe8
    4888:	923b      	str	r2, [sp, #236]	; 0xec
    488a:	933c      	str	r3, [sp, #240]	; 0xf0
    488c:	9613      	str	r6, [sp, #76]	; 0x4c
    488e:	9640      	str	r6, [sp, #256]	; 0x100
    4890:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
    4892:	9614      	str	r6, [sp, #80]	; 0x50
    4894:	9641      	str	r6, [sp, #260]	; 0x104
    4896:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
    4898:	9615      	str	r6, [sp, #84]	; 0x54
    489a:	9642      	str	r6, [sp, #264]	; 0x108
    489c:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    489e:	9616      	str	r6, [sp, #88]	; 0x58
    48a0:	9643      	str	r6, [sp, #268]	; 0x10c
    48a2:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    48a4:	9609      	str	r6, [sp, #36]	; 0x24
    48a6:	9644      	str	r6, [sp, #272]	; 0x110
    48a8:	9e30      	ldr	r6, [sp, #192]	; 0xc0
    48aa:	960a      	str	r6, [sp, #40]	; 0x28
    48ac:	9645      	str	r6, [sp, #276]	; 0x114
    48ae:	9e31      	ldr	r6, [sp, #196]	; 0xc4
    48b0:	960b      	str	r6, [sp, #44]	; 0x2c
    48b2:	9646      	str	r6, [sp, #280]	; 0x118
    48b4:	9e32      	ldr	r6, [sp, #200]	; 0xc8
    48b6:	960c      	str	r6, [sp, #48]	; 0x30
    48b8:	9647      	str	r6, [sp, #284]	; 0x11c
    48ba:	9e33      	ldr	r6, [sp, #204]	; 0xcc
    48bc:	960d      	str	r6, [sp, #52]	; 0x34
    48be:	9648      	str	r6, [sp, #288]	; 0x120
    48c0:	9e34      	ldr	r6, [sp, #208]	; 0xd0
    48c2:	960e      	str	r6, [sp, #56]	; 0x38
    48c4:	9649      	str	r6, [sp, #292]	; 0x124
    48c6:	9e35      	ldr	r6, [sp, #212]	; 0xd4
    48c8:	960f      	str	r6, [sp, #60]	; 0x3c
    48ca:	964a      	str	r6, [sp, #296]	; 0x128
        pow2i *= 2;
    48cc:	9e06      	ldr	r6, [sp, #24]
    48ce:	0076      	lsls	r6, r6, #1
    48d0:	b276      	sxtb	r6, r6
    48d2:	9606      	str	r6, [sp, #24]
    48d4:	9e08      	ldr	r6, [sp, #32]
    48d6:	3e01      	subs	r6, #1
    48d8:	b2f6      	uxtb	r6, r6
    48da:	9608      	str	r6, [sp, #32]
    for (i = 0; i <= 6; i++) {
    48dc:	2e00      	cmp	r6, #0
    48de:	d000      	beq.n	48e2 <mod_sqrt_secp224r1+0x642>
    48e0:	e5a2      	b.n	4428 <mod_sqrt_secp224r1+0x188>
    mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0);     /* RS (d1, e1, f1, d0, e0, f0) */
    48e2:	9b03      	ldr	r3, [sp, #12]
    48e4:	aa36      	add	r2, sp, #216	; 0xd8
    48e6:	9301      	str	r3, [sp, #4]
    48e8:	a91a      	add	r1, sp, #104	; 0x68
    48ea:	ab21      	add	r3, sp, #132	; 0x84
    48ec:	a83d      	add	r0, sp, #244	; 0xf4
    48ee:	9400      	str	r4, [sp, #0]
    48f0:	47d8      	blx	fp
    48f2:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    48f4:	9841      	ldr	r0, [sp, #260]	; 0x104
    48f6:	4699      	mov	r9, r3
    48f8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    48fa:	9942      	ldr	r1, [sp, #264]	; 0x108
    48fc:	4698      	mov	r8, r3
    48fe:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    4900:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    4902:	469c      	mov	ip, r3
    4904:	465d      	mov	r5, fp
    4906:	9f40      	ldr	r7, [sp, #256]	; 0x100
    4908:	468b      	mov	fp, r1
    490a:	365f      	adds	r6, #95	; 0x5f
    490c:	0011      	movs	r1, r2
    490e:	4642      	mov	r2, r8
    4910:	4680      	mov	r8, r0
    4912:	4660      	mov	r0, ip
    4914:	e002      	b.n	491c <mod_sqrt_secp224r1+0x67c>
    4916:	3e01      	subs	r6, #1
    4918:	b2b6      	uxth	r6, r6
    for (i = 1; i <= 95; i++) {
    491a:	b3fe      	cbz	r6, 499c <mod_sqrt_secp224r1+0x6fc>
    491c:	464b      	mov	r3, r9
    491e:	9321      	str	r3, [sp, #132]	; 0x84
    4920:	4643      	mov	r3, r8
    4922:	9325      	str	r3, [sp, #148]	; 0x94
    4924:	465b      	mov	r3, fp
    4926:	9326      	str	r3, [sp, #152]	; 0x98
    4928:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    492a:	9222      	str	r2, [sp, #136]	; 0x88
    492c:	9328      	str	r3, [sp, #160]	; 0xa0
    492e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4930:	9023      	str	r0, [sp, #140]	; 0x8c
    4932:	9329      	str	r3, [sp, #164]	; 0xa4
    4934:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4936:	9724      	str	r7, [sp, #144]	; 0x90
    4938:	932a      	str	r3, [sp, #168]	; 0xa8
    493a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    493c:	9127      	str	r1, [sp, #156]	; 0x9c
    493e:	932b      	str	r3, [sp, #172]	; 0xac
    4940:	9b1e      	ldr	r3, [sp, #120]	; 0x78
        mod_sqrt_secp224r1_rs(d1, e1, f1, d0, e0, f0); /* RS (d1, e1, f1, d0, e0, f0) */
    4942:	aa36      	add	r2, sp, #216	; 0xd8
    4944:	932c      	str	r3, [sp, #176]	; 0xb0
    4946:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4948:	a91a      	add	r1, sp, #104	; 0x68
    494a:	932d      	str	r3, [sp, #180]	; 0xb4
    494c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    494e:	a83d      	add	r0, sp, #244	; 0xf4
    4950:	932e      	str	r3, [sp, #184]	; 0xb8
    4952:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    4954:	932f      	str	r3, [sp, #188]	; 0xbc
    4956:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    4958:	9330      	str	r3, [sp, #192]	; 0xc0
    495a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    495c:	9331      	str	r3, [sp, #196]	; 0xc4
    495e:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    4960:	9332      	str	r3, [sp, #200]	; 0xc8
    4962:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
    4964:	9333      	str	r3, [sp, #204]	; 0xcc
    4966:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    4968:	9334      	str	r3, [sp, #208]	; 0xd0
    496a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
    496c:	9400      	str	r4, [sp, #0]
    496e:	9335      	str	r3, [sp, #212]	; 0xd4
    4970:	9b03      	ldr	r3, [sp, #12]
    4972:	9301      	str	r3, [sp, #4]
    4974:	ab21      	add	r3, sp, #132	; 0x84
    4976:	47a8      	blx	r5
        bits |= vli[i];
    4978:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    497a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    497c:	983f      	ldr	r0, [sp, #252]	; 0xfc
    497e:	4699      	mov	r9, r3
    4980:	9f40      	ldr	r7, [sp, #256]	; 0x100
    4982:	4313      	orrs	r3, r2
    4984:	9941      	ldr	r1, [sp, #260]	; 0x104
    4986:	4303      	orrs	r3, r0
    4988:	433b      	orrs	r3, r7
    498a:	430b      	orrs	r3, r1
    498c:	4688      	mov	r8, r1
    498e:	9942      	ldr	r1, [sp, #264]	; 0x108
    4990:	430b      	orrs	r3, r1
    4992:	468b      	mov	fp, r1
    4994:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4996:	430b      	orrs	r3, r1
        if (uECC_vli_isZero(d1, num_words_secp224r1)) {     /* if d1 == 0 */
    4998:	2b00      	cmp	r3, #0
    499a:	d1bc      	bne.n	4916 <mod_sqrt_secp224r1+0x676>
    499c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    499e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    49a0:	4313      	orrs	r3, r2
    49a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    49a4:	4313      	orrs	r3, r2
    49a6:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    49a8:	4313      	orrs	r3, r2
    49aa:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    49ac:	4313      	orrs	r3, r2
    49ae:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    49b0:	4313      	orrs	r3, r2
    49b2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    49b4:	4313      	orrs	r3, r2
    if (uECC_vli_isZero(input, num_words)) {
    49b6:	b9bb      	cbnz	r3, 49e8 <mod_sqrt_secp224r1+0x748>
        vli[i] = 0;
    49b8:	9336      	str	r3, [sp, #216]	; 0xd8
    49ba:	9337      	str	r3, [sp, #220]	; 0xdc
    49bc:	9338      	str	r3, [sp, #224]	; 0xe0
    49be:	9339      	str	r3, [sp, #228]	; 0xe4
    49c0:	933a      	str	r3, [sp, #232]	; 0xe8
    49c2:	933b      	str	r3, [sp, #236]	; 0xec
    49c4:	933c      	str	r3, [sp, #240]	; 0xf0
    uECC_vli_mult(product, left, right, curve->num_words);
    49c6:	aa36      	add	r2, sp, #216	; 0xd8
    49c8:	a921      	add	r1, sp, #132	; 0x84
    49ca:	a85c      	add	r0, sp, #368	; 0x170
    49cc:	2307      	movs	r3, #7
    49ce:	9c05      	ldr	r4, [sp, #20]
    49d0:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    49d2:	a95c      	add	r1, sp, #368	; 0x170
    49d4:	9807      	ldr	r0, [sp, #28]
    49d6:	9b04      	ldr	r3, [sp, #16]
    49d8:	4798      	blx	r3
}
    49da:	b06d      	add	sp, #436	; 0x1b4
    49dc:	bc3c      	pop	{r2, r3, r4, r5}
    49de:	4690      	mov	r8, r2
    49e0:	4699      	mov	r9, r3
    49e2:	46a2      	mov	sl, r4
    49e4:	46ab      	mov	fp, r5
    49e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49e8:	0021      	movs	r1, r4
    49ea:	221c      	movs	r2, #28
    49ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
    49ee:	a844      	add	r0, sp, #272	; 0x110
    49f0:	4798      	blx	r3
    49f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    49f4:	4653      	mov	r3, sl
    49f6:	3204      	adds	r2, #4
    49f8:	0011      	movs	r1, r2
    49fa:	c931      	ldmia	r1!, {r0, r4, r5}
    49fc:	c331      	stmia	r3!, {r0, r4, r5}
    49fe:	c931      	ldmia	r1!, {r0, r4, r5}
    4a00:	c331      	stmia	r3!, {r0, r4, r5}
    4a02:	6808      	ldr	r0, [r1, #0]
    u[0] = 1;
    4a04:	2101      	movs	r1, #1
    4a06:	6018      	str	r0, [r3, #0]
        vli[i] = 0;
    4a08:	2300      	movs	r3, #0
    __asm__ volatile (
    4a0a:	f240 0909 	movw	r9, #9
    __asm__ volatile (
    4a0e:	4693      	mov	fp, r2
    4a10:	9355      	str	r3, [sp, #340]	; 0x154
    4a12:	9356      	str	r3, [sp, #344]	; 0x158
    4a14:	9357      	str	r3, [sp, #348]	; 0x15c
    4a16:	9358      	str	r3, [sp, #352]	; 0x160
    4a18:	9359      	str	r3, [sp, #356]	; 0x164
    4a1a:	935a      	str	r3, [sp, #360]	; 0x168
    u[0] = 1;
    4a1c:	9154      	str	r1, [sp, #336]	; 0x150
        vli[i] = 0;
    4a1e:	935c      	str	r3, [sp, #368]	; 0x170
    4a20:	935d      	str	r3, [sp, #372]	; 0x174
    4a22:	935e      	str	r3, [sp, #376]	; 0x178
    4a24:	935f      	str	r3, [sp, #380]	; 0x17c
    4a26:	9360      	str	r3, [sp, #384]	; 0x180
    4a28:	9361      	str	r3, [sp, #388]	; 0x184
    4a2a:	9362      	str	r3, [sp, #392]	; 0x188
    4a2c:	9944      	ldr	r1, [sp, #272]	; 0x110
    4a2e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
        if (left[i] > right[i]) {
    4a30:	4298      	cmp	r0, r3
    4a32:	d32a      	bcc.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a34:	d900      	bls.n	4a38 <mod_sqrt_secp224r1+0x798>
    4a36:	e1bf      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a38:	9c49      	ldr	r4, [sp, #292]	; 0x124
    4a3a:	9a51      	ldr	r2, [sp, #324]	; 0x144
    4a3c:	4294      	cmp	r4, r2
    4a3e:	d824      	bhi.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a40:	d200      	bcs.n	4a44 <mod_sqrt_secp224r1+0x7a4>
    4a42:	e1b9      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a44:	9c48      	ldr	r4, [sp, #288]	; 0x120
    4a46:	9a50      	ldr	r2, [sp, #320]	; 0x140
    4a48:	4294      	cmp	r4, r2
    4a4a:	d81e      	bhi.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a4c:	d200      	bcs.n	4a50 <mod_sqrt_secp224r1+0x7b0>
    4a4e:	e1b3      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a50:	9c47      	ldr	r4, [sp, #284]	; 0x11c
    4a52:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    4a54:	4294      	cmp	r4, r2
    4a56:	d818      	bhi.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a58:	d200      	bcs.n	4a5c <mod_sqrt_secp224r1+0x7bc>
    4a5a:	e1ad      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a5c:	9c46      	ldr	r4, [sp, #280]	; 0x118
    4a5e:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    4a60:	4294      	cmp	r4, r2
    4a62:	d812      	bhi.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a64:	d200      	bcs.n	4a68 <mod_sqrt_secp224r1+0x7c8>
    4a66:	e1a7      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a68:	9c45      	ldr	r4, [sp, #276]	; 0x114
    4a6a:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    4a6c:	4294      	cmp	r4, r2
    4a6e:	d80c      	bhi.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a70:	d200      	bcs.n	4a74 <mod_sqrt_secp224r1+0x7d4>
    4a72:	e1a1      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
        if (left[i] > right[i]) {
    4a74:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    4a76:	428a      	cmp	r2, r1
    4a78:	d307      	bcc.n	4a8a <mod_sqrt_secp224r1+0x7ea>
        } else if (left[i] < right[i]) {
    4a7a:	d900      	bls.n	4a7e <mod_sqrt_secp224r1+0x7de>
    4a7c:	e19c      	b.n	4db8 <mod_sqrt_secp224r1+0xb18>
    4a7e:	221c      	movs	r2, #28
    4a80:	a954      	add	r1, sp, #336	; 0x150
    4a82:	a836      	add	r0, sp, #216	; 0xd8
    4a84:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4a86:	4798      	blx	r3
    4a88:	e79d      	b.n	49c6 <mod_sqrt_secp224r1+0x726>
            return 1;
    4a8a:	2401      	movs	r4, #1
        if (EVEN(a)) {
    4a8c:	2201      	movs	r2, #1
    4a8e:	420a      	tst	r2, r1
    4a90:	d161      	bne.n	4b56 <mod_sqrt_secp224r1+0x8b6>
        uECC_word_t temp = *vli;
    4a92:	9a49      	ldr	r2, [sp, #292]	; 0x124
        *vli = (temp >> 1) | carry;
    4a94:	085c      	lsrs	r4, r3, #1
    4a96:	0856      	lsrs	r6, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4a98:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4a9a:	4333      	orrs	r3, r6
    4a9c:	9349      	str	r3, [sp, #292]	; 0x124
        uECC_word_t temp = *vli;
    4a9e:	9b48      	ldr	r3, [sp, #288]	; 0x120
        carry = temp << (uECC_WORD_BITS - 1);
    4aa0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4aa2:	085e      	lsrs	r6, r3, #1
    4aa4:	4332      	orrs	r2, r6
    4aa6:	9248      	str	r2, [sp, #288]	; 0x120
        uECC_word_t temp = *vli;
    4aa8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        carry = temp << (uECC_WORD_BITS - 1);
    4aaa:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4aac:	0856      	lsrs	r6, r2, #1
    4aae:	4333      	orrs	r3, r6
    4ab0:	9347      	str	r3, [sp, #284]	; 0x11c
        uECC_word_t temp = *vli;
    4ab2:	9b46      	ldr	r3, [sp, #280]	; 0x118
        carry = temp << (uECC_WORD_BITS - 1);
    4ab4:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ab6:	085e      	lsrs	r6, r3, #1
    4ab8:	4332      	orrs	r2, r6
    4aba:	9246      	str	r2, [sp, #280]	; 0x118
        uECC_word_t temp = *vli;
    4abc:	9a45      	ldr	r2, [sp, #276]	; 0x114
        *vli = (temp >> 1) | carry;
    4abe:	0849      	lsrs	r1, r1, #1
    4ac0:	0856      	lsrs	r6, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4ac2:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ac4:	4311      	orrs	r1, r2
    uECC_word_t carry = 0;
    4ac6:	2200      	movs	r2, #0
        carry = temp << (uECC_WORD_BITS - 1);
    4ac8:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4aca:	4333      	orrs	r3, r6
    4acc:	9345      	str	r3, [sp, #276]	; 0x114
    if (!EVEN(uv)) {
    4ace:	9b54      	ldr	r3, [sp, #336]	; 0x150
    uECC_word_t carry = 0;
    4ad0:	9203      	str	r2, [sp, #12]
    if (!EVEN(uv)) {
    4ad2:	3201      	adds	r2, #1
        *vli = (temp >> 1) | carry;
    4ad4:	944a      	str	r4, [sp, #296]	; 0x128
    4ad6:	9144      	str	r1, [sp, #272]	; 0x110
    if (!EVEN(uv)) {
    4ad8:	421a      	tst	r2, r3
    4ada:	d000      	beq.n	4ade <mod_sqrt_secp224r1+0x83e>
    4adc:	e16f      	b.n	4dbe <mod_sqrt_secp224r1+0xb1e>
        uECC_word_t temp = *vli;
    4ade:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    4ae0:	9f59      	ldr	r7, [sp, #356]	; 0x164
    4ae2:	4694      	mov	ip, r2
        *vli = (temp >> 1) | carry;
    4ae4:	087d      	lsrs	r5, r7, #1
    4ae6:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4ae8:	4665      	mov	r5, ip
    4aea:	07ed      	lsls	r5, r5, #31
    4aec:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4aee:	4645      	mov	r5, r8
    4af0:	4666      	mov	r6, ip
    4af2:	4335      	orrs	r5, r6
    4af4:	9559      	str	r5, [sp, #356]	; 0x164
        uECC_word_t temp = *vli;
    4af6:	9d58      	ldr	r5, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4af8:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
    4afa:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4afc:	086d      	lsrs	r5, r5, #1
    4afe:	432f      	orrs	r7, r5
    4b00:	9758      	str	r7, [sp, #352]	; 0x160
        uECC_word_t temp = *vli;
    4b02:	9f57      	ldr	r7, [sp, #348]	; 0x15c
        *vli = (temp >> 1) | carry;
    4b04:	085b      	lsrs	r3, r3, #1
    4b06:	087d      	lsrs	r5, r7, #1
    4b08:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4b0a:	4665      	mov	r5, ip
    4b0c:	07ed      	lsls	r5, r5, #31
    4b0e:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b10:	4645      	mov	r5, r8
    4b12:	4666      	mov	r6, ip
    4b14:	4335      	orrs	r5, r6
    4b16:	9557      	str	r5, [sp, #348]	; 0x15c
        uECC_word_t temp = *vli;
    4b18:	9d56      	ldr	r5, [sp, #344]	; 0x158
        carry = temp << (uECC_WORD_BITS - 1);
    4b1a:	07ff      	lsls	r7, r7, #31
        uECC_word_t temp = *vli;
    4b1c:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b1e:	086d      	lsrs	r5, r5, #1
    4b20:	432f      	orrs	r7, r5
    4b22:	9756      	str	r7, [sp, #344]	; 0x158
        uECC_word_t temp = *vli;
    4b24:	9f55      	ldr	r7, [sp, #340]	; 0x154
        *vli = (temp >> 1) | carry;
    4b26:	0852      	lsrs	r2, r2, #1
    4b28:	087d      	lsrs	r5, r7, #1
    4b2a:	46a8      	mov	r8, r5
        carry = temp << (uECC_WORD_BITS - 1);
    4b2c:	4665      	mov	r5, ip
    4b2e:	07ed      	lsls	r5, r5, #31
    4b30:	46ac      	mov	ip, r5
        *vli = (temp >> 1) | carry;
    4b32:	4645      	mov	r5, r8
    4b34:	4666      	mov	r6, ip
        carry = temp << (uECC_WORD_BITS - 1);
    4b36:	07ff      	lsls	r7, r7, #31
        *vli = (temp >> 1) | carry;
    4b38:	433b      	orrs	r3, r7
    4b3a:	9354      	str	r3, [sp, #336]	; 0x150
    if (carry) {
    4b3c:	0023      	movs	r3, r4
    4b3e:	9c03      	ldr	r4, [sp, #12]
        *vli = (temp >> 1) | carry;
    4b40:	4335      	orrs	r5, r6
    4b42:	925a      	str	r2, [sp, #360]	; 0x168
    4b44:	9555      	str	r5, [sp, #340]	; 0x154
    if (carry) {
    4b46:	2c00      	cmp	r4, #0
    4b48:	d100      	bne.n	4b4c <mod_sqrt_secp224r1+0x8ac>
    4b4a:	e771      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4b4c:	2480      	movs	r4, #128	; 0x80
    4b4e:	0624      	lsls	r4, r4, #24
    4b50:	4322      	orrs	r2, r4
    4b52:	925a      	str	r2, [sp, #360]	; 0x168
    4b54:	e76c      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
        } else if (EVEN(b)) {
    4b56:	4652      	mov	r2, sl
    4b58:	2501      	movs	r5, #1
    4b5a:	6812      	ldr	r2, [r2, #0]
    4b5c:	4215      	tst	r5, r2
    4b5e:	d14f      	bne.n	4c00 <mod_sqrt_secp224r1+0x960>
        uECC_word_t temp = *vli;
    4b60:	9f51      	ldr	r7, [sp, #324]	; 0x144
        *vli = (temp >> 1) | carry;
    4b62:	0844      	lsrs	r4, r0, #1
    4b64:	087e      	lsrs	r6, r7, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4b66:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4b68:	4330      	orrs	r0, r6
        uECC_word_t temp = *vli;
    4b6a:	9e50      	ldr	r6, [sp, #320]	; 0x140
        *vli = (temp >> 1) | carry;
    4b6c:	9051      	str	r0, [sp, #324]	; 0x144
        carry = temp << (uECC_WORD_BITS - 1);
    4b6e:	07ff      	lsls	r7, r7, #31
        *vli = (temp >> 1) | carry;
    4b70:	0870      	lsrs	r0, r6, #1
    4b72:	4307      	orrs	r7, r0
        uECC_word_t temp = *vli;
    4b74:	984f      	ldr	r0, [sp, #316]	; 0x13c
        *vli = (temp >> 1) | carry;
    4b76:	9750      	str	r7, [sp, #320]	; 0x140
        carry = temp << (uECC_WORD_BITS - 1);
    4b78:	07f6      	lsls	r6, r6, #31
        *vli = (temp >> 1) | carry;
    4b7a:	0847      	lsrs	r7, r0, #1
    4b7c:	433e      	orrs	r6, r7
    4b7e:	964f      	str	r6, [sp, #316]	; 0x13c
        uECC_word_t temp = *vli;
    4b80:	9e4e      	ldr	r6, [sp, #312]	; 0x138
        carry = temp << (uECC_WORD_BITS - 1);
    4b82:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4b84:	0877      	lsrs	r7, r6, #1
    4b86:	4338      	orrs	r0, r7
    4b88:	904e      	str	r0, [sp, #312]	; 0x138
        uECC_word_t temp = *vli;
    4b8a:	984d      	ldr	r0, [sp, #308]	; 0x134
        *vli = (temp >> 1) | carry;
    4b8c:	0852      	lsrs	r2, r2, #1
    4b8e:	0847      	lsrs	r7, r0, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4b90:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4b92:	4302      	orrs	r2, r0
    if (!EVEN(uv)) {
    4b94:	2001      	movs	r0, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4b96:	07f6      	lsls	r6, r6, #31
        *vli = (temp >> 1) | carry;
    4b98:	924c      	str	r2, [sp, #304]	; 0x130
    if (!EVEN(uv)) {
    4b9a:	9a5c      	ldr	r2, [sp, #368]	; 0x170
        *vli = (temp >> 1) | carry;
    4b9c:	433e      	orrs	r6, r7
    4b9e:	9452      	str	r4, [sp, #328]	; 0x148
    4ba0:	964d      	str	r6, [sp, #308]	; 0x134
    if (!EVEN(uv)) {
    4ba2:	4694      	mov	ip, r2
    uECC_word_t carry = 0;
    4ba4:	2700      	movs	r7, #0
    if (!EVEN(uv)) {
    4ba6:	4210      	tst	r0, r2
    4ba8:	d000      	beq.n	4bac <mod_sqrt_secp224r1+0x90c>
    4baa:	e20b      	b.n	4fc4 <mod_sqrt_secp224r1+0xd24>
        uECC_word_t temp = *vli;
    4bac:	9862      	ldr	r0, [sp, #392]	; 0x188
    4bae:	9a61      	ldr	r2, [sp, #388]	; 0x184
        *vli = (temp >> 1) | carry;
    4bb0:	0846      	lsrs	r6, r0, #1
    4bb2:	0855      	lsrs	r5, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4bb4:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bb6:	4328      	orrs	r0, r5
    4bb8:	9061      	str	r0, [sp, #388]	; 0x184
        uECC_word_t temp = *vli;
    4bba:	9860      	ldr	r0, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4bbc:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4bbe:	0845      	lsrs	r5, r0, #1
    4bc0:	432a      	orrs	r2, r5
    4bc2:	9260      	str	r2, [sp, #384]	; 0x180
        uECC_word_t temp = *vli;
    4bc4:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
        carry = temp << (uECC_WORD_BITS - 1);
    4bc6:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bc8:	0855      	lsrs	r5, r2, #1
    4bca:	4328      	orrs	r0, r5
    4bcc:	905f      	str	r0, [sp, #380]	; 0x17c
        uECC_word_t temp = *vli;
    4bce:	985e      	ldr	r0, [sp, #376]	; 0x178
        carry = temp << (uECC_WORD_BITS - 1);
    4bd0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4bd2:	0845      	lsrs	r5, r0, #1
    4bd4:	432a      	orrs	r2, r5
    4bd6:	925e      	str	r2, [sp, #376]	; 0x178
        uECC_word_t temp = *vli;
    4bd8:	9a5d      	ldr	r2, [sp, #372]	; 0x174
        carry = temp << (uECC_WORD_BITS - 1);
    4bda:	07c0      	lsls	r0, r0, #31
        *vli = (temp >> 1) | carry;
    4bdc:	0855      	lsrs	r5, r2, #1
    4bde:	4328      	orrs	r0, r5
    4be0:	905d      	str	r0, [sp, #372]	; 0x174
    4be2:	4660      	mov	r0, ip
        carry = temp << (uECC_WORD_BITS - 1);
    4be4:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4be6:	0840      	lsrs	r0, r0, #1
    4be8:	4302      	orrs	r2, r0
    4bea:	9662      	str	r6, [sp, #392]	; 0x188
    4bec:	925c      	str	r2, [sp, #368]	; 0x170
    if (carry) {
    4bee:	0020      	movs	r0, r4
    4bf0:	2f00      	cmp	r7, #0
    4bf2:	d100      	bne.n	4bf6 <mod_sqrt_secp224r1+0x956>
    4bf4:	e71c      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4bf6:	2280      	movs	r2, #128	; 0x80
    4bf8:	0612      	lsls	r2, r2, #24
    4bfa:	4316      	orrs	r6, r2
    4bfc:	9662      	str	r6, [sp, #392]	; 0x188
    4bfe:	e717      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
        } else if (cmpResult > 0) {
    4c00:	2c01      	cmp	r4, #1
    4c02:	d000      	beq.n	4c06 <mod_sqrt_secp224r1+0x966>
    4c04:	e10d      	b.n	4e22 <mod_sqrt_secp224r1+0xb82>
    __asm__ volatile (
    4c06:	ab44      	add	r3, sp, #272	; 0x110
    4c08:	4652      	mov	r2, sl
    4c0a:	4649      	mov	r1, r9
    4c0c:	0018      	movs	r0, r3
    4c0e:	2400      	movs	r4, #0
    4c10:	a606      	add	r6, pc, #24	; (adr r6, 4c2c <mod_sqrt_secp224r1+0x98c>)
    4c12:	46c0      	nop			; (mov r8, r8)
    4c14:	46c0      	nop			; (mov r8, r8)
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	46c0      	nop			; (mov r8, r8)
    4c1a:	46c0      	nop			; (mov r8, r8)
    4c1c:	46c0      	nop			; (mov r8, r8)
    4c1e:	46c0      	nop			; (mov r8, r8)
    4c20:	1989      	adds	r1, r1, r6
    4c22:	c840      	ldmia	r0!, {r6}
    4c24:	ca80      	ldmia	r2!, {r7}
    4c26:	1bf6      	subs	r6, r6, r7
    4c28:	c340      	stmia	r3!, {r6}
    4c2a:	4708      	bx	r1
    4c2c:	c840      	ldmia	r0!, {r6}
    4c2e:	ca80      	ldmia	r2!, {r7}
    4c30:	41be      	sbcs	r6, r7
    4c32:	c340      	stmia	r3!, {r6}
    4c34:	c840      	ldmia	r0!, {r6}
    4c36:	ca80      	ldmia	r2!, {r7}
    4c38:	41be      	sbcs	r6, r7
    4c3a:	c340      	stmia	r3!, {r6}
    4c3c:	c840      	ldmia	r0!, {r6}
    4c3e:	ca80      	ldmia	r2!, {r7}
    4c40:	41be      	sbcs	r6, r7
    4c42:	c340      	stmia	r3!, {r6}
    4c44:	c840      	ldmia	r0!, {r6}
    4c46:	ca80      	ldmia	r2!, {r7}
    4c48:	41be      	sbcs	r6, r7
    4c4a:	c340      	stmia	r3!, {r6}
    4c4c:	c840      	ldmia	r0!, {r6}
    4c4e:	ca80      	ldmia	r2!, {r7}
    4c50:	41be      	sbcs	r6, r7
    4c52:	c340      	stmia	r3!, {r6}
    4c54:	c840      	ldmia	r0!, {r6}
    4c56:	ca80      	ldmia	r2!, {r7}
    4c58:	41be      	sbcs	r6, r7
    4c5a:	c340      	stmia	r3!, {r6}
    4c5c:	c840      	ldmia	r0!, {r6}
    4c5e:	ca80      	ldmia	r2!, {r7}
    4c60:	41be      	sbcs	r6, r7
    4c62:	c340      	stmia	r3!, {r6}
    4c64:	4164      	adcs	r4, r4
        uECC_word_t temp = *vli;
    4c66:	9b4a      	ldr	r3, [sp, #296]	; 0x128
        *vli = (temp >> 1) | carry;
    4c68:	085a      	lsrs	r2, r3, #1
    4c6a:	924a      	str	r2, [sp, #296]	; 0x128
        uECC_word_t temp = *vli;
    4c6c:	9a49      	ldr	r2, [sp, #292]	; 0x124
        carry = temp << (uECC_WORD_BITS - 1);
    4c6e:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4c70:	0851      	lsrs	r1, r2, #1
    4c72:	430b      	orrs	r3, r1
    4c74:	9349      	str	r3, [sp, #292]	; 0x124
        uECC_word_t temp = *vli;
    4c76:	9b48      	ldr	r3, [sp, #288]	; 0x120
        carry = temp << (uECC_WORD_BITS - 1);
    4c78:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4c7a:	0859      	lsrs	r1, r3, #1
    4c7c:	430a      	orrs	r2, r1
    4c7e:	9248      	str	r2, [sp, #288]	; 0x120
        uECC_word_t temp = *vli;
    4c80:	9a47      	ldr	r2, [sp, #284]	; 0x11c
        carry = temp << (uECC_WORD_BITS - 1);
    4c82:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4c84:	0851      	lsrs	r1, r2, #1
    4c86:	430b      	orrs	r3, r1
    4c88:	9347      	str	r3, [sp, #284]	; 0x11c
        uECC_word_t temp = *vli;
    4c8a:	9b46      	ldr	r3, [sp, #280]	; 0x118
        carry = temp << (uECC_WORD_BITS - 1);
    4c8c:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4c8e:	0859      	lsrs	r1, r3, #1
    4c90:	430a      	orrs	r2, r1
    4c92:	9246      	str	r2, [sp, #280]	; 0x118
        uECC_word_t temp = *vli;
    4c94:	9a45      	ldr	r2, [sp, #276]	; 0x114
        carry = temp << (uECC_WORD_BITS - 1);
    4c96:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4c98:	0851      	lsrs	r1, r2, #1
    4c9a:	430b      	orrs	r3, r1
    4c9c:	9345      	str	r3, [sp, #276]	; 0x114
    4c9e:	9b44      	ldr	r3, [sp, #272]	; 0x110
        carry = temp << (uECC_WORD_BITS - 1);
    4ca0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4ca2:	085b      	lsrs	r3, r3, #1
    4ca4:	4313      	orrs	r3, r2
    4ca6:	9344      	str	r3, [sp, #272]	; 0x110
        if (left[i] > right[i]) {
    4ca8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    4caa:	9b62      	ldr	r3, [sp, #392]	; 0x188
    4cac:	429a      	cmp	r2, r3
    4cae:	d824      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cb0:	d200      	bcs.n	4cb4 <mod_sqrt_secp224r1+0xa14>
    4cb2:	e1e2      	b.n	507a <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4cb4:	9a59      	ldr	r2, [sp, #356]	; 0x164
    4cb6:	9b61      	ldr	r3, [sp, #388]	; 0x184
    4cb8:	429a      	cmp	r2, r3
    4cba:	d81e      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cbc:	d200      	bcs.n	4cc0 <mod_sqrt_secp224r1+0xa20>
    4cbe:	e1dc      	b.n	507a <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4cc0:	9a58      	ldr	r2, [sp, #352]	; 0x160
    4cc2:	9b60      	ldr	r3, [sp, #384]	; 0x180
    4cc4:	429a      	cmp	r2, r3
    4cc6:	d818      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cc8:	d200      	bcs.n	4ccc <mod_sqrt_secp224r1+0xa2c>
    4cca:	e1d6      	b.n	507a <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4ccc:	9a57      	ldr	r2, [sp, #348]	; 0x15c
    4cce:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    4cd0:	429a      	cmp	r2, r3
    4cd2:	d812      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cd4:	d200      	bcs.n	4cd8 <mod_sqrt_secp224r1+0xa38>
    4cd6:	e1d0      	b.n	507a <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4cd8:	9a56      	ldr	r2, [sp, #344]	; 0x158
    4cda:	9b5e      	ldr	r3, [sp, #376]	; 0x178
    4cdc:	429a      	cmp	r2, r3
    4cde:	d80c      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4ce0:	d200      	bcs.n	4ce4 <mod_sqrt_secp224r1+0xa44>
    4ce2:	e1ca      	b.n	507a <mod_sqrt_secp224r1+0xdda>
        if (left[i] > right[i]) {
    4ce4:	9a55      	ldr	r2, [sp, #340]	; 0x154
    4ce6:	9b5d      	ldr	r3, [sp, #372]	; 0x174
    4ce8:	429a      	cmp	r2, r3
    4cea:	d806      	bhi.n	4cfa <mod_sqrt_secp224r1+0xa5a>
        } else if (left[i] < right[i]) {
    4cec:	d200      	bcs.n	4cf0 <mod_sqrt_secp224r1+0xa50>
    4cee:	e1c4      	b.n	507a <mod_sqrt_secp224r1+0xdda>
    4cf0:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4cf2:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    4cf4:	4293      	cmp	r3, r2
    4cf6:	d200      	bcs.n	4cfa <mod_sqrt_secp224r1+0xa5a>
    4cf8:	e1bf      	b.n	507a <mod_sqrt_secp224r1+0xdda>
    4cfa:	ab54      	add	r3, sp, #336	; 0x150
    4cfc:	aa5c      	add	r2, sp, #368	; 0x170
    4cfe:	4649      	mov	r1, r9
    4d00:	0018      	movs	r0, r3
    4d02:	2400      	movs	r4, #0
    4d04:	a605      	add	r6, pc, #20	; (adr r6, 4d1c <mod_sqrt_secp224r1+0xa7c>)
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	46c0      	nop			; (mov r8, r8)
    4d0a:	46c0      	nop			; (mov r8, r8)
    4d0c:	46c0      	nop			; (mov r8, r8)
    4d0e:	46c0      	nop			; (mov r8, r8)
    4d10:	1989      	adds	r1, r1, r6
    4d12:	c840      	ldmia	r0!, {r6}
    4d14:	ca80      	ldmia	r2!, {r7}
    4d16:	1bf6      	subs	r6, r6, r7
    4d18:	c340      	stmia	r3!, {r6}
    4d1a:	4708      	bx	r1
    4d1c:	c840      	ldmia	r0!, {r6}
    4d1e:	ca80      	ldmia	r2!, {r7}
    4d20:	41be      	sbcs	r6, r7
    4d22:	c340      	stmia	r3!, {r6}
    4d24:	c840      	ldmia	r0!, {r6}
    4d26:	ca80      	ldmia	r2!, {r7}
    4d28:	41be      	sbcs	r6, r7
    4d2a:	c340      	stmia	r3!, {r6}
    4d2c:	c840      	ldmia	r0!, {r6}
    4d2e:	ca80      	ldmia	r2!, {r7}
    4d30:	41be      	sbcs	r6, r7
    4d32:	c340      	stmia	r3!, {r6}
    4d34:	c840      	ldmia	r0!, {r6}
    4d36:	ca80      	ldmia	r2!, {r7}
    4d38:	41be      	sbcs	r6, r7
    4d3a:	c340      	stmia	r3!, {r6}
    4d3c:	c840      	ldmia	r0!, {r6}
    4d3e:	ca80      	ldmia	r2!, {r7}
    4d40:	41be      	sbcs	r6, r7
    4d42:	c340      	stmia	r3!, {r6}
    4d44:	c840      	ldmia	r0!, {r6}
    4d46:	ca80      	ldmia	r2!, {r7}
    4d48:	41be      	sbcs	r6, r7
    4d4a:	c340      	stmia	r3!, {r6}
    4d4c:	c840      	ldmia	r0!, {r6}
    4d4e:	ca80      	ldmia	r2!, {r7}
    4d50:	41be      	sbcs	r6, r7
    4d52:	c340      	stmia	r3!, {r6}
    4d54:	4164      	adcs	r4, r4
    if (!EVEN(uv)) {
    4d56:	2301      	movs	r3, #1
    4d58:	9e54      	ldr	r6, [sp, #336]	; 0x150
    uECC_word_t carry = 0;
    4d5a:	2400      	movs	r4, #0
    if (!EVEN(uv)) {
    4d5c:	4233      	tst	r3, r6
    4d5e:	d000      	beq.n	4d62 <mod_sqrt_secp224r1+0xac2>
    4d60:	e15f      	b.n	5022 <mod_sqrt_secp224r1+0xd82>
        uECC_word_t temp = *vli;
    4d62:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4d64:	9a59      	ldr	r2, [sp, #356]	; 0x164
        *vli = (temp >> 1) | carry;
    4d66:	0858      	lsrs	r0, r3, #1
    4d68:	0851      	lsrs	r1, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4d6a:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4d6c:	430b      	orrs	r3, r1
    4d6e:	9359      	str	r3, [sp, #356]	; 0x164
        uECC_word_t temp = *vli;
    4d70:	9b58      	ldr	r3, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4d72:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4d74:	0859      	lsrs	r1, r3, #1
    4d76:	430a      	orrs	r2, r1
        uECC_word_t temp = *vli;
    4d78:	9957      	ldr	r1, [sp, #348]	; 0x15c
        *vli = (temp >> 1) | carry;
    4d7a:	9258      	str	r2, [sp, #352]	; 0x160
        carry = temp << (uECC_WORD_BITS - 1);
    4d7c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4d7e:	084a      	lsrs	r2, r1, #1
    4d80:	4313      	orrs	r3, r2
        uECC_word_t temp = *vli;
    4d82:	9a56      	ldr	r2, [sp, #344]	; 0x158
        *vli = (temp >> 1) | carry;
    4d84:	9357      	str	r3, [sp, #348]	; 0x15c
        carry = temp << (uECC_WORD_BITS - 1);
    4d86:	07c9      	lsls	r1, r1, #31
        *vli = (temp >> 1) | carry;
    4d88:	0853      	lsrs	r3, r2, #1
    4d8a:	4319      	orrs	r1, r3
        uECC_word_t temp = *vli;
    4d8c:	9b55      	ldr	r3, [sp, #340]	; 0x154
        *vli = (temp >> 1) | carry;
    4d8e:	9156      	str	r1, [sp, #344]	; 0x158
        carry = temp << (uECC_WORD_BITS - 1);
    4d90:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4d92:	0859      	lsrs	r1, r3, #1
    4d94:	0876      	lsrs	r6, r6, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4d96:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4d98:	430a      	orrs	r2, r1
    4d9a:	4333      	orrs	r3, r6
    4d9c:	905a      	str	r0, [sp, #360]	; 0x168
    4d9e:	9255      	str	r2, [sp, #340]	; 0x154
    4da0:	9354      	str	r3, [sp, #336]	; 0x150
    if (carry) {
    4da2:	2c00      	cmp	r4, #0
    4da4:	d100      	bne.n	4da8 <mod_sqrt_secp224r1+0xb08>
    4da6:	e109      	b.n	4fbc <mod_sqrt_secp224r1+0xd1c>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4da8:	2380      	movs	r3, #128	; 0x80
    4daa:	061b      	lsls	r3, r3, #24
    4dac:	4318      	orrs	r0, r3
    4dae:	905a      	str	r0, [sp, #360]	; 0x168
    4db0:	9944      	ldr	r1, [sp, #272]	; 0x110
    4db2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    4db4:	9852      	ldr	r0, [sp, #328]	; 0x148
    4db6:	e63b      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
            return -1;
    4db8:	2401      	movs	r4, #1
    4dba:	4264      	negs	r4, r4
    4dbc:	e666      	b.n	4a8c <mod_sqrt_secp224r1+0x7ec>
    __asm__ volatile (
    4dbe:	ab54      	add	r3, sp, #336	; 0x150
    4dc0:	465a      	mov	r2, fp
    4dc2:	4649      	mov	r1, r9
    4dc4:	0018      	movs	r0, r3
    4dc6:	2600      	movs	r6, #0
    4dc8:	a404      	add	r4, pc, #16	; (adr r4, 4ddc <mod_sqrt_secp224r1+0xb3c>)
    4dca:	46c0      	nop			; (mov r8, r8)
    4dcc:	46c0      	nop			; (mov r8, r8)
    4dce:	46c0      	nop			; (mov r8, r8)
    4dd0:	1909      	adds	r1, r1, r4
    4dd2:	c810      	ldmia	r0!, {r4}
    4dd4:	ca80      	ldmia	r2!, {r7}
    4dd6:	19e4      	adds	r4, r4, r7
    4dd8:	c310      	stmia	r3!, {r4}
    4dda:	4708      	bx	r1
    4ddc:	c810      	ldmia	r0!, {r4}
    4dde:	ca80      	ldmia	r2!, {r7}
    4de0:	417c      	adcs	r4, r7
    4de2:	c310      	stmia	r3!, {r4}
    4de4:	c810      	ldmia	r0!, {r4}
    4de6:	ca80      	ldmia	r2!, {r7}
    4de8:	417c      	adcs	r4, r7
    4dea:	c310      	stmia	r3!, {r4}
    4dec:	c810      	ldmia	r0!, {r4}
    4dee:	ca80      	ldmia	r2!, {r7}
    4df0:	417c      	adcs	r4, r7
    4df2:	c310      	stmia	r3!, {r4}
    4df4:	c810      	ldmia	r0!, {r4}
    4df6:	ca80      	ldmia	r2!, {r7}
    4df8:	417c      	adcs	r4, r7
    4dfa:	c310      	stmia	r3!, {r4}
    4dfc:	c810      	ldmia	r0!, {r4}
    4dfe:	ca80      	ldmia	r2!, {r7}
    4e00:	417c      	adcs	r4, r7
    4e02:	c310      	stmia	r3!, {r4}
    4e04:	c810      	ldmia	r0!, {r4}
    4e06:	ca80      	ldmia	r2!, {r7}
    4e08:	417c      	adcs	r4, r7
    4e0a:	c310      	stmia	r3!, {r4}
    4e0c:	c810      	ldmia	r0!, {r4}
    4e0e:	ca80      	ldmia	r2!, {r7}
    4e10:	417c      	adcs	r4, r7
    4e12:	c310      	stmia	r3!, {r4}
    4e14:	4176      	adcs	r6, r6
    4e16:	9603      	str	r6, [sp, #12]
    4e18:	9b54      	ldr	r3, [sp, #336]	; 0x150
    4e1a:	9944      	ldr	r1, [sp, #272]	; 0x110
    4e1c:	9c4a      	ldr	r4, [sp, #296]	; 0x128
    4e1e:	9852      	ldr	r0, [sp, #328]	; 0x148
    4e20:	e65d      	b.n	4ade <mod_sqrt_secp224r1+0x83e>
    __asm__ volatile (
    4e22:	4653      	mov	r3, sl
    4e24:	aa44      	add	r2, sp, #272	; 0x110
    4e26:	4649      	mov	r1, r9
    4e28:	4650      	mov	r0, sl
    4e2a:	2400      	movs	r4, #0
    4e2c:	a603      	add	r6, pc, #12	; (adr r6, 4e3c <mod_sqrt_secp224r1+0xb9c>)
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	1989      	adds	r1, r1, r6
    4e32:	c840      	ldmia	r0!, {r6}
    4e34:	ca80      	ldmia	r2!, {r7}
    4e36:	1bf6      	subs	r6, r6, r7
    4e38:	c340      	stmia	r3!, {r6}
    4e3a:	4708      	bx	r1
    4e3c:	c840      	ldmia	r0!, {r6}
    4e3e:	ca80      	ldmia	r2!, {r7}
    4e40:	41be      	sbcs	r6, r7
    4e42:	c340      	stmia	r3!, {r6}
    4e44:	c840      	ldmia	r0!, {r6}
    4e46:	ca80      	ldmia	r2!, {r7}
    4e48:	41be      	sbcs	r6, r7
    4e4a:	c340      	stmia	r3!, {r6}
    4e4c:	c840      	ldmia	r0!, {r6}
    4e4e:	ca80      	ldmia	r2!, {r7}
    4e50:	41be      	sbcs	r6, r7
    4e52:	c340      	stmia	r3!, {r6}
    4e54:	c840      	ldmia	r0!, {r6}
    4e56:	ca80      	ldmia	r2!, {r7}
    4e58:	41be      	sbcs	r6, r7
    4e5a:	c340      	stmia	r3!, {r6}
    4e5c:	c840      	ldmia	r0!, {r6}
    4e5e:	ca80      	ldmia	r2!, {r7}
    4e60:	41be      	sbcs	r6, r7
    4e62:	c340      	stmia	r3!, {r6}
    4e64:	c840      	ldmia	r0!, {r6}
    4e66:	ca80      	ldmia	r2!, {r7}
    4e68:	41be      	sbcs	r6, r7
    4e6a:	c340      	stmia	r3!, {r6}
    4e6c:	c840      	ldmia	r0!, {r6}
    4e6e:	ca80      	ldmia	r2!, {r7}
    4e70:	41be      	sbcs	r6, r7
    4e72:	c340      	stmia	r3!, {r6}
    4e74:	4164      	adcs	r4, r4
        uECC_word_t temp = *vli;
    4e76:	9b52      	ldr	r3, [sp, #328]	; 0x148
        *vli = (temp >> 1) | carry;
    4e78:	085a      	lsrs	r2, r3, #1
    4e7a:	9252      	str	r2, [sp, #328]	; 0x148
        uECC_word_t temp = *vli;
    4e7c:	9a51      	ldr	r2, [sp, #324]	; 0x144
        carry = temp << (uECC_WORD_BITS - 1);
    4e7e:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4e80:	0851      	lsrs	r1, r2, #1
    4e82:	430b      	orrs	r3, r1
    4e84:	9351      	str	r3, [sp, #324]	; 0x144
        uECC_word_t temp = *vli;
    4e86:	9b50      	ldr	r3, [sp, #320]	; 0x140
        carry = temp << (uECC_WORD_BITS - 1);
    4e88:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4e8a:	0859      	lsrs	r1, r3, #1
    4e8c:	430a      	orrs	r2, r1
    4e8e:	9250      	str	r2, [sp, #320]	; 0x140
        uECC_word_t temp = *vli;
    4e90:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
        carry = temp << (uECC_WORD_BITS - 1);
    4e92:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4e94:	0851      	lsrs	r1, r2, #1
    4e96:	430b      	orrs	r3, r1
    4e98:	934f      	str	r3, [sp, #316]	; 0x13c
        uECC_word_t temp = *vli;
    4e9a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
        carry = temp << (uECC_WORD_BITS - 1);
    4e9c:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4e9e:	0859      	lsrs	r1, r3, #1
    4ea0:	430a      	orrs	r2, r1
    4ea2:	924e      	str	r2, [sp, #312]	; 0x138
        uECC_word_t temp = *vli;
    4ea4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
        carry = temp << (uECC_WORD_BITS - 1);
    4ea6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4ea8:	0851      	lsrs	r1, r2, #1
    4eaa:	430b      	orrs	r3, r1
    4eac:	934d      	str	r3, [sp, #308]	; 0x134
    4eae:	9b4c      	ldr	r3, [sp, #304]	; 0x130
        carry = temp << (uECC_WORD_BITS - 1);
    4eb0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4eb2:	085b      	lsrs	r3, r3, #1
    4eb4:	4313      	orrs	r3, r2
    4eb6:	934c      	str	r3, [sp, #304]	; 0x130
        if (left[i] > right[i]) {
    4eb8:	9a62      	ldr	r2, [sp, #392]	; 0x188
    4eba:	9b5a      	ldr	r3, [sp, #360]	; 0x168
    4ebc:	429a      	cmp	r2, r3
    4ebe:	d824      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4ec0:	d200      	bcs.n	4ec4 <mod_sqrt_secp224r1+0xc24>
    4ec2:	e13a      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4ec4:	9a61      	ldr	r2, [sp, #388]	; 0x184
    4ec6:	9b59      	ldr	r3, [sp, #356]	; 0x164
    4ec8:	429a      	cmp	r2, r3
    4eca:	d81e      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4ecc:	d200      	bcs.n	4ed0 <mod_sqrt_secp224r1+0xc30>
    4ece:	e134      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4ed0:	9a60      	ldr	r2, [sp, #384]	; 0x180
    4ed2:	9b58      	ldr	r3, [sp, #352]	; 0x160
    4ed4:	429a      	cmp	r2, r3
    4ed6:	d818      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4ed8:	d200      	bcs.n	4edc <mod_sqrt_secp224r1+0xc3c>
    4eda:	e12e      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4edc:	9a5f      	ldr	r2, [sp, #380]	; 0x17c
    4ede:	9b57      	ldr	r3, [sp, #348]	; 0x15c
    4ee0:	429a      	cmp	r2, r3
    4ee2:	d812      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4ee4:	d200      	bcs.n	4ee8 <mod_sqrt_secp224r1+0xc48>
    4ee6:	e128      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4ee8:	9a5e      	ldr	r2, [sp, #376]	; 0x178
    4eea:	9b56      	ldr	r3, [sp, #344]	; 0x158
    4eec:	429a      	cmp	r2, r3
    4eee:	d80c      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4ef0:	d200      	bcs.n	4ef4 <mod_sqrt_secp224r1+0xc54>
    4ef2:	e122      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
        if (left[i] > right[i]) {
    4ef4:	9a5d      	ldr	r2, [sp, #372]	; 0x174
    4ef6:	9b55      	ldr	r3, [sp, #340]	; 0x154
    4ef8:	429a      	cmp	r2, r3
    4efa:	d806      	bhi.n	4f0a <mod_sqrt_secp224r1+0xc6a>
        } else if (left[i] < right[i]) {
    4efc:	d200      	bcs.n	4f00 <mod_sqrt_secp224r1+0xc60>
    4efe:	e11c      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
    4f00:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    4f02:	9a54      	ldr	r2, [sp, #336]	; 0x150
    4f04:	4293      	cmp	r3, r2
    4f06:	d200      	bcs.n	4f0a <mod_sqrt_secp224r1+0xc6a>
    4f08:	e117      	b.n	513a <mod_sqrt_secp224r1+0xe9a>
    4f0a:	ab5c      	add	r3, sp, #368	; 0x170
    4f0c:	aa54      	add	r2, sp, #336	; 0x150
    4f0e:	4649      	mov	r1, r9
    4f10:	0018      	movs	r0, r3
    4f12:	2400      	movs	r4, #0
    4f14:	a605      	add	r6, pc, #20	; (adr r6, 4f2c <mod_sqrt_secp224r1+0xc8c>)
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	46c0      	nop			; (mov r8, r8)
    4f1a:	46c0      	nop			; (mov r8, r8)
    4f1c:	46c0      	nop			; (mov r8, r8)
    4f1e:	46c0      	nop			; (mov r8, r8)
    4f20:	1989      	adds	r1, r1, r6
    4f22:	c840      	ldmia	r0!, {r6}
    4f24:	ca80      	ldmia	r2!, {r7}
    4f26:	1bf6      	subs	r6, r6, r7
    4f28:	c340      	stmia	r3!, {r6}
    4f2a:	4708      	bx	r1
    4f2c:	c840      	ldmia	r0!, {r6}
    4f2e:	ca80      	ldmia	r2!, {r7}
    4f30:	41be      	sbcs	r6, r7
    4f32:	c340      	stmia	r3!, {r6}
    4f34:	c840      	ldmia	r0!, {r6}
    4f36:	ca80      	ldmia	r2!, {r7}
    4f38:	41be      	sbcs	r6, r7
    4f3a:	c340      	stmia	r3!, {r6}
    4f3c:	c840      	ldmia	r0!, {r6}
    4f3e:	ca80      	ldmia	r2!, {r7}
    4f40:	41be      	sbcs	r6, r7
    4f42:	c340      	stmia	r3!, {r6}
    4f44:	c840      	ldmia	r0!, {r6}
    4f46:	ca80      	ldmia	r2!, {r7}
    4f48:	41be      	sbcs	r6, r7
    4f4a:	c340      	stmia	r3!, {r6}
    4f4c:	c840      	ldmia	r0!, {r6}
    4f4e:	ca80      	ldmia	r2!, {r7}
    4f50:	41be      	sbcs	r6, r7
    4f52:	c340      	stmia	r3!, {r6}
    4f54:	c840      	ldmia	r0!, {r6}
    4f56:	ca80      	ldmia	r2!, {r7}
    4f58:	41be      	sbcs	r6, r7
    4f5a:	c340      	stmia	r3!, {r6}
    4f5c:	c840      	ldmia	r0!, {r6}
    4f5e:	ca80      	ldmia	r2!, {r7}
    4f60:	41be      	sbcs	r6, r7
    4f62:	c340      	stmia	r3!, {r6}
    4f64:	4164      	adcs	r4, r4
    if (!EVEN(uv)) {
    4f66:	2301      	movs	r3, #1
    4f68:	9e5c      	ldr	r6, [sp, #368]	; 0x170
    uECC_word_t carry = 0;
    4f6a:	2400      	movs	r4, #0
    if (!EVEN(uv)) {
    4f6c:	4233      	tst	r3, r6
    4f6e:	d000      	beq.n	4f72 <mod_sqrt_secp224r1+0xcd2>
    4f70:	e0b2      	b.n	50d8 <mod_sqrt_secp224r1+0xe38>
        uECC_word_t temp = *vli;
    4f72:	9b62      	ldr	r3, [sp, #392]	; 0x188
    4f74:	9a61      	ldr	r2, [sp, #388]	; 0x184
        *vli = (temp >> 1) | carry;
    4f76:	0858      	lsrs	r0, r3, #1
    4f78:	0851      	lsrs	r1, r2, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4f7a:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4f7c:	430b      	orrs	r3, r1
    4f7e:	9361      	str	r3, [sp, #388]	; 0x184
        uECC_word_t temp = *vli;
    4f80:	9b60      	ldr	r3, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4f82:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4f84:	0859      	lsrs	r1, r3, #1
    4f86:	430a      	orrs	r2, r1
        uECC_word_t temp = *vli;
    4f88:	995f      	ldr	r1, [sp, #380]	; 0x17c
        *vli = (temp >> 1) | carry;
    4f8a:	9260      	str	r2, [sp, #384]	; 0x180
        carry = temp << (uECC_WORD_BITS - 1);
    4f8c:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4f8e:	084a      	lsrs	r2, r1, #1
    4f90:	4313      	orrs	r3, r2
        uECC_word_t temp = *vli;
    4f92:	9a5e      	ldr	r2, [sp, #376]	; 0x178
        *vli = (temp >> 1) | carry;
    4f94:	935f      	str	r3, [sp, #380]	; 0x17c
        carry = temp << (uECC_WORD_BITS - 1);
    4f96:	07c9      	lsls	r1, r1, #31
        *vli = (temp >> 1) | carry;
    4f98:	0853      	lsrs	r3, r2, #1
    4f9a:	4319      	orrs	r1, r3
        uECC_word_t temp = *vli;
    4f9c:	9b5d      	ldr	r3, [sp, #372]	; 0x174
        *vli = (temp >> 1) | carry;
    4f9e:	915e      	str	r1, [sp, #376]	; 0x178
        carry = temp << (uECC_WORD_BITS - 1);
    4fa0:	07d2      	lsls	r2, r2, #31
        *vli = (temp >> 1) | carry;
    4fa2:	0859      	lsrs	r1, r3, #1
    4fa4:	0876      	lsrs	r6, r6, #1
        carry = temp << (uECC_WORD_BITS - 1);
    4fa6:	07db      	lsls	r3, r3, #31
        *vli = (temp >> 1) | carry;
    4fa8:	430a      	orrs	r2, r1
    4faa:	4333      	orrs	r3, r6
    4fac:	9062      	str	r0, [sp, #392]	; 0x188
    4fae:	925d      	str	r2, [sp, #372]	; 0x174
    4fb0:	935c      	str	r3, [sp, #368]	; 0x170
    if (carry) {
    4fb2:	b11c      	cbz	r4, 4fbc <mod_sqrt_secp224r1+0xd1c>
        uv[num_words - 1] |= HIGH_BIT_SET;
    4fb4:	2380      	movs	r3, #128	; 0x80
    4fb6:	061b      	lsls	r3, r3, #24
    4fb8:	4318      	orrs	r0, r3
    4fba:	9062      	str	r0, [sp, #392]	; 0x188
    4fbc:	9944      	ldr	r1, [sp, #272]	; 0x110
    4fbe:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    4fc0:	9852      	ldr	r0, [sp, #328]	; 0x148
    4fc2:	e535      	b.n	4a30 <mod_sqrt_secp224r1+0x790>
    __asm__ volatile (
    4fc4:	ab5c      	add	r3, sp, #368	; 0x170
    4fc6:	465a      	mov	r2, fp
    4fc8:	4649      	mov	r1, r9
    4fca:	0018      	movs	r0, r3
    4fcc:	2700      	movs	r7, #0
    4fce:	a403      	add	r4, pc, #12	; (adr r4, 4fdc <mod_sqrt_secp224r1+0xd3c>)
    4fd0:	1909      	adds	r1, r1, r4
    4fd2:	c810      	ldmia	r0!, {r4}
    4fd4:	ca40      	ldmia	r2!, {r6}
    4fd6:	19a4      	adds	r4, r4, r6
    4fd8:	c310      	stmia	r3!, {r4}
    4fda:	4708      	bx	r1
    4fdc:	c810      	ldmia	r0!, {r4}
    4fde:	ca40      	ldmia	r2!, {r6}
    4fe0:	4174      	adcs	r4, r6
    4fe2:	c310      	stmia	r3!, {r4}
    4fe4:	c810      	ldmia	r0!, {r4}
    4fe6:	ca40      	ldmia	r2!, {r6}
    4fe8:	4174      	adcs	r4, r6
    4fea:	c310      	stmia	r3!, {r4}
    4fec:	c810      	ldmia	r0!, {r4}
    4fee:	ca40      	ldmia	r2!, {r6}
    4ff0:	4174      	adcs	r4, r6
    4ff2:	c310      	stmia	r3!, {r4}
    4ff4:	c810      	ldmia	r0!, {r4}
    4ff6:	ca40      	ldmia	r2!, {r6}
    4ff8:	4174      	adcs	r4, r6
    4ffa:	c310      	stmia	r3!, {r4}
    4ffc:	c810      	ldmia	r0!, {r4}
    4ffe:	ca40      	ldmia	r2!, {r6}
    5000:	4174      	adcs	r4, r6
    5002:	c310      	stmia	r3!, {r4}
    5004:	c810      	ldmia	r0!, {r4}
    5006:	ca40      	ldmia	r2!, {r6}
    5008:	4174      	adcs	r4, r6
    500a:	c310      	stmia	r3!, {r4}
    500c:	c810      	ldmia	r0!, {r4}
    500e:	ca40      	ldmia	r2!, {r6}
    5010:	4174      	adcs	r4, r6
    5012:	c310      	stmia	r3!, {r4}
    5014:	417f      	adcs	r7, r7
    5016:	9b5c      	ldr	r3, [sp, #368]	; 0x170
    5018:	9944      	ldr	r1, [sp, #272]	; 0x110
    501a:	469c      	mov	ip, r3
    501c:	9c52      	ldr	r4, [sp, #328]	; 0x148
    501e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5020:	e5c4      	b.n	4bac <mod_sqrt_secp224r1+0x90c>
    5022:	ab54      	add	r3, sp, #336	; 0x150
    5024:	465a      	mov	r2, fp
    5026:	4649      	mov	r1, r9
    5028:	0018      	movs	r0, r3
    502a:	2400      	movs	r4, #0
    502c:	a603      	add	r6, pc, #12	; (adr r6, 503c <mod_sqrt_secp224r1+0xd9c>)
    502e:	46c0      	nop			; (mov r8, r8)
    5030:	1989      	adds	r1, r1, r6
    5032:	c840      	ldmia	r0!, {r6}
    5034:	ca80      	ldmia	r2!, {r7}
    5036:	19f6      	adds	r6, r6, r7
    5038:	c340      	stmia	r3!, {r6}
    503a:	4708      	bx	r1
    503c:	c840      	ldmia	r0!, {r6}
    503e:	ca80      	ldmia	r2!, {r7}
    5040:	417e      	adcs	r6, r7
    5042:	c340      	stmia	r3!, {r6}
    5044:	c840      	ldmia	r0!, {r6}
    5046:	ca80      	ldmia	r2!, {r7}
    5048:	417e      	adcs	r6, r7
    504a:	c340      	stmia	r3!, {r6}
    504c:	c840      	ldmia	r0!, {r6}
    504e:	ca80      	ldmia	r2!, {r7}
    5050:	417e      	adcs	r6, r7
    5052:	c340      	stmia	r3!, {r6}
    5054:	c840      	ldmia	r0!, {r6}
    5056:	ca80      	ldmia	r2!, {r7}
    5058:	417e      	adcs	r6, r7
    505a:	c340      	stmia	r3!, {r6}
    505c:	c840      	ldmia	r0!, {r6}
    505e:	ca80      	ldmia	r2!, {r7}
    5060:	417e      	adcs	r6, r7
    5062:	c340      	stmia	r3!, {r6}
    5064:	c840      	ldmia	r0!, {r6}
    5066:	ca80      	ldmia	r2!, {r7}
    5068:	417e      	adcs	r6, r7
    506a:	c340      	stmia	r3!, {r6}
    506c:	c840      	ldmia	r0!, {r6}
    506e:	ca80      	ldmia	r2!, {r7}
    5070:	417e      	adcs	r6, r7
    5072:	c340      	stmia	r3!, {r6}
    5074:	4164      	adcs	r4, r4
    5076:	9e54      	ldr	r6, [sp, #336]	; 0x150
    5078:	e673      	b.n	4d62 <mod_sqrt_secp224r1+0xac2>
    507a:	ab54      	add	r3, sp, #336	; 0x150
    507c:	465a      	mov	r2, fp
    507e:	4649      	mov	r1, r9
    5080:	0018      	movs	r0, r3
    5082:	2400      	movs	r4, #0
    5084:	a605      	add	r6, pc, #20	; (adr r6, 509c <mod_sqrt_secp224r1+0xdfc>)
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	46c0      	nop			; (mov r8, r8)
    508a:	46c0      	nop			; (mov r8, r8)
    508c:	46c0      	nop			; (mov r8, r8)
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	1989      	adds	r1, r1, r6
    5092:	c840      	ldmia	r0!, {r6}
    5094:	ca80      	ldmia	r2!, {r7}
    5096:	19f6      	adds	r6, r6, r7
    5098:	c340      	stmia	r3!, {r6}
    509a:	4708      	bx	r1
    509c:	c840      	ldmia	r0!, {r6}
    509e:	ca80      	ldmia	r2!, {r7}
    50a0:	417e      	adcs	r6, r7
    50a2:	c340      	stmia	r3!, {r6}
    50a4:	c840      	ldmia	r0!, {r6}
    50a6:	ca80      	ldmia	r2!, {r7}
    50a8:	417e      	adcs	r6, r7
    50aa:	c340      	stmia	r3!, {r6}
    50ac:	c840      	ldmia	r0!, {r6}
    50ae:	ca80      	ldmia	r2!, {r7}
    50b0:	417e      	adcs	r6, r7
    50b2:	c340      	stmia	r3!, {r6}
    50b4:	c840      	ldmia	r0!, {r6}
    50b6:	ca80      	ldmia	r2!, {r7}
    50b8:	417e      	adcs	r6, r7
    50ba:	c340      	stmia	r3!, {r6}
    50bc:	c840      	ldmia	r0!, {r6}
    50be:	ca80      	ldmia	r2!, {r7}
    50c0:	417e      	adcs	r6, r7
    50c2:	c340      	stmia	r3!, {r6}
    50c4:	c840      	ldmia	r0!, {r6}
    50c6:	ca80      	ldmia	r2!, {r7}
    50c8:	417e      	adcs	r6, r7
    50ca:	c340      	stmia	r3!, {r6}
    50cc:	c840      	ldmia	r0!, {r6}
    50ce:	ca80      	ldmia	r2!, {r7}
    50d0:	417e      	adcs	r6, r7
    50d2:	c340      	stmia	r3!, {r6}
    50d4:	4164      	adcs	r4, r4
    50d6:	e610      	b.n	4cfa <mod_sqrt_secp224r1+0xa5a>
    50d8:	ab5c      	add	r3, sp, #368	; 0x170
    50da:	465a      	mov	r2, fp
    50dc:	4649      	mov	r1, r9
    50de:	0018      	movs	r0, r3
    50e0:	2400      	movs	r4, #0
    50e2:	a606      	add	r6, pc, #24	; (adr r6, 50fc <mod_sqrt_secp224r1+0xe5c>)
    50e4:	46c0      	nop			; (mov r8, r8)
    50e6:	46c0      	nop			; (mov r8, r8)
    50e8:	46c0      	nop			; (mov r8, r8)
    50ea:	46c0      	nop			; (mov r8, r8)
    50ec:	46c0      	nop			; (mov r8, r8)
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	1989      	adds	r1, r1, r6
    50f2:	c840      	ldmia	r0!, {r6}
    50f4:	ca80      	ldmia	r2!, {r7}
    50f6:	19f6      	adds	r6, r6, r7
    50f8:	c340      	stmia	r3!, {r6}
    50fa:	4708      	bx	r1
    50fc:	c840      	ldmia	r0!, {r6}
    50fe:	ca80      	ldmia	r2!, {r7}
    5100:	417e      	adcs	r6, r7
    5102:	c340      	stmia	r3!, {r6}
    5104:	c840      	ldmia	r0!, {r6}
    5106:	ca80      	ldmia	r2!, {r7}
    5108:	417e      	adcs	r6, r7
    510a:	c340      	stmia	r3!, {r6}
    510c:	c840      	ldmia	r0!, {r6}
    510e:	ca80      	ldmia	r2!, {r7}
    5110:	417e      	adcs	r6, r7
    5112:	c340      	stmia	r3!, {r6}
    5114:	c840      	ldmia	r0!, {r6}
    5116:	ca80      	ldmia	r2!, {r7}
    5118:	417e      	adcs	r6, r7
    511a:	c340      	stmia	r3!, {r6}
    511c:	c840      	ldmia	r0!, {r6}
    511e:	ca80      	ldmia	r2!, {r7}
    5120:	417e      	adcs	r6, r7
    5122:	c340      	stmia	r3!, {r6}
    5124:	c840      	ldmia	r0!, {r6}
    5126:	ca80      	ldmia	r2!, {r7}
    5128:	417e      	adcs	r6, r7
    512a:	c340      	stmia	r3!, {r6}
    512c:	c840      	ldmia	r0!, {r6}
    512e:	ca80      	ldmia	r2!, {r7}
    5130:	417e      	adcs	r6, r7
    5132:	c340      	stmia	r3!, {r6}
    5134:	4164      	adcs	r4, r4
    5136:	9e5c      	ldr	r6, [sp, #368]	; 0x170
    5138:	e71b      	b.n	4f72 <mod_sqrt_secp224r1+0xcd2>
    513a:	ab5c      	add	r3, sp, #368	; 0x170
    513c:	465a      	mov	r2, fp
    513e:	4649      	mov	r1, r9
    5140:	0018      	movs	r0, r3
    5142:	2400      	movs	r4, #0
    5144:	a605      	add	r6, pc, #20	; (adr r6, 515c <mod_sqrt_secp224r1+0xebc>)
    5146:	46c0      	nop			; (mov r8, r8)
    5148:	46c0      	nop			; (mov r8, r8)
    514a:	46c0      	nop			; (mov r8, r8)
    514c:	46c0      	nop			; (mov r8, r8)
    514e:	46c0      	nop			; (mov r8, r8)
    5150:	1989      	adds	r1, r1, r6
    5152:	c840      	ldmia	r0!, {r6}
    5154:	ca80      	ldmia	r2!, {r7}
    5156:	19f6      	adds	r6, r6, r7
    5158:	c340      	stmia	r3!, {r6}
    515a:	4708      	bx	r1
    515c:	c840      	ldmia	r0!, {r6}
    515e:	ca80      	ldmia	r2!, {r7}
    5160:	417e      	adcs	r6, r7
    5162:	c340      	stmia	r3!, {r6}
    5164:	c840      	ldmia	r0!, {r6}
    5166:	ca80      	ldmia	r2!, {r7}
    5168:	417e      	adcs	r6, r7
    516a:	c340      	stmia	r3!, {r6}
    516c:	c840      	ldmia	r0!, {r6}
    516e:	ca80      	ldmia	r2!, {r7}
    5170:	417e      	adcs	r6, r7
    5172:	c340      	stmia	r3!, {r6}
    5174:	c840      	ldmia	r0!, {r6}
    5176:	ca80      	ldmia	r2!, {r7}
    5178:	417e      	adcs	r6, r7
    517a:	c340      	stmia	r3!, {r6}
    517c:	c840      	ldmia	r0!, {r6}
    517e:	ca80      	ldmia	r2!, {r7}
    5180:	417e      	adcs	r6, r7
    5182:	c340      	stmia	r3!, {r6}
    5184:	c840      	ldmia	r0!, {r6}
    5186:	ca80      	ldmia	r2!, {r7}
    5188:	417e      	adcs	r6, r7
    518a:	c340      	stmia	r3!, {r6}
    518c:	c840      	ldmia	r0!, {r6}
    518e:	ca80      	ldmia	r2!, {r7}
    5190:	417e      	adcs	r6, r7
    5192:	c340      	stmia	r3!, {r6}
    5194:	4164      	adcs	r4, r4
    5196:	e6b8      	b.n	4f0a <mod_sqrt_secp224r1+0xc6a>
	...

000051a0 <uECC_sign_with_k_internal>:
static int uECC_sign_with_k_internal(const uint8_t *private_key,
                            const uint8_t *message_hash,
                            unsigned hash_size,
                            uECC_word_t *k,
                            uint8_t *signature,
                            uECC_Curve curve) {
    51a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51a2:	46de      	mov	lr, fp
    51a4:	464e      	mov	r6, r9
    51a6:	4657      	mov	r7, sl
    51a8:	4645      	mov	r5, r8
    51aa:	b5e0      	push	{r5, r6, r7, lr}
    51ac:	b0c1      	sub	sp, #260	; 0x104
    51ae:	001e      	movs	r6, r3

    uECC_word_t tmp[uECC_MAX_WORDS];
    uECC_word_t s[uECC_MAX_WORDS];
    uECC_word_t *k2[2] = {tmp, s};
    51b0:	ab10      	add	r3, sp, #64	; 0x40
    51b2:	930e      	str	r3, [sp, #56]	; 0x38
    51b4:	ab18      	add	r3, sp, #96	; 0x60
    51b6:	930f      	str	r3, [sp, #60]	; 0x3c
    uECC_word_t *p = (uECC_word_t *)signature;
#else
    uECC_word_t p[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t carry;
    wordcount_t num_words = curve->num_words;
    51b8:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
                            uECC_Curve curve) {
    51ba:	9005      	str	r0, [sp, #20]
    wordcount_t num_words = curve->num_words;
    51bc:	781b      	ldrb	r3, [r3, #0]
                            uECC_Curve curve) {
    51be:	9106      	str	r1, [sp, #24]
    wordcount_t num_words = curve->num_words;
    51c0:	b25b      	sxtb	r3, r3
                            uECC_Curve curve) {
    51c2:	9207      	str	r2, [sp, #28]
    wordcount_t num_words = curve->num_words;
    51c4:	469b      	mov	fp, r3
    for (i = 0; i < num_words; ++i) {
    51c6:	2b00      	cmp	r3, #0
    51c8:	dd0f      	ble.n	51ea <uECC_sign_with_k_internal+0x4a>
    51ca:	1e5c      	subs	r4, r3, #1
    51cc:	b2e4      	uxtb	r4, r4
    51ce:	3401      	adds	r4, #1
    51d0:	00a3      	lsls	r3, r4, #2
    51d2:	001c      	movs	r4, r3
    51d4:	18f0      	adds	r0, r6, r3
    51d6:	46b1      	mov	r9, r6
    51d8:	0033      	movs	r3, r6
    51da:	2200      	movs	r2, #0
        bits |= vli[i];
    51dc:	cb02      	ldmia	r3!, {r1}
    51de:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    51e0:	4298      	cmp	r0, r3
    51e2:	d1fb      	bne.n	51dc <uECC_sign_with_k_internal+0x3c>
    51e4:	0025      	movs	r5, r4
    51e6:	9404      	str	r4, [sp, #16]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    bitcount_t num_n_bits = curve->num_n_bits;

    /* Make sure 0 < k < curve_n */
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    51e8:	b93a      	cbnz	r2, 51fa <uECC_sign_with_k_internal+0x5a>
        return 0;
    51ea:	2000      	movs	r0, #0
    bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s, curve->num_bytes);
#else
    uECC_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
#endif
    return 1;
}
    51ec:	b041      	add	sp, #260	; 0x104
    51ee:	bc3c      	pop	{r2, r3, r4, r5}
    51f0:	4690      	mov	r8, r2
    51f2:	4699      	mov	r9, r3
    51f4:	46a2      	mov	sl, r4
    51f6:	46ab      	mov	fp, r5
    51f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    51fa:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    51fc:	f240 7a51 	movw	sl, #1873	; 0x751
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5200:	2202      	movs	r2, #2
    5202:	5e9b      	ldrsh	r3, [r3, r2]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5204:	f2c0 0a00 	movt	sl, #0
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5208:	001a      	movs	r2, r3
    520a:	930a      	str	r3, [sp, #40]	; 0x28
    520c:	231f      	movs	r3, #31
    520e:	321f      	adds	r2, #31
    5210:	17d1      	asrs	r1, r2, #31
    5212:	400b      	ands	r3, r1
    5214:	189b      	adds	r3, r3, r2
    5216:	466a      	mov	r2, sp
    5218:	115b      	asrs	r3, r3, #5
    521a:	7313      	strb	r3, [r2, #12]
    521c:	4698      	mov	r8, r3
    521e:	7b13      	ldrb	r3, [r2, #12]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5220:	0032      	movs	r2, r6
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5222:	b25b      	sxtb	r3, r3
    5224:	001c      	movs	r4, r3
    5226:	9309      	str	r3, [sp, #36]	; 0x24
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    5228:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    522a:	3324      	adds	r3, #36	; 0x24
    522c:	0019      	movs	r1, r3
    522e:	9308      	str	r3, [sp, #32]
    uECC_word_t neg = !!uECC_vli_sub(tmp, left, right, num_words);
    5230:	ab30      	add	r3, sp, #192	; 0xc0
    5232:	0018      	movs	r0, r3
    5234:	9303      	str	r3, [sp, #12]
    5236:	0023      	movs	r3, r4
    5238:	47d0      	blx	sl
    523a:	1e42      	subs	r2, r0, #1
    523c:	4190      	sbcs	r0, r2
    523e:	b2c2      	uxtb	r2, r0
    for (i = 0; i < num_words; ++i) {
    5240:	2c00      	cmp	r4, #0
    5242:	dc00      	bgt.n	5246 <uECC_sign_with_k_internal+0xa6>
    5244:	e1fe      	b.n	5644 <uECC_sign_with_k_internal+0x4a4>
    5246:	2301      	movs	r3, #1
    5248:	4669      	mov	r1, sp
    524a:	425b      	negs	r3, r3
    524c:	4443      	add	r3, r8
    524e:	740b      	strb	r3, [r1, #16]
    5250:	7c08      	ldrb	r0, [r1, #16]
    5252:	2300      	movs	r3, #0
    5254:	2100      	movs	r1, #0
    5256:	3001      	adds	r0, #1
    5258:	002c      	movs	r4, r5
    525a:	9d03      	ldr	r5, [sp, #12]
    525c:	0080      	lsls	r0, r0, #2
        bits |= vli[i];
    525e:	586f      	ldr	r7, [r5, r1]
    5260:	3104      	adds	r1, #4
    5262:	433b      	orrs	r3, r7
    for (i = 0; i < num_words; ++i) {
    5264:	4281      	cmp	r1, r0
    5266:	d1fa      	bne.n	525e <uECC_sign_with_k_internal+0xbe>
    5268:	1e59      	subs	r1, r3, #1
    526a:	418b      	sbcs	r3, r1
    526c:	9404      	str	r4, [sp, #16]
    526e:	b2db      	uxtb	r3, r3
    return (!equal - 2 * neg);
    5270:	0052      	lsls	r2, r2, #1
    5272:	1a9a      	subs	r2, r3, r2
    if (uECC_vli_isZero(k, num_words) || uECC_vli_cmp(curve->n, k, num_n_words) != 1) {
    5274:	b2d3      	uxtb	r3, r2
    5276:	930b      	str	r3, [sp, #44]	; 0x2c
    5278:	2b01      	cmp	r3, #1
    527a:	d1b6      	bne.n	51ea <uECC_sign_with_k_internal+0x4a>
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    527c:	f240 0a1f 	movw	sl, #31
    5280:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5282:	4657      	mov	r7, sl
    5284:	2202      	movs	r2, #2
    5286:	5e9a      	ldrsh	r2, [r3, r2]
    5288:	a810      	add	r0, sp, #64	; 0x40
    528a:	0011      	movs	r1, r2
    528c:	311f      	adds	r1, #31
    528e:	17cb      	asrs	r3, r1, #31
    5290:	403b      	ands	r3, r7
    5292:	185b      	adds	r3, r3, r1
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    5294:	2108      	movs	r1, #8
    5296:	115b      	asrs	r3, r3, #5
    5298:	b25b      	sxtb	r3, r3
    529a:	1ac9      	subs	r1, r1, r3
    529c:	00c9      	lsls	r1, r1, #3
    529e:	930c      	str	r3, [sp, #48]	; 0x30
    52a0:	920d      	str	r2, [sp, #52]	; 0x34
    52a2:	3101      	adds	r1, #1
    __asm__ volatile (
    52a4:	0033      	movs	r3, r6
    52a6:	9f08      	ldr	r7, [sp, #32]
    52a8:	2200      	movs	r2, #0
    52aa:	a404      	add	r4, pc, #16	; (adr r4, 52bc <uECC_sign_with_k_internal+0x11c>)
    52ac:	46c0      	nop			; (mov r8, r8)
    52ae:	46c0      	nop			; (mov r8, r8)
    52b0:	1909      	adds	r1, r1, r4
    52b2:	cb10      	ldmia	r3!, {r4}
    52b4:	cf20      	ldmia	r7!, {r5}
    52b6:	1964      	adds	r4, r4, r5
    52b8:	c010      	stmia	r0!, {r4}
    52ba:	4708      	bx	r1
    52bc:	cb10      	ldmia	r3!, {r4}
    52be:	cf20      	ldmia	r7!, {r5}
    52c0:	416c      	adcs	r4, r5
    52c2:	c010      	stmia	r0!, {r4}
    52c4:	cb10      	ldmia	r3!, {r4}
    52c6:	cf20      	ldmia	r7!, {r5}
    52c8:	416c      	adcs	r4, r5
    52ca:	c010      	stmia	r0!, {r4}
    52cc:	cb10      	ldmia	r3!, {r4}
    52ce:	cf20      	ldmia	r7!, {r5}
    52d0:	416c      	adcs	r4, r5
    52d2:	c010      	stmia	r0!, {r4}
    52d4:	cb10      	ldmia	r3!, {r4}
    52d6:	cf20      	ldmia	r7!, {r5}
    52d8:	416c      	adcs	r4, r5
    52da:	c010      	stmia	r0!, {r4}
    52dc:	cb10      	ldmia	r3!, {r4}
    52de:	cf20      	ldmia	r7!, {r5}
    52e0:	416c      	adcs	r4, r5
    52e2:	c010      	stmia	r0!, {r4}
    52e4:	cb10      	ldmia	r3!, {r4}
    52e6:	cf20      	ldmia	r7!, {r5}
    52e8:	416c      	adcs	r4, r5
    52ea:	c010      	stmia	r0!, {r4}
    52ec:	cb10      	ldmia	r3!, {r4}
    52ee:	cf20      	ldmia	r7!, {r5}
    52f0:	416c      	adcs	r4, r5
    52f2:	c010      	stmia	r0!, {r4}
    52f4:	4152      	adcs	r2, r2
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    52f6:	2301      	movs	r3, #1
    52f8:	001c      	movs	r4, r3
    52fa:	b9b2      	cbnz	r2, 532a <uECC_sign_with_k_internal+0x18a>
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
    52fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    52fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
        (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
    5300:	0159      	lsls	r1, r3, #5
    uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
    5302:	2300      	movs	r3, #0
    5304:	001c      	movs	r4, r3
    5306:	428a      	cmp	r2, r1
    5308:	da0f      	bge.n	532a <uECC_sign_with_k_internal+0x18a>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    530a:	4650      	mov	r0, sl
    530c:	ab40      	add	r3, sp, #256	; 0x100
    530e:	469c      	mov	ip, r3
    5310:	1151      	asrs	r1, r2, #5
    5312:	4010      	ands	r0, r2
    5314:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5316:	0089      	lsls	r1, r1, #2
    5318:	4082      	lsls	r2, r0
    531a:	4461      	add	r1, ip
    531c:	39c0      	subs	r1, #192	; 0xc0
    531e:	6809      	ldr	r1, [r1, #0]
    5320:	400a      	ands	r2, r1
    5322:	0013      	movs	r3, r2
    5324:	1e5a      	subs	r2, r3, #1
    5326:	4193      	sbcs	r3, r2
    5328:	001c      	movs	r4, r3
    uECC_vli_add(k1, k0, curve->n, num_n_words);
    532a:	f240 6af1 	movw	sl, #1777	; 0x6f1
    532e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5330:	f2c0 0a00 	movt	sl, #0
    5334:	9a08      	ldr	r2, [sp, #32]
    5336:	a910      	add	r1, sp, #64	; 0x40
    5338:	a818      	add	r0, sp, #96	; 0x60
    533a:	47d0      	blx	sl
    if (g_rng_function) {
    533c:	f240 0a00 	movw	sl, #0
    5340:	f2c2 0a00 	movt	sl, #8192	; 0x2000
    5344:	4653      	mov	r3, sl
    5346:	681b      	ldr	r3, [r3, #0]
    5348:	2b00      	cmp	r3, #0
    534a:	d100      	bne.n	534e <uECC_sign_with_k_internal+0x1ae>
    534c:	e17e      	b.n	564c <uECC_sign_with_k_internal+0x4ac>
        if (!uECC_generate_random_int(k2[carry], curve->p, num_words)) {
    534e:	2108      	movs	r1, #8
    5350:	aa0c      	add	r2, sp, #48	; 0x30
    5352:	1852      	adds	r2, r2, r1
    5354:	00a3      	lsls	r3, r4, #2
    5356:	58d3      	ldr	r3, [r2, r3]
    5358:	9a4b      	ldr	r2, [sp, #300]	; 0x12c
    535a:	001d      	movs	r5, r3
    535c:	0018      	movs	r0, r3
    535e:	f640 0365 	movw	r3, #2149	; 0x865
    5362:	1d11      	adds	r1, r2, #4
    5364:	f2c0 0300 	movt	r3, #0
    5368:	465a      	mov	r2, fp
    536a:	4798      	blx	r3
    536c:	2800      	cmp	r0, #0
    536e:	d100      	bne.n	5372 <uECC_sign_with_k_internal+0x1d2>
    5370:	e73b      	b.n	51ea <uECC_sign_with_k_internal+0x4a>
    EccPoint_mult(p, curve->G, k2[!carry], initial_Z, num_n_bits + 1, curve);
    5372:	2301      	movs	r3, #1
    5374:	0022      	movs	r2, r4
    5376:	2108      	movs	r1, #8
    5378:	f643 6b99 	movw	fp, #16025	; 0x3e99
    537c:	405a      	eors	r2, r3
    537e:	0093      	lsls	r3, r2, #2
    5380:	aa0c      	add	r2, sp, #48	; 0x30
    5382:	1852      	adds	r2, r2, r1
    5384:	58d2      	ldr	r2, [r2, r3]
    5386:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    5388:	994b      	ldr	r1, [sp, #300]	; 0x12c
    538a:	9301      	str	r3, [sp, #4]
    538c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    538e:	3144      	adds	r1, #68	; 0x44
    5390:	3301      	adds	r3, #1
    5392:	b21b      	sxth	r3, r3
    5394:	9300      	str	r3, [sp, #0]
    5396:	a820      	add	r0, sp, #128	; 0x80
    5398:	002b      	movs	r3, r5
    539a:	f2c0 0b00 	movt	fp, #0
    539e:	47d8      	blx	fp
    53a0:	2200      	movs	r2, #0
    53a2:	2300      	movs	r3, #0
    53a4:	9c04      	ldr	r4, [sp, #16]
        bits |= vli[i];
    53a6:	2050      	movs	r0, #80	; 0x50
    53a8:	a90c      	add	r1, sp, #48	; 0x30
    53aa:	1809      	adds	r1, r1, r0
    53ac:	5889      	ldr	r1, [r1, r2]
    53ae:	3204      	adds	r2, #4
    53b0:	9104      	str	r1, [sp, #16]
    53b2:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
    53b4:	42a2      	cmp	r2, r4
    53b6:	d1f6      	bne.n	53a6 <uECC_sign_with_k_internal+0x206>
    53b8:	9404      	str	r4, [sp, #16]
    if (uECC_vli_isZero(p, num_words)) {
    53ba:	2b00      	cmp	r3, #0
    53bc:	d100      	bne.n	53c0 <uECC_sign_with_k_internal+0x220>
    53be:	e714      	b.n	51ea <uECC_sign_with_k_internal+0x4a>
    if (!g_rng_function) {
    53c0:	4653      	mov	r3, sl
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	2b00      	cmp	r3, #0
    53c6:	d100      	bne.n	53ca <uECC_sign_with_k_internal+0x22a>
    53c8:	e14b      	b.n	5662 <uECC_sign_with_k_internal+0x4c2>
    } else if (!uECC_generate_random_int(tmp, curve->n, num_n_words)) {
    53ca:	f640 0365 	movw	r3, #2149	; 0x865
    53ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    53d0:	9908      	ldr	r1, [sp, #32]
    53d2:	a810      	add	r0, sp, #64	; 0x40
    53d4:	f2c0 0300 	movt	r3, #0
    53d8:	4798      	blx	r3
    53da:	2800      	cmp	r0, #0
    53dc:	d100      	bne.n	53e0 <uECC_sign_with_k_internal+0x240>
    53de:	e704      	b.n	51ea <uECC_sign_with_k_internal+0x4a>
    53e0:	2301      	movs	r3, #1
    53e2:	425b      	negs	r3, r3
    53e4:	4443      	add	r3, r8
    53e6:	469a      	mov	sl, r3
    uECC_vli_mult(product, left, right, num_words);
    53e8:	f240 74ad 	movw	r4, #1965	; 0x7ad
    uECC_vli_mmod(result, product, mod, num_words);
    53ec:	f640 1b8d 	movw	fp, #2445	; 0x98d
    uECC_vli_mult(product, left, right, num_words);
    53f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    53f2:	9f03      	ldr	r7, [sp, #12]
    53f4:	002b      	movs	r3, r5
    53f6:	aa10      	add	r2, sp, #64	; 0x40
    53f8:	0031      	movs	r1, r6
    53fa:	0038      	movs	r0, r7
    53fc:	f2c0 0400 	movt	r4, #0
    5400:	940a      	str	r4, [sp, #40]	; 0x28
    uECC_vli_mmod(result, product, mod, num_words);
    5402:	f2c0 0b00 	movt	fp, #0
    uECC_vli_mult(product, left, right, num_words);
    5406:	47a0      	blx	r4
    uECC_vli_mmod(result, product, mod, num_words);
    5408:	002b      	movs	r3, r5
    540a:	9a08      	ldr	r2, [sp, #32]
    540c:	0039      	movs	r1, r7
    540e:	0030      	movs	r0, r6
    5410:	47d8      	blx	fp
    for (i = 0; i < num_words; ++i) {
    5412:	2d00      	cmp	r5, #0
    5414:	dd21      	ble.n	545a <uECC_sign_with_k_internal+0x2ba>
    5416:	212c      	movs	r1, #44	; 0x2c
    5418:	466a      	mov	r2, sp
    541a:	4653      	mov	r3, sl
    541c:	1852      	adds	r2, r2, r1
    541e:	7013      	strb	r3, [r2, #0]
    5420:	222c      	movs	r2, #44	; 0x2c
    5422:	466b      	mov	r3, sp
    5424:	189b      	adds	r3, r3, r2
    5426:	781a      	ldrb	r2, [r3, #0]
    5428:	4649      	mov	r1, r9
    542a:	3201      	adds	r2, #1
    542c:	0092      	lsls	r2, r2, #2
    542e:	2300      	movs	r3, #0
    5430:	4694      	mov	ip, r2
    5432:	9c04      	ldr	r4, [sp, #16]
    5434:	18b0      	adds	r0, r6, r2
        bits |= vli[i];
    5436:	c904      	ldmia	r1!, {r2}
    5438:	4313      	orrs	r3, r2
    for (i = 0; i < num_words; ++i) {
    543a:	4288      	cmp	r0, r1
    543c:	d1fb      	bne.n	5436 <uECC_sign_with_k_internal+0x296>
    543e:	4662      	mov	r2, ip
    5440:	9404      	str	r4, [sp, #16]
    if (uECC_vli_isZero(input, num_words)) {
    5442:	2b00      	cmp	r3, #0
    5444:	d100      	bne.n	5448 <uECC_sign_with_k_internal+0x2a8>
    5446:	e104      	b.n	5652 <uECC_sign_with_k_internal+0x4b2>
    5448:	f643 09d1 	movw	r9, #14545	; 0x38d1
    544c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    544e:	9a08      	ldr	r2, [sp, #32]
    5450:	0031      	movs	r1, r6
    5452:	0030      	movs	r0, r6
    5454:	f2c0 0900 	movt	r9, #0
    5458:	47c8      	blx	r9
    uECC_vli_mult(product, left, right, num_words);
    545a:	9d09      	ldr	r5, [sp, #36]	; 0x24
    545c:	9f03      	ldr	r7, [sp, #12]
    545e:	002b      	movs	r3, r5
    5460:	aa10      	add	r2, sp, #64	; 0x40
    5462:	0031      	movs	r1, r6
    5464:	0038      	movs	r0, r7
    5466:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5468:	47a0      	blx	r4
    uECC_vli_mmod(result, product, mod, num_words);
    546a:	002b      	movs	r3, r5
    546c:	9a08      	ldr	r2, [sp, #32]
    546e:	0039      	movs	r1, r7
    5470:	0030      	movs	r0, r6
    5472:	47d8      	blx	fp
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    5474:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    for (i = 0; i < num_bytes; ++i) {
    5476:	2200      	movs	r2, #0
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    5478:	785b      	ldrb	r3, [r3, #1]
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    547a:	2103      	movs	r1, #3
    uECC_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
    547c:	b25b      	sxtb	r3, r3
    547e:	469c      	mov	ip, r3
    5480:	2301      	movs	r3, #1
    5482:	425b      	negs	r3, r3
    5484:	4463      	add	r3, ip
    5486:	4699      	mov	r9, r3
    for (i = 0; i < num_bytes; ++i) {
    5488:	4663      	mov	r3, ip
    548a:	2b00      	cmp	r3, #0
    548c:	dd16      	ble.n	54bc <uECC_sign_with_k_internal+0x31c>
    548e:	9b04      	ldr	r3, [sp, #16]
    5490:	4665      	mov	r5, ip
    5492:	46b0      	mov	r8, r6
    5494:	469c      	mov	ip, r3
    5496:	464e      	mov	r6, r9
    5498:	1ab3      	subs	r3, r6, r2
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    549a:	0018      	movs	r0, r3
    549c:	2450      	movs	r4, #80	; 0x50
    549e:	af0c      	add	r7, sp, #48	; 0x30
    54a0:	4388      	bics	r0, r1
    54a2:	193f      	adds	r7, r7, r4
    54a4:	400b      	ands	r3, r1
    54a6:	5838      	ldr	r0, [r7, r0]
    54a8:	00db      	lsls	r3, r3, #3
    54aa:	40d8      	lsrs	r0, r3
    54ac:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    54ae:	5498      	strb	r0, [r3, r2]
    for (i = 0; i < num_bytes; ++i) {
    54b0:	3201      	adds	r2, #1
    54b2:	4295      	cmp	r5, r2
    54b4:	dcf0      	bgt.n	5498 <uECC_sign_with_k_internal+0x2f8>
    54b6:	4663      	mov	r3, ip
    54b8:	4646      	mov	r6, r8
    54ba:	9304      	str	r3, [sp, #16]
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
    54bc:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    54be:	2202      	movs	r2, #2
    54c0:	5e9a      	ldrsh	r2, [r3, r2]
    54c2:	2307      	movs	r3, #7
    54c4:	3207      	adds	r2, #7
    54c6:	17d1      	asrs	r1, r2, #31
    54c8:	400b      	ands	r3, r1
    54ca:	189b      	adds	r3, r3, r2
    54cc:	10db      	asrs	r3, r3, #3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    54ce:	1cda      	adds	r2, r3, #3
    uECC_vli_bytesToNative(tmp, private_key, BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
    54d0:	4699      	mov	r9, r3
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    54d2:	2303      	movs	r3, #3
    54d4:	17d1      	asrs	r1, r2, #31
    54d6:	400b      	ands	r3, r1
    54d8:	189b      	adds	r3, r3, r2
    54da:	109b      	asrs	r3, r3, #2
    for (i = 0; i < num_words; ++i) {
    54dc:	b25a      	sxtb	r2, r3
    54de:	2a00      	cmp	r2, #0
    54e0:	dd0a      	ble.n	54f8 <uECC_sign_with_k_internal+0x358>
        vli[i] = 0;
    54e2:	1e5a      	subs	r2, r3, #1
    54e4:	f246 6367 	movw	r3, #26215	; 0x6667
    54e8:	b2d2      	uxtb	r2, r2
    54ea:	3201      	adds	r2, #1
    54ec:	0092      	lsls	r2, r2, #2
    54ee:	2100      	movs	r1, #0
    54f0:	a810      	add	r0, sp, #64	; 0x40
    54f2:	f2c0 0300 	movt	r3, #0
    54f6:	4798      	blx	r3
    54f8:	464b      	mov	r3, r9
    54fa:	1e5a      	subs	r2, r3, #1
    54fc:	9b05      	ldr	r3, [sp, #20]
        native[b / uECC_WORD_SIZE] |=
    54fe:	f240 0c03 	movw	ip, #3
    5502:	4698      	mov	r8, r3
    for (i = 0; i < num_bytes; ++i) {
    5504:	464b      	mov	r3, r9
    5506:	2b00      	cmp	r3, #0
    5508:	dd15      	ble.n	5536 <uECC_sign_with_k_internal+0x396>
    550a:	9b04      	ldr	r3, [sp, #16]
    550c:	4640      	mov	r0, r8
    550e:	4698      	mov	r8, r3
        native[b / uECC_WORD_SIZE] |=
    5510:	4661      	mov	r1, ip
    5512:	0013      	movs	r3, r2
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5514:	4664      	mov	r4, ip
        native[b / uECC_WORD_SIZE] |=
    5516:	438b      	bics	r3, r1
    5518:	a910      	add	r1, sp, #64	; 0x40
    551a:	4689      	mov	r9, r1
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    551c:	4014      	ands	r4, r2
    551e:	7801      	ldrb	r1, [r0, #0]
    5520:	00e4      	lsls	r4, r4, #3
    5522:	40a1      	lsls	r1, r4
        native[b / uECC_WORD_SIZE] |=
    5524:	444b      	add	r3, r9
    5526:	681c      	ldr	r4, [r3, #0]
    5528:	3001      	adds	r0, #1
    552a:	4321      	orrs	r1, r4
    552c:	6019      	str	r1, [r3, #0]
    for (i = 0; i < num_bytes; ++i) {
    552e:	3a01      	subs	r2, #1
    5530:	d2ee      	bcs.n	5510 <uECC_sign_with_k_internal+0x370>
    5532:	4643      	mov	r3, r8
    5534:	9304      	str	r3, [sp, #16]
    s[num_n_words - 1] = 0;
    5536:	9c09      	ldr	r4, [sp, #36]	; 0x24
    5538:	2030      	movs	r0, #48	; 0x30
    553a:	0023      	movs	r3, r4
    553c:	2200      	movs	r2, #0
    553e:	3b01      	subs	r3, #1
    5540:	a90c      	add	r1, sp, #48	; 0x30
    5542:	1809      	adds	r1, r1, r0
    5544:	009b      	lsls	r3, r3, #2
    5546:	50ca      	str	r2, [r1, r3]
    5548:	f246 6331 	movw	r3, #26161	; 0x6631
    554c:	9a04      	ldr	r2, [sp, #16]
    554e:	a920      	add	r1, sp, #128	; 0x80
    5550:	f2c0 0300 	movt	r3, #0
    5554:	a818      	add	r0, sp, #96	; 0x60
    5556:	4798      	blx	r3
    uECC_vli_mult(product, left, right, num_words);
    5558:	0023      	movs	r3, r4
    555a:	aa18      	add	r2, sp, #96	; 0x60
    555c:	a910      	add	r1, sp, #64	; 0x40
    555e:	9803      	ldr	r0, [sp, #12]
    5560:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5562:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    5564:	0025      	movs	r5, r4
    5566:	0023      	movs	r3, r4
    bits2int(tmp, message_hash, hash_size, curve);
    5568:	f641 040d 	movw	r4, #6157	; 0x180d
    uECC_vli_mmod(result, product, mod, num_words);
    556c:	9a08      	ldr	r2, [sp, #32]
    556e:	9903      	ldr	r1, [sp, #12]
    5570:	a818      	add	r0, sp, #96	; 0x60
    5572:	4690      	mov	r8, r2
    bits2int(tmp, message_hash, hash_size, curve);
    5574:	f2c0 0400 	movt	r4, #0
    uECC_vli_mmod(result, product, mod, num_words);
    5578:	47d8      	blx	fp
    bits2int(tmp, message_hash, hash_size, curve);
    557a:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    557c:	9a07      	ldr	r2, [sp, #28]
    557e:	9906      	ldr	r1, [sp, #24]
    5580:	a810      	add	r0, sp, #64	; 0x40
    5582:	47a0      	blx	r4
    uECC_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
    5584:	f641 14d1 	movw	r4, #6609	; 0x19d1
    5588:	aa18      	add	r2, sp, #96	; 0x60
    558a:	0010      	movs	r0, r2
    558c:	4643      	mov	r3, r8
    558e:	a910      	add	r1, sp, #64	; 0x40
    5590:	f2c0 0400 	movt	r4, #0
    5594:	9500      	str	r5, [sp, #0]
    5596:	47a0      	blx	r4
    uECC_vli_mult(product, left, right, num_words);
    5598:	002c      	movs	r4, r5
    559a:	0032      	movs	r2, r6
    559c:	9e03      	ldr	r6, [sp, #12]
    559e:	002b      	movs	r3, r5
    55a0:	a918      	add	r1, sp, #96	; 0x60
    55a2:	0030      	movs	r0, r6
    55a4:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    55a6:	0023      	movs	r3, r4
    55a8:	4642      	mov	r2, r8
    55aa:	0031      	movs	r1, r6
    55ac:	a818      	add	r0, sp, #96	; 0x60
    55ae:	47d8      	blx	fp
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    55b0:	4653      	mov	r3, sl
    55b2:	466a      	mov	r2, sp
    55b4:	7313      	strb	r3, [r2, #12]
    55b6:	7b13      	ldrb	r3, [r2, #12]
    55b8:	b25b      	sxtb	r3, r3
    55ba:	2b00      	cmp	r3, #0
    55bc:	da04      	bge.n	55c8 <uECC_sign_with_k_internal+0x428>
    55be:	e00b      	b.n	55d8 <uECC_sign_with_k_internal+0x438>
    55c0:	3b01      	subs	r3, #1
    55c2:	b25b      	sxtb	r3, r3
    55c4:	1c5a      	adds	r2, r3, #1
    55c6:	d03f      	beq.n	5648 <uECC_sign_with_k_internal+0x4a8>
    55c8:	a940      	add	r1, sp, #256	; 0x100
    55ca:	468c      	mov	ip, r1
    55cc:	009a      	lsls	r2, r3, #2
    55ce:	4462      	add	r2, ip
    55d0:	3aa0      	subs	r2, #160	; 0xa0
    55d2:	6812      	ldr	r2, [r2, #0]
    55d4:	2a00      	cmp	r2, #0
    55d6:	d0f3      	beq.n	55c0 <uECC_sign_with_k_internal+0x420>
    return (i + 1);
    55d8:	3301      	adds	r3, #1
    55da:	b25b      	sxtb	r3, r3
    if (num_digits == 0) {
    55dc:	2100      	movs	r1, #0
    55de:	b193      	cbz	r3, 5606 <uECC_sign_with_k_internal+0x466>
    digit = vli[num_digits - 1];
    55e0:	a940      	add	r1, sp, #256	; 0x100
    55e2:	468c      	mov	ip, r1
    55e4:	4a2f      	ldr	r2, [pc, #188]	; (56a4 <uECC_sign_with_k_internal+0x504>)
    for (i = 0; digit; ++i) {
    55e6:	2100      	movs	r1, #0
    digit = vli[num_digits - 1];
    55e8:	189a      	adds	r2, r3, r2
    55ea:	0092      	lsls	r2, r2, #2
    55ec:	4462      	add	r2, ip
    55ee:	3aa0      	subs	r2, #160	; 0xa0
    55f0:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    55f2:	b122      	cbz	r2, 55fe <uECC_sign_with_k_internal+0x45e>
        digit >>= 1;
    55f4:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    55f6:	3101      	adds	r1, #1
    55f8:	2a00      	cmp	r2, #0
    55fa:	d1fb      	bne.n	55f4 <uECC_sign_with_k_internal+0x454>
    55fc:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    55fe:	3b01      	subs	r3, #1
    5600:	015b      	lsls	r3, r3, #5
    5602:	18c9      	adds	r1, r1, r3
    5604:	b209      	sxth	r1, r1
    if (uECC_vli_numBits(s, num_n_words) > (bitcount_t)curve->num_bytes * 8) {
    5606:	2401      	movs	r4, #1
    5608:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    560a:	571c      	ldrsb	r4, [r3, r4]
    560c:	00e3      	lsls	r3, r4, #3
    560e:	428b      	cmp	r3, r1
    5610:	da00      	bge.n	5614 <uECC_sign_with_k_internal+0x474>
    5612:	e5ea      	b.n	51ea <uECC_sign_with_k_internal+0x4a>
    for (i = 0; i < num_bytes; ++i) {
    5614:	2c00      	cmp	r4, #0
    5616:	dd13      	ble.n	5640 <uECC_sign_with_k_internal+0x4a0>
    5618:	2200      	movs	r2, #0
        bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
    561a:	2003      	movs	r0, #3
    561c:	46a4      	mov	ip, r4
    561e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    5620:	1e66      	subs	r6, r4, #1
    5622:	191d      	adds	r5, r3, r4
    5624:	1ab3      	subs	r3, r6, r2
    5626:	0019      	movs	r1, r3
    5628:	2430      	movs	r4, #48	; 0x30
    562a:	af0c      	add	r7, sp, #48	; 0x30
    562c:	4381      	bics	r1, r0
    562e:	193f      	adds	r7, r7, r4
    5630:	4003      	ands	r3, r0
    5632:	5879      	ldr	r1, [r7, r1]
    5634:	00db      	lsls	r3, r3, #3
    5636:	40d9      	lsrs	r1, r3
    5638:	54a9      	strb	r1, [r5, r2]
    for (i = 0; i < num_bytes; ++i) {
    563a:	3201      	adds	r2, #1
    563c:	4594      	cmp	ip, r2
    563e:	dcf1      	bgt.n	5624 <uECC_sign_with_k_internal+0x484>
    return 1;
    5640:	2001      	movs	r0, #1
    5642:	e5d3      	b.n	51ec <uECC_sign_with_k_internal+0x4c>
    for (i = 0; i < num_words; ++i) {
    5644:	2300      	movs	r3, #0
    5646:	e613      	b.n	5270 <uECC_sign_with_k_internal+0xd0>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5648:	2100      	movs	r1, #0
    564a:	e7dc      	b.n	5606 <uECC_sign_with_k_internal+0x466>
    uECC_word_t *initial_Z = 0;
    564c:	2300      	movs	r3, #0
    564e:	001d      	movs	r5, r3
    5650:	e68f      	b.n	5372 <uECC_sign_with_k_internal+0x1d2>
    5652:	f246 6367 	movw	r3, #26215	; 0x6667
    5656:	2100      	movs	r1, #0
    5658:	0030      	movs	r0, r6
    565a:	f2c0 0300 	movt	r3, #0
    565e:	4798      	blx	r3
    5660:	e6fb      	b.n	545a <uECC_sign_with_k_internal+0x2ba>
    for (i = 0; i < num_words; ++i) {
    5662:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5664:	2b00      	cmp	r3, #0
    5666:	dd17      	ble.n	5698 <uECC_sign_with_k_internal+0x4f8>
        vli[i] = 0;
    5668:	2301      	movs	r3, #1
    566a:	2128      	movs	r1, #40	; 0x28
    566c:	466a      	mov	r2, sp
    566e:	425b      	negs	r3, r3
    5670:	4443      	add	r3, r8
    5672:	1852      	adds	r2, r2, r1
    5674:	7013      	strb	r3, [r2, #0]
    5676:	469a      	mov	sl, r3
    5678:	2228      	movs	r2, #40	; 0x28
    567a:	466b      	mov	r3, sp
    567c:	189b      	adds	r3, r3, r2
    567e:	781a      	ldrb	r2, [r3, #0]
    5680:	f246 6367 	movw	r3, #26215	; 0x6667
    5684:	3201      	adds	r2, #1
    5686:	0092      	lsls	r2, r2, #2
    5688:	2100      	movs	r1, #0
    568a:	a810      	add	r0, sp, #64	; 0x40
    568c:	f2c0 0300 	movt	r3, #0
    5690:	4798      	blx	r3
        tmp[0] = 1;
    5692:	2301      	movs	r3, #1
    5694:	9310      	str	r3, [sp, #64]	; 0x40
    5696:	e6a7      	b.n	53e8 <uECC_sign_with_k_internal+0x248>
    5698:	2301      	movs	r3, #1
    569a:	425b      	negs	r3, r3
    569c:	4443      	add	r3, r8
    569e:	469a      	mov	sl, r3
    56a0:	e7f7      	b.n	5692 <uECC_sign_with_k_internal+0x4f2>
    56a2:	46c0      	nop			; (mov r8, r8)
    56a4:	3fffffff 	.word	0x3fffffff
	...

000056b0 <double_jacobian_default>:
                                    uECC_Curve curve) {
    56b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56b2:	464e      	mov	r6, r9
    56b4:	4657      	mov	r7, sl
    56b6:	4645      	mov	r5, r8
    56b8:	46de      	mov	lr, fp
    56ba:	b5e0      	push	{r5, r6, r7, lr}
    56bc:	001f      	movs	r7, r3
    wordcount_t num_words = curve->num_words;
    56be:	781b      	ldrb	r3, [r3, #0]
                                    uECC_Curve curve) {
    56c0:	b0a9      	sub	sp, #164	; 0xa4
    wordcount_t num_words = curve->num_words;
    56c2:	b25b      	sxtb	r3, r3
                                    uECC_Curve curve) {
    56c4:	0006      	movs	r6, r0
    56c6:	4689      	mov	r9, r1
    56c8:	0014      	movs	r4, r2
    wordcount_t num_words = curve->num_words;
    56ca:	4698      	mov	r8, r3
    for (i = 0; i < num_words; ++i) {
    56cc:	2b00      	cmp	r3, #0
    56ce:	dd10      	ble.n	56f2 <double_jacobian_default+0x42>
    56d0:	0013      	movs	r3, r2
    56d2:	4642      	mov	r2, r8
    56d4:	1e55      	subs	r5, r2, #1
    56d6:	b2ed      	uxtb	r5, r5
    56d8:	3501      	adds	r5, #1
    56da:	00aa      	lsls	r2, r5, #2
    56dc:	0015      	movs	r5, r2
    56de:	18a0      	adds	r0, r4, r2
    56e0:	2200      	movs	r2, #0
        bits |= vli[i];
    56e2:	cb02      	ldmia	r3!, {r1}
    56e4:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    56e6:	4298      	cmp	r0, r3
    56e8:	d1fb      	bne.n	56e2 <double_jacobian_default+0x32>
    56ea:	9504      	str	r5, [sp, #16]
    56ec:	9602      	str	r6, [sp, #8]
    56ee:	9703      	str	r7, [sp, #12]
    if (uECC_vli_isZero(Z1, num_words)) {
    56f0:	b932      	cbnz	r2, 5700 <double_jacobian_default+0x50>
}
    56f2:	b029      	add	sp, #164	; 0xa4
    56f4:	bc3c      	pop	{r2, r3, r4, r5}
    56f6:	4690      	mov	r8, r2
    56f8:	4699      	mov	r9, r3
    56fa:	46a2      	mov	sl, r4
    56fc:	46ab      	mov	fp, r5
    56fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uECC_vli_mult(product, left, right, curve->num_words);
    5700:	f240 7bad 	movw	fp, #1965	; 0x7ad
    5704:	464a      	mov	r2, r9
    5706:	f2c0 0b00 	movt	fp, #0
    570a:	4643      	mov	r3, r8
    570c:	4649      	mov	r1, r9
    570e:	a818      	add	r0, sp, #96	; 0x60
    5710:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5712:	23b0      	movs	r3, #176	; 0xb0
    5714:	9f03      	ldr	r7, [sp, #12]
    5716:	a918      	add	r1, sp, #96	; 0x60
    5718:	58fb      	ldr	r3, [r7, r3]
    571a:	a808      	add	r0, sp, #32
    571c:	9305      	str	r3, [sp, #20]
    571e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5720:	2300      	movs	r3, #0
    5722:	9d02      	ldr	r5, [sp, #8]
    5724:	56fb      	ldrsb	r3, [r7, r3]
    5726:	aa08      	add	r2, sp, #32
    5728:	0029      	movs	r1, r5
    572a:	a818      	add	r0, sp, #96	; 0x60
    572c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    572e:	23b0      	movs	r3, #176	; 0xb0
    5730:	58fb      	ldr	r3, [r7, r3]
    5732:	a918      	add	r1, sp, #96	; 0x60
    5734:	a810      	add	r0, sp, #64	; 0x40
    5736:	9302      	str	r3, [sp, #8]
    5738:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    573a:	2300      	movs	r3, #0
    573c:	aa08      	add	r2, sp, #32
    573e:	0011      	movs	r1, r2
    5740:	56fb      	ldrsb	r3, [r7, r3]
    5742:	a818      	add	r0, sp, #96	; 0x60
    5744:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5746:	23b0      	movs	r3, #176	; 0xb0
    5748:	58fb      	ldr	r3, [r7, r3]
    574a:	a918      	add	r1, sp, #96	; 0x60
    574c:	a808      	add	r0, sp, #32
    574e:	9302      	str	r3, [sp, #8]
    5750:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5752:	2300      	movs	r3, #0
    5754:	0022      	movs	r2, r4
    5756:	56fb      	ldrsb	r3, [r7, r3]
    5758:	4649      	mov	r1, r9
    575a:	a818      	add	r0, sp, #96	; 0x60
    575c:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    575e:	23b0      	movs	r3, #176	; 0xb0
    5760:	58fb      	ldr	r3, [r7, r3]
    5762:	a918      	add	r1, sp, #96	; 0x60
    5764:	4648      	mov	r0, r9
    5766:	9302      	str	r3, [sp, #8]
    5768:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    576a:	2300      	movs	r3, #0
    576c:	0022      	movs	r2, r4
    576e:	56fb      	ldrsb	r3, [r7, r3]
    5770:	0021      	movs	r1, r4
    5772:	a818      	add	r0, sp, #96	; 0x60
    5774:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5776:	23b0      	movs	r3, #176	; 0xb0
    5778:	58fb      	ldr	r3, [r7, r3]
    577a:	a918      	add	r1, sp, #96	; 0x60
    577c:	0020      	movs	r0, r4
    577e:	9302      	str	r3, [sp, #8]
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
    5780:	f641 1ad1 	movw	sl, #6609	; 0x19d1
    5784:	4798      	blx	r3
    5786:	003b      	movs	r3, r7
    5788:	4642      	mov	r2, r8
    578a:	3304      	adds	r3, #4
    578c:	f2c0 0a00 	movt	sl, #0
    5790:	0029      	movs	r1, r5
    5792:	0028      	movs	r0, r5
    5794:	9200      	str	r2, [sp, #0]
    5796:	0022      	movs	r2, r4
    5798:	001e      	movs	r6, r3
    579a:	9305      	str	r3, [sp, #20]
    579c:	47d0      	blx	sl
    uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
    579e:	4642      	mov	r2, r8
    57a0:	0033      	movs	r3, r6
    57a2:	9200      	str	r2, [sp, #0]
    57a4:	0021      	movs	r1, r4
    57a6:	0022      	movs	r2, r4
    57a8:	0020      	movs	r0, r4
    57aa:	47d0      	blx	sl
    uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
    57ac:	0029      	movs	r1, r5
    57ae:	4642      	mov	r2, r8
    57b0:	9502      	str	r5, [sp, #8]
    57b2:	f641 1551 	movw	r5, #6481	; 0x1951
    57b6:	9200      	str	r2, [sp, #0]
    57b8:	f2c0 0500 	movt	r5, #0
    57bc:	0033      	movs	r3, r6
    57be:	0022      	movs	r2, r4
    57c0:	0020      	movs	r0, r4
    57c2:	9506      	str	r5, [sp, #24]
    57c4:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    57c6:	783b      	ldrb	r3, [r7, #0]
    57c8:	003d      	movs	r5, r7
    57ca:	9f02      	ldr	r7, [sp, #8]
    57cc:	b25b      	sxtb	r3, r3
    57ce:	0022      	movs	r2, r4
    57d0:	0039      	movs	r1, r7
    57d2:	a818      	add	r0, sp, #96	; 0x60
    57d4:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    57d6:	22b0      	movs	r2, #176	; 0xb0
    57d8:	a918      	add	r1, sp, #96	; 0x60
    57da:	58ab      	ldr	r3, [r5, r2]
    57dc:	0038      	movs	r0, r7
    57de:	4798      	blx	r3
    uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
    57e0:	4642      	mov	r2, r8
    57e2:	0033      	movs	r3, r6
    57e4:	9200      	str	r2, [sp, #0]
    57e6:	0039      	movs	r1, r7
    57e8:	003a      	movs	r2, r7
    57ea:	0020      	movs	r0, r4
    57ec:	47d0      	blx	sl
    uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
    57ee:	4642      	mov	r2, r8
    57f0:	0033      	movs	r3, r6
    57f2:	9200      	str	r2, [sp, #0]
    57f4:	0039      	movs	r1, r7
    57f6:	0022      	movs	r2, r4
    57f8:	0038      	movs	r0, r7
    57fa:	47d0      	blx	sl
    if (uECC_vli_testBit(X1, 0)) {
    57fc:	683b      	ldr	r3, [r7, #0]
    57fe:	07db      	lsls	r3, r3, #31
    5800:	d474      	bmi.n	58ec <double_jacobian_default+0x23c>
    vli += num_words;
    5802:	9902      	ldr	r1, [sp, #8]
    5804:	4643      	mov	r3, r8
    5806:	468c      	mov	ip, r1
    5808:	009b      	lsls	r3, r3, #2
    580a:	4463      	add	r3, ip
    while (vli-- > end) {
    580c:	1f1a      	subs	r2, r3, #4
    580e:	4299      	cmp	r1, r3
    5810:	d218      	bcs.n	5844 <double_jacobian_default+0x194>
    5812:	1a50      	subs	r0, r2, r1
    5814:	3003      	adds	r0, #3
    5816:	0880      	lsrs	r0, r0, #2
    5818:	0080      	lsls	r0, r0, #2
    581a:	1a18      	subs	r0, r3, r0
    581c:	2300      	movs	r3, #0
    581e:	3808      	subs	r0, #8
    5820:	46a4      	mov	ip, r4
    5822:	000e      	movs	r6, r1
    5824:	0004      	movs	r4, r0
    5826:	0018      	movs	r0, r3
    5828:	9d04      	ldr	r5, [sp, #16]
    582a:	9f03      	ldr	r7, [sp, #12]
        uECC_word_t temp = *vli;
    582c:	6811      	ldr	r1, [r2, #0]
    while (vli-- > end) {
    582e:	3a04      	subs	r2, #4
        *vli = (temp >> 1) | carry;
    5830:	084b      	lsrs	r3, r1, #1
    5832:	4303      	orrs	r3, r0
    5834:	6053      	str	r3, [r2, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    5836:	07c8      	lsls	r0, r1, #31
    while (vli-- > end) {
    5838:	42a2      	cmp	r2, r4
    583a:	d1f7      	bne.n	582c <double_jacobian_default+0x17c>
    583c:	4664      	mov	r4, ip
    583e:	9504      	str	r5, [sp, #16]
    5840:	9602      	str	r6, [sp, #8]
    5842:	9703      	str	r7, [sp, #12]
    curve->mmod_fast(result, product);
    5844:	f240 0ab0 	movw	sl, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    5848:	9d03      	ldr	r5, [sp, #12]
    584a:	9e02      	ldr	r6, [sp, #8]
    584c:	782b      	ldrb	r3, [r5, #0]
    584e:	0032      	movs	r2, r6
    5850:	0031      	movs	r1, r6
    5852:	b25b      	sxtb	r3, r3
    5854:	a818      	add	r0, sp, #96	; 0x60
    5856:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    5858:	4653      	mov	r3, sl
    585a:	a918      	add	r1, sp, #96	; 0x60
    585c:	58eb      	ldr	r3, [r5, r3]
    585e:	0020      	movs	r0, r4
    5860:	9503      	str	r5, [sp, #12]
    5862:	4798      	blx	r3
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
    5864:	4643      	mov	r3, r8
    5866:	9e05      	ldr	r6, [sp, #20]
    5868:	9f06      	ldr	r7, [sp, #24]
    586a:	9300      	str	r3, [sp, #0]
    586c:	aa10      	add	r2, sp, #64	; 0x40
    586e:	0033      	movs	r3, r6
    5870:	0021      	movs	r1, r4
    5872:	0020      	movs	r0, r4
    5874:	47b8      	blx	r7
    uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
    5876:	4643      	mov	r3, r8
    5878:	aa10      	add	r2, sp, #64	; 0x40
    587a:	9300      	str	r3, [sp, #0]
    587c:	0021      	movs	r1, r4
    587e:	0033      	movs	r3, r6
    5880:	0020      	movs	r0, r4
    5882:	47b8      	blx	r7
    uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
    5884:	4643      	mov	r3, r8
    5886:	a910      	add	r1, sp, #64	; 0x40
    5888:	0008      	movs	r0, r1
    588a:	9300      	str	r3, [sp, #0]
    588c:	0022      	movs	r2, r4
    588e:	0033      	movs	r3, r6
    5890:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, curve->num_words);
    5892:	9d03      	ldr	r5, [sp, #12]
    5894:	aa10      	add	r2, sp, #64	; 0x40
    5896:	782b      	ldrb	r3, [r5, #0]
    5898:	9902      	ldr	r1, [sp, #8]
    589a:	b25b      	sxtb	r3, r3
    589c:	a818      	add	r0, sp, #96	; 0x60
    589e:	47d8      	blx	fp
    curve->mmod_fast(result, product);
    58a0:	4652      	mov	r2, sl
    58a2:	58ab      	ldr	r3, [r5, r2]
    58a4:	9d02      	ldr	r5, [sp, #8]
    58a6:	a918      	add	r1, sp, #96	; 0x60
    58a8:	0028      	movs	r0, r5
    58aa:	4798      	blx	r3
    uECC_vli_modSub(t4, X1, t4, curve->p, num_words); /* t4 = B * (A - x3) - y1^4 = y3 */
    58ac:	4642      	mov	r2, r8
    58ae:	9200      	str	r2, [sp, #0]
    58b0:	aa08      	add	r2, sp, #32
    58b2:	0033      	movs	r3, r6
    58b4:	0029      	movs	r1, r5
    58b6:	0010      	movs	r0, r2
    58b8:	47b8      	blx	r7
    58ba:	2300      	movs	r3, #0
    58bc:	002e      	movs	r6, r5
    58be:	9d04      	ldr	r5, [sp, #16]
        dest[i] = src[i];
    58c0:	58e2      	ldr	r2, [r4, r3]
    58c2:	50f2      	str	r2, [r6, r3]
    58c4:	3304      	adds	r3, #4
    for (i = 0; i < num_words; ++i) {
    58c6:	42ab      	cmp	r3, r5
    58c8:	d1fa      	bne.n	58c0 <double_jacobian_default+0x210>
    58ca:	2300      	movs	r3, #0
    58cc:	464a      	mov	r2, r9
        dest[i] = src[i];
    58ce:	58d1      	ldr	r1, [r2, r3]
    58d0:	50e1      	str	r1, [r4, r3]
    58d2:	3304      	adds	r3, #4
    for (i = 0; i < num_words; ++i) {
    58d4:	429d      	cmp	r5, r3
    58d6:	d1fa      	bne.n	58ce <double_jacobian_default+0x21e>
    58d8:	4691      	mov	r9, r2
    58da:	f246 6331 	movw	r3, #26161	; 0x6631
    58de:	002a      	movs	r2, r5
    58e0:	a908      	add	r1, sp, #32
    58e2:	4648      	mov	r0, r9
    58e4:	f2c0 0300 	movt	r3, #0
    58e8:	4798      	blx	r3
    58ea:	e702      	b.n	56f2 <double_jacobian_default+0x42>
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    58ec:	4642      	mov	r2, r8
    58ee:	2308      	movs	r3, #8
    58f0:	1a9b      	subs	r3, r3, r2
    __asm__ volatile (
    58f2:	9a02      	ldr	r2, [sp, #8]
    uint32_t jump = (uECC_MAX_WORDS - num_words) * 4 * 2 + 1;
    58f4:	00db      	lsls	r3, r3, #3
    58f6:	3301      	adds	r3, #1
    __asm__ volatile (
    58f8:	4694      	mov	ip, r2
    58fa:	9905      	ldr	r1, [sp, #20]
    58fc:	0010      	movs	r0, r2
    58fe:	2500      	movs	r5, #0
    5900:	a606      	add	r6, pc, #24	; (adr r6, 591c <double_jacobian_default+0x26c>)
    5902:	46c0      	nop			; (mov r8, r8)
    5904:	46c0      	nop			; (mov r8, r8)
    5906:	46c0      	nop			; (mov r8, r8)
    5908:	46c0      	nop			; (mov r8, r8)
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	46c0      	nop			; (mov r8, r8)
    590e:	46c0      	nop			; (mov r8, r8)
    5910:	199b      	adds	r3, r3, r6
    5912:	c840      	ldmia	r0!, {r6}
    5914:	c980      	ldmia	r1!, {r7}
    5916:	19f6      	adds	r6, r6, r7
    5918:	c240      	stmia	r2!, {r6}
    591a:	4718      	bx	r3
    591c:	c840      	ldmia	r0!, {r6}
    591e:	c980      	ldmia	r1!, {r7}
    5920:	417e      	adcs	r6, r7
    5922:	c240      	stmia	r2!, {r6}
    5924:	c840      	ldmia	r0!, {r6}
    5926:	c980      	ldmia	r1!, {r7}
    5928:	417e      	adcs	r6, r7
    592a:	c240      	stmia	r2!, {r6}
    592c:	c840      	ldmia	r0!, {r6}
    592e:	c980      	ldmia	r1!, {r7}
    5930:	417e      	adcs	r6, r7
    5932:	c240      	stmia	r2!, {r6}
    5934:	c840      	ldmia	r0!, {r6}
    5936:	c980      	ldmia	r1!, {r7}
    5938:	417e      	adcs	r6, r7
    593a:	c240      	stmia	r2!, {r6}
    593c:	c840      	ldmia	r0!, {r6}
    593e:	c980      	ldmia	r1!, {r7}
    5940:	417e      	adcs	r6, r7
    5942:	c240      	stmia	r2!, {r6}
    5944:	c840      	ldmia	r0!, {r6}
    5946:	c980      	ldmia	r1!, {r7}
    5948:	417e      	adcs	r6, r7
    594a:	c240      	stmia	r2!, {r6}
    594c:	c840      	ldmia	r0!, {r6}
    594e:	c980      	ldmia	r1!, {r7}
    5950:	417e      	adcs	r6, r7
    5952:	c240      	stmia	r2!, {r6}
    5954:	416d      	adcs	r5, r5
    vli += num_words;
    5956:	4643      	mov	r3, r8
    5958:	4660      	mov	r0, ip
    595a:	009b      	lsls	r3, r3, #2
    595c:	18c2      	adds	r2, r0, r3
    595e:	9507      	str	r5, [sp, #28]
    5960:	469a      	mov	sl, r3
    while (vli-- > end) {
    5962:	1f11      	subs	r1, r2, #4
    5964:	4290      	cmp	r0, r2
    5966:	d21b      	bcs.n	59a0 <double_jacobian_default+0x2f0>
    5968:	9e02      	ldr	r6, [sp, #8]
    596a:	9d04      	ldr	r5, [sp, #16]
    596c:	1b8b      	subs	r3, r1, r6
    596e:	3303      	adds	r3, #3
    5970:	089b      	lsrs	r3, r3, #2
    5972:	009b      	lsls	r3, r3, #2
    5974:	1ad3      	subs	r3, r2, r3
    5976:	2208      	movs	r2, #8
    5978:	4252      	negs	r2, r2
    597a:	4694      	mov	ip, r2
    597c:	449c      	add	ip, r3
    597e:	2300      	movs	r3, #0
    5980:	4660      	mov	r0, ip
    5982:	46a4      	mov	ip, r4
    5984:	001c      	movs	r4, r3
    5986:	9f03      	ldr	r7, [sp, #12]
        uECC_word_t temp = *vli;
    5988:	680a      	ldr	r2, [r1, #0]
    while (vli-- > end) {
    598a:	3904      	subs	r1, #4
        *vli = (temp >> 1) | carry;
    598c:	0853      	lsrs	r3, r2, #1
    598e:	4323      	orrs	r3, r4
    5990:	604b      	str	r3, [r1, #4]
        carry = temp << (uECC_WORD_BITS - 1);
    5992:	07d4      	lsls	r4, r2, #31
    while (vli-- > end) {
    5994:	4281      	cmp	r1, r0
    5996:	d1f7      	bne.n	5988 <double_jacobian_default+0x2d8>
    5998:	4664      	mov	r4, ip
    599a:	9504      	str	r5, [sp, #16]
    599c:	9602      	str	r6, [sp, #8]
    599e:	9703      	str	r7, [sp, #12]
        X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
    59a0:	9a02      	ldr	r2, [sp, #8]
    59a2:	4653      	mov	r3, sl
    59a4:	4694      	mov	ip, r2
    59a6:	3b04      	subs	r3, #4
    59a8:	4463      	add	r3, ip
    59aa:	9a07      	ldr	r2, [sp, #28]
    59ac:	6819      	ldr	r1, [r3, #0]
    59ae:	07d2      	lsls	r2, r2, #31
    59b0:	430a      	orrs	r2, r1
    59b2:	601a      	str	r2, [r3, #0]
    59b4:	e746      	b.n	5844 <double_jacobian_default+0x194>
    59b6:	46c0      	nop			; (mov r8, r8)

000059b8 <uECC_secp256r1>:
uECC_Curve uECC_secp256r1(void) { return &curve_secp256r1; }
    59b8:	f646 304c 	movw	r0, #27468	; 0x6b4c
    59bc:	f2c0 0000 	movt	r0, #0
    59c0:	3050      	adds	r0, #80	; 0x50
    59c2:	4770      	bx	lr

000059c4 <uECC_sign>:

int uECC_sign(const uint8_t *private_key,
              const uint8_t *message_hash,
              unsigned hash_size,
              uint8_t *signature,
              uECC_Curve curve) {
    59c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    59c6:	4657      	mov	r7, sl
    59c8:	464e      	mov	r6, r9
    59ca:	4645      	mov	r5, r8
    59cc:	46de      	mov	lr, fp
    59ce:	b5e0      	push	{r5, r6, r7, lr}
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
            return 0;
        }

        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59d0:	f245 17a1 	movw	r7, #20897	; 0x51a1
              uECC_Curve curve) {
    59d4:	b08d      	sub	sp, #52	; 0x34
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59d6:	f2c0 0700 	movt	r7, #0
    59da:	f240 0924 	movw	r9, #36	; 0x24
    59de:	f640 0665 	movw	r6, #2149	; 0x865
              uECC_Curve curve) {
    59e2:	9303      	str	r3, [sp, #12]
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59e4:	003b      	movs	r3, r7
              uECC_Curve curve) {
    59e6:	9d16      	ldr	r5, [sp, #88]	; 0x58
    59e8:	f2c0 0600 	movt	r6, #0
    59ec:	44a9      	add	r9, r5
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59ee:	0037      	movs	r7, r6
              uECC_Curve curve) {
    59f0:	4683      	mov	fp, r0
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59f2:	464e      	mov	r6, r9
              uECC_Curve curve) {
    59f4:	468a      	mov	sl, r1
    59f6:	9202      	str	r2, [sp, #8]
    59f8:	2440      	movs	r4, #64	; 0x40
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    59fa:	f240 081f 	movw	r8, #31
        if (uECC_sign_with_k_internal(private_key, message_hash, hash_size, k, signature, curve)) {
    59fe:	4699      	mov	r9, r3
    5a00:	e00a      	b.n	5a18 <uECC_sign+0x54>
    5a02:	9b03      	ldr	r3, [sp, #12]
    5a04:	9501      	str	r5, [sp, #4]
    5a06:	9300      	str	r3, [sp, #0]
    5a08:	9a02      	ldr	r2, [sp, #8]
    5a0a:	ab04      	add	r3, sp, #16
    5a0c:	4651      	mov	r1, sl
    5a0e:	4658      	mov	r0, fp
    5a10:	47c8      	blx	r9
    5a12:	b9b8      	cbnz	r0, 5a44 <uECC_sign+0x80>
    5a14:	3c01      	subs	r4, #1
    for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
    5a16:	b16c      	cbz	r4, 5a34 <uECC_sign+0x70>
        if (!uECC_generate_random_int(k, curve->n, BITS_TO_WORDS(curve->num_n_bits))) {
    5a18:	4641      	mov	r1, r8
    5a1a:	2202      	movs	r2, #2
    5a1c:	5eab      	ldrsh	r3, [r5, r2]
    5a1e:	a804      	add	r0, sp, #16
    5a20:	331f      	adds	r3, #31
    5a22:	17da      	asrs	r2, r3, #31
    5a24:	400a      	ands	r2, r1
    5a26:	18d2      	adds	r2, r2, r3
    5a28:	1152      	asrs	r2, r2, #5
    5a2a:	b252      	sxtb	r2, r2
    5a2c:	0031      	movs	r1, r6
    5a2e:	47b8      	blx	r7
    5a30:	2800      	cmp	r0, #0
    5a32:	d1e6      	bne.n	5a02 <uECC_sign+0x3e>
            return 0;
    5a34:	2000      	movs	r0, #0
            return 1;
        }
    }
    return 0;
}
    5a36:	b00d      	add	sp, #52	; 0x34
    5a38:	bc3c      	pop	{r2, r3, r4, r5}
    5a3a:	4690      	mov	r8, r2
    5a3c:	4699      	mov	r9, r3
    5a3e:	46a2      	mov	sl, r4
    5a40:	46ab      	mov	fp, r5
    5a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return 1;
    5a44:	2001      	movs	r0, #1
    5a46:	e7f6      	b.n	5a36 <uECC_sign+0x72>

00005a48 <uECC_verify>:

int uECC_verify(const uint8_t *public_key,
                const uint8_t *message_hash,
                unsigned hash_size,
                const uint8_t *signature,
                uECC_Curve curve) {
    5a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a4a:	464e      	mov	r6, r9
    5a4c:	4645      	mov	r5, r8
    5a4e:	46de      	mov	lr, fp
    5a50:	4657      	mov	r7, sl
    5a52:	b5e0      	push	{r5, r6, r7, lr}
    5a54:	4cb2      	ldr	r4, [pc, #712]	; (5d20 <uECC_verify+0x2d8>)
    5a56:	4698      	mov	r8, r3
    5a58:	44a5      	add	sp, r4
    uECC_word_t *_public = (uECC_word_t *)public_key;
#else
    uECC_word_t _public[uECC_MAX_WORDS * 2];
#endif
    uECC_word_t r[uECC_MAX_WORDS], s[uECC_MAX_WORDS];
    wordcount_t num_words = curve->num_words;
    5a5a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
                uECC_Curve curve) {
    5a5c:	910a      	str	r1, [sp, #40]	; 0x28
    wordcount_t num_words = curve->num_words;
    5a5e:	781b      	ldrb	r3, [r3, #0]
                uECC_Curve curve) {
    5a60:	920b      	str	r2, [sp, #44]	; 0x2c
    wordcount_t num_words = curve->num_words;
    5a62:	b25b      	sxtb	r3, r3
    5a64:	9304      	str	r3, [sp, #16]
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5a66:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
                uECC_Curve curve) {
    5a68:	4681      	mov	r9, r0
    wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
    5a6a:	2202      	movs	r2, #2
    5a6c:	5e9a      	ldrsh	r2, [r3, r2]
    5a6e:	231f      	movs	r3, #31
    5a70:	321f      	adds	r2, #31
    5a72:	17d1      	asrs	r1, r2, #31
    5a74:	400b      	ands	r3, r1
    5a76:	189b      	adds	r3, r3, r2
    5a78:	115b      	asrs	r3, r3, #5
    5a7a:	9307      	str	r3, [sp, #28]
    5a7c:	b25b      	sxtb	r3, r3
    5a7e:	9309      	str	r3, [sp, #36]	; 0x24

    rx[num_n_words - 1] = 0;
    5a80:	3b01      	subs	r3, #1
    5a82:	009b      	lsls	r3, r3, #2
    5a84:	2078      	movs	r0, #120	; 0x78
    5a86:	001a      	movs	r2, r3
    5a88:	930c      	str	r3, [sp, #48]	; 0x30
    5a8a:	2300      	movs	r3, #0

#if uECC_VLI_NATIVE_LITTLE_ENDIAN
    bcopy((uint8_t *) r, signature, curve->num_bytes);
    bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5a8c:	2401      	movs	r4, #1
    rx[num_n_words - 1] = 0;
    5a8e:	a910      	add	r1, sp, #64	; 0x40
    5a90:	1809      	adds	r1, r1, r0
    5a92:	508b      	str	r3, [r1, r2]
    r[num_n_words - 1] = 0;
    5a94:	ae56      	add	r6, sp, #344	; 0x158
    s[num_n_words - 1] = 0;
    5a96:	a95e      	add	r1, sp, #376	; 0x178
    5a98:	508b      	str	r3, [r1, r2]
    r[num_n_words - 1] = 0;
    5a9a:	50b3      	str	r3, [r6, r2]
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5a9c:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    s[num_n_words - 1] = 0;
    5a9e:	9102      	str	r1, [sp, #8]
    uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
    5aa0:	571c      	ldrsb	r4, [r3, r4]
    uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
    5aa2:	2303      	movs	r3, #3
    5aa4:	1ce2      	adds	r2, r4, #3
    5aa6:	17d1      	asrs	r1, r2, #31
    5aa8:	400b      	ands	r3, r1
    5aaa:	189b      	adds	r3, r3, r2
    5aac:	109b      	asrs	r3, r3, #2
    5aae:	b25a      	sxtb	r2, r3
    5ab0:	9303      	str	r3, [sp, #12]
    5ab2:	9206      	str	r2, [sp, #24]
    for (i = 0; i < num_words; ++i) {
    5ab4:	2b00      	cmp	r3, #0
    5ab6:	dc00      	bgt.n	5aba <uECC_verify+0x72>
    5ab8:	e114      	b.n	5ce4 <uECC_verify+0x29c>
    5aba:	f246 6b67 	movw	fp, #26215	; 0x6667
        vli[i] = 0;
    5abe:	3b01      	subs	r3, #1
    5ac0:	b2da      	uxtb	r2, r3
    5ac2:	3201      	adds	r2, #1
    5ac4:	ab7e      	add	r3, sp, #504	; 0x1f8
    5ac6:	0092      	lsls	r2, r2, #2
    5ac8:	2100      	movs	r1, #0
    5aca:	0018      	movs	r0, r3
    5acc:	f2c0 0b00 	movt	fp, #0
    5ad0:	469a      	mov	sl, r3
    5ad2:	47d8      	blx	fp
    5ad4:	1e65      	subs	r5, r4, #1
    5ad6:	46ac      	mov	ip, r5
    for (i = 0; i < num_bytes; ++i) {
    5ad8:	2200      	movs	r2, #0
        native[b / uECC_WORD_SIZE] |=
    5ada:	2003      	movs	r0, #3
    5adc:	1e25      	subs	r5, r4, #0
    for (i = 0; i < num_bytes; ++i) {
    5ade:	dc00      	bgt.n	5ae2 <uECC_verify+0x9a>
    5ae0:	e103      	b.n	5cea <uECC_verify+0x2a2>
    5ae2:	4663      	mov	r3, ip
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5ae4:	464c      	mov	r4, r9
    5ae6:	1a9b      	subs	r3, r3, r2
        native[b / uECC_WORD_SIZE] |=
    5ae8:	0019      	movs	r1, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5aea:	5ca4      	ldrb	r4, [r4, r2]
    5aec:	4003      	ands	r3, r0
    5aee:	00db      	lsls	r3, r3, #3
    5af0:	409c      	lsls	r4, r3
        native[b / uECC_WORD_SIZE] |=
    5af2:	4381      	bics	r1, r0
    5af4:	4451      	add	r1, sl
    5af6:	680b      	ldr	r3, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5af8:	3201      	adds	r2, #1
        native[b / uECC_WORD_SIZE] |=
    5afa:	431c      	orrs	r4, r3
    5afc:	600c      	str	r4, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5afe:	4295      	cmp	r5, r2
    5b00:	dcef      	bgt.n	5ae2 <uECC_verify+0x9a>
    uECC_vli_bytesToNative(
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    5b02:	9b04      	ldr	r3, [sp, #16]
    5b04:	002c      	movs	r4, r5
    5b06:	009b      	lsls	r3, r3, #2
    5b08:	9308      	str	r3, [sp, #32]
    uECC_vli_bytesToNative(
    5b0a:	4453      	add	r3, sl
    5b0c:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    5b0e:	9b03      	ldr	r3, [sp, #12]
    5b10:	4665      	mov	r5, ip
    5b12:	2b00      	cmp	r3, #0
    5b14:	dd0e      	ble.n	5b34 <uECC_verify+0xec>
    5b16:	f246 6b67 	movw	fp, #26215	; 0x6667
        vli[i] = 0;
    5b1a:	3b01      	subs	r3, #1
    5b1c:	b2da      	uxtb	r2, r3
    5b1e:	3201      	adds	r2, #1
    5b20:	0092      	lsls	r2, r2, #2
    5b22:	2100      	movs	r1, #0
    5b24:	9805      	ldr	r0, [sp, #20]
    5b26:	f2c0 0b00 	movt	fp, #0
    5b2a:	001f      	movs	r7, r3
    5b2c:	1e65      	subs	r5, r4, #1
    5b2e:	47d8      	blx	fp
    for (i = 0; i < num_bytes; ++i) {
    5b30:	2c00      	cmp	r4, #0
    5b32:	dd21      	ble.n	5b78 <uECC_verify+0x130>
    5b34:	2100      	movs	r1, #0
        native[b / uECC_WORD_SIZE] |=
    5b36:	f240 0c03 	movw	ip, #3
    5b3a:	46ab      	mov	fp, r5
    5b3c:	9d05      	ldr	r5, [sp, #20]
    5b3e:	44a1      	add	r9, r4
    5b40:	465b      	mov	r3, fp
    5b42:	1a5b      	subs	r3, r3, r1
    5b44:	001a      	movs	r2, r3
    5b46:	4660      	mov	r0, ip
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b48:	4667      	mov	r7, ip
        native[b / uECC_WORD_SIZE] |=
    5b4a:	4382      	bics	r2, r0
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b4c:	4648      	mov	r0, r9
    5b4e:	403b      	ands	r3, r7
    5b50:	5c40      	ldrb	r0, [r0, r1]
    5b52:	00db      	lsls	r3, r3, #3
    5b54:	4098      	lsls	r0, r3
        native[b / uECC_WORD_SIZE] |=
    5b56:	18aa      	adds	r2, r5, r2
    5b58:	6813      	ldr	r3, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5b5a:	3101      	adds	r1, #1
        native[b / uECC_WORD_SIZE] |=
    5b5c:	4318      	orrs	r0, r3
    5b5e:	6010      	str	r0, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5b60:	428c      	cmp	r4, r1
    5b62:	dced      	bgt.n	5b40 <uECC_verify+0xf8>
    for (i = 0; i < num_words; ++i) {
    5b64:	9b03      	ldr	r3, [sp, #12]
    5b66:	2b00      	cmp	r3, #0
    5b68:	dc00      	bgt.n	5b6c <uECC_verify+0x124>
    5b6a:	e0c7      	b.n	5cfc <uECC_verify+0x2b4>
    5b6c:	3b01      	subs	r3, #1
    5b6e:	f246 6b67 	movw	fp, #26215	; 0x6667
    5b72:	001f      	movs	r7, r3
    5b74:	f2c0 0b00 	movt	fp, #0
        vli[i] = 0;
    5b78:	b2fd      	uxtb	r5, r7
    5b7a:	3501      	adds	r5, #1
    5b7c:	00ad      	lsls	r5, r5, #2
    5b7e:	002a      	movs	r2, r5
    5b80:	2100      	movs	r1, #0
    5b82:	0030      	movs	r0, r6
    5b84:	47d8      	blx	fp
    for (i = 0; i < num_bytes; ++i) {
    5b86:	2c00      	cmp	r4, #0
    5b88:	dc00      	bgt.n	5b8c <uECC_verify+0x144>
    5b8a:	e0bb      	b.n	5d04 <uECC_verify+0x2bc>
    5b8c:	1e65      	subs	r5, r4, #1
        native[b / uECC_WORD_SIZE] |=
    5b8e:	46ac      	mov	ip, r5
    for (i = 0; i < num_bytes; ++i) {
    5b90:	2200      	movs	r2, #0
        native[b / uECC_WORD_SIZE] |=
    5b92:	2003      	movs	r0, #3
    5b94:	4645      	mov	r5, r8
    5b96:	4663      	mov	r3, ip
    5b98:	1a9b      	subs	r3, r3, r2
    5b9a:	0019      	movs	r1, r3
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5b9c:	5caf      	ldrb	r7, [r5, r2]
    5b9e:	4003      	ands	r3, r0
    5ba0:	00db      	lsls	r3, r3, #3
    5ba2:	409f      	lsls	r7, r3
    5ba4:	003b      	movs	r3, r7
        native[b / uECC_WORD_SIZE] |=
    5ba6:	4381      	bics	r1, r0
    5ba8:	1871      	adds	r1, r6, r1
    5baa:	680f      	ldr	r7, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5bac:	3201      	adds	r2, #1
        native[b / uECC_WORD_SIZE] |=
    5bae:	433b      	orrs	r3, r7
    5bb0:	600b      	str	r3, [r1, #0]
    for (i = 0; i < num_bytes; ++i) {
    5bb2:	4294      	cmp	r4, r2
    5bb4:	dcef      	bgt.n	5b96 <uECC_verify+0x14e>
    for (i = 0; i < num_words; ++i) {
    5bb6:	9b03      	ldr	r3, [sp, #12]
    5bb8:	46a8      	mov	r8, r5
    5bba:	4665      	mov	r5, ip
    5bbc:	2b00      	cmp	r3, #0
    5bbe:	dd0f      	ble.n	5be0 <uECC_verify+0x198>
        vli[i] = 0;
    5bc0:	9b06      	ldr	r3, [sp, #24]
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	dc00      	bgt.n	5bc8 <uECC_verify+0x180>
    5bc6:	e072      	b.n	5cae <uECC_verify+0x266>
    5bc8:	9a03      	ldr	r2, [sp, #12]
    5bca:	3a01      	subs	r2, #1
    5bcc:	b2d2      	uxtb	r2, r2
    5bce:	3201      	adds	r2, #1
    5bd0:	0092      	lsls	r2, r2, #2
    5bd2:	f246 6b67 	movw	fp, #26215	; 0x6667
    5bd6:	2100      	movs	r1, #0
    5bd8:	9802      	ldr	r0, [sp, #8]
    5bda:	f2c0 0b00 	movt	fp, #0
    5bde:	47d8      	blx	fp
    5be0:	44a0      	add	r8, r4
    for (i = 0; i < num_bytes; ++i) {
    5be2:	2100      	movs	r1, #0
        native[b / uECC_WORD_SIZE] |=
    5be4:	f240 0c03 	movw	ip, #3
    5be8:	4640      	mov	r0, r8
    5bea:	1a6b      	subs	r3, r5, r1
    5bec:	001a      	movs	r2, r3
    5bee:	4667      	mov	r7, ip
    5bf0:	43ba      	bics	r2, r7
    5bf2:	9f02      	ldr	r7, [sp, #8]
    5bf4:	46b8      	mov	r8, r7
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5bf6:	5c47      	ldrb	r7, [r0, r1]
        native[b / uECC_WORD_SIZE] |=
    5bf8:	4442      	add	r2, r8
            (uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
    5bfa:	46b8      	mov	r8, r7
    5bfc:	4667      	mov	r7, ip
    5bfe:	403b      	ands	r3, r7
    5c00:	4647      	mov	r7, r8
    5c02:	00db      	lsls	r3, r3, #3
    5c04:	409f      	lsls	r7, r3
    5c06:	003b      	movs	r3, r7
        native[b / uECC_WORD_SIZE] |=
    5c08:	6817      	ldr	r7, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5c0a:	3101      	adds	r1, #1
        native[b / uECC_WORD_SIZE] |=
    5c0c:	433b      	orrs	r3, r7
    5c0e:	6013      	str	r3, [r2, #0]
    for (i = 0; i < num_bytes; ++i) {
    5c10:	428c      	cmp	r4, r1
    5c12:	dcea      	bgt.n	5bea <uECC_verify+0x1a2>
    for (i = 0; i < num_words; ++i) {
    5c14:	9b04      	ldr	r3, [sp, #16]
    5c16:	2b00      	cmp	r3, #0
    5c18:	dd3e      	ble.n	5c98 <uECC_verify+0x250>
    5c1a:	3b01      	subs	r3, #1
    5c1c:	b2db      	uxtb	r3, r3
    5c1e:	1c59      	adds	r1, r3, #1
    5c20:	9303      	str	r3, [sp, #12]
    5c22:	2200      	movs	r2, #0
    5c24:	2300      	movs	r3, #0
    5c26:	0089      	lsls	r1, r1, #2
        bits |= vli[i];
    5c28:	58f0      	ldr	r0, [r6, r3]
    5c2a:	3304      	adds	r3, #4
    5c2c:	4302      	orrs	r2, r0
    for (i = 0; i < num_words; ++i) {
    5c2e:	428b      	cmp	r3, r1
    5c30:	d1fa      	bne.n	5c28 <uECC_verify+0x1e0>
    uECC_vli_bytesToNative(r, signature, curve->num_bytes);
    uECC_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
#endif

    /* r, s must not be 0. */
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    5c32:	b38a      	cbz	r2, 5c98 <uECC_verify+0x250>
    5c34:	2400      	movs	r4, #0
    5c36:	2200      	movs	r2, #0
        bits |= vli[i];
    5c38:	9902      	ldr	r1, [sp, #8]
    5c3a:	5909      	ldr	r1, [r1, r4]
    5c3c:	3404      	adds	r4, #4
    5c3e:	430a      	orrs	r2, r1
    for (i = 0; i < num_words; ++i) {
    5c40:	42a3      	cmp	r3, r4
    5c42:	d1f9      	bne.n	5c38 <uECC_verify+0x1f0>
    if (uECC_vli_isZero(r, num_words) || uECC_vli_isZero(s, num_words)) {
    5c44:	b342      	cbz	r2, 5c98 <uECC_verify+0x250>
    for (i = num_words - 1; i >= 0; --i) {
    5c46:	9807      	ldr	r0, [sp, #28]
        return 0;
    }

    /* r, s must be < n. */
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    5c48:	9da8      	ldr	r5, [sp, #672]	; 0x2a0
    for (i = num_words - 1; i >= 0; --i) {
    5c4a:	3801      	subs	r0, #1
    5c4c:	b2c0      	uxtb	r0, r0
    5c4e:	b243      	sxtb	r3, r0
    if (uECC_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
    5c50:	3524      	adds	r5, #36	; 0x24
    for (i = num_words - 1; i >= 0; --i) {
    5c52:	4699      	mov	r9, r3
    5c54:	2b00      	cmp	r3, #0
    5c56:	db1f      	blt.n	5c98 <uECC_verify+0x250>
        if (left[i] > right[i]) {
    5c58:	009b      	lsls	r3, r3, #2
    5c5a:	18ea      	adds	r2, r5, r3
    5c5c:	9207      	str	r2, [sp, #28]
    5c5e:	6812      	ldr	r2, [r2, #0]
    5c60:	4694      	mov	ip, r2
    5c62:	aa9e      	add	r2, sp, #632	; 0x278
    5c64:	4690      	mov	r8, r2
    5c66:	4443      	add	r3, r8
    5c68:	9306      	str	r3, [sp, #24]
    5c6a:	3b21      	subs	r3, #33	; 0x21
    5c6c:	3bff      	subs	r3, #255	; 0xff
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	4563      	cmp	r3, ip
    5c72:	d31e      	bcc.n	5cb2 <uECC_verify+0x26a>
        } else if (left[i] < right[i]) {
    5c74:	d810      	bhi.n	5c98 <uECC_verify+0x250>
    5c76:	464a      	mov	r2, r9
    5c78:	e00a      	b.n	5c90 <uECC_verify+0x248>
        if (left[i] > right[i]) {
    5c7a:	af9e      	add	r7, sp, #632	; 0x278
    5c7c:	46b8      	mov	r8, r7
    5c7e:	0093      	lsls	r3, r2, #2
    5c80:	58e9      	ldr	r1, [r5, r3]
    5c82:	4443      	add	r3, r8
    5c84:	3b21      	subs	r3, #33	; 0x21
    5c86:	3bff      	subs	r3, #255	; 0xff
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	4299      	cmp	r1, r3
    5c8c:	d811      	bhi.n	5cb2 <uECC_verify+0x26a>
        } else if (left[i] < right[i]) {
    5c8e:	d303      	bcc.n	5c98 <uECC_verify+0x250>
    5c90:	3a01      	subs	r2, #1
    5c92:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    5c94:	1c53      	adds	r3, r2, #1
    5c96:	d1f0      	bne.n	5c7a <uECC_verify+0x232>
        return 0;
    5c98:	2200      	movs	r2, #0
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    }

    /* Accept only if v == r. */
    return (int)(uECC_vli_equal(rx, r, num_words));
}
    5c9a:	0010      	movs	r0, r2
    5c9c:	f240 237c 	movw	r3, #636	; 0x27c
    5ca0:	449d      	add	sp, r3
    5ca2:	bc3c      	pop	{r2, r3, r4, r5}
    5ca4:	4690      	mov	r8, r2
    5ca6:	4699      	mov	r9, r3
    5ca8:	46a2      	mov	sl, r4
    5caa:	46ab      	mov	fp, r5
    5cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
        vli[i] = 0;
    5cae:	2204      	movs	r2, #4
    5cb0:	e78f      	b.n	5bd2 <uECC_verify+0x18a>
        if (left[i] > right[i]) {
    5cb2:	9b06      	ldr	r3, [sp, #24]
    5cb4:	3b01      	subs	r3, #1
    5cb6:	3bff      	subs	r3, #255	; 0xff
    5cb8:	681b      	ldr	r3, [r3, #0]
    5cba:	459c      	cmp	ip, r3
    5cbc:	d832      	bhi.n	5d24 <uECC_verify+0x2dc>
        } else if (left[i] < right[i]) {
    5cbe:	d3eb      	bcc.n	5c98 <uECC_verify+0x250>
    5cc0:	464a      	mov	r2, r9
    5cc2:	e00a      	b.n	5cda <uECC_verify+0x292>
        if (left[i] > right[i]) {
    5cc4:	af9e      	add	r7, sp, #632	; 0x278
    5cc6:	46bc      	mov	ip, r7
    5cc8:	0093      	lsls	r3, r2, #2
    5cca:	58e9      	ldr	r1, [r5, r3]
    5ccc:	4463      	add	r3, ip
    5cce:	3b01      	subs	r3, #1
    5cd0:	3bff      	subs	r3, #255	; 0xff
    5cd2:	681b      	ldr	r3, [r3, #0]
    5cd4:	4299      	cmp	r1, r3
    5cd6:	d825      	bhi.n	5d24 <uECC_verify+0x2dc>
        } else if (left[i] < right[i]) {
    5cd8:	d3de      	bcc.n	5c98 <uECC_verify+0x250>
    5cda:	3a01      	subs	r2, #1
    5cdc:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    5cde:	1c53      	adds	r3, r2, #1
    5ce0:	d1f0      	bne.n	5cc4 <uECC_verify+0x27c>
    5ce2:	e7d9      	b.n	5c98 <uECC_verify+0x250>
    5ce4:	ab7e      	add	r3, sp, #504	; 0x1f8
    5ce6:	469a      	mov	sl, r3
    5ce8:	e6f4      	b.n	5ad4 <uECC_verify+0x8c>
        _public + num_words, public_key + curve->num_bytes, curve->num_bytes);
    5cea:	9b04      	ldr	r3, [sp, #16]
    5cec:	009b      	lsls	r3, r3, #2
    5cee:	9308      	str	r3, [sp, #32]
    uECC_vli_bytesToNative(
    5cf0:	4453      	add	r3, sl
    5cf2:	9305      	str	r3, [sp, #20]
    for (i = 0; i < num_words; ++i) {
    5cf4:	9b03      	ldr	r3, [sp, #12]
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	dd00      	ble.n	5cfc <uECC_verify+0x2b4>
    5cfa:	e70c      	b.n	5b16 <uECC_verify+0xce>
    for (i = 0; i < num_bytes; ++i) {
    5cfc:	2c00      	cmp	r4, #0
    5cfe:	dd00      	ble.n	5d02 <uECC_verify+0x2ba>
    5d00:	e744      	b.n	5b8c <uECC_verify+0x144>
    5d02:	e787      	b.n	5c14 <uECC_verify+0x1cc>
    for (i = 0; i < num_words; ++i) {
    5d04:	9b03      	ldr	r3, [sp, #12]
    5d06:	2b00      	cmp	r3, #0
    5d08:	dc00      	bgt.n	5d0c <uECC_verify+0x2c4>
    5d0a:	e783      	b.n	5c14 <uECC_verify+0x1cc>
        vli[i] = 0;
    5d0c:	9b06      	ldr	r3, [sp, #24]
    5d0e:	2b00      	cmp	r3, #0
    5d10:	dc00      	bgt.n	5d14 <uECC_verify+0x2cc>
    5d12:	e2d5      	b.n	62c0 <uECC_verify+0x878>
    5d14:	002a      	movs	r2, r5
    5d16:	2100      	movs	r1, #0
    5d18:	9802      	ldr	r0, [sp, #8]
    5d1a:	47d8      	blx	fp
    5d1c:	e77a      	b.n	5c14 <uECC_verify+0x1cc>
    5d1e:	46c0      	nop			; (mov r8, r8)
    5d20:	fffffd84 	.word	0xfffffd84
    for (i = 0; i < num_words; ++i) {
    5d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d26:	2b00      	cmp	r3, #0
    5d28:	dc00      	bgt.n	5d2c <uECC_verify+0x2e4>
    5d2a:	e2c2      	b.n	62b2 <uECC_verify+0x86a>
    5d2c:	2200      	movs	r2, #0
    5d2e:	2300      	movs	r3, #0
    5d30:	3001      	adds	r0, #1
    5d32:	0080      	lsls	r0, r0, #2
        bits |= vli[i];
    5d34:	9902      	ldr	r1, [sp, #8]
    5d36:	5889      	ldr	r1, [r1, r2]
    5d38:	3204      	adds	r2, #4
    5d3a:	430b      	orrs	r3, r1
    for (i = 0; i < num_words; ++i) {
    5d3c:	4282      	cmp	r2, r0
    5d3e:	d1f9      	bne.n	5d34 <uECC_verify+0x2ec>
    if (uECC_vli_isZero(input, num_words)) {
    5d40:	2b00      	cmp	r3, #0
    5d42:	d100      	bne.n	5d46 <uECC_verify+0x2fe>
    5d44:	e2a7      	b.n	6296 <uECC_verify+0x84e>
    5d46:	ab26      	add	r3, sp, #152	; 0x98
    5d48:	4698      	mov	r8, r3
    5d4a:	f643 07d1 	movw	r7, #14545	; 0x38d1
    5d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d50:	002a      	movs	r2, r5
    5d52:	9902      	ldr	r1, [sp, #8]
    5d54:	4640      	mov	r0, r8
    5d56:	f2c0 0700 	movt	r7, #0
    5d5a:	f246 6b67 	movw	fp, #26215	; 0x6667
    5d5e:	47b8      	blx	r7
    5d60:	f2c0 0b00 	movt	fp, #0
    u1[num_n_words - 1] = 0;
    5d64:	2018      	movs	r0, #24
    5d66:	2300      	movs	r3, #0
    bits2int(u1, message_hash, hash_size, curve);
    5d68:	f641 070d 	movw	r7, #6157	; 0x180d
    u1[num_n_words - 1] = 0;
    5d6c:	990c      	ldr	r1, [sp, #48]	; 0x30
    5d6e:	aa10      	add	r2, sp, #64	; 0x40
    5d70:	1812      	adds	r2, r2, r0
    5d72:	5053      	str	r3, [r2, r1]
    bits2int(u1, message_hash, hash_size, curve);
    5d74:	a816      	add	r0, sp, #88	; 0x58
    5d76:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5d78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5d7a:	990a      	ldr	r1, [sp, #40]	; 0x28
    5d7c:	f2c0 0700 	movt	r7, #0
    5d80:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, num_words);
    5d82:	f240 77ad 	movw	r7, #1965	; 0x7ad
    5d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d88:	f2c0 0700 	movt	r7, #0
    5d8c:	4642      	mov	r2, r8
    5d8e:	a916      	add	r1, sp, #88	; 0x58
    5d90:	a88e      	add	r0, sp, #568	; 0x238
    5d92:	970c      	str	r7, [sp, #48]	; 0x30
    5d94:	47b8      	blx	r7
    uECC_vli_mmod(result, product, mod, num_words);
    5d96:	f640 178d 	movw	r7, #2445	; 0x98d
    5d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5d9c:	f2c0 0700 	movt	r7, #0
    5da0:	002a      	movs	r2, r5
    5da2:	a98e      	add	r1, sp, #568	; 0x238
    5da4:	a816      	add	r0, sp, #88	; 0x58
    5da6:	47b8      	blx	r7
    uECC_vli_mult(product, left, right, num_words);
    5da8:	0031      	movs	r1, r6
    5daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5dac:	4642      	mov	r2, r8
    5dae:	a88e      	add	r0, sp, #568	; 0x238
    5db0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5db2:	47b0      	blx	r6
    uECC_vli_mmod(result, product, mod, num_words);
    5db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5db6:	002a      	movs	r2, r5
    5db8:	a98e      	add	r1, sp, #568	; 0x238
    5dba:	a81e      	add	r0, sp, #120	; 0x78
    5dbc:	47b8      	blx	r7
    5dbe:	f246 6331 	movw	r3, #26161	; 0x6631
    5dc2:	af6e      	add	r7, sp, #440	; 0x1b8
    5dc4:	f2c0 0300 	movt	r3, #0
    5dc8:	0022      	movs	r2, r4
    5dca:	4651      	mov	r1, sl
    5dcc:	0038      	movs	r0, r7
    5dce:	001e      	movs	r6, r3
    5dd0:	9302      	str	r3, [sp, #8]
    5dd2:	4798      	blx	r3
    uECC_vli_set(sum + num_words, _public + num_words, num_words);
    5dd4:	9b08      	ldr	r3, [sp, #32]
    5dd6:	0022      	movs	r2, r4
    5dd8:	469c      	mov	ip, r3
    5dda:	44bc      	add	ip, r7
    5ddc:	4663      	mov	r3, ip
    5dde:	9905      	ldr	r1, [sp, #20]
    5de0:	4660      	mov	r0, ip
    5de2:	930e      	str	r3, [sp, #56]	; 0x38
    5de4:	47b0      	blx	r6
    uECC_vli_set(tx, curve->G, num_words);
    5de6:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5de8:	0022      	movs	r2, r4
    5dea:	3344      	adds	r3, #68	; 0x44
    5dec:	0019      	movs	r1, r3
    5dee:	a83e      	add	r0, sp, #248	; 0xf8
    5df0:	930f      	str	r3, [sp, #60]	; 0x3c
    5df2:	47b0      	blx	r6
        dest[i] = src[i];
    5df4:	9b04      	ldr	r3, [sp, #16]
    5df6:	2b00      	cmp	r3, #0
    5df8:	dc00      	bgt.n	5dfc <uECC_verify+0x3b4>
    5dfa:	e256      	b.n	62aa <uECC_verify+0x862>
    5dfc:	0022      	movs	r2, r4
    5dfe:	940d      	str	r4, [sp, #52]	; 0x34
    5e00:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    5e02:	f641 1651 	movw	r6, #6481	; 0x1951
        dest[i] = src[i];
    5e06:	469c      	mov	ip, r3
    5e08:	9908      	ldr	r1, [sp, #32]
    5e0a:	9b02      	ldr	r3, [sp, #8]
    5e0c:	3144      	adds	r1, #68	; 0x44
    5e0e:	4461      	add	r1, ip
    5e10:	a846      	add	r0, sp, #280	; 0x118
    5e12:	4798      	blx	r3
    uECC_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
    5e14:	9a04      	ldr	r2, [sp, #16]
    5e16:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e18:	f2c0 0600 	movt	r6, #0
    5e1c:	3304      	adds	r3, #4
    5e1e:	9200      	str	r2, [sp, #0]
    5e20:	0039      	movs	r1, r7
    5e22:	aa3e      	add	r2, sp, #248	; 0xf8
    5e24:	4640      	mov	r0, r8
    5e26:	9305      	str	r3, [sp, #20]
    5e28:	960a      	str	r6, [sp, #40]	; 0x28
    5e2a:	47b0      	blx	r6
    XYcZ_add(tx, ty, sum, sum + num_words, curve);
    5e2c:	f640 563d 	movw	r6, #3389	; 0xd3d
    5e30:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e32:	003a      	movs	r2, r7
    5e34:	9300      	str	r3, [sp, #0]
    5e36:	a946      	add	r1, sp, #280	; 0x118
    5e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5e3a:	f2c0 0600 	movt	r6, #0
    5e3e:	a83e      	add	r0, sp, #248	; 0xf8
    5e40:	960b      	str	r6, [sp, #44]	; 0x2c
    5e42:	47b0      	blx	r6
    5e44:	2200      	movs	r2, #0
    5e46:	2300      	movs	r3, #0
    5e48:	4641      	mov	r1, r8
        bits |= vli[i];
    5e4a:	5888      	ldr	r0, [r1, r2]
    5e4c:	3204      	adds	r2, #4
    5e4e:	4303      	orrs	r3, r0
    for (i = 0; i < num_words; ++i) {
    5e50:	4294      	cmp	r4, r2
    5e52:	d1fa      	bne.n	5e4a <uECC_verify+0x402>
    5e54:	4688      	mov	r8, r1
    if (uECC_vli_isZero(input, num_words)) {
    5e56:	2b00      	cmp	r3, #0
    5e58:	d100      	bne.n	5e5c <uECC_verify+0x414>
    5e5a:	e212      	b.n	6282 <uECC_verify+0x83a>
    5e5c:	f643 06d1 	movw	r6, #14545	; 0x38d1
    5e60:	9b04      	ldr	r3, [sp, #16]
    5e62:	9a05      	ldr	r2, [sp, #20]
    5e64:	4641      	mov	r1, r8
    5e66:	4640      	mov	r0, r8
    5e68:	f2c0 0600 	movt	r6, #0
    5e6c:	47b0      	blx	r6
    uECC_vli_mult(product, left, right, curve->num_words);
    5e6e:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e70:	4642      	mov	r2, r8
    5e72:	781b      	ldrb	r3, [r3, #0]
    5e74:	4641      	mov	r1, r8
    5e76:	b25b      	sxtb	r3, r3
    5e78:	a88e      	add	r0, sp, #568	; 0x238
    5e7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5e7c:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5e7e:	22b0      	movs	r2, #176	; 0xb0
    5e80:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e82:	a98e      	add	r1, sp, #568	; 0x238
    5e84:	589b      	ldr	r3, [r3, r2]
    5e86:	a866      	add	r0, sp, #408	; 0x198
    5e88:	9310      	str	r3, [sp, #64]	; 0x40
    5e8a:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5e8c:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5e8e:	aa66      	add	r2, sp, #408	; 0x198
    5e90:	781b      	ldrb	r3, [r3, #0]
    5e92:	0039      	movs	r1, r7
    5e94:	b25b      	sxtb	r3, r3
    5e96:	a88e      	add	r0, sp, #568	; 0x238
    5e98:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5e9a:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5e9c:	22b0      	movs	r2, #176	; 0xb0
    5e9e:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5ea0:	a98e      	add	r1, sp, #568	; 0x238
    5ea2:	589b      	ldr	r3, [r3, r2]
    5ea4:	0038      	movs	r0, r7
    5ea6:	9310      	str	r3, [sp, #64]	; 0x40
    5ea8:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5eaa:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5eac:	4642      	mov	r2, r8
    5eae:	781b      	ldrb	r3, [r3, #0]
    5eb0:	a966      	add	r1, sp, #408	; 0x198
    5eb2:	b25b      	sxtb	r3, r3
    5eb4:	a88e      	add	r0, sp, #568	; 0x238
    5eb6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5eb8:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5eba:	22b0      	movs	r2, #176	; 0xb0
    5ebc:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5ebe:	a98e      	add	r1, sp, #568	; 0x238
    5ec0:	589b      	ldr	r3, [r3, r2]
    5ec2:	a866      	add	r0, sp, #408	; 0x198
    5ec4:	9310      	str	r3, [sp, #64]	; 0x40
    5ec6:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    5ec8:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5eca:	aa66      	add	r2, sp, #408	; 0x198
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	990e      	ldr	r1, [sp, #56]	; 0x38
    5ed0:	b25b      	sxtb	r3, r3
    5ed2:	a88e      	add	r0, sp, #568	; 0x238
    5ed4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    5ed6:	47b0      	blx	r6
    curve->mmod_fast(result, product);
    5ed8:	22b0      	movs	r2, #176	; 0xb0
    5eda:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    5edc:	a98e      	add	r1, sp, #568	; 0x238
    5ede:	589b      	ldr	r3, [r3, r2]
    5ee0:	980e      	ldr	r0, [sp, #56]	; 0x38
    5ee2:	4798      	blx	r3
    points[0] = 0;
    5ee4:	2300      	movs	r3, #0
    5ee6:	9312      	str	r3, [sp, #72]	; 0x48
    points[1] = curve->G;
    5ee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5eea:	4ad4      	ldr	r2, [pc, #848]	; (623c <uECC_verify+0x7f4>)
    points[1] = curve->G;
    5eec:	9313      	str	r3, [sp, #76]	; 0x4c
    points[2] = _public;
    5eee:	4653      	mov	r3, sl
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5ef0:	4694      	mov	ip, r2
    points[2] = _public;
    5ef2:	9314      	str	r3, [sp, #80]	; 0x50
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5ef4:	9b06      	ldr	r3, [sp, #24]
    points[3] = sum;
    5ef6:	9715      	str	r7, [sp, #84]	; 0x54
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5ef8:	4463      	add	r3, ip
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d000      	beq.n	5f02 <uECC_verify+0x4ba>
    5f00:	e17f      	b.n	6202 <uECC_verify+0x7ba>
    5f02:	464b      	mov	r3, r9
    5f04:	e00a      	b.n	5f1c <uECC_verify+0x4d4>
    5f06:	a99e      	add	r1, sp, #632	; 0x278
    5f08:	468c      	mov	ip, r1
    5f0a:	49cc      	ldr	r1, [pc, #816]	; (623c <uECC_verify+0x7f4>)
    5f0c:	009a      	lsls	r2, r3, #2
    5f0e:	4462      	add	r2, ip
    5f10:	468c      	mov	ip, r1
    5f12:	4462      	add	r2, ip
    5f14:	6812      	ldr	r2, [r2, #0]
    5f16:	2a00      	cmp	r2, #0
    5f18:	d000      	beq.n	5f1c <uECC_verify+0x4d4>
    5f1a:	e173      	b.n	6204 <uECC_verify+0x7bc>
    5f1c:	3b01      	subs	r3, #1
    5f1e:	b25b      	sxtb	r3, r3
    5f20:	1c5a      	adds	r2, r3, #1
    5f22:	d1f0      	bne.n	5f06 <uECC_verify+0x4be>
        return 0;
    5f24:	2100      	movs	r1, #0
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    5f26:	4ac6      	ldr	r2, [pc, #792]	; (6240 <uECC_verify+0x7f8>)
    5f28:	9b06      	ldr	r3, [sp, #24]
    5f2a:	4694      	mov	ip, r2
    5f2c:	4463      	add	r3, ip
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	2b00      	cmp	r3, #0
    5f32:	d000      	beq.n	5f36 <uECC_verify+0x4ee>
    5f34:	e188      	b.n	6248 <uECC_verify+0x800>
    5f36:	464b      	mov	r3, r9
    5f38:	e00a      	b.n	5f50 <uECC_verify+0x508>
    5f3a:	a89e      	add	r0, sp, #632	; 0x278
    5f3c:	4684      	mov	ip, r0
    5f3e:	48c0      	ldr	r0, [pc, #768]	; (6240 <uECC_verify+0x7f8>)
    5f40:	009a      	lsls	r2, r3, #2
    5f42:	4462      	add	r2, ip
    5f44:	4684      	mov	ip, r0
    5f46:	4462      	add	r2, ip
    5f48:	6812      	ldr	r2, [r2, #0]
    5f4a:	2a00      	cmp	r2, #0
    5f4c:	d000      	beq.n	5f50 <uECC_verify+0x508>
    5f4e:	e17c      	b.n	624a <uECC_verify+0x802>
    5f50:	3b01      	subs	r3, #1
    5f52:	b25b      	sxtb	r3, r3
    5f54:	1c5a      	adds	r2, r3, #1
    5f56:	d1f0      	bne.n	5f3a <uECC_verify+0x4f2>
        return 0;
    5f58:	2000      	movs	r0, #0
    return (a > b ? a : b);
    5f5a:	1c06      	adds	r6, r0, #0
    5f5c:	4288      	cmp	r0, r1
    5f5e:	da00      	bge.n	5f62 <uECC_verify+0x51a>
    5f60:	1c0e      	adds	r6, r1, #0
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5f62:	2701      	movs	r7, #1
    5f64:	221f      	movs	r2, #31
    5f66:	0038      	movs	r0, r7
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5f68:	b2b3      	uxth	r3, r6
    5f6a:	469a      	mov	sl, r3
    5f6c:	3b01      	subs	r3, #1
    5f6e:	b29b      	uxth	r3, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5f70:	b219      	sxth	r1, r3
    5f72:	4013      	ands	r3, r2
    5f74:	4098      	lsls	r0, r3
    5f76:	ab9e      	add	r3, sp, #632	; 0x278
    5f78:	469c      	mov	ip, r3
    5f7a:	1149      	asrs	r1, r1, #5
    5f7c:	0089      	lsls	r1, r1, #2
    5f7e:	4baf      	ldr	r3, [pc, #700]	; (623c <uECC_verify+0x7f4>)
    5f80:	4461      	add	r1, ip
    5f82:	18cb      	adds	r3, r1, r3
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	4003      	ands	r3, r0
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5f88:	001a      	movs	r2, r3
    5f8a:	1e53      	subs	r3, r2, #1
    5f8c:	419a      	sbcs	r2, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5f8e:	4bac      	ldr	r3, [pc, #688]	; (6240 <uECC_verify+0x7f8>)
    5f90:	469c      	mov	ip, r3
    5f92:	4461      	add	r1, ip
    5f94:	680b      	ldr	r3, [r1, #0]
    5f96:	4003      	ands	r3, r0
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    5f98:	1e59      	subs	r1, r3, #1
    5f9a:	418b      	sbcs	r3, r1
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5f9c:	2108      	movs	r1, #8
                   ((!!uECC_vli_testBit(u2, num_bits - 1)) << 1)];
    5f9e:	005b      	lsls	r3, r3, #1
    point = points[(!!uECC_vli_testBit(u1, num_bits - 1)) |
    5fa0:	4313      	orrs	r3, r2
    5fa2:	aa10      	add	r2, sp, #64	; 0x40
    5fa4:	1852      	adds	r2, r2, r1
    5fa6:	009b      	lsls	r3, r3, #2
    5fa8:	58d6      	ldr	r6, [r2, r3]
    5faa:	a82e      	add	r0, sp, #184	; 0xb8
    5fac:	0031      	movs	r1, r6
    5fae:	0022      	movs	r2, r4
    5fb0:	9b02      	ldr	r3, [sp, #8]
    5fb2:	4798      	blx	r3
    5fb4:	9a08      	ldr	r2, [sp, #32]
    5fb6:	9b02      	ldr	r3, [sp, #8]
    5fb8:	18b1      	adds	r1, r6, r2
    5fba:	a836      	add	r0, sp, #216	; 0xd8
    5fbc:	0022      	movs	r2, r4
    5fbe:	4798      	blx	r3
    5fc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5fc2:	2100      	movs	r1, #0
    5fc4:	4640      	mov	r0, r8
    5fc6:	47d8      	blx	fp
    for (i = num_bits - 2; i >= 0; --i) {
    5fc8:	4652      	mov	r2, sl
    5fca:	1e96      	subs	r6, r2, #2
    5fcc:	b236      	sxth	r6, r6
    z[0] = 1;
    5fce:	9726      	str	r7, [sp, #152]	; 0x98
    for (i = num_bits - 2; i >= 0; --i) {
    5fd0:	2e00      	cmp	r6, #0
    5fd2:	da00      	bge.n	5fd6 <uECC_verify+0x58e>
    5fd4:	e090      	b.n	60f8 <uECC_verify+0x6b0>
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5fd6:	464a      	mov	r2, r9
    5fd8:	9210      	str	r2, [sp, #64]	; 0x40
    5fda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5fdc:	9b02      	ldr	r3, [sp, #8]
    5fde:	4691      	mov	r9, r2
    5fe0:	465a      	mov	r2, fp
    5fe2:	9211      	str	r2, [sp, #68]	; 0x44
    5fe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5fe6:	950e      	str	r5, [sp, #56]	; 0x38
    5fe8:	4647      	mov	r7, r8
        curve->double_jacobian(rx, ry, z, curve);
    5fea:	f240 0aa4 	movw	sl, #164	; 0xa4
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    5fee:	0035      	movs	r5, r6
    5ff0:	4690      	mov	r8, r2
    5ff2:	469b      	mov	fp, r3
    5ff4:	940f      	str	r4, [sp, #60]	; 0x3c
    5ff6:	9ca8      	ldr	r4, [sp, #672]	; 0x2a0
        curve->double_jacobian(rx, ry, z, curve);
    5ff8:	4656      	mov	r6, sl
    5ffa:	0023      	movs	r3, r4
    5ffc:	003a      	movs	r2, r7
    5ffe:	a936      	add	r1, sp, #216	; 0xd8
    6000:	a82e      	add	r0, sp, #184	; 0xb8
    6002:	59a6      	ldr	r6, [r4, r6]
    6004:	47b0      	blx	r6
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    6006:	231f      	movs	r3, #31
    6008:	2001      	movs	r0, #1
    600a:	b2aa      	uxth	r2, r5
    600c:	4013      	ands	r3, r2
    600e:	4098      	lsls	r0, r3
    6010:	ab9e      	add	r3, sp, #632	; 0x278
    6012:	469c      	mov	ip, r3
    6014:	1169      	asrs	r1, r5, #5
    6016:	0089      	lsls	r1, r1, #2
    6018:	4b88      	ldr	r3, [pc, #544]	; (623c <uECC_verify+0x7f4>)
    601a:	4461      	add	r1, ip
    601c:	18cb      	adds	r3, r1, r3
    601e:	681b      	ldr	r3, [r3, #0]
    6020:	9202      	str	r2, [sp, #8]
    6022:	4003      	ands	r3, r0
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    6024:	001a      	movs	r2, r3
    6026:	1e53      	subs	r3, r2, #1
    6028:	419a      	sbcs	r2, r3
    return (vli[bit >> uECC_WORD_BITS_SHIFT] & ((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
    602a:	4b85      	ldr	r3, [pc, #532]	; (6240 <uECC_verify+0x7f8>)
    602c:	469c      	mov	ip, r3
    602e:	4461      	add	r1, ip
    6030:	680b      	ldr	r3, [r1, #0]
    6032:	4003      	ands	r3, r0
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    6034:	1e59      	subs	r1, r3, #1
    6036:	418b      	sbcs	r3, r1
        point = points[index];
    6038:	2108      	movs	r1, #8
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    603a:	005b      	lsls	r3, r3, #1
    603c:	4313      	orrs	r3, r2
        point = points[index];
    603e:	aa10      	add	r2, sp, #64	; 0x40
    6040:	009b      	lsls	r3, r3, #2
    6042:	1852      	adds	r2, r2, r1
    6044:	58d6      	ldr	r6, [r2, r3]
        if (point) {
    6046:	2e00      	cmp	r6, #0
    6048:	d04a      	beq.n	60e0 <uECC_verify+0x698>
    604a:	0031      	movs	r1, r6
    604c:	464a      	mov	r2, r9
    604e:	a83e      	add	r0, sp, #248	; 0xf8
    6050:	47d8      	blx	fp
    6052:	9b08      	ldr	r3, [sp, #32]
    6054:	464a      	mov	r2, r9
    6056:	18f1      	adds	r1, r6, r3
    6058:	a846      	add	r0, sp, #280	; 0x118
    605a:	47d8      	blx	fp
    uECC_vli_mult(product, left, right, curve->num_words);
    605c:	2300      	movs	r3, #0
    curve->mmod_fast(result, product);
    605e:	26b0      	movs	r6, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    6060:	003a      	movs	r2, r7
    6062:	56e3      	ldrsb	r3, [r4, r3]
    6064:	0039      	movs	r1, r7
    6066:	a88e      	add	r0, sp, #568	; 0x238
    6068:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    606a:	a98e      	add	r1, sp, #568	; 0x238
    606c:	a866      	add	r0, sp, #408	; 0x198
    606e:	59a3      	ldr	r3, [r4, r6]
    6070:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    6072:	2300      	movs	r3, #0
    6074:	aa66      	add	r2, sp, #408	; 0x198
    6076:	56e3      	ldrsb	r3, [r4, r3]
    6078:	a93e      	add	r1, sp, #248	; 0xf8
    607a:	a88e      	add	r0, sp, #568	; 0x238
    607c:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    607e:	a98e      	add	r1, sp, #568	; 0x238
    6080:	a83e      	add	r0, sp, #248	; 0xf8
    6082:	59a3      	ldr	r3, [r4, r6]
    6084:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    6086:	2300      	movs	r3, #0
    6088:	003a      	movs	r2, r7
    608a:	56e3      	ldrsb	r3, [r4, r3]
    608c:	a966      	add	r1, sp, #408	; 0x198
    608e:	a88e      	add	r0, sp, #568	; 0x238
    6090:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    6092:	a98e      	add	r1, sp, #568	; 0x238
    6094:	a866      	add	r0, sp, #408	; 0x198
    6096:	59a3      	ldr	r3, [r4, r6]
    6098:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    609a:	2300      	movs	r3, #0
    609c:	aa66      	add	r2, sp, #408	; 0x198
    609e:	56e3      	ldrsb	r3, [r4, r3]
    60a0:	a946      	add	r1, sp, #280	; 0x118
    60a2:	a88e      	add	r0, sp, #568	; 0x238
    60a4:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60a6:	a98e      	add	r1, sp, #568	; 0x238
    60a8:	a846      	add	r0, sp, #280	; 0x118
    60aa:	59a3      	ldr	r3, [r4, r6]
    60ac:	4798      	blx	r3
            uECC_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
    60ae:	9b04      	ldr	r3, [sp, #16]
    60b0:	aa3e      	add	r2, sp, #248	; 0xf8
    60b2:	9300      	str	r3, [sp, #0]
    60b4:	a92e      	add	r1, sp, #184	; 0xb8
    60b6:	9b05      	ldr	r3, [sp, #20]
    60b8:	a84e      	add	r0, sp, #312	; 0x138
    60ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    60bc:	47a8      	blx	r5
            XYcZ_add(tx, ty, rx, ry, curve);
    60be:	ab36      	add	r3, sp, #216	; 0xd8
    60c0:	aa2e      	add	r2, sp, #184	; 0xb8
    60c2:	a946      	add	r1, sp, #280	; 0x118
    60c4:	a83e      	add	r0, sp, #248	; 0xf8
    60c6:	9400      	str	r4, [sp, #0]
    60c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    60ca:	47a8      	blx	r5
    uECC_vli_mult(product, left, right, curve->num_words);
    60cc:	2300      	movs	r3, #0
    60ce:	0039      	movs	r1, r7
    60d0:	56e3      	ldrsb	r3, [r4, r3]
    60d2:	a88e      	add	r0, sp, #568	; 0x238
    60d4:	aa4e      	add	r2, sp, #312	; 0x138
    60d6:	47c0      	blx	r8
    curve->mmod_fast(result, product);
    60d8:	59a3      	ldr	r3, [r4, r6]
    60da:	a98e      	add	r1, sp, #568	; 0x238
    60dc:	0038      	movs	r0, r7
    60de:	4798      	blx	r3
    60e0:	9d02      	ldr	r5, [sp, #8]
    60e2:	3d01      	subs	r5, #1
    60e4:	b22d      	sxth	r5, r5
    for (i = num_bits - 2; i >= 0; --i) {
    60e6:	1c6b      	adds	r3, r5, #1
    60e8:	d186      	bne.n	5ff8 <uECC_verify+0x5b0>
    60ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    60ec:	46b8      	mov	r8, r7
    60ee:	4699      	mov	r9, r3
    60f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    60f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    60f4:	469b      	mov	fp, r3
    60f6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        index = (!!uECC_vli_testBit(u1, i)) | ((!!uECC_vli_testBit(u2, i)) << 1);
    60f8:	2200      	movs	r2, #0
    60fa:	2300      	movs	r3, #0
    60fc:	4641      	mov	r1, r8
        bits |= vli[i];
    60fe:	5888      	ldr	r0, [r1, r2]
    6100:	3204      	adds	r2, #4
    6102:	4303      	orrs	r3, r0
    for (i = 0; i < num_words; ++i) {
    6104:	4294      	cmp	r4, r2
    6106:	d1fa      	bne.n	60fe <uECC_verify+0x6b6>
    6108:	4688      	mov	r8, r1
    if (uECC_vli_isZero(input, num_words)) {
    610a:	2b00      	cmp	r3, #0
    610c:	d100      	bne.n	6110 <uECC_verify+0x6c8>
    610e:	e0bd      	b.n	628c <uECC_verify+0x844>
    6110:	f643 04d1 	movw	r4, #14545	; 0x38d1
    6114:	9b04      	ldr	r3, [sp, #16]
    6116:	9a05      	ldr	r2, [sp, #20]
    6118:	4641      	mov	r1, r8
    611a:	4640      	mov	r0, r8
    611c:	f2c0 0400 	movt	r4, #0
    6120:	47a0      	blx	r4
    curve->mmod_fast(result, product);
    6122:	24b0      	movs	r4, #176	; 0xb0
    uECC_vli_mult(product, left, right, curve->num_words);
    6124:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6126:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    6128:	781b      	ldrb	r3, [r3, #0]
    612a:	4642      	mov	r2, r8
    612c:	b25b      	sxtb	r3, r3
    612e:	4641      	mov	r1, r8
    6130:	a88e      	add	r0, sp, #568	; 0x238
    6132:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    6134:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6136:	a98e      	add	r1, sp, #568	; 0x238
    6138:	591b      	ldr	r3, [r3, r4]
    613a:	a866      	add	r0, sp, #408	; 0x198
    613c:	9302      	str	r3, [sp, #8]
    613e:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    6140:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6142:	aa66      	add	r2, sp, #408	; 0x198
    6144:	781b      	ldrb	r3, [r3, #0]
    6146:	a92e      	add	r1, sp, #184	; 0xb8
    6148:	b25b      	sxtb	r3, r3
    614a:	a88e      	add	r0, sp, #568	; 0x238
    614c:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    614e:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6150:	a98e      	add	r1, sp, #568	; 0x238
    6152:	591b      	ldr	r3, [r3, r4]
    6154:	a82e      	add	r0, sp, #184	; 0xb8
    6156:	9302      	str	r3, [sp, #8]
    6158:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    615a:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    615c:	4642      	mov	r2, r8
    615e:	781b      	ldrb	r3, [r3, #0]
    6160:	a966      	add	r1, sp, #408	; 0x198
    6162:	b25b      	sxtb	r3, r3
    6164:	a88e      	add	r0, sp, #568	; 0x238
    6166:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    6168:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    616a:	a98e      	add	r1, sp, #568	; 0x238
    616c:	591b      	ldr	r3, [r3, r4]
    616e:	a866      	add	r0, sp, #408	; 0x198
    6170:	9302      	str	r3, [sp, #8]
    6172:	4798      	blx	r3
    uECC_vli_mult(product, left, right, curve->num_words);
    6174:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6176:	aa66      	add	r2, sp, #408	; 0x198
    6178:	781b      	ldrb	r3, [r3, #0]
    617a:	a936      	add	r1, sp, #216	; 0xd8
    617c:	b25b      	sxtb	r3, r3
    617e:	a88e      	add	r0, sp, #568	; 0x238
    6180:	47b8      	blx	r7
    curve->mmod_fast(result, product);
    6182:	9ba8      	ldr	r3, [sp, #672]	; 0x2a0
    6184:	a98e      	add	r1, sp, #568	; 0x238
    6186:	591b      	ldr	r3, [r3, r4]
    6188:	a836      	add	r0, sp, #216	; 0xd8
    618a:	4798      	blx	r3
        if (left[i] > right[i]) {
    618c:	9b07      	ldr	r3, [sp, #28]
    618e:	681a      	ldr	r2, [r3, #0]
    6190:	9b06      	ldr	r3, [sp, #24]
    6192:	3bc1      	subs	r3, #193	; 0xc1
    6194:	3bff      	subs	r3, #255	; 0xff
    6196:	681b      	ldr	r3, [r3, #0]
    6198:	429a      	cmp	r2, r3
    619a:	d81a      	bhi.n	61d2 <uECC_verify+0x78a>
        } else if (left[i] < right[i]) {
    619c:	d310      	bcc.n	61c0 <uECC_verify+0x778>
    619e:	464a      	mov	r2, r9
    61a0:	e00a      	b.n	61b8 <uECC_verify+0x770>
        if (left[i] > right[i]) {
    61a2:	a89e      	add	r0, sp, #632	; 0x278
    61a4:	4684      	mov	ip, r0
    61a6:	0093      	lsls	r3, r2, #2
    61a8:	58e9      	ldr	r1, [r5, r3]
    61aa:	4463      	add	r3, ip
    61ac:	3bc1      	subs	r3, #193	; 0xc1
    61ae:	3bff      	subs	r3, #255	; 0xff
    61b0:	681b      	ldr	r3, [r3, #0]
    61b2:	4299      	cmp	r1, r3
    61b4:	d80d      	bhi.n	61d2 <uECC_verify+0x78a>
        } else if (left[i] < right[i]) {
    61b6:	d303      	bcc.n	61c0 <uECC_verify+0x778>
    61b8:	3a01      	subs	r2, #1
    61ba:	b252      	sxtb	r2, r2
    for (i = num_words - 1; i >= 0; --i) {
    61bc:	1c53      	adds	r3, r2, #1
    61be:	d1f0      	bne.n	61a2 <uECC_verify+0x75a>
        uECC_vli_sub(rx, rx, curve->n, num_n_words);
    61c0:	f240 7451 	movw	r4, #1873	; 0x751
    61c4:	a92e      	add	r1, sp, #184	; 0xb8
    61c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61c8:	002a      	movs	r2, r5
    61ca:	0008      	movs	r0, r1
    61cc:	f2c0 0400 	movt	r4, #0
    61d0:	47a0      	blx	r4
    for (i = num_words - 1; i >= 0; --i) {
    61d2:	466b      	mov	r3, sp
    61d4:	220c      	movs	r2, #12
    61d6:	2000      	movs	r0, #0
    61d8:	569a      	ldrsb	r2, [r3, r2]
        diff |= (left[i] ^ right[i]);
    61da:	a99e      	add	r1, sp, #632	; 0x278
    61dc:	468c      	mov	ip, r1
    61de:	0093      	lsls	r3, r2, #2
    61e0:	4463      	add	r3, ip
    61e2:	0019      	movs	r1, r3
    61e4:	3b21      	subs	r3, #33	; 0x21
    61e6:	39c1      	subs	r1, #193	; 0xc1
    61e8:	39ff      	subs	r1, #255	; 0xff
    61ea:	3bff      	subs	r3, #255	; 0xff
    61ec:	6809      	ldr	r1, [r1, #0]
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	3a01      	subs	r2, #1
    61f2:	404b      	eors	r3, r1
    61f4:	b252      	sxtb	r2, r2
    61f6:	4318      	orrs	r0, r3
    for (i = num_words - 1; i >= 0; --i) {
    61f8:	1c53      	adds	r3, r2, #1
    61fa:	d1ee      	bne.n	61da <uECC_verify+0x792>
    61fc:	4242      	negs	r2, r0
    61fe:	4142      	adcs	r2, r0
    return (int)(uECC_vli_equal(rx, r, num_words));
    6200:	e54b      	b.n	5c9a <uECC_verify+0x252>
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    6202:	464b      	mov	r3, r9
    return (i + 1);
    6204:	3301      	adds	r3, #1
    6206:	b25b      	sxtb	r3, r3
        return 0;
    6208:	2100      	movs	r1, #0
    if (num_digits == 0) {
    620a:	2b00      	cmp	r3, #0
    620c:	d100      	bne.n	6210 <uECC_verify+0x7c8>
    620e:	e68a      	b.n	5f26 <uECC_verify+0x4de>
    digit = vli[num_digits - 1];
    6210:	a99e      	add	r1, sp, #632	; 0x278
    6212:	468c      	mov	ip, r1
    6214:	4a0b      	ldr	r2, [pc, #44]	; (6244 <uECC_verify+0x7fc>)
    6216:	4909      	ldr	r1, [pc, #36]	; (623c <uECC_verify+0x7f4>)
    6218:	189a      	adds	r2, r3, r2
    621a:	0092      	lsls	r2, r2, #2
    621c:	4462      	add	r2, ip
    621e:	468c      	mov	ip, r1
    6220:	4462      	add	r2, ip
    6222:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    6224:	2100      	movs	r1, #0
    6226:	b122      	cbz	r2, 6232 <uECC_verify+0x7ea>
        digit >>= 1;
    6228:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    622a:	3101      	adds	r1, #1
    622c:	2a00      	cmp	r2, #0
    622e:	d1fb      	bne.n	6228 <uECC_verify+0x7e0>
    6230:	b289      	uxth	r1, r1
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    6232:	3b01      	subs	r3, #1
    6234:	015b      	lsls	r3, r3, #5
    6236:	18c9      	adds	r1, r1, r3
    6238:	b209      	sxth	r1, r1
    623a:	e674      	b.n	5f26 <uECC_verify+0x4de>
    623c:	fffffde0 	.word	0xfffffde0
    6240:	fffffe00 	.word	0xfffffe00
    6244:	3fffffff 	.word	0x3fffffff
    for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
    6248:	464b      	mov	r3, r9
    return (i + 1);
    624a:	3301      	adds	r3, #1
    624c:	b25b      	sxtb	r3, r3
        return 0;
    624e:	2000      	movs	r0, #0
    if (num_digits == 0) {
    6250:	2b00      	cmp	r3, #0
    6252:	d100      	bne.n	6256 <uECC_verify+0x80e>
    6254:	e681      	b.n	5f5a <uECC_verify+0x512>
    digit = vli[num_digits - 1];
    6256:	a89e      	add	r0, sp, #632	; 0x278
    6258:	4684      	mov	ip, r0
    625a:	4a1a      	ldr	r2, [pc, #104]	; (62c4 <uECC_verify+0x87c>)
    625c:	481a      	ldr	r0, [pc, #104]	; (62c8 <uECC_verify+0x880>)
    625e:	189a      	adds	r2, r3, r2
    6260:	0092      	lsls	r2, r2, #2
    6262:	4462      	add	r2, ip
    6264:	4684      	mov	ip, r0
    6266:	4462      	add	r2, ip
    6268:	6812      	ldr	r2, [r2, #0]
    for (i = 0; digit; ++i) {
    626a:	2000      	movs	r0, #0
    626c:	b122      	cbz	r2, 6278 <uECC_verify+0x830>
        digit >>= 1;
    626e:	0852      	lsrs	r2, r2, #1
    for (i = 0; digit; ++i) {
    6270:	3001      	adds	r0, #1
    6272:	2a00      	cmp	r2, #0
    6274:	d1fb      	bne.n	626e <uECC_verify+0x826>
    6276:	b280      	uxth	r0, r0
    return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
    6278:	3b01      	subs	r3, #1
    627a:	015b      	lsls	r3, r3, #5
    627c:	18c0      	adds	r0, r0, r3
    627e:	b200      	sxth	r0, r0
    6280:	e66b      	b.n	5f5a <uECC_verify+0x512>
    6282:	0022      	movs	r2, r4
    6284:	2100      	movs	r1, #0
    6286:	4640      	mov	r0, r8
    6288:	47d8      	blx	fp
    628a:	e5f0      	b.n	5e6e <uECC_verify+0x426>
    628c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    628e:	2100      	movs	r1, #0
    6290:	4640      	mov	r0, r8
    6292:	47d8      	blx	fp
    6294:	e745      	b.n	6122 <uECC_verify+0x6da>
    6296:	f246 6b67 	movw	fp, #26215	; 0x6667
    629a:	ab26      	add	r3, sp, #152	; 0x98
    629c:	2100      	movs	r1, #0
    629e:	0018      	movs	r0, r3
    62a0:	f2c0 0b00 	movt	fp, #0
    62a4:	4698      	mov	r8, r3
    62a6:	47d8      	blx	fp
    62a8:	e55c      	b.n	5d64 <uECC_verify+0x31c>
        dest[i] = src[i];
    62aa:	2304      	movs	r3, #4
    62ac:	930d      	str	r3, [sp, #52]	; 0x34
    62ae:	001a      	movs	r2, r3
    62b0:	e5a6      	b.n	5e00 <uECC_verify+0x3b8>
    62b2:	f246 6b67 	movw	fp, #26215	; 0x6667
    62b6:	ab26      	add	r3, sp, #152	; 0x98
    62b8:	f2c0 0b00 	movt	fp, #0
    62bc:	4698      	mov	r8, r3
    62be:	e551      	b.n	5d64 <uECC_verify+0x31c>
        vli[i] = 0;
    62c0:	2204      	movs	r2, #4
    62c2:	e528      	b.n	5d16 <uECC_verify+0x2ce>
    62c4:	3fffffff 	.word	0x3fffffff
    62c8:	fffffe00 	.word	0xfffffe00

000062cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    62cc:	e7fe      	b.n	62cc <Dummy_Handler>
    62ce:	46c0      	nop			; (mov r8, r8)

000062d0 <Oak_Handler>:
        while (1) {
        }
}

void Oak_Handler(void)
{
    62d0:	e7fe      	b.n	62d0 <Oak_Handler>
    62d2:	46c0      	nop			; (mov r8, r8)

000062d4 <Reset_Handler>:
        if (pSrc != pDest) {
    62d4:	f646 4170 	movw	r1, #27760	; 0x6c70
    62d8:	f240 0000 	movw	r0, #0
    62dc:	f2c0 0100 	movt	r1, #0
    62e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    62e4:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    62e6:	4281      	cmp	r1, r0
    62e8:	d00f      	beq.n	630a <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    62ea:	f240 03d0 	movw	r3, #208	; 0xd0
    62ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    62f2:	4298      	cmp	r0, r3
    62f4:	d209      	bcs.n	630a <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    62f6:	43c2      	mvns	r2, r0
    62f8:	18d2      	adds	r2, r2, r3
    62fa:	f246 6331 	movw	r3, #26161	; 0x6631
    62fe:	0892      	lsrs	r2, r2, #2
    6300:	3201      	adds	r2, #1
    6302:	0092      	lsls	r2, r2, #2
    6304:	f2c0 0300 	movt	r3, #0
    6308:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    630a:	f240 00d0 	movw	r0, #208	; 0xd0
    630e:	f240 1300 	movw	r3, #256	; 0x100
    6312:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6316:	f2c2 0300 	movt	r3, #8192	; 0x2000
    631a:	4298      	cmp	r0, r3
    631c:	d20a      	bcs.n	6334 <Reset_Handler+0x60>
                *pDest++ = 0;
    631e:	43c2      	mvns	r2, r0
    6320:	18d2      	adds	r2, r2, r3
    6322:	f246 6367 	movw	r3, #26215	; 0x6667
    6326:	0892      	lsrs	r2, r2, #2
    6328:	3201      	adds	r2, #1
    632a:	0092      	lsls	r2, r2, #2
    632c:	2100      	movs	r1, #0
    632e:	f2c0 0300 	movt	r3, #0
    6332:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6334:	f240 0300 	movw	r3, #0
    6338:	227f      	movs	r2, #127	; 0x7f
    633a:	f2c0 0300 	movt	r3, #0
    633e:	4393      	bics	r3, r2
    6340:	f64e 5200 	movw	r2, #60672	; 0xed00
    6344:	f2ce 0200 	movt	r2, #57344	; 0xe000
    6348:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    634a:	f246 53cd 	movw	r3, #26061	; 0x65cd
    634e:	f2c0 0300 	movt	r3, #0
    6352:	4798      	blx	r3
        main();
    6354:	f246 3375 	movw	r3, #25461	; 0x6375
    6358:	f2c0 0300 	movt	r3, #0
    635c:	4798      	blx	r3
    635e:	e7fe      	b.n	635e <Reset_Handler+0x8a>

00006360 <SystemInit>:
    6360:	f240 0304 	movw	r3, #4
    6364:	f640 1200 	movw	r2, #2304	; 0x900
    6368:	f2c2 0300 	movt	r3, #8192	; 0x2000
    636c:	f2c0 023d 	movt	r2, #61	; 0x3d
    6370:	601a      	str	r2, [r3, #0]
    6372:	4770      	bx	lr

00006374 <main>:
int main(void)
{
	funcptr_void NonSecure_ResetHandler;
  	
	/* Initialize the SAM system */
    SystemInit();
    6374:	f246 3361 	movw	r3, #25441	; 0x6361
{
    6378:	b510      	push	{r4, lr}
    SystemInit();
    637a:	f2c0 0300 	movt	r3, #0
    637e:	4798      	blx	r3
	
	// Switch to 16MHz clock (disable prescaler)
	OSCCTRL->OSC16MCTRL.reg = OSCCTRL_OSC16MCTRL_ENABLE | OSCCTRL_OSC16MCTRL_FSEL_16;
    6380:	f241 0300 	movw	r3, #4096	; 0x1000
    6384:	220e      	movs	r2, #14
    6386:	f2c4 0300 	movt	r3, #16384	; 0x4000
    638a:	761a      	strb	r2, [r3, #24]
	
	/* Setup Port Security Attribution of I/O Pins */
	PORT_SEC->Group[0].NONSEC.reg = CONF_PORT_INIT_NONSEC0_VAL;
    638c:	f243 2300 	movw	r3, #12800	; 0x3200
    6390:	f240 32a0 	movw	r2, #928	; 0x3a0
    6394:	f2c4 0300 	movt	r3, #16384	; 0x4000
    6398:	f2c0 3240 	movt	r2, #832	; 0x340
    639c:	66da      	str	r2, [r3, #108]	; 0x6c
	NVMCTRL_SEC->NONSEC.bit.WRITE = 1;
    639e:	f245 0300 	movw	r3, #20480	; 0x5000
    63a2:	2101      	movs	r1, #1
    63a4:	f2c4 1300 	movt	r3, #16640	; 0x4100
    63a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    63aa:	430a      	orrs	r2, r1
    63ac:	641a      	str	r2, [r3, #64]	; 0x40

	/* Setup NVIC Interrupt Target Non-Secure state */
	NVIC->ITNS[0] = CONF_NVIC_INIT_ITNS0_VAL;
    63ae:	f24e 1300 	movw	r3, #57600	; 0xe100
    63b2:	f240 2280 	movw	r2, #640	; 0x280
    63b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
    63ba:	3103      	adds	r1, #3
    63bc:	5099      	str	r1, [r3, r2]
	NVIC->ITNS[1] = CONF_NVIC_INIT_ITNS1_VAL;
    63be:	3104      	adds	r1, #4
    63c0:	3204      	adds	r2, #4
    63c2:	5099      	str	r1, [r3, r2]

	/* Set non-secure main stack (MSP_NS) */
	__TZ_set_MSP_NS(*((uint32_t *)(TZ_START_NS)));
    63c4:	f248 0300 	movw	r3, #32768	; 0x8000
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    63c8:	681b      	ldr	r3, [r3, #0]
    63ca:	f383 8888 	msr	MSP_NS, r3
  
	/* Get non-secure reset handler */
	NonSecure_ResetHandler = (funcptr_void)(*((uint32_t *)((TZ_START_NS) + 4U)));
    63ce:	f248 0304 	movw	r3, #32772	; 0x8004
  
	/* Start non-secure state software application */
	NonSecure_ResetHandler();
    63d2:	681c      	ldr	r4, [r3, #0]
    63d4:	0864      	lsrs	r4, r4, #1
    63d6:	0064      	lsls	r4, r4, #1
    63d8:	0020      	movs	r0, r4
    63da:	0021      	movs	r1, r4
    63dc:	0022      	movs	r2, r4
    63de:	0023      	movs	r3, r4
    63e0:	f000 f8ac 	bl	653c <__gnu_cmse_nonsecure_call>
    while (1) 
    {
		edsign_sign(nsig, pk, sk, m, 10);
		__NOP();
    }*/
}
    63e4:	2000      	movs	r0, #0
    63e6:	bd10      	pop	{r4, pc}

000063e8 <_sbrk>:
{

	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	
	if (heap == NULL) {
    63e8:	f240 03ec 	movw	r3, #236	; 0xec
    63ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
    63f0:	681a      	ldr	r2, [r3, #0]
    63f2:	b11a      	cbz	r2, 63fc <_sbrk+0x14>
		heap = (unsigned char *) &(_sheap);
	}
	prev_heap = heap;
	heap += incr;
    63f4:	1810      	adds	r0, r2, r0
    63f6:	6018      	str	r0, [r3, #0]
	
	return (caddr_t) prev_heap;
}
    63f8:	0010      	movs	r0, r2
    63fa:	4770      	bx	lr
    63fc:	f240 1200 	movw	r2, #256	; 0x100
    6400:	f2c2 0200 	movt	r2, #8192	; 0x2000
    6404:	e7f6      	b.n	63f4 <_sbrk+0xc>
    6406:	46c0      	nop			; (mov r8, r8)

00006408 <pox>:
	else out = HAL_GPIO_BUTTON_read();
	sum += out;
	pox_output[0] = sum;
}
	
void pox(pox_call_t *pox_fn, uint8_t *pox_token) {
    6408:	b5f0      	push	{r4, r5, r6, r7, lr}
    640a:	4657      	mov	r7, sl
    640c:	46de      	mov	lr, fp
    640e:	464e      	mov	r6, r9
    6410:	4645      	mov	r5, r8
    6412:	b5e0      	push	{r5, r6, r7, lr}
    6414:	0004      	movs	r4, r0
    6416:	b0a7      	sub	sp, #156	; 0x9c
    6418:	000f      	movs	r7, r1
  __ASM volatile ("cpsid i" : : : "memory");
    641a:	b672      	cpsid	i
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
    641c:	f240 05ec 	movw	r5, #236	; 0xec
    6420:	f2c2 0500 	movt	r5, #8192	; 0x2000
    6424:	6943      	ldr	r3, [r0, #20]
    6426:	686a      	ldr	r2, [r5, #4]
    6428:	4293      	cmp	r3, r2
    642a:	d973      	bls.n	6514 <pox+0x10c>
	sha256_initialize(&hash);
    642c:	f240 1a85 	movw	sl, #389	; 0x185
    6430:	a804      	add	r0, sp, #16
    6432:	f2c0 0a00 	movt	sl, #0
    6436:	47d0      	blx	sl
	sha256_update(&hash, &(pox_fn->counter), 4);
    6438:	f240 0c14 	movw	ip, #20
    643c:	f240 16f5 	movw	r6, #501	; 0x1f5
    6440:	44a4      	add	ip, r4
    6442:	4663      	mov	r3, ip
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6444:	f240 694d 	movw	r9, #1613	; 0x64d
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    6448:	f645 18b9 	movw	r8, #22969	; 0x59b9
	sha256_update(&hash, &(pox_fn->counter), 4);
    644c:	4661      	mov	r1, ip
    644e:	2204      	movs	r2, #4
    6450:	a804      	add	r0, sp, #16
    6452:	f2c0 0600 	movt	r6, #0
    6456:	9303      	str	r3, [sp, #12]
    6458:	47b0      	blx	r6
	sha256_update(&hash, &(pox_fn->addr), 4);
    645a:	2204      	movs	r2, #4
    645c:	0021      	movs	r1, r4
    645e:	a804      	add	r0, sp, #16
    6460:	47b0      	blx	r6
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6462:	f2c0 0900 	movt	r9, #0
    6466:	68a2      	ldr	r2, [r4, #8]
    6468:	6861      	ldr	r1, [r4, #4]
    646a:	a804      	add	r0, sp, #16
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    646c:	f2c0 0800 	movt	r8, #0
	sha256_finalize(&hash, pox_fn->input, pox_fn->input_size);
    6470:	47c8      	blx	r9
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    6472:	47c0      	blx	r8
	success = uECC_verify(vrf_pk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    6474:	f645 2b49 	movw	fp, #23113	; 0x5a49
    6478:	9000      	str	r0, [sp, #0]
    647a:	f240 0008 	movw	r0, #8
    647e:	003b      	movs	r3, r7
    6480:	2220      	movs	r2, #32
    6482:	a904      	add	r1, sp, #16
    6484:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6488:	f2c0 0b00 	movt	fp, #0
    648c:	47d8      	blx	fp
	if(success == 1) pox_fn->output[0] = 0xaa;
    648e:	2801      	cmp	r0, #1
    6490:	d04f      	beq.n	6532 <pox+0x12a>
	else pox_fn->output[0] = 0xff;
    6492:	23ff      	movs	r3, #255	; 0xff
    6494:	68e2      	ldr	r2, [r4, #12]
    6496:	7013      	strb	r3, [r2, #0]
	return (my_counter < pox_fn->counter) && verify_req(pox_fn, pox_token);
    6498:	b3e0      	cbz	r0, 6514 <pox+0x10c>
	// Verify request
	if(check_request(pox_fn, pox_token) == 0) {
		return;
	}
	
	my_counter = pox_fn->counter;
    649a:	6963      	ldr	r3, [r4, #20]
		
	// h <- Hash(PMEM, F, I, c)
	
	sha256 hash;
	sha256_initialize(&hash);
    649c:	a804      	add	r0, sp, #16
	my_counter = pox_fn->counter;
    649e:	606b      	str	r3, [r5, #4]
	sha256_initialize(&hash);
    64a0:	47d0      	blx	sl
	sha256_update(&hash, &(pox_fn->counter), 4);
    64a2:	9903      	ldr	r1, [sp, #12]
    64a4:	a804      	add	r0, sp, #16
    64a6:	2204      	movs	r2, #4
    64a8:	47b0      	blx	r6
	sha256_update(&hash, &(pox_fn->addr), 4);
    64aa:	0021      	movs	r1, r4
    64ac:	a804      	add	r0, sp, #16
    64ae:	2204      	movs	r2, #4
    64b0:	47b0      	blx	r6
	sha256_update(&hash, pox_fn->input, pox_fn->input_size);
    64b2:	68a2      	ldr	r2, [r4, #8]
    64b4:	6861      	ldr	r1, [r4, #4]
    64b6:	a804      	add	r0, sp, #16
    64b8:	47b0      	blx	r6
	sha256_update(&hash, mem, mem_len);
    64ba:	f248 0200 	movw	r2, #32768	; 0x8000
    64be:	f248 0100 	movw	r1, #32768	; 0x8000
    64c2:	a804      	add	r0, sp, #16
    64c4:	47b0      	blx	r6
    64c6:	b672      	cpsid	i
	if(val == 0) out = HAL_GPIO_LED_read();
    64c8:	6863      	ldr	r3, [r4, #4]
	
	
	__disable_irq();
	test(pox_fn->input[0], pox_fn->output);
    64ca:	68e2      	ldr	r2, [r4, #12]
	if(val == 0) out = HAL_GPIO_LED_read();
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	bb43      	cbnz	r3, 6522 <pox+0x11a>
  }										\

  HAL_GPIO_PIN(UART_TX,  A, 24)
  HAL_GPIO_PIN(UART_RX,  A, 25)

  HAL_GPIO_PIN(LED,      A, 7)
    64d0:	f243 0300 	movw	r3, #12288	; 0x3000
    64d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    64d8:	6a1b      	ldr	r3, [r3, #32]
    64da:	061b      	lsls	r3, r3, #24
    64dc:	0fdb      	lsrs	r3, r3, #31
	sum += out;
    64de:	f240 0508 	movw	r5, #8
    64e2:	2140      	movs	r1, #64	; 0x40
    64e4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    64e8:	5c68      	ldrb	r0, [r5, r1]
    64ea:	181b      	adds	r3, r3, r0
    64ec:	b2db      	uxtb	r3, r3
    64ee:	546b      	strb	r3, [r5, r1]
	pox_output[0] = sum;
    64f0:	7013      	strb	r3, [r2, #0]
	
	// h <- Hash(h, O)
	sha256_finalize(&hash, pox_fn->output, pox_fn->output_size);
    64f2:	6922      	ldr	r2, [r4, #16]
    64f4:	68e1      	ldr	r1, [r4, #12]
    64f6:	a804      	add	r0, sp, #16
    64f8:	47c8      	blx	r9
	hmac_sha256_finalize(&hmac, hash.hash, SHA256_DIGEST_SIZE);
	memcpy(pox_token, hmac.digest, SHA256_DIGEST_SIZE);
	
	#elif defined(CRYPTO_ECC)
	const struct uECC_Curve_t * curve = uECC_secp256r1();
	uECC_sign(prv_sk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    64fa:	f645 14c5 	movw	r4, #22981	; 0x59c5
	const struct uECC_Curve_t * curve = uECC_secp256r1();
    64fe:	47c0      	blx	r8
	uECC_sign(prv_sk, hash.hash, SHA256_DIGEST_SIZE, pox_token, curve);
    6500:	3544      	adds	r5, #68	; 0x44
    6502:	9000      	str	r0, [sp, #0]
    6504:	003b      	movs	r3, r7
    6506:	2220      	movs	r2, #32
    6508:	a904      	add	r1, sp, #16
    650a:	0028      	movs	r0, r5
    650c:	f2c0 0400 	movt	r4, #0
    6510:	47a0      	blx	r4
  __ASM volatile ("cpsie i" : : : "memory");
    6512:	b662      	cpsie	i
	#ifdef BENCHMARK_STACK
	uint32_t *out = (uint32_t*) (pox_fn->output);
	out[0] = stack_used();
	//out[0] = stack_pointer;
	#endif
}
    6514:	b027      	add	sp, #156	; 0x9c
    6516:	bc3c      	pop	{r2, r3, r4, r5}
    6518:	4690      	mov	r8, r2
    651a:	4699      	mov	r9, r3
    651c:	46a2      	mov	sl, r4
    651e:	46ab      	mov	fp, r5
    6520:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_GPIO_PIN(DHT,      A, 8)

  HAL_GPIO_PIN(BUTTON,   A, 27)
    6522:	f243 0300 	movw	r3, #12288	; 0x3000
    6526:	f2c4 0300 	movt	r3, #16384	; 0x4000
    652a:	6a1b      	ldr	r3, [r3, #32]
    652c:	011b      	lsls	r3, r3, #4
	else out = HAL_GPIO_BUTTON_read();
    652e:	0fdb      	lsrs	r3, r3, #31
    6530:	e7d5      	b.n	64de <pox+0xd6>
	if(success == 1) pox_fn->output[0] = 0xaa;
    6532:	23aa      	movs	r3, #170	; 0xaa
    6534:	68e2      	ldr	r2, [r4, #12]
    6536:	7013      	strb	r3, [r2, #0]
    6538:	e7af      	b.n	649a <pox+0x92>
    653a:	46c0      	nop			; (mov r8, r8)

0000653c <__gnu_cmse_nonsecure_call>:
    653c:	b5e0      	push	{r5, r6, r7, lr}
    653e:	4645      	mov	r5, r8
    6540:	464e      	mov	r6, r9
    6542:	4657      	mov	r7, sl
    6544:	b4e0      	push	{r5, r6, r7}
    6546:	465d      	mov	r5, fp
    6548:	b420      	push	{r5}
    654a:	4625      	mov	r5, r4
    654c:	4626      	mov	r6, r4
    654e:	4627      	mov	r7, r4
    6550:	46a0      	mov	r8, r4
    6552:	46a1      	mov	r9, r4
    6554:	46a2      	mov	sl, r4
    6556:	46a3      	mov	fp, r4
    6558:	46a4      	mov	ip, r4
    655a:	f384 8800 	msr	CPSR_f, r4
    655e:	47a4      	blxns	r4
    6560:	bc20      	pop	{r5}
    6562:	46ab      	mov	fp, r5
    6564:	bce0      	pop	{r5, r6, r7}
    6566:	46ba      	mov	sl, r7
    6568:	46b1      	mov	r9, r6
    656a:	46a8      	mov	r8, r5
    656c:	bde0      	pop	{r5, r6, r7, pc}
	...

00006570 <__aeabi_lmul>:
    6570:	b5f0      	push	{r4, r5, r6, r7, lr}
    6572:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6576:	46ce      	mov	lr, r9
    6578:	4647      	mov	r7, r8
    657a:	002c      	movs	r4, r5
    657c:	4015      	ands	r5, r2
    657e:	4699      	mov	r9, r3
    6580:	002b      	movs	r3, r5
    6582:	4004      	ands	r4, r0
    6584:	0c16      	lsrs	r6, r2, #16
    6586:	b580      	push	{r7, lr}
    6588:	0c07      	lsrs	r7, r0, #16
    658a:	4363      	muls	r3, r4
    658c:	437d      	muls	r5, r7
    658e:	4377      	muls	r7, r6
    6590:	4366      	muls	r6, r4
    6592:	0c1c      	lsrs	r4, r3, #16
    6594:	1976      	adds	r6, r6, r5
    6596:	19a4      	adds	r4, r4, r6
    6598:	469c      	mov	ip, r3
    659a:	42a5      	cmp	r5, r4
    659c:	d903      	bls.n	65a6 <__aeabi_lmul+0x36>
    659e:	2380      	movs	r3, #128	; 0x80
    65a0:	025b      	lsls	r3, r3, #9
    65a2:	4698      	mov	r8, r3
    65a4:	4447      	add	r7, r8
    65a6:	0c25      	lsrs	r5, r4, #16
    65a8:	19ef      	adds	r7, r5, r7
    65aa:	4663      	mov	r3, ip
    65ac:	f64f 75ff 	movw	r5, #65535	; 0xffff
    65b0:	401d      	ands	r5, r3
    65b2:	464b      	mov	r3, r9
    65b4:	4351      	muls	r1, r2
    65b6:	4343      	muls	r3, r0
    65b8:	0424      	lsls	r4, r4, #16
    65ba:	1964      	adds	r4, r4, r5
    65bc:	1859      	adds	r1, r3, r1
    65be:	19c9      	adds	r1, r1, r7
    65c0:	0020      	movs	r0, r4
    65c2:	bc0c      	pop	{r2, r3}
    65c4:	4690      	mov	r8, r2
    65c6:	4699      	mov	r9, r3
    65c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65ca:	46c0      	nop			; (mov r8, r8)

000065cc <__libc_init_array>:
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	2500      	movs	r5, #0
    65d0:	4b0e      	ldr	r3, [pc, #56]	; (660c <__libc_init_array+0x40>)
    65d2:	4c0f      	ldr	r4, [pc, #60]	; (6610 <__libc_init_array+0x44>)
    65d4:	1ae4      	subs	r4, r4, r3
    65d6:	10a4      	asrs	r4, r4, #2
    65d8:	42a5      	cmp	r5, r4
    65da:	d109      	bne.n	65f0 <__libc_init_array+0x24>
    65dc:	2500      	movs	r5, #0
    65de:	f000 fb37 	bl	6c50 <_init>
    65e2:	4c0c      	ldr	r4, [pc, #48]	; (6614 <__libc_init_array+0x48>)
    65e4:	4b0c      	ldr	r3, [pc, #48]	; (6618 <__libc_init_array+0x4c>)
    65e6:	1ae4      	subs	r4, r4, r3
    65e8:	10a4      	asrs	r4, r4, #2
    65ea:	42a5      	cmp	r5, r4
    65ec:	d107      	bne.n	65fe <__libc_init_array+0x32>
    65ee:	bd70      	pop	{r4, r5, r6, pc}
    65f0:	4a06      	ldr	r2, [pc, #24]	; (660c <__libc_init_array+0x40>)
    65f2:	00ab      	lsls	r3, r5, #2
    65f4:	189b      	adds	r3, r3, r2
    65f6:	681b      	ldr	r3, [r3, #0]
    65f8:	4798      	blx	r3
    65fa:	3501      	adds	r5, #1
    65fc:	e7ec      	b.n	65d8 <__libc_init_array+0xc>
    65fe:	4a06      	ldr	r2, [pc, #24]	; (6618 <__libc_init_array+0x4c>)
    6600:	00ab      	lsls	r3, r5, #2
    6602:	189b      	adds	r3, r3, r2
    6604:	681b      	ldr	r3, [r3, #0]
    6606:	4798      	blx	r3
    6608:	3501      	adds	r5, #1
    660a:	e7ee      	b.n	65ea <__libc_init_array+0x1e>
    660c:	00006c5c 	.word	0x00006c5c
    6610:	00006c5c 	.word	0x00006c5c
    6614:	00006c60 	.word	0x00006c60
    6618:	00006c5c 	.word	0x00006c5c

0000661c <malloc>:
    661c:	b510      	push	{r4, lr}
    661e:	4b03      	ldr	r3, [pc, #12]	; (662c <malloc+0x10>)
    6620:	0001      	movs	r1, r0
    6622:	6818      	ldr	r0, [r3, #0]
    6624:	f000 f828 	bl	6678 <_malloc_r>
    6628:	bd10      	pop	{r4, pc}
    662a:	46c0      	nop			; (mov r8, r8)
    662c:	2000006c 	.word	0x2000006c

00006630 <memcpy>:
    6630:	2300      	movs	r3, #0
    6632:	b510      	push	{r4, lr}
    6634:	429a      	cmp	r2, r3
    6636:	d100      	bne.n	663a <memcpy+0xa>
    6638:	bd10      	pop	{r4, pc}
    663a:	5ccc      	ldrb	r4, [r1, r3]
    663c:	54c4      	strb	r4, [r0, r3]
    663e:	3301      	adds	r3, #1
    6640:	e7f8      	b.n	6634 <memcpy+0x4>

00006642 <memmove>:
    6642:	b510      	push	{r4, lr}
    6644:	4288      	cmp	r0, r1
    6646:	d902      	bls.n	664e <memmove+0xc>
    6648:	188b      	adds	r3, r1, r2
    664a:	4298      	cmp	r0, r3
    664c:	d308      	bcc.n	6660 <memmove+0x1e>
    664e:	2300      	movs	r3, #0
    6650:	429a      	cmp	r2, r3
    6652:	d007      	beq.n	6664 <memmove+0x22>
    6654:	5ccc      	ldrb	r4, [r1, r3]
    6656:	54c4      	strb	r4, [r0, r3]
    6658:	3301      	adds	r3, #1
    665a:	e7f9      	b.n	6650 <memmove+0xe>
    665c:	5c8b      	ldrb	r3, [r1, r2]
    665e:	5483      	strb	r3, [r0, r2]
    6660:	3a01      	subs	r2, #1
    6662:	d2fb      	bcs.n	665c <memmove+0x1a>
    6664:	bd10      	pop	{r4, pc}

00006666 <memset>:
    6666:	0003      	movs	r3, r0
    6668:	1882      	adds	r2, r0, r2
    666a:	4293      	cmp	r3, r2
    666c:	d100      	bne.n	6670 <memset+0xa>
    666e:	4770      	bx	lr
    6670:	7019      	strb	r1, [r3, #0]
    6672:	3301      	adds	r3, #1
    6674:	e7f9      	b.n	666a <memset+0x4>
	...

00006678 <_malloc_r>:
    6678:	2303      	movs	r3, #3
    667a:	b570      	push	{r4, r5, r6, lr}
    667c:	1ccd      	adds	r5, r1, #3
    667e:	439d      	bics	r5, r3
    6680:	3508      	adds	r5, #8
    6682:	0006      	movs	r6, r0
    6684:	2d0c      	cmp	r5, #12
    6686:	d21c      	bcs.n	66c2 <_malloc_r+0x4a>
    6688:	250c      	movs	r5, #12
    668a:	42a9      	cmp	r1, r5
    668c:	d81b      	bhi.n	66c6 <_malloc_r+0x4e>
    668e:	0030      	movs	r0, r6
    6690:	f000 f89a 	bl	67c8 <__malloc_lock>
    6694:	4a25      	ldr	r2, [pc, #148]	; (672c <_malloc_r+0xb4>)
    6696:	6814      	ldr	r4, [r2, #0]
    6698:	0021      	movs	r1, r4
    669a:	b9c1      	cbnz	r1, 66ce <_malloc_r+0x56>
    669c:	4c24      	ldr	r4, [pc, #144]	; (6730 <_malloc_r+0xb8>)
    669e:	6823      	ldr	r3, [r4, #0]
    66a0:	b91b      	cbnz	r3, 66aa <_malloc_r+0x32>
    66a2:	0030      	movs	r0, r6
    66a4:	f000 f880 	bl	67a8 <_sbrk_r>
    66a8:	6020      	str	r0, [r4, #0]
    66aa:	0029      	movs	r1, r5
    66ac:	0030      	movs	r0, r6
    66ae:	f000 f87b 	bl	67a8 <_sbrk_r>
    66b2:	1c43      	adds	r3, r0, #1
    66b4:	d12d      	bne.n	6712 <_malloc_r+0x9a>
    66b6:	230c      	movs	r3, #12
    66b8:	0030      	movs	r0, r6
    66ba:	6033      	str	r3, [r6, #0]
    66bc:	f000 f885 	bl	67ca <__malloc_unlock>
    66c0:	e003      	b.n	66ca <_malloc_r+0x52>
    66c2:	2d00      	cmp	r5, #0
    66c4:	dae1      	bge.n	668a <_malloc_r+0x12>
    66c6:	230c      	movs	r3, #12
    66c8:	6033      	str	r3, [r6, #0]
    66ca:	2000      	movs	r0, #0
    66cc:	bd70      	pop	{r4, r5, r6, pc}
    66ce:	680b      	ldr	r3, [r1, #0]
    66d0:	1b5b      	subs	r3, r3, r5
    66d2:	d41b      	bmi.n	670c <_malloc_r+0x94>
    66d4:	2b0b      	cmp	r3, #11
    66d6:	d903      	bls.n	66e0 <_malloc_r+0x68>
    66d8:	600b      	str	r3, [r1, #0]
    66da:	18cc      	adds	r4, r1, r3
    66dc:	6025      	str	r5, [r4, #0]
    66de:	e003      	b.n	66e8 <_malloc_r+0x70>
    66e0:	428c      	cmp	r4, r1
    66e2:	d10f      	bne.n	6704 <_malloc_r+0x8c>
    66e4:	6863      	ldr	r3, [r4, #4]
    66e6:	6013      	str	r3, [r2, #0]
    66e8:	0030      	movs	r0, r6
    66ea:	f000 f86e 	bl	67ca <__malloc_unlock>
    66ee:	0020      	movs	r0, r4
    66f0:	2207      	movs	r2, #7
    66f2:	300b      	adds	r0, #11
    66f4:	1d23      	adds	r3, r4, #4
    66f6:	4390      	bics	r0, r2
    66f8:	1ac3      	subs	r3, r0, r3
    66fa:	2b00      	cmp	r3, #0
    66fc:	d0e6      	beq.n	66cc <_malloc_r+0x54>
    66fe:	425a      	negs	r2, r3
    6700:	50e2      	str	r2, [r4, r3]
    6702:	e7e3      	b.n	66cc <_malloc_r+0x54>
    6704:	684b      	ldr	r3, [r1, #4]
    6706:	6063      	str	r3, [r4, #4]
    6708:	000c      	movs	r4, r1
    670a:	e7ed      	b.n	66e8 <_malloc_r+0x70>
    670c:	000c      	movs	r4, r1
    670e:	6849      	ldr	r1, [r1, #4]
    6710:	e7c3      	b.n	669a <_malloc_r+0x22>
    6712:	2303      	movs	r3, #3
    6714:	1cc4      	adds	r4, r0, #3
    6716:	439c      	bics	r4, r3
    6718:	42a0      	cmp	r0, r4
    671a:	d0df      	beq.n	66dc <_malloc_r+0x64>
    671c:	1a21      	subs	r1, r4, r0
    671e:	0030      	movs	r0, r6
    6720:	f000 f842 	bl	67a8 <_sbrk_r>
    6724:	1c43      	adds	r3, r0, #1
    6726:	d1d9      	bne.n	66dc <_malloc_r+0x64>
    6728:	e7c5      	b.n	66b6 <_malloc_r+0x3e>
    672a:	46c0      	nop			; (mov r8, r8)
    672c:	200000f4 	.word	0x200000f4
    6730:	200000f8 	.word	0x200000f8

00006734 <rand>:
    6734:	4b16      	ldr	r3, [pc, #88]	; (6790 <rand+0x5c>)
    6736:	b510      	push	{r4, lr}
    6738:	681c      	ldr	r4, [r3, #0]
    673a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    673c:	b9bb      	cbnz	r3, 676e <rand+0x3a>
    673e:	2018      	movs	r0, #24
    6740:	f7ff ff6c 	bl	661c <malloc>
    6744:	f243 330e 	movw	r3, #13070	; 0x330e
    6748:	63a0      	str	r0, [r4, #56]	; 0x38
    674a:	8003      	strh	r3, [r0, #0]
    674c:	4b11      	ldr	r3, [pc, #68]	; (6794 <rand+0x60>)
    674e:	2201      	movs	r2, #1
    6750:	8043      	strh	r3, [r0, #2]
    6752:	f241 2334 	movw	r3, #4660	; 0x1234
    6756:	8083      	strh	r3, [r0, #4]
    6758:	4b0f      	ldr	r3, [pc, #60]	; (6798 <rand+0x64>)
    675a:	80c3      	strh	r3, [r0, #6]
    675c:	4b0f      	ldr	r3, [pc, #60]	; (679c <rand+0x68>)
    675e:	8103      	strh	r3, [r0, #8]
    6760:	2305      	movs	r3, #5
    6762:	8143      	strh	r3, [r0, #10]
    6764:	3306      	adds	r3, #6
    6766:	8183      	strh	r3, [r0, #12]
    6768:	2300      	movs	r3, #0
    676a:	6102      	str	r2, [r0, #16]
    676c:	6143      	str	r3, [r0, #20]
    676e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    6770:	4a0b      	ldr	r2, [pc, #44]	; (67a0 <rand+0x6c>)
    6772:	6920      	ldr	r0, [r4, #16]
    6774:	6961      	ldr	r1, [r4, #20]
    6776:	4b0b      	ldr	r3, [pc, #44]	; (67a4 <rand+0x70>)
    6778:	f7ff fefa 	bl	6570 <__aeabi_lmul>
    677c:	2201      	movs	r2, #1
    677e:	2300      	movs	r3, #0
    6780:	1880      	adds	r0, r0, r2
    6782:	4159      	adcs	r1, r3
    6784:	6120      	str	r0, [r4, #16]
    6786:	6161      	str	r1, [r4, #20]
    6788:	0048      	lsls	r0, r1, #1
    678a:	0840      	lsrs	r0, r0, #1
    678c:	bd10      	pop	{r4, pc}
    678e:	46c0      	nop			; (mov r8, r8)
    6790:	2000006c 	.word	0x2000006c
    6794:	ffffabcd 	.word	0xffffabcd
    6798:	ffffe66d 	.word	0xffffe66d
    679c:	ffffdeec 	.word	0xffffdeec
    67a0:	4c957f2d 	.word	0x4c957f2d
    67a4:	5851f42d 	.word	0x5851f42d

000067a8 <_sbrk_r>:
    67a8:	2300      	movs	r3, #0
    67aa:	b570      	push	{r4, r5, r6, lr}
    67ac:	4c05      	ldr	r4, [pc, #20]	; (67c4 <_sbrk_r+0x1c>)
    67ae:	0005      	movs	r5, r0
    67b0:	0008      	movs	r0, r1
    67b2:	6023      	str	r3, [r4, #0]
    67b4:	f7ff fe18 	bl	63e8 <_sbrk>
    67b8:	1c43      	adds	r3, r0, #1
    67ba:	d102      	bne.n	67c2 <_sbrk_r+0x1a>
    67bc:	6823      	ldr	r3, [r4, #0]
    67be:	b103      	cbz	r3, 67c2 <_sbrk_r+0x1a>
    67c0:	602b      	str	r3, [r5, #0]
    67c2:	bd70      	pop	{r4, r5, r6, pc}
    67c4:	200000fc 	.word	0x200000fc

000067c8 <__malloc_lock>:
    67c8:	4770      	bx	lr

000067ca <__malloc_unlock>:
    67ca:	4770      	bx	lr
    67cc:	428a2f98 	.word	0x428a2f98
    67d0:	71374491 	.word	0x71374491
    67d4:	b5c0fbcf 	.word	0xb5c0fbcf
    67d8:	e9b5dba5 	.word	0xe9b5dba5
    67dc:	3956c25b 	.word	0x3956c25b
    67e0:	59f111f1 	.word	0x59f111f1
    67e4:	923f82a4 	.word	0x923f82a4
    67e8:	ab1c5ed5 	.word	0xab1c5ed5
    67ec:	d807aa98 	.word	0xd807aa98
    67f0:	12835b01 	.word	0x12835b01
    67f4:	243185be 	.word	0x243185be
    67f8:	550c7dc3 	.word	0x550c7dc3
    67fc:	72be5d74 	.word	0x72be5d74
    6800:	80deb1fe 	.word	0x80deb1fe
    6804:	9bdc06a7 	.word	0x9bdc06a7
    6808:	c19bf174 	.word	0xc19bf174
    680c:	e49b69c1 	.word	0xe49b69c1
    6810:	efbe4786 	.word	0xefbe4786
    6814:	0fc19dc6 	.word	0x0fc19dc6
    6818:	240ca1cc 	.word	0x240ca1cc
    681c:	2de92c6f 	.word	0x2de92c6f
    6820:	4a7484aa 	.word	0x4a7484aa
    6824:	5cb0a9dc 	.word	0x5cb0a9dc
    6828:	76f988da 	.word	0x76f988da
    682c:	983e5152 	.word	0x983e5152
    6830:	a831c66d 	.word	0xa831c66d
    6834:	b00327c8 	.word	0xb00327c8
    6838:	bf597fc7 	.word	0xbf597fc7
    683c:	c6e00bf3 	.word	0xc6e00bf3
    6840:	d5a79147 	.word	0xd5a79147
    6844:	06ca6351 	.word	0x06ca6351
    6848:	14292967 	.word	0x14292967
    684c:	27b70a85 	.word	0x27b70a85
    6850:	2e1b2138 	.word	0x2e1b2138
    6854:	4d2c6dfc 	.word	0x4d2c6dfc
    6858:	53380d13 	.word	0x53380d13
    685c:	650a7354 	.word	0x650a7354
    6860:	766a0abb 	.word	0x766a0abb
    6864:	81c2c92e 	.word	0x81c2c92e
    6868:	92722c85 	.word	0x92722c85
    686c:	a2bfe8a1 	.word	0xa2bfe8a1
    6870:	a81a664b 	.word	0xa81a664b
    6874:	c24b8b70 	.word	0xc24b8b70
    6878:	c76c51a3 	.word	0xc76c51a3
    687c:	d192e819 	.word	0xd192e819
    6880:	d6990624 	.word	0xd6990624
    6884:	f40e3585 	.word	0xf40e3585
    6888:	106aa070 	.word	0x106aa070
    688c:	19a4c116 	.word	0x19a4c116
    6890:	1e376c08 	.word	0x1e376c08
    6894:	2748774c 	.word	0x2748774c
    6898:	34b0bcb5 	.word	0x34b0bcb5
    689c:	391c0cb3 	.word	0x391c0cb3
    68a0:	4ed8aa4a 	.word	0x4ed8aa4a
    68a4:	5b9cca4f 	.word	0x5b9cca4f
    68a8:	682e6ff3 	.word	0x682e6ff3
    68ac:	748f82ee 	.word	0x748f82ee
    68b0:	78a5636f 	.word	0x78a5636f
    68b4:	84c87814 	.word	0x84c87814
    68b8:	8cc70208 	.word	0x8cc70208
    68bc:	90befffa 	.word	0x90befffa
    68c0:	a4506ceb 	.word	0xa4506ceb
    68c4:	bef9a3f7 	.word	0xbef9a3f7
    68c8:	c67178f2 	.word	0xc67178f2

000068cc <curve_secp224r1>:
    68cc:	00e01c07 00000001 00000000 00000000     ................
    68dc:	ffffffff ffffffff ffffffff ffffffff     ................
    68ec:	00000000 5c5c2a3d 13dd2945 e0b8f03e     ....=*\\E)..>...
    68fc:	ffff16a2 ffffffff ffffffff ffffffff     ................
    690c:	00000000 115c1d21 343280d6 56c21122     ....!.\...24"..V
    691c:	4a03c1d3 321390b9 6bb4bf7f b70e0cbd     ...J...2...k....
    692c:	85007e34 44d58199 5a074764 cd4375a0     4~.....DdG.Z.uC.
    693c:	4c22dfe6 b5f723fb bd376388 00000000     .."L.#...c7.....
    694c:	00000000 2355ffb4 270b3943 d7bfd8ba     ......U#C9.'....
    695c:	5044b0b7 f5413256 0c04b3ab b4050a85     ..DPV2A.........
    696c:	00000000 000056b1 000042a1 00001de1     .....V...B......
    697c:	00000ef1                                ....

00006980 <curve_secp160r1>:
    6980:	00a11405 7fffffff ffffffff ffffffff     ................
    6990:	ffffffff ffffffff 00000000 00000000     ................
    69a0:	00000000 ca752257 f927aed3 0001f4c8     ....W"u...'.....
	...
    69b8:	00000001 00000000 00000000 13cbfc82     ................
    69c8:	68c38bb9 46646989 8ef57328 4a96b568     ...h.idF(s..h..J
    69d8:	7ac5fb32 04235137 59dcc912 3168947d     2..z7Q#....Y}.h1
    69e8:	23a62855 00000000 00000000 00000000     U(.#............
	...
    6a04:	c565fa45 81d4d4ad 65acf89f 54bd7a8b     E.e........e.z.T
    6a14:	1c97befc 00000000 00000000 00000000     ................
    6a24:	000056b1 00001645 00001de1 00001a81     .V..E...........

00006a34 <curve_secp192r1>:
    6a34:	00c01806 ffffffff ffffffff fffffffe     ................
    6a44:	ffffffff ffffffff ffffffff 00000000     ................
    6a54:	00000000 b4d22831 146bc9b1 99def836     ....1(....k.6...
    6a64:	ffffffff ffffffff ffffffff 00000000     ................
    6a74:	00000000 82ff1012 f4ff0afd 43a18800     ...............C
    6a84:	7cbf20eb b03090f6 188da80e 1e794811     . .|..0......Hy.
    6a94:	73f977a1 6b24cdd5 631011ed ffc8da78     .w.s..$k...cx...
    6aa4:	07192b95 00000000 00000000 00000000     .+..............
    6ab4:	00000000 c146b9b1 feb8deec 72243049     ......F.....I0$r
    6ac4:	0fa7e9ab e59c80e7 64210519 00000000     ..........!d....
    6ad4:	00000000 000056b1 00001645 00001de1     .....V..E.......
    6ae4:	00002091                                . ..

00006ae8 <curve_secp256k1>:
    6ae8:	01002008 fffffc2f fffffffe ffffffff     . ../...........
    6af8:	ffffffff ffffffff ffffffff ffffffff     ................
    6b08:	ffffffff d0364141 bfd25e8c af48a03b     ....AA6..^..;.H.
    6b18:	baaedce6 fffffffe ffffffff ffffffff     ................
    6b28:	ffffffff 16f81798 59f2815b 2dce28d9     ........[..Y.(.-
    6b38:	029bfcdb ce870b07 55a06295 f9dcbbac     .........b.U....
    6b48:	79be667e fb10d4b8 9c47d08f a6855419     ~f.y......G..T..
    6b58:	fd17b448 0e1108a8 5da4fbfc 26a3c465     H..........]e..&
    6b68:	483ada77 00000007 00000000 00000000     w.:H............
	...
    6b8c:	0000389d 00001645 00001f21 000022d1     .8..E...!...."..

00006b9c <curve_secp256r1>:
    6b9c:	01002008 ffffffff ffffffff ffffffff     . ..............
	...
    6bb8:	00000001 ffffffff fc632551 f3b9cac2     ........Q%c.....
    6bc8:	a7179e84 bce6faad ffffffff ffffffff     ................
    6bd8:	00000000 ffffffff d898c296 f4a13945     ............E9..
    6be8:	2deb33a0 77037d81 63a440f2 f8bce6e5     .3.-.}.w.@.c....
    6bf8:	e12c4247 6b17d1f2 37bf51f5 cbb64068     GB,....k.Q.7h@..
    6c08:	6b315ece 2bce3357 7c0f9e16 8ee7eb4a     .^1kW3.+...|J...
    6c18:	fe1a7f9b 4fe342e2 27d2604b 3bce3c3e     .....B.OK`.'><.;
    6c28:	cc53b0f6 651d06b0 769886bc b3ebbd55     ..S....e...vU...
    6c38:	aa3a93e7 5ac635d8 000056b1 00001645     ..:..5.Z.V..E...
    6c48:	00001de1 00002af1                       .....*..

00006c50 <_init>:
    6c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6c56:	bc08      	pop	{r3}
    6c58:	469e      	mov	lr, r3
    6c5a:	4770      	bx	lr

00006c5c <__init_array_start>:
    6c5c:	00000145 	.word	0x00000145

00006c60 <_fini>:
    6c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c62:	46c0      	nop			; (mov r8, r8)
    6c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6c66:	bc08      	pop	{r3}
    6c68:	469e      	mov	lr, r3
    6c6a:	4770      	bx	lr

00006c6c <__fini_array_start>:
    6c6c:	00000119 	.word	0x00000119

Disassembly of section .gnu.sgstubs:

00007c00 <secure_pox>:
    7c00:	e97f e97f 	sg
    7c04:	f7f8 ba76 	b.w	f4 <__acle_se_secure_pox>
	...
