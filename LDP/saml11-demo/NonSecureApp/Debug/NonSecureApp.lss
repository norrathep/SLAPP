
NonSecureApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f04  00008000  00008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00009f04  00009f04  00009f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000001d0  20002000  00009f0c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000057c  200021d0  0000a0e0  000121d0  2**3
                  ALLOC
  4 .heap         00000204  2000274c  0000a65c  000121d0  2**0
                  ALLOC
  5 .stack        00001000  20002950  0000a860  000121d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002c  00000000  00000000  000121d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b825  00000000  00000000  00012255  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000f87  00000000  00000000  0001da7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c91  00000000  00000000  0001ea01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001e0  00000000  00000000  00020692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000149a8  00000000  00000000  00020f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002bea  00000000  00000000  000358ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000854c3  00000000  00000000  000384d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000ba8  00000000  00000000  000bd998  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000014d  00000000  00000000  000be540  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00008000 <exception_table>:
    8000:	50 39 00 20 65 81 00 00 61 81 00 00 61 81 00 00     P9. e...a...a...
	...
    802c:	61 81 00 00 00 00 00 00 00 00 00 00 61 81 00 00     a...........a...
    803c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    804c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    805c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    806c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    807c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    808c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    809c:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80ac:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80bc:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80cc:	6d 82 00 00 61 81 00 00 61 81 00 00 61 81 00 00     m...a...a...a...
    80dc:	61 81 00 00 61 81 00 00 61 81 00 00 61 81 00 00     a...a...a...a...
    80ec:	61 81 00 00 61 81 00 00                             a...a...

000080f4 <__do_global_dtors_aux>:
    80f4:	b510      	push	{r4, lr}
    80f6:	f242 14d0 	movw	r4, #8656	; 0x21d0
    80fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
    80fe:	7823      	ldrb	r3, [r4, #0]
    8100:	b963      	cbnz	r3, 811c <__do_global_dtors_aux+0x28>
    8102:	f240 0300 	movw	r3, #0
    8106:	f2c0 0300 	movt	r3, #0
    810a:	b12b      	cbz	r3, 8118 <__do_global_dtors_aux+0x24>
    810c:	f649 700c 	movw	r0, #40716	; 0x9f0c
    8110:	f2c0 0000 	movt	r0, #0
    8114:	e000      	b.n	8118 <__do_global_dtors_aux+0x24>
    8116:	bf00      	nop
    8118:	2301      	movs	r3, #1
    811a:	7023      	strb	r3, [r4, #0]
    811c:	bd10      	pop	{r4, pc}
    811e:	46c0      	nop			; (mov r8, r8)

00008120 <frame_dummy>:
    8120:	f240 0300 	movw	r3, #0
    8124:	f2c0 0300 	movt	r3, #0
    8128:	b510      	push	{r4, lr}
    812a:	b14b      	cbz	r3, 8140 <frame_dummy+0x20>
    812c:	f242 11d4 	movw	r1, #8660	; 0x21d4
    8130:	f649 700c 	movw	r0, #40716	; 0x9f0c
    8134:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8138:	f2c0 0000 	movt	r0, #0
    813c:	e000      	b.n	8140 <frame_dummy+0x20>
    813e:	bf00      	nop
    8140:	f649 700c 	movw	r0, #40716	; 0x9f0c
    8144:	f2c0 0000 	movt	r0, #0
    8148:	6803      	ldr	r3, [r0, #0]
    814a:	b903      	cbnz	r3, 814e <frame_dummy+0x2e>
    814c:	bd10      	pop	{r4, pc}
    814e:	f240 0300 	movw	r3, #0
    8152:	f2c0 0300 	movt	r3, #0
    8156:	2b00      	cmp	r3, #0
    8158:	d0f8      	beq.n	814c <frame_dummy+0x2c>
    815a:	4798      	blx	r3
    815c:	e7f6      	b.n	814c <frame_dummy+0x2c>
    815e:	46c0      	nop			; (mov r8, r8)

00008160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    8160:	e7fe      	b.n	8160 <Dummy_Handler>
    8162:	46c0      	nop			; (mov r8, r8)

00008164 <Reset_Handler>:
        if (pSrc != pDest) {
    8164:	f649 710c 	movw	r1, #40716	; 0x9f0c
    8168:	f242 0000 	movw	r0, #8192	; 0x2000
    816c:	f2c0 0100 	movt	r1, #0
    8170:	f2c2 0000 	movt	r0, #8192	; 0x2000
{
    8174:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    8176:	4281      	cmp	r1, r0
    8178:	d00f      	beq.n	819a <Reset_Handler+0x36>
                for (; pDest < &_erelocate;) {
    817a:	f242 13d0 	movw	r3, #8656	; 0x21d0
    817e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8182:	4298      	cmp	r0, r3
    8184:	d209      	bcs.n	819a <Reset_Handler+0x36>
                        *pDest++ = *pSrc++;
    8186:	43c2      	mvns	r2, r0
    8188:	18d2      	adds	r2, r2, r3
    818a:	f649 0343 	movw	r3, #38979	; 0x9843
    818e:	0892      	lsrs	r2, r2, #2
    8190:	3201      	adds	r2, #1
    8192:	0092      	lsls	r2, r2, #2
    8194:	f2c0 0300 	movt	r3, #0
    8198:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
    819a:	f242 10d0 	movw	r0, #8656	; 0x21d0
    819e:	f242 734c 	movw	r3, #10060	; 0x274c
    81a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    81a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    81aa:	4298      	cmp	r0, r3
    81ac:	d20a      	bcs.n	81c4 <Reset_Handler+0x60>
                *pDest++ = 0;
    81ae:	43c2      	mvns	r2, r0
    81b0:	18d2      	adds	r2, r2, r3
    81b2:	f649 0355 	movw	r3, #38997	; 0x9855
    81b6:	0892      	lsrs	r2, r2, #2
    81b8:	3201      	adds	r2, #1
    81ba:	0092      	lsls	r2, r2, #2
    81bc:	2100      	movs	r1, #0
    81be:	f2c0 0300 	movt	r3, #0
    81c2:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    81c4:	f248 0300 	movw	r3, #32768	; 0x8000
    81c8:	227f      	movs	r2, #127	; 0x7f
    81ca:	f2c0 0300 	movt	r3, #0
    81ce:	4393      	bics	r3, r2
    81d0:	f64e 5200 	movw	r2, #60672	; 0xed00
    81d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    81d8:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    81da:	f249 73c1 	movw	r3, #38849	; 0x97c1
    81de:	f2c0 0300 	movt	r3, #0
    81e2:	4798      	blx	r3
        main();
    81e4:	f648 6301 	movw	r3, #36353	; 0x8e01
    81e8:	f2c0 0300 	movt	r3, #0
    81ec:	4798      	blx	r3
    81ee:	e7fe      	b.n	81ee <Reset_Handler+0x8a>

000081f0 <timer_init>:
}

//-----------------------------------------------------------------------------
void timer_init(int period)
{
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    81f0:	f640 0300 	movw	r3, #2048	; 0x800
    81f4:	2120      	movs	r1, #32
{
    81f6:	b510      	push	{r4, lr}
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    81f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    81fc:	69da      	ldr	r2, [r3, #28]

	GCLK->PCHCTRL[TC1_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
	while (0 == (GCLK->PCHCTRL[TC1_GCLK_ID].reg & GCLK_PCHCTRL_CHEN));
    81fe:	24b8      	movs	r4, #184	; 0xb8
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC1;
    8200:	430a      	orrs	r2, r1
    8202:	61da      	str	r2, [r3, #28]
	GCLK->PCHCTRL[TC1_GCLK_ID].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    8204:	f641 4200 	movw	r2, #7168	; 0x1c00
    8208:	23b8      	movs	r3, #184	; 0xb8
    820a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    820e:	3120      	adds	r1, #32
    8210:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[TC1_GCLK_ID].reg & GCLK_PCHCTRL_CHEN));
    8212:	5913      	ldr	r3, [r2, r4]
    8214:	4219      	tst	r1, r3
    8216:	d0fc      	beq.n	8212 <timer_init+0x22>

	TC1->COUNT16.CTRLA.reg = TC_CTRLA_MODE_COUNT16 | TC_CTRLA_PRESCALER_DIV256 |
    8218:	f241 4300 	movw	r3, #5120	; 0x1400
    821c:	f240 6220 	movw	r2, #1568	; 0x620
    8220:	f2c4 2300 	movt	r3, #16896	; 0x4200
    8224:	601a      	str	r2, [r3, #0]
	TC_CTRLA_PRESCSYNC_RESYNC;

	TC1->COUNT16.WAVE.reg = TC_WAVE_WAVEGEN_MFRQ;
    8226:	2201      	movs	r2, #1
    8228:	731a      	strb	r2, [r3, #12]

	TC1->COUNT16.COUNT.reg = 0xfecd;
    822a:	4a0f      	ldr	r2, [pc, #60]	; (8268 <timer_init+0x78>)

	timer_set_period(period);

	TC1->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    822c:	2102      	movs	r1, #2
	TC1->COUNT16.COUNT.reg = 0xfecd;
    822e:	829a      	strh	r2, [r3, #20]
	TC1->COUNT16.CC[0].reg = (F_CPU / 1000ul / 256) * i;
    8230:	0142      	lsls	r2, r0, #5
    8232:	1a12      	subs	r2, r2, r0
    8234:	0052      	lsls	r2, r2, #1
    8236:	b292      	uxth	r2, r2
    8238:	839a      	strh	r2, [r3, #28]
	TC1->COUNT16.COUNT.reg = 0;
    823a:	2200      	movs	r2, #0
    823c:	829a      	strh	r2, [r3, #20]
	TC1->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    823e:	681a      	ldr	r2, [r3, #0]
    8240:	430a      	orrs	r2, r1
    8242:	601a      	str	r2, [r3, #0]

	TC1->COUNT16.INTENSET.reg = TC_INTENSET_MC(1);
    8244:	2210      	movs	r2, #16
    8246:	725a      	strb	r2, [r3, #9]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8248:	f24e 1300 	movw	r3, #57600	; 0xe100
    824c:	3a08      	subs	r2, #8
    824e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    8252:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(TC1_IRQn);
	
	cur_period = period;
    8254:	f242 13f0 	movw	r3, #8688	; 0x21f0
    8258:	f2c2 0300 	movt	r3, #8192	; 0x2000
    825c:	6018      	str	r0, [r3, #0]
	num_overflows = 0;
    825e:	2100      	movs	r1, #0
    8260:	2000      	movs	r0, #0
    8262:	6098      	str	r0, [r3, #8]
    8264:	60d9      	str	r1, [r3, #12]
}
    8266:	bd10      	pop	{r4, pc}
    8268:	fffffecd 	.word	0xfffffecd

0000826c <TC1_Handler>:

void TC1_Handler(void)
{
	num_overflows++;
    826c:	f242 13f0 	movw	r3, #8688	; 0x21f0
    8270:	2001      	movs	r0, #1
    8272:	2100      	movs	r1, #0
    8274:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
    8278:	b530      	push	{r4, r5, lr}
	num_overflows++;
    827a:	689c      	ldr	r4, [r3, #8]
    827c:	68dd      	ldr	r5, [r3, #12]
    827e:	1900      	adds	r0, r0, r4
    8280:	4169      	adcs	r1, r5
    8282:	6098      	str	r0, [r3, #8]
    8284:	60d9      	str	r1, [r3, #12]
	if (TC1->COUNT16.INTFLAG.reg & TC_INTFLAG_MC(1))
    8286:	f241 4300 	movw	r3, #5120	; 0x1400
    828a:	2210      	movs	r2, #16
    828c:	f2c4 2300 	movt	r3, #16896	; 0x4200
    8290:	7a99      	ldrb	r1, [r3, #10]
    8292:	420a      	tst	r2, r1
    8294:	d000      	beq.n	8298 <TC1_Handler+0x2c>
	{
		//HAL_GPIO_LED_toggle();
		TC1->COUNT16.INTFLAG.reg = TC_INTFLAG_MC(1);
    8296:	729a      	strb	r2, [r3, #10]
	}
}
    8298:	bd30      	pop	{r4, r5, pc}
    829a:	46c0      	nop			; (mov r8, r8)

0000829c <uart_init>:
Sercom *ser;
uint32_t mask;
uint32_t clk_id;

void uart_init(uint32_t baud)
{
    829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ser = SERCOM0;
    829e:	f240 4200 	movw	r2, #1024	; 0x400
    82a2:	f242 2338 	movw	r3, #8760	; 0x2238
    82a6:	f2c4 2200 	movt	r2, #16896	; 0x4200
    82aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ae:	601a      	str	r2, [r3, #0]
	clk_id = SERCOM0_GCLK_ID_CORE;
    82b0:	f242 2340 	movw	r3, #8768	; 0x2240
    82b4:	220b      	movs	r2, #11
    82b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82ba:	601a      	str	r2, [r3, #0]
	mask = MCLK_APBCMASK_SERCOM0;
    82bc:	f242 233c 	movw	r3, #8764	; 0x223c
    82c0:	2402      	movs	r4, #2
    82c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    82c6:	601c      	str	r4, [r3, #0]
	
	uint64_t br = (uint64_t)65536 * (F_CPU - 16 * baud) / F_CPU;
    82c8:	f242 4300 	movw	r3, #9216	; 0x2400
    82cc:	f2c0 03f4 	movt	r3, #244	; 0xf4
    82d0:	469c      	mov	ip, r3
    82d2:	f648 7511 	movw	r5, #36625	; 0x8f11
    82d6:	f242 4200 	movw	r2, #9216	; 0x2400
    PORT->Group[HAL_GPIO_PORT##port].PINCFG[pin].reg &= ~PORT_PINCFG_PMUXEN;\
    (void)HAL_GPIO_##name##_pmuxdis;						\
  }										\

  // SERCOM0: RX=25, TX=24
  HAL_GPIO_PIN(UART_TX,  A, 24)
    82da:	2601      	movs	r6, #1
    82dc:	0100      	lsls	r0, r0, #4
    82de:	4240      	negs	r0, r0
    82e0:	4460      	add	r0, ip
    82e2:	0c01      	lsrs	r1, r0, #16
    82e4:	f2c0 0500 	movt	r5, #0
    82e8:	f2c0 02f4 	movt	r2, #244	; 0xf4
    82ec:	2300      	movs	r3, #0
    82ee:	0400      	lsls	r0, r0, #16
    82f0:	47a8      	blx	r5
    82f2:	46b4      	mov	ip, r6
    82f4:	f243 0300 	movw	r3, #12288	; 0x3000
    82f8:	2280      	movs	r2, #128	; 0x80
    82fa:	2158      	movs	r1, #88	; 0x58
    82fc:	2502      	movs	r5, #2
    82fe:	4666      	mov	r6, ip
    8300:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8304:	0452      	lsls	r2, r2, #17
    8306:	609a      	str	r2, [r3, #8]
    8308:	5c5a      	ldrb	r2, [r3, r1]
    830a:	273c      	movs	r7, #60	; 0x3c
    830c:	432a      	orrs	r2, r5
    830e:	b2d2      	uxtb	r2, r2
    8310:	545a      	strb	r2, [r3, r1]
    8312:	5c5a      	ldrb	r2, [r3, r1]
    8314:	4332      	orrs	r2, r6
    8316:	b2d2      	uxtb	r2, r2
    8318:	545a      	strb	r2, [r3, r1]
    831a:	220f      	movs	r2, #15
    831c:	5dd9      	ldrb	r1, [r3, r7]
    831e:	4391      	bics	r1, r2
    8320:	4329      	orrs	r1, r5
    8322:	55d9      	strb	r1, [r3, r7]
  HAL_GPIO_PIN(UART_RX,  A, 25)
    8324:	2180      	movs	r1, #128	; 0x80
    8326:	0489      	lsls	r1, r1, #18
    8328:	6059      	str	r1, [r3, #4]
    832a:	2159      	movs	r1, #89	; 0x59
    832c:	5c5e      	ldrb	r6, [r3, r1]
    832e:	432e      	orrs	r6, r5
    8330:	b2f6      	uxtb	r6, r6
    8332:	545e      	strb	r6, [r3, r1]
    8334:	2604      	movs	r6, #4
    8336:	5c5d      	ldrb	r5, [r3, r1]
    8338:	43b5      	bics	r5, r6
    833a:	4666      	mov	r6, ip
    833c:	545d      	strb	r5, [r3, r1]
    833e:	5c5d      	ldrb	r5, [r3, r1]
    8340:	4335      	orrs	r5, r6
    8342:	b2ed      	uxtb	r5, r5
    8344:	545d      	strb	r5, [r3, r1]
    8346:	5dd9      	ldrb	r1, [r3, r7]
    8348:	400a      	ands	r2, r1
    834a:	2120      	movs	r1, #32
    834c:	430a      	orrs	r2, r1
    834e:	55da      	strb	r2, [r3, r7]
	HAL_GPIO_UART_TX_out();
	HAL_GPIO_UART_TX_pmuxen(HAL_GPIO_PMUX_C);
	HAL_GPIO_UART_RX_in();
	HAL_GPIO_UART_RX_pmuxen(HAL_GPIO_PMUX_C);

	MCLK->APBCMASK.reg |= mask;
    8350:	f640 0300 	movw	r3, #2048	; 0x800
    8354:	f2c4 0300 	movt	r3, #16384	; 0x4000
    8358:	69da      	ldr	r2, [r3, #28]

	GCLK->PCHCTRL[clk_id].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    835a:	2140      	movs	r1, #64	; 0x40
	MCLK->APBCMASK.reg |= mask;
    835c:	4314      	orrs	r4, r2
	GCLK->PCHCTRL[clk_id].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    835e:	f641 4200 	movw	r2, #7168	; 0x1c00
	MCLK->APBCMASK.reg |= mask;
    8362:	61dc      	str	r4, [r3, #28]
	GCLK->PCHCTRL[clk_id].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    8364:	23ac      	movs	r3, #172	; 0xac
	while (0 == (GCLK->PCHCTRL[clk_id].reg & GCLK_PCHCTRL_CHEN));
    8366:	24ac      	movs	r4, #172	; 0xac
	GCLK->PCHCTRL[clk_id].reg = GCLK_PCHCTRL_GEN(0) | GCLK_PCHCTRL_CHEN;
    8368:	f2c4 0200 	movt	r2, #16384	; 0x4000
    836c:	50d1      	str	r1, [r2, r3]
	while (0 == (GCLK->PCHCTRL[clk_id].reg & GCLK_PCHCTRL_CHEN));
    836e:	5913      	ldr	r3, [r2, r4]
    8370:	4219      	tst	r1, r3
    8372:	d0fc      	beq.n	836e <uart_init+0xd2>

	ser->USART.CTRLA.reg =
    8374:	f240 4200 	movw	r2, #1024	; 0x400
    8378:	2304      	movs	r3, #4
    837a:	f2c4 2200 	movt	r2, #16896	; 0x4200
    837e:	f2c4 0331 	movt	r3, #16433	; 0x4031
    8382:	6013      	str	r3, [r2, #0]
	SERCOM_USART_CTRLA_DORD | SERCOM_USART_CTRLA_MODE(1/*USART_INT_CLK*/) |
	SERCOM_USART_CTRLA_RXPO(3/*PAD3*/) | SERCOM_USART_CTRLA_TXPO(1/*PAD2*/);

	ser->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    8384:	23c0      	movs	r3, #192	; 0xc0
	SERCOM_USART_CTRLB_CHSIZE(0/*8 bits*/);

	ser->USART.BAUD.reg = (uint16_t)br;

	ser->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8386:	2102      	movs	r1, #2
	ser->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    8388:	029b      	lsls	r3, r3, #10
	ser->USART.BAUD.reg = (uint16_t)br;
    838a:	b280      	uxth	r0, r0
	ser->USART.CTRLB.reg = SERCOM_USART_CTRLB_RXEN | SERCOM_USART_CTRLB_TXEN |
    838c:	6053      	str	r3, [r2, #4]
	ser->USART.BAUD.reg = (uint16_t)br;
    838e:	8190      	strh	r0, [r2, #12]
	ser->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    8390:	6813      	ldr	r3, [r2, #0]
    8392:	430b      	orrs	r3, r1
    8394:	6013      	str	r3, [r2, #0]
	
	while (ser->USART.SYNCBUSY.reg & SERCOM_USART_SYNCBUSY_ENABLE);
    8396:	69d3      	ldr	r3, [r2, #28]
    8398:	4219      	tst	r1, r3
    839a:	d1fc      	bne.n	8396 <uart_init+0xfa>
}
    839c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    839e:	46c0      	nop			; (mov r8, r8)

000083a0 <uart_puts>:
	ser->USART.DATA.reg = c;
}

//-----------------------------------------------------------------------------
void uart_puts(char *s)
{
    83a0:	b510      	push	{r4, lr}
	while (*s)
    83a2:	7804      	ldrb	r4, [r0, #0]
    83a4:	b174      	cbz	r4, 83c4 <uart_puts+0x24>
    83a6:	f242 2338 	movw	r3, #8760	; 0x2238
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    83aa:	2101      	movs	r1, #1
    83ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    83b0:	681a      	ldr	r2, [r3, #0]
	uart_putc(*s++);
    83b2:	3001      	adds	r0, #1
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    83b4:	7e13      	ldrb	r3, [r2, #24]
    83b6:	4219      	tst	r1, r3
    83b8:	d0fc      	beq.n	83b4 <uart_puts+0x14>
	ser->USART.DATA.reg = c;
    83ba:	b2a4      	uxth	r4, r4
    83bc:	8514      	strh	r4, [r2, #40]	; 0x28
	while (*s)
    83be:	7804      	ldrb	r4, [r0, #0]
    83c0:	2c00      	cmp	r4, #0
    83c2:	d1f6      	bne.n	83b2 <uart_puts+0x12>
}
    83c4:	bd10      	pop	{r4, pc}
    83c6:	46c0      	nop			; (mov r8, r8)

000083c8 <uart_puti>:
void uart_puti(int i)
{
	char s[11];
	int last = 0;
	do {
		s[last] = i%10 + '0';
    83c8:	220a      	movs	r2, #10
    83ca:	fb90 f1f2 	sdiv	r1, r0, r2
{
    83ce:	b530      	push	{r4, r5, lr}
		s[last] = i%10 + '0';
    83d0:	008c      	lsls	r4, r1, #2
    83d2:	1864      	adds	r4, r4, r1
    83d4:	0064      	lsls	r4, r4, #1
{
    83d6:	b085      	sub	sp, #20
		s[last] = i%10 + '0';
    83d8:	1b04      	subs	r4, r0, r4
    83da:	ab01      	add	r3, sp, #4
    83dc:	3430      	adds	r4, #48	; 0x30
    83de:	701c      	strb	r4, [r3, #0]
		i = i/10;
		last++;
	} while(i > 0);
    83e0:	2900      	cmp	r1, #0
    83e2:	dc00      	bgt.n	83e6 <uart_puti+0x1e>
    83e4:	e091      	b.n	850a <uart_puti+0x142>
		s[last] = i%10 + '0';
    83e6:	fb91 f5f2 	sdiv	r5, r1, r2
    83ea:	00ac      	lsls	r4, r5, #2
    83ec:	1964      	adds	r4, r4, r5
    83ee:	0064      	lsls	r4, r4, #1
    83f0:	1b09      	subs	r1, r1, r4
    83f2:	3130      	adds	r1, #48	; 0x30
    83f4:	7059      	strb	r1, [r3, #1]
		i = i/10;
    83f6:	2164      	movs	r1, #100	; 0x64
    83f8:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    83fc:	2900      	cmp	r1, #0
    83fe:	d100      	bne.n	8402 <uart_puti+0x3a>
    8400:	e085      	b.n	850e <uart_puti+0x146>
		s[last] = i%10 + '0';
    8402:	fb91 f5f2 	sdiv	r5, r1, r2
    8406:	00ac      	lsls	r4, r5, #2
    8408:	1964      	adds	r4, r4, r5
    840a:	0064      	lsls	r4, r4, #1
    840c:	1b09      	subs	r1, r1, r4
    840e:	3130      	adds	r1, #48	; 0x30
    8410:	7099      	strb	r1, [r3, #2]
		i = i/10;
    8412:	f240 31e8 	movw	r1, #1000	; 0x3e8
    8416:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    841a:	2900      	cmp	r1, #0
    841c:	d100      	bne.n	8420 <uart_puti+0x58>
    841e:	e078      	b.n	8512 <uart_puti+0x14a>
		s[last] = i%10 + '0';
    8420:	fb91 f5f2 	sdiv	r5, r1, r2
    8424:	00ac      	lsls	r4, r5, #2
    8426:	1964      	adds	r4, r4, r5
    8428:	0064      	lsls	r4, r4, #1
    842a:	1b09      	subs	r1, r1, r4
    842c:	3130      	adds	r1, #48	; 0x30
    842e:	70d9      	strb	r1, [r3, #3]
		i = i/10;
    8430:	f242 7110 	movw	r1, #10000	; 0x2710
    8434:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    8438:	2900      	cmp	r1, #0
    843a:	d100      	bne.n	843e <uart_puti+0x76>
    843c:	e06b      	b.n	8516 <uart_puti+0x14e>
		s[last] = i%10 + '0';
    843e:	fb91 f5f2 	sdiv	r5, r1, r2
    8442:	00ac      	lsls	r4, r5, #2
    8444:	1964      	adds	r4, r4, r5
    8446:	0064      	lsls	r4, r4, #1
    8448:	1b09      	subs	r1, r1, r4
    844a:	3130      	adds	r1, #48	; 0x30
    844c:	7119      	strb	r1, [r3, #4]
		i = i/10;
    844e:	f248 61a0 	movw	r1, #34464	; 0x86a0
    8452:	f2c0 0101 	movt	r1, #1
    8456:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    845a:	2900      	cmp	r1, #0
    845c:	d05d      	beq.n	851a <uart_puti+0x152>
		s[last] = i%10 + '0';
    845e:	fb91 f5f2 	sdiv	r5, r1, r2
    8462:	00ac      	lsls	r4, r5, #2
    8464:	1964      	adds	r4, r4, r5
    8466:	0064      	lsls	r4, r4, #1
    8468:	1b09      	subs	r1, r1, r4
    846a:	3130      	adds	r1, #48	; 0x30
    846c:	7159      	strb	r1, [r3, #5]
		i = i/10;
    846e:	f244 2140 	movw	r1, #16960	; 0x4240
    8472:	f2c0 010f 	movt	r1, #15
    8476:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    847a:	2900      	cmp	r1, #0
    847c:	d04f      	beq.n	851e <uart_puti+0x156>
		s[last] = i%10 + '0';
    847e:	fb91 f5f2 	sdiv	r5, r1, r2
    8482:	00ac      	lsls	r4, r5, #2
    8484:	1964      	adds	r4, r4, r5
    8486:	0064      	lsls	r4, r4, #1
    8488:	1b09      	subs	r1, r1, r4
    848a:	3130      	adds	r1, #48	; 0x30
    848c:	7199      	strb	r1, [r3, #6]
		i = i/10;
    848e:	f249 6180 	movw	r1, #38528	; 0x9680
    8492:	f2c0 0198 	movt	r1, #152	; 0x98
    8496:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    849a:	2900      	cmp	r1, #0
    849c:	d041      	beq.n	8522 <uart_puti+0x15a>
		s[last] = i%10 + '0';
    849e:	fb91 f5f2 	sdiv	r5, r1, r2
    84a2:	00ac      	lsls	r4, r5, #2
    84a4:	1964      	adds	r4, r4, r5
    84a6:	0064      	lsls	r4, r4, #1
    84a8:	1b09      	subs	r1, r1, r4
    84aa:	3130      	adds	r1, #48	; 0x30
    84ac:	71d9      	strb	r1, [r3, #7]
		i = i/10;
    84ae:	f24e 1100 	movw	r1, #57600	; 0xe100
    84b2:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
    84b6:	fb90 f1f1 	sdiv	r1, r0, r1
	} while(i > 0);
    84ba:	2900      	cmp	r1, #0
    84bc:	d033      	beq.n	8526 <uart_puti+0x15e>
		s[last] = i%10 + '0';
    84be:	fb91 f2f2 	sdiv	r2, r1, r2
    84c2:	0094      	lsls	r4, r2, #2
    84c4:	18a2      	adds	r2, r4, r2
    84c6:	0052      	lsls	r2, r2, #1
    84c8:	1a89      	subs	r1, r1, r2
		i = i/10;
    84ca:	f64c 2200 	movw	r2, #51712	; 0xca00
    84ce:	f6c3 329a 	movt	r2, #15258	; 0x3b9a
    84d2:	fb90 f0f2 	sdiv	r0, r0, r2
		s[last] = i%10 + '0';
    84d6:	3130      	adds	r1, #48	; 0x30
    84d8:	7219      	strb	r1, [r3, #8]
	} while(i > 0);
    84da:	b330      	cbz	r0, 852a <uart_puti+0x162>
		s[last] = i%10 + '0';
    84dc:	3030      	adds	r0, #48	; 0x30
    84de:	7258      	strb	r0, [r3, #9]
		last++;
    84e0:	2009      	movs	r0, #9
    84e2:	f242 2238 	movw	r2, #8760	; 0x2238
    84e6:	1818      	adds	r0, r3, r0
    84e8:	466b      	mov	r3, sp
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    84ea:	2101      	movs	r1, #1
    84ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
    84f0:	6812      	ldr	r2, [r2, #0]
    84f2:	1cdd      	adds	r5, r3, #3
	
	for(int j=last-1; j>=0; j--) {
		uart_putc(s[j]);
    84f4:	7804      	ldrb	r4, [r0, #0]
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    84f6:	7e13      	ldrb	r3, [r2, #24]
    84f8:	4219      	tst	r1, r3
    84fa:	d0fc      	beq.n	84f6 <uart_puti+0x12e>
	ser->USART.DATA.reg = c;
    84fc:	b2a4      	uxth	r4, r4
    84fe:	3801      	subs	r0, #1
    8500:	8514      	strh	r4, [r2, #40]	; 0x28
	for(int j=last-1; j>=0; j--) {
    8502:	42a8      	cmp	r0, r5
    8504:	d1f6      	bne.n	84f4 <uart_puti+0x12c>
	}
}
    8506:	b005      	add	sp, #20
    8508:	bd30      	pop	{r4, r5, pc}
	int last = 0;
    850a:	2000      	movs	r0, #0
    850c:	e7e9      	b.n	84e2 <uart_puti+0x11a>
		last++;
    850e:	2001      	movs	r0, #1
    8510:	e7e7      	b.n	84e2 <uart_puti+0x11a>
    8512:	2002      	movs	r0, #2
    8514:	e7e5      	b.n	84e2 <uart_puti+0x11a>
    8516:	2003      	movs	r0, #3
    8518:	e7e3      	b.n	84e2 <uart_puti+0x11a>
    851a:	2004      	movs	r0, #4
    851c:	e7e1      	b.n	84e2 <uart_puti+0x11a>
    851e:	2005      	movs	r0, #5
    8520:	e7df      	b.n	84e2 <uart_puti+0x11a>
    8522:	2006      	movs	r0, #6
    8524:	e7dd      	b.n	84e2 <uart_puti+0x11a>
    8526:	2007      	movs	r0, #7
    8528:	e7db      	b.n	84e2 <uart_puti+0x11a>
    852a:	2008      	movs	r0, #8
    852c:	e7d9      	b.n	84e2 <uart_puti+0x11a>
    852e:	46c0      	nop			; (mov r8, r8)

00008530 <uart_getc>:
	}
}


char uart_getc()
{
    8530:	f242 2338 	movw	r3, #8760	; 0x2238
    8534:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8538:	681a      	ldr	r2, [r3, #0]
	char rx;
	//volatile uint32_t i=0, MAX_TIME_OUT = 1000000;
	
	while(!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    853a:	2104      	movs	r1, #4
    853c:	e003      	b.n	8546 <uart_getc+0x16>
	{
		if(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR)
    853e:	7e13      	ldrb	r3, [r2, #24]
    8540:	b25b      	sxtb	r3, r3
    8542:	2b00      	cmp	r3, #0
    8544:	db05      	blt.n	8552 <uart_getc+0x22>
	while(!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    8546:	7e13      	ldrb	r3, [r2, #24]
    8548:	4219      	tst	r1, r3
    854a:	d0f8      	beq.n	853e <uart_getc+0xe>
			break;
		}
		//i++;
		//if(i >= MAX_TIME_OUT) return 'O';
	}
	rx = (uint8_t)ser->USART.DATA.reg;
    854c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
	return rx;
    854e:	b2c0      	uxtb	r0, r0
}
    8550:	4770      	bx	lr
			ser->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8552:	2180      	movs	r1, #128	; 0x80
    8554:	7e13      	ldrb	r3, [r2, #24]
    8556:	430b      	orrs	r3, r1
    8558:	7613      	strb	r3, [r2, #24]
			break;
    855a:	e7f7      	b.n	854c <uart_getc+0x1c>

0000855c <uart_get_bytes>:
		s[idx] = c;
		idx++;
	}
}

void uart_get_bytes(uint8_t* output, int size){
    855c:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < size; i++)
    855e:	2900      	cmp	r1, #0
    8560:	dd15      	ble.n	858e <uart_get_bytes+0x32>
    8562:	f242 2538 	movw	r5, #8760	; 0x2238
			ser->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8566:	2680      	movs	r6, #128	; 0x80
	while(!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    8568:	2404      	movs	r4, #4
    856a:	1841      	adds	r1, r0, r1
    856c:	f2c2 0500 	movt	r5, #8192	; 0x2000
			ser->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8570:	4276      	negs	r6, r6
    8572:	682a      	ldr	r2, [r5, #0]
    8574:	e003      	b.n	857e <uart_get_bytes+0x22>
		if(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR)
    8576:	7e13      	ldrb	r3, [r2, #24]
    8578:	b25b      	sxtb	r3, r3
    857a:	2b00      	cmp	r3, #0
    857c:	db08      	blt.n	8590 <uart_get_bytes+0x34>
	while(!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC))   /* wait until Rx full */
    857e:	7e13      	ldrb	r3, [r2, #24]
    8580:	421c      	tst	r4, r3
    8582:	d0f8      	beq.n	8576 <uart_get_bytes+0x1a>
	rx = (uint8_t)ser->USART.DATA.reg;
    8584:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    8586:	7003      	strb	r3, [r0, #0]
    8588:	3001      	adds	r0, #1
	for (int i = 0; i < size; i++)
    858a:	4288      	cmp	r0, r1
    858c:	d1f1      	bne.n	8572 <uart_get_bytes+0x16>
	{
		output[i] = uart_getc();
	}
}
    858e:	bd70      	pop	{r4, r5, r6, pc}
			ser->USART.INTFLAG.reg |= SERCOM_USART_INTFLAG_ERROR; /* clear any errors */
    8590:	7e13      	ldrb	r3, [r2, #24]
    8592:	4333      	orrs	r3, r6
    8594:	b2db      	uxtb	r3, r3
    8596:	7613      	strb	r3, [r2, #24]
	rx = (uint8_t)ser->USART.DATA.reg;
    8598:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    859a:	7003      	strb	r3, [r0, #0]
    859c:	3001      	adds	r0, #1
	for (int i = 0; i < size; i++)
    859e:	4288      	cmp	r0, r1
    85a0:	d1e7      	bne.n	8572 <uart_get_bytes+0x16>
    85a2:	e7f4      	b.n	858e <uart_get_bytes+0x32>

000085a4 <uart_put_bytes>:

void uart_put_bytes(uint8_t* output, int size){
    85a4:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < size; i++)
    85a6:	2900      	cmp	r1, #0
    85a8:	dd0f      	ble.n	85ca <uart_put_bytes+0x26>
    85aa:	f242 2338 	movw	r3, #8760	; 0x2238
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    85ae:	2401      	movs	r4, #1
    85b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    85b4:	681a      	ldr	r2, [r3, #0]
    85b6:	1841      	adds	r1, r0, r1
	{
		uart_putc(output[i]);
    85b8:	7805      	ldrb	r5, [r0, #0]
	while (!(ser->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE));
    85ba:	7e13      	ldrb	r3, [r2, #24]
    85bc:	421c      	tst	r4, r3
    85be:	d0fc      	beq.n	85ba <uart_put_bytes+0x16>
	ser->USART.DATA.reg = c;
    85c0:	b2ad      	uxth	r5, r5
    85c2:	3001      	adds	r0, #1
    85c4:	8515      	strh	r5, [r2, #40]	; 0x28
	for (int i = 0; i < size; i++)
    85c6:	4288      	cmp	r0, r1
    85c8:	d1f6      	bne.n	85b8 <uart_put_bytes+0x14>
	}
}
    85ca:	bd30      	pop	{r4, r5, pc}

000085cc <wrapper_initB>:
	float q = *(float*)(pox_input+4*2);
	LDP_energy(f,p,q);
	secure_setState(&B, sizeof(Map));
}

void wrapper_initB() {
    85cc:	b510      	push	{r4, lr}
	secure_checkState(&B, sizeof(Map));
    85ce:	f242 2444 	movw	r4, #8772	; 0x2244
    85d2:	f647 4309 	movw	r3, #31753	; 0x7c09
    85d6:	f2c2 0400 	movt	r4, #8192	; 0x2000
    85da:	0020      	movs	r0, r4
    85dc:	f240 5104 	movw	r1, #1284	; 0x504
    85e0:	f2c0 0300 	movt	r3, #0
    85e4:	4798      	blx	r3
	memset(&B, 0, sizeof(Map));
    85e6:	f649 0355 	movw	r3, #38997	; 0x9855
    85ea:	f240 5204 	movw	r2, #1284	; 0x504
    85ee:	2100      	movs	r1, #0
    85f0:	0020      	movs	r0, r4
    85f2:	f2c0 0300 	movt	r3, #0
    85f6:	4798      	blx	r3
	initB();
	secure_setState(&B, sizeof(Map));
    85f8:	f647 4311 	movw	r3, #31761	; 0x7c11
    85fc:	f240 5104 	movw	r1, #1284	; 0x504
    8600:	0020      	movs	r0, r4
    8602:	f2c0 0300 	movt	r3, #0
    8606:	4798      	blx	r3
}
    8608:	bd10      	pop	{r4, pc}
    860a:	46c0      	nop			; (mov r8, r8)

0000860c <PRR>:
uint8_t* PRR(const uint8_t *b, float f, Map *B, uint8_t *b_prime) {
    860c:	b5f0      	push	{r4, r5, r6, r7, lr}
    860e:	46de      	mov	lr, fp
    8610:	4657      	mov	r7, sl
    8612:	464e      	mov	r6, r9
    8614:	4645      	mov	r5, r8
    8616:	0004      	movs	r4, r0
    8618:	469b      	mov	fp, r3
    memset(b_prime, 0, 32);
    861a:	0018      	movs	r0, r3
    861c:	f649 0355 	movw	r3, #38997	; 0x9855
uint8_t* PRR(const uint8_t *b, float f, Map *B, uint8_t *b_prime) {
    8620:	b5e0      	push	{r5, r6, r7, lr}
    8622:	b085      	sub	sp, #20
    8624:	0015      	movs	r5, r2
    8626:	9203      	str	r2, [sp, #12]
    memset(b_prime, 0, 32);
    8628:	f2c0 0300 	movt	r3, #0
uint8_t* PRR(const uint8_t *b, float f, Map *B, uint8_t *b_prime) {
    862c:	468a      	mov	sl, r1
    memset(b_prime, 0, 32);
    862e:	2220      	movs	r2, #32
    8630:	2100      	movs	r1, #0
    8632:	4798      	blx	r3
	for (size_t i = 0; i < map->size; i++) {
    8634:	f240 5300 	movw	r3, #1280	; 0x500
    8638:	58ee      	ldr	r6, [r5, r3]
    863a:	b17e      	cbz	r6, 865c <PRR+0x50>
    863c:	0028      	movs	r0, r5
    863e:	2500      	movs	r5, #0
    8640:	2300      	movs	r3, #0
    8642:	e003      	b.n	864c <PRR+0x40>
		for (int j = 0; j < 32; j++) {
    8644:	3301      	adds	r3, #1
    8646:	2b20      	cmp	r3, #32
    8648:	d100      	bne.n	864c <PRR+0x40>
    864a:	e0e7      	b.n	881c <PRR+0x210>
			if (map->pairs[i].key[j] != key[j]) {
    864c:	5ce1      	ldrb	r1, [r4, r3]
    864e:	5cc2      	ldrb	r2, [r0, r3]
    8650:	4291      	cmp	r1, r2
    8652:	d0f7      	beq.n	8644 <PRR+0x38>
	for (size_t i = 0; i < map->size; i++) {
    8654:	3501      	adds	r5, #1
    8656:	3040      	adds	r0, #64	; 0x40
    8658:	42b5      	cmp	r5, r6
    865a:	d1f1      	bne.n	8640 <PRR+0x34>
    865c:	f649 1321 	movw	r3, #39201	; 0x9921
    8660:	f2c0 0300 	movt	r3, #0
    8664:	9300      	str	r3, [sp, #0]
    8666:	f249 63d5 	movw	r3, #38613	; 0x96d5
    866a:	f2c0 0300 	movt	r3, #0
    866e:	9302      	str	r3, [sp, #8]
    8670:	f249 4841 	movw	r8, #37953	; 0x9441
    8674:	f648 63d5 	movw	r3, #36565	; 0x8ed5
    8678:	f2c0 0800 	movt	r8, #0
    867c:	f2c0 0300 	movt	r3, #0
			uint8_t bit = i%8;
    8680:	46a1      	mov	r9, r4
	for (size_t i = 0; i < map->size; i++) {
    8682:	2500      	movs	r5, #0
    8684:	9301      	str	r3, [sp, #4]
			uint8_t bit = i%8;
    8686:	4644      	mov	r4, r8
    8688:	e00c      	b.n	86a4 <PRR+0x98>
	uint8_t mask = 1 << n;
    868a:	4643      	mov	r3, r8
    868c:	2201      	movs	r2, #1
    868e:	409a      	lsls	r2, r3
	return num | mask;
    8690:	464b      	mov	r3, r9
    8692:	5d9b      	ldrb	r3, [r3, r6]
    8694:	4313      	orrs	r3, r2
				b_prime[bin] = set_bit(b[bin], bit);
    8696:	465a      	mov	r2, fp
    8698:	5593      	strb	r3, [r2, r6]
		for(int i=0; i<256; i++) {
    869a:	f240 1300 	movw	r3, #256	; 0x100
    869e:	3501      	adds	r5, #1
    86a0:	429d      	cmp	r5, r3
    86a2:	d02c      	beq.n	86fe <PRR+0xf2>
			float r = (float) rand()/(float) RAND_MAX;
    86a4:	9b00      	ldr	r3, [sp, #0]
    86a6:	4798      	blx	r3
    86a8:	9b02      	ldr	r3, [sp, #8]
    86aa:	4798      	blx	r3
    86ac:	21c0      	movs	r1, #192	; 0xc0
    86ae:	0589      	lsls	r1, r1, #22
    86b0:	47a0      	blx	r4
			uint8_t bit = i%8;
    86b2:	2307      	movs	r3, #7
			if(r<=f/2) {
    86b4:	21fc      	movs	r1, #252	; 0xfc
			uint8_t bit = i%8;
    86b6:	402b      	ands	r3, r5
			float r = (float) rand()/(float) RAND_MAX;
    86b8:	1c07      	adds	r7, r0, #0
			if(r<=f/2) {
    86ba:	0589      	lsls	r1, r1, #22
    86bc:	4650      	mov	r0, sl
			uint8_t bit = i%8;
    86be:	4698      	mov	r8, r3
			if(r<=f/2) {
    86c0:	47a0      	blx	r4
    86c2:	9b01      	ldr	r3, [sp, #4]
    86c4:	1c01      	adds	r1, r0, #0
    86c6:	1c38      	adds	r0, r7, #0
			uint8_t bin = i/8;
    86c8:	10ee      	asrs	r6, r5, #3
			if(r<=f/2) {
    86ca:	4798      	blx	r3
    86cc:	2800      	cmp	r0, #0
    86ce:	d1dc      	bne.n	868a <PRR+0x7e>
			} else if(r<=f) {
    86d0:	f648 63fd 	movw	r3, #36605	; 0x8efd
    86d4:	1c39      	adds	r1, r7, #0
    86d6:	f2c0 0300 	movt	r3, #0
    86da:	4650      	mov	r0, sl
    86dc:	4798      	blx	r3
    86de:	2800      	cmp	r0, #0
    86e0:	d100      	bne.n	86e4 <PRR+0xd8>
    86e2:	e091      	b.n	8808 <PRR+0x1fc>
	uint8_t mask = ~(1 << n);
    86e4:	4643      	mov	r3, r8
    86e6:	2201      	movs	r2, #1
    86e8:	409a      	lsls	r2, r3
	return num & mask;
    86ea:	464b      	mov	r3, r9
    86ec:	5d9b      	ldrb	r3, [r3, r6]
		for(int i=0; i<256; i++) {
    86ee:	3501      	adds	r5, #1
	return num & mask;
    86f0:	4393      	bics	r3, r2
				b_prime[bin] = clear_bit(b[bin], bit);
    86f2:	465a      	mov	r2, fp
    86f4:	5593      	strb	r3, [r2, r6]
		for(int i=0; i<256; i++) {
    86f6:	f240 1300 	movw	r3, #256	; 0x100
    86fa:	429d      	cmp	r5, r3
    86fc:	d1d2      	bne.n	86a4 <PRR+0x98>
	if (map->size < MAP_SIZE) {
    86fe:	f240 5300 	movw	r3, #1280	; 0x500
    8702:	9a03      	ldr	r2, [sp, #12]
    8704:	464c      	mov	r4, r9
    8706:	58d5      	ldr	r5, [r2, r3]
    8708:	2d13      	cmp	r5, #19
    870a:	d900      	bls.n	870e <PRR+0x102>
    870c:	e093      	b.n	8836 <PRR+0x22a>
    870e:	f240 0a20 	movw	sl, #32
    8712:	4694      	mov	ip, r2
    8714:	01a8      	lsls	r0, r5, #6
    8716:	1d23      	adds	r3, r4, #4
    8718:	4482      	add	sl, r0
    871a:	4698      	mov	r8, r3
    871c:	44d4      	add	ip, sl
    871e:	0006      	movs	r6, r0
    8720:	2304      	movs	r3, #4
    8722:	4661      	mov	r1, ip
    8724:	4694      	mov	ip, r2
    8726:	445b      	add	r3, fp
    8728:	1812      	adds	r2, r2, r0
    872a:	3624      	adds	r6, #36	; 0x24
    872c:	3004      	adds	r0, #4
    872e:	4460      	add	r0, ip
    8730:	4466      	add	r6, ip
    8732:	469c      	mov	ip, r3
    8734:	2300      	movs	r3, #0
    8736:	001f      	movs	r7, r3
    8738:	4284      	cmp	r4, r0
    873a:	415f      	adcs	r7, r3
    873c:	9600      	str	r6, [sp, #0]
    873e:	46b9      	mov	r9, r7
    8740:	4646      	mov	r6, r8
    8742:	001f      	movs	r7, r3
    8744:	42b2      	cmp	r2, r6
    8746:	415f      	adcs	r7, r3
    8748:	464e      	mov	r6, r9
    874a:	4337      	orrs	r7, r6
    874c:	9701      	str	r7, [sp, #4]
    874e:	001e      	movs	r6, r3
    8750:	465f      	mov	r7, fp
    8752:	4287      	cmp	r7, r0
    8754:	415e      	adcs	r6, r3
    8756:	4667      	mov	r7, ip
    8758:	0030      	movs	r0, r6
    875a:	001e      	movs	r6, r3
    875c:	42ba      	cmp	r2, r7
    875e:	415e      	adcs	r6, r3
    8760:	4330      	orrs	r0, r6
    8762:	9e01      	ldr	r6, [sp, #4]
    8764:	2703      	movs	r7, #3
    8766:	4030      	ands	r0, r6
    8768:	465e      	mov	r6, fp
    876a:	4326      	orrs	r6, r4
    876c:	4037      	ands	r7, r6
    876e:	427e      	negs	r6, r7
    8770:	417e      	adcs	r6, r7
    8772:	0037      	movs	r7, r6
    8774:	4007      	ands	r7, r0
    8776:	0018      	movs	r0, r3
    8778:	9e00      	ldr	r6, [sp, #0]
    877a:	42b4      	cmp	r4, r6
    877c:	4158      	adcs	r0, r3
    877e:	001e      	movs	r6, r3
    8780:	4681      	mov	r9, r0
    8782:	4640      	mov	r0, r8
    8784:	4281      	cmp	r1, r0
    8786:	415e      	adcs	r6, r3
    8788:	0030      	movs	r0, r6
    878a:	464e      	mov	r6, r9
    878c:	4306      	orrs	r6, r0
    878e:	423e      	tst	r6, r7
    8790:	d05c      	beq.n	884c <PRR+0x240>
    8792:	0018      	movs	r0, r3
    8794:	465e      	mov	r6, fp
    8796:	9f00      	ldr	r7, [sp, #0]
    8798:	42be      	cmp	r6, r7
    879a:	4158      	adcs	r0, r3
    879c:	4666      	mov	r6, ip
    879e:	42b1      	cmp	r1, r6
    87a0:	415b      	adcs	r3, r3
    87a2:	4303      	orrs	r3, r0
    87a4:	b2db      	uxtb	r3, r3
    87a6:	2b00      	cmp	r3, #0
    87a8:	d050      	beq.n	884c <PRR+0x240>
			pair->key[i] = key[i];
    87aa:	6823      	ldr	r3, [r4, #0]
    87ac:	6013      	str	r3, [r2, #0]
			pair->value[i] = value[i];
    87ae:	465b      	mov	r3, fp
    87b0:	681b      	ldr	r3, [r3, #0]
    87b2:	600b      	str	r3, [r1, #0]
			pair->key[i] = key[i];
    87b4:	6863      	ldr	r3, [r4, #4]
    87b6:	6053      	str	r3, [r2, #4]
			pair->value[i] = value[i];
    87b8:	465b      	mov	r3, fp
    87ba:	685b      	ldr	r3, [r3, #4]
    87bc:	604b      	str	r3, [r1, #4]
			pair->key[i] = key[i];
    87be:	68a3      	ldr	r3, [r4, #8]
    87c0:	6093      	str	r3, [r2, #8]
			pair->value[i] = value[i];
    87c2:	465b      	mov	r3, fp
    87c4:	689b      	ldr	r3, [r3, #8]
    87c6:	608b      	str	r3, [r1, #8]
			pair->key[i] = key[i];
    87c8:	68e3      	ldr	r3, [r4, #12]
    87ca:	60d3      	str	r3, [r2, #12]
			pair->value[i] = value[i];
    87cc:	465b      	mov	r3, fp
    87ce:	68db      	ldr	r3, [r3, #12]
    87d0:	60cb      	str	r3, [r1, #12]
			pair->key[i] = key[i];
    87d2:	6923      	ldr	r3, [r4, #16]
    87d4:	6113      	str	r3, [r2, #16]
			pair->value[i] = value[i];
    87d6:	465b      	mov	r3, fp
    87d8:	691b      	ldr	r3, [r3, #16]
    87da:	610b      	str	r3, [r1, #16]
			pair->key[i] = key[i];
    87dc:	6963      	ldr	r3, [r4, #20]
    87de:	6153      	str	r3, [r2, #20]
			pair->value[i] = value[i];
    87e0:	465b      	mov	r3, fp
    87e2:	695b      	ldr	r3, [r3, #20]
    87e4:	614b      	str	r3, [r1, #20]
			pair->key[i] = key[i];
    87e6:	69a3      	ldr	r3, [r4, #24]
    87e8:	6193      	str	r3, [r2, #24]
			pair->value[i] = value[i];
    87ea:	465b      	mov	r3, fp
    87ec:	699b      	ldr	r3, [r3, #24]
    87ee:	618b      	str	r3, [r1, #24]
			pair->key[i] = key[i];
    87f0:	69e3      	ldr	r3, [r4, #28]
    87f2:	61d3      	str	r3, [r2, #28]
			pair->value[i] = value[i];
    87f4:	465b      	mov	r3, fp
    87f6:	69db      	ldr	r3, [r3, #28]
    87f8:	61cb      	str	r3, [r1, #28]
		map->size++;
    87fa:	f240 5300 	movw	r3, #1280	; 0x500
    87fe:	9a03      	ldr	r2, [sp, #12]
    8800:	3501      	adds	r5, #1
    8802:	50d5      	str	r5, [r2, r3]
    8804:	4658      	mov	r0, fp
    8806:	e00f      	b.n	8828 <PRR+0x21c>
			} else if(is_bit_set(b[bin], bit)) {
    8808:	464b      	mov	r3, r9
	uint8_t mask = 1 << n;
    880a:	2201      	movs	r2, #1
			} else if(is_bit_set(b[bin], bit)) {
    880c:	5d99      	ldrb	r1, [r3, r6]
	uint8_t mask = 1 << n;
    880e:	4643      	mov	r3, r8
    8810:	409a      	lsls	r2, r3
    8812:	b2d3      	uxtb	r3, r2
				b_prime[bin] = set_bit(b[bin], bit);
    8814:	465a      	mov	r2, fp
	return num | mask;
    8816:	430b      	orrs	r3, r1
				b_prime[bin] = set_bit(b[bin], bit);
    8818:	5593      	strb	r3, [r2, r6]
    881a:	e73e      	b.n	869a <PRR+0x8e>
			return map->pairs[i].value;
    881c:	01ad      	lsls	r5, r5, #6
    881e:	9b03      	ldr	r3, [sp, #12]
    8820:	0028      	movs	r0, r5
    8822:	469c      	mov	ip, r3
    8824:	3020      	adds	r0, #32
    8826:	4460      	add	r0, ip
}
    8828:	b005      	add	sp, #20
    882a:	bc3c      	pop	{r2, r3, r4, r5}
    882c:	4690      	mov	r8, r2
    882e:	4699      	mov	r9, r3
    8830:	46a2      	mov	sl, r4
    8832:	46ab      	mov	fp, r5
    8834:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_puts("Map is full. Cannot insert.\n");
    8836:	f649 30a0 	movw	r0, #39840	; 0x9ba0
    883a:	f248 33a1 	movw	r3, #33697	; 0x83a1
    883e:	f2c0 0000 	movt	r0, #0
    8842:	f2c0 0300 	movt	r3, #0
    8846:	4798      	blx	r3
    8848:	4658      	mov	r0, fp
    884a:	e7ed      	b.n	8828 <PRR+0x21c>
    884c:	9b03      	ldr	r3, [sp, #12]
	if (map->size < MAP_SIZE) {
    884e:	465e      	mov	r6, fp
    8850:	4453      	add	r3, sl
    8852:	0019      	movs	r1, r3
    8854:	2300      	movs	r3, #0
			pair->key[i] = key[i];
    8856:	5ce0      	ldrb	r0, [r4, r3]
    8858:	54d0      	strb	r0, [r2, r3]
			pair->value[i] = value[i];
    885a:	5cf0      	ldrb	r0, [r6, r3]
		for (int i = 0; i < 32; i++) {
    885c:	3301      	adds	r3, #1
			pair->value[i] = value[i];
    885e:	7008      	strb	r0, [r1, #0]
    8860:	3101      	adds	r1, #1
		for (int i = 0; i < 32; i++) {
    8862:	2b20      	cmp	r3, #32
    8864:	d1f7      	bne.n	8856 <PRR+0x24a>
    8866:	46b3      	mov	fp, r6
    8868:	e7c7      	b.n	87fa <PRR+0x1ee>
    886a:	46c0      	nop			; (mov r8, r8)

0000886c <LDP_DC>:
void LDP_DC(uint8_t inp, float f, float p, float q) {
    886c:	b5f0      	push	{r4, r5, r6, r7, lr}
    886e:	46de      	mov	lr, fp
    8870:	4657      	mov	r7, sl
    8872:	464e      	mov	r6, r9
    8874:	4645      	mov	r5, r8
	uint8_t b[32] = {0}, b_prime[32] = {0}, O[32] = {0};
    8876:	f649 0455 	movw	r4, #38997	; 0x9855
void LDP_DC(uint8_t inp, float f, float p, float q) {
    887a:	b5e0      	push	{r5, r6, r7, lr}
    887c:	b09f      	sub	sp, #124	; 0x7c
    887e:	0006      	movs	r6, r0
	uint8_t b[32] = {0}, b_prime[32] = {0}, O[32] = {0};
    8880:	f2c0 0400 	movt	r4, #0
void LDP_DC(uint8_t inp, float f, float p, float q) {
    8884:	1c0d      	adds	r5, r1, #0
    8886:	9202      	str	r2, [sp, #8]
	uint8_t b[32] = {0}, b_prime[32] = {0}, O[32] = {0};
    8888:	2100      	movs	r1, #0
    888a:	2220      	movs	r2, #32
    888c:	a806      	add	r0, sp, #24
void LDP_DC(uint8_t inp, float f, float p, float q) {
    888e:	9305      	str	r3, [sp, #20]
	uint8_t b[32] = {0}, b_prime[32] = {0}, O[32] = {0};
    8890:	47a0      	blx	r4
    8892:	2220      	movs	r2, #32
    8894:	2100      	movs	r1, #0
    8896:	a80e      	add	r0, sp, #56	; 0x38
    8898:	47a0      	blx	r4
    889a:	2220      	movs	r2, #32
    889c:	2100      	movs	r1, #0
    889e:	a816      	add	r0, sp, #88	; 0x58
    88a0:	47a0      	blx	r4
	b[bin] = 1<<bit;
    88a2:	2007      	movs	r0, #7
    88a4:	2301      	movs	r3, #1
    88a6:	4030      	ands	r0, r6
    88a8:	4083      	lsls	r3, r0
    88aa:	08f2      	lsrs	r2, r6, #3
    88ac:	a906      	add	r1, sp, #24
    88ae:	548b      	strb	r3, [r1, r2]
    uint8_t *b_prime_out = PRR(b, f, &B, b_prime);
    88b0:	f248 640d 	movw	r4, #34317	; 0x860d
    88b4:	f242 2244 	movw	r2, #8772	; 0x2244
    88b8:	ab0e      	add	r3, sp, #56	; 0x38
    88ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
    88be:	1c29      	adds	r1, r5, #0
    88c0:	a806      	add	r0, sp, #24
    88c2:	f2c0 0400 	movt	r4, #0
    88c6:	47a0      	blx	r4
    88c8:	f249 63d5 	movw	r3, #38613	; 0x96d5
    88cc:	f2c0 0300 	movt	r3, #0
    88d0:	9304      	str	r3, [sp, #16]
    88d2:	f249 4341 	movw	r3, #37953	; 0x9441
    88d6:	f649 1b21 	movw	fp, #39201	; 0x9921
    88da:	f648 6afd 	movw	sl, #36605	; 0x8efd
    88de:	f2c0 0300 	movt	r3, #0
    88e2:	9001      	str	r0, [sp, #4]
	for(int i=0; i<256; i++) {
    88e4:	2600      	movs	r6, #0
    88e6:	f2c0 0b00 	movt	fp, #0
    88ea:	9303      	str	r3, [sp, #12]
    88ec:	f2c0 0a00 	movt	sl, #0
    88f0:	e00d      	b.n	890e <LDP_DC+0xa2>
		if((r <= p && bit_set) || (r <= q && bit_set)) {
    88f2:	4641      	mov	r1, r8
    88f4:	9805      	ldr	r0, [sp, #20]
    88f6:	47d0      	blx	sl
    88f8:	bb08      	cbnz	r0, 893e <LDP_DC+0xd2>
			O[bin] = clear_bit(b_prime[bin], bit);
    88fa:	2240      	movs	r2, #64	; 0x40
    88fc:	ab06      	add	r3, sp, #24
    88fe:	189b      	adds	r3, r3, r2
	return num & mask;
    8900:	43a5      	bics	r5, r4
			O[bin] = clear_bit(b_prime[bin], bit);
    8902:	55dd      	strb	r5, [r3, r7]
	for(int i=0; i<256; i++) {
    8904:	f240 1300 	movw	r3, #256	; 0x100
    8908:	3601      	adds	r6, #1
    890a:	429e      	cmp	r6, r3
    890c:	d024      	beq.n	8958 <LDP_DC+0xec>
		float r = (float) rand()/(float) RAND_MAX;
    890e:	47d8      	blx	fp
    8910:	9b04      	ldr	r3, [sp, #16]
    8912:	4798      	blx	r3
    8914:	21c0      	movs	r1, #192	; 0xc0
    8916:	9b03      	ldr	r3, [sp, #12]
    8918:	0589      	lsls	r1, r1, #22
    891a:	4798      	blx	r3
		bool bit_set = is_bit_set(b_prime[bin], bit);
    891c:	9b01      	ldr	r3, [sp, #4]
		uint8_t bin = i/8;
    891e:	10f7      	asrs	r7, r6, #3
		bool bit_set = is_bit_set(b_prime[bin], bit);
    8920:	5ddd      	ldrb	r5, [r3, r7]
		uint8_t bit = i%8;
    8922:	2307      	movs	r3, #7
	uint8_t mask = 1 << n;
    8924:	2401      	movs	r4, #1
		uint8_t bit = i%8;
    8926:	4033      	ands	r3, r6
	uint8_t mask = 1 << n;
    8928:	409c      	lsls	r4, r3
    892a:	b2e4      	uxtb	r4, r4
	return (num & mask) != 0;
    892c:	0023      	movs	r3, r4
		float r = (float) rand()/(float) RAND_MAX;
    892e:	4680      	mov	r8, r0
	return (num & mask) != 0;
    8930:	402b      	ands	r3, r5
		if((r <= p && bit_set) || (r <= q && bit_set)) {
    8932:	1c01      	adds	r1, r0, #0
    8934:	9802      	ldr	r0, [sp, #8]
	return (num & mask) != 0;
    8936:	4699      	mov	r9, r3
		if((r <= p && bit_set) || (r <= q && bit_set)) {
    8938:	47d0      	blx	sl
    893a:	2800      	cmp	r0, #0
    893c:	d0d9      	beq.n	88f2 <LDP_DC+0x86>
    893e:	464b      	mov	r3, r9
    8940:	2b00      	cmp	r3, #0
    8942:	d0da      	beq.n	88fa <LDP_DC+0x8e>
			O[bin] = set_bit(b_prime[bin], bit);
    8944:	2240      	movs	r2, #64	; 0x40
    8946:	ab06      	add	r3, sp, #24
    8948:	189b      	adds	r3, r3, r2
	return num | mask;
    894a:	432c      	orrs	r4, r5
			O[bin] = set_bit(b_prime[bin], bit);
    894c:	55dc      	strb	r4, [r3, r7]
	for(int i=0; i<256; i++) {
    894e:	f240 1300 	movw	r3, #256	; 0x100
    8952:	3601      	adds	r6, #1
    8954:	429e      	cmp	r6, r3
    8956:	d1da      	bne.n	890e <LDP_DC+0xa2>
    memcpy(pox_output, O, 32);
    8958:	f242 2100 	movw	r1, #8704	; 0x2200
    895c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8960:	000a      	movs	r2, r1
    8962:	ab16      	add	r3, sp, #88	; 0x58
    8964:	cb13      	ldmia	r3!, {r0, r1, r4}
    8966:	c213      	stmia	r2!, {r0, r1, r4}
    8968:	cb13      	ldmia	r3!, {r0, r1, r4}
    896a:	c213      	stmia	r2!, {r0, r1, r4}
    896c:	cb03      	ldmia	r3!, {r0, r1}
    896e:	c203      	stmia	r2!, {r0, r1}
}
    8970:	b01f      	add	sp, #124	; 0x7c
    8972:	bc3c      	pop	{r2, r3, r4, r5}
    8974:	4690      	mov	r8, r2
    8976:	4699      	mov	r9, r3
    8978:	46a2      	mov	sl, r4
    897a:	46ab      	mov	fp, r5
    897c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    897e:	46c0      	nop			; (mov r8, r8)

00008980 <wrapper_LDP_energy>:
void wrapper_LDP_energy() {
    8980:	b5f0      	push	{r4, r5, r6, r7, lr}
    8982:	46c6      	mov	lr, r8
	secure_checkState(&B, sizeof(Map));
    8984:	f242 2044 	movw	r0, #8772	; 0x2244
    8988:	f647 4309 	movw	r3, #31753	; 0x7c09
void wrapper_LDP_energy() {
    898c:	b500      	push	{lr}
	secure_checkState(&B, sizeof(Map));
    898e:	f240 5104 	movw	r1, #1284	; 0x504
void wrapper_LDP_energy() {
    8992:	b082      	sub	sp, #8
	secure_checkState(&B, sizeof(Map));
    8994:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8998:	f2c0 0300 	movt	r3, #0
    899c:	4798      	blx	r3
	uart_puts("[S]AA[E]\n");
    899e:	f248 35a1 	movw	r5, #33697	; 0x83a1
    89a2:	f649 30c0 	movw	r0, #39872	; 0x9bc0
    89a6:	f2c0 0500 	movt	r5, #0
    89aa:	f2c0 0000 	movt	r0, #0
    89ae:	f248 5431 	movw	r4, #34097	; 0x8531
    89b2:	47a8      	blx	r5
    89b4:	f2c0 0400 	movt	r4, #0
	uint8_t c1 = uart_getc();
    89b8:	47a0      	blx	r4
	if(c1 != '<') return 0;
    89ba:	283c      	cmp	r0, #60	; 0x3c
    89bc:	d1fc      	bne.n	89b8 <wrapper_LDP_energy+0x38>
	c1 = uart_getc();
    89be:	47a0      	blx	r4
	if(c1 != 'p') return 0;
    89c0:	2870      	cmp	r0, #112	; 0x70
    89c2:	d1f9      	bne.n	89b8 <wrapper_LDP_energy+0x38>
	c1 = uart_getc();
    89c4:	47a0      	blx	r4
	if(c1 != '>') return 0;
    89c6:	283e      	cmp	r0, #62	; 0x3e
    89c8:	d1f6      	bne.n	89b8 <wrapper_LDP_energy+0x38>
	uart_puts("[S]BB[E]\n");
    89ca:	f649 30cc 	movw	r0, #39884	; 0x9bcc
    89ce:	f2c0 0000 	movt	r0, #0
    89d2:	47a8      	blx	r5
	float f = *(float*)(pox_input);
    89d4:	f242 2300 	movw	r3, #8704	; 0x2200
    89d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    89dc:	6a1e      	ldr	r6, [r3, #32]
	float p = *(float*)(pox_input+4);
    89de:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	float q = *(float*)(pox_input+4*2);
    89e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    89e2:	4698      	mov	r8, r3
		uint8_t c1 = uart_getc();
    89e4:	47a0      	blx	r4
		if(c1 != '<') continue;
    89e6:	283c      	cmp	r0, #60	; 0x3c
    89e8:	d1fc      	bne.n	89e4 <wrapper_LDP_energy+0x64>
		c1 = uart_getc();
    89ea:	47a0      	blx	r4
		if(c1 != 'p') continue;
    89ec:	2870      	cmp	r0, #112	; 0x70
    89ee:	d1f9      	bne.n	89e4 <wrapper_LDP_energy+0x64>
		c1 = uart_getc();
    89f0:	47a0      	blx	r4
		if(c1 != '>') continue;
    89f2:	283e      	cmp	r0, #62	; 0x3e
    89f4:	d1f6      	bne.n	89e4 <wrapper_LDP_energy+0x64>
		uart_get_bytes(arr,3);
    89f6:	f248 535d 	movw	r3, #34141	; 0x855d
    89fa:	2103      	movs	r1, #3
    89fc:	4668      	mov	r0, sp
    89fe:	f2c0 0300 	movt	r3, #0
    8a02:	4798      	blx	r3
		uart_puts("[S]");
    8a04:	f649 30d8 	movw	r0, #39896	; 0x9bd8
    8a08:	f2c0 0000 	movt	r0, #0
    8a0c:	47a8      	blx	r5
		arr[3] = '\0';
    8a0e:	466a      	mov	r2, sp
    8a10:	2300      	movs	r3, #0
    8a12:	70d3      	strb	r3, [r2, #3]
		uint8_t energy = (uint8_t) atoi(arr);
    8a14:	f249 73b5 	movw	r3, #38837	; 0x97b5
    8a18:	4668      	mov	r0, sp
    8a1a:	f2c0 0300 	movt	r3, #0
    8a1e:	4798      	blx	r3
		uart_puti(energy);
    8a20:	23ff      	movs	r3, #255	; 0xff
		uint8_t energy = (uint8_t) atoi(arr);
    8a22:	b2c4      	uxtb	r4, r0
		uart_puti(energy);
    8a24:	4018      	ands	r0, r3
    8a26:	f248 33c9 	movw	r3, #33737	; 0x83c9
		energy += 23;
    8a2a:	3417      	adds	r4, #23
		uart_puti(energy);
    8a2c:	f2c0 0300 	movt	r3, #0
    8a30:	4798      	blx	r3
		LDP_DC(energy, f, p, q);
    8a32:	b2e0      	uxtb	r0, r4
    8a34:	f648 046d 	movw	r4, #34925	; 0x886d
    8a38:	4643      	mov	r3, r8
    8a3a:	1c3a      	adds	r2, r7, #0
    8a3c:	1c31      	adds	r1, r6, #0
    8a3e:	f2c0 0400 	movt	r4, #0
    8a42:	47a0      	blx	r4
		uart_puts("[E]\n");
    8a44:	f649 30dc 	movw	r0, #39900	; 0x9bdc
    8a48:	f2c0 0000 	movt	r0, #0
    8a4c:	47a8      	blx	r5
	secure_setState(&B, sizeof(Map));
    8a4e:	f242 2044 	movw	r0, #8772	; 0x2244
    8a52:	f647 4311 	movw	r3, #31761	; 0x7c11
    8a56:	f240 5104 	movw	r1, #1284	; 0x504
    8a5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a5e:	f2c0 0300 	movt	r3, #0
    8a62:	4798      	blx	r3
}
    8a64:	b002      	add	sp, #8
    8a66:	bc04      	pop	{r2}
    8a68:	4690      	mov	r8, r2
    8a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008a6c <new_single>:
	uart_puts("printing init state\n");
	print_token(hash.hash, SHA256_DIGEST_SIZE);
	uart_puts("done init state\n");
}

void new_single() {
    8a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a6e:	46de      	mov	lr, fp
    8a70:	4657      	mov	r7, sl
    8a72:	464e      	mov	r6, r9
    8a74:	4645      	mov	r5, r8
	
	for(volatile int i=0; i<10000; i++);
    8a76:	2300      	movs	r3, #0
void new_single() {
    8a78:	b5e0      	push	{r5, r6, r7, lr}
    8a7a:	b0a7      	sub	sp, #156	; 0x9c
	for(volatile int i=0; i<10000; i++);
    8a7c:	9304      	str	r3, [sp, #16]
    8a7e:	f242 730f 	movw	r3, #9999	; 0x270f
    8a82:	9904      	ldr	r1, [sp, #16]
    8a84:	f242 720f 	movw	r2, #9999	; 0x270f
    8a88:	4299      	cmp	r1, r3
    8a8a:	dc05      	bgt.n	8a98 <new_single+0x2c>
    8a8c:	9b04      	ldr	r3, [sp, #16]
    8a8e:	3301      	adds	r3, #1
    8a90:	9304      	str	r3, [sp, #16]
    8a92:	9b04      	ldr	r3, [sp, #16]
    8a94:	4293      	cmp	r3, r2
    8a96:	ddf9      	ble.n	8a8c <new_single+0x20>
	uint8_t req[100]={};
    8a98:	f649 0355 	movw	r3, #38997	; 0x9855
    8a9c:	ad0d      	add	r5, sp, #52	; 0x34
    8a9e:	2264      	movs	r2, #100	; 0x64
    8aa0:	2100      	movs	r1, #0
    8aa2:	f2c0 0300 	movt	r3, #0
    8aa6:	0028      	movs	r0, r5
    8aa8:	4798      	blx	r3
	uart_get_bytes(req, REQUEST_SIZE);
    8aaa:	f248 535d 	movw	r3, #34141	; 0x855d
    8aae:	2139      	movs	r1, #57	; 0x39
    8ab0:	0028      	movs	r0, r5
    8ab2:	f2c0 0300 	movt	r3, #0
    8ab6:	4798      	blx	r3
	
	pox_call_t pc;
	pc.input = pox_input;
    8ab8:	f242 2300 	movw	r3, #8704	; 0x2200
    8abc:	f240 0920 	movw	r9, #32
    8ac0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8ac4:	4499      	add	r9, r3
    8ac6:	ae05      	add	r6, sp, #20
    8ac8:	464a      	mov	r2, r9
	pc.output = pox_output;
	pc.command_size = 5; // assume to be fixed
	pc.command = req; // either [stp] or [clt]
	if(memcmp(pc.command, "[stp]", pc.command_size) == 0) {
    8aca:	f649 411c 	movw	r1, #39964	; 0x9c1c
    8ace:	f649 0425 	movw	r4, #38949	; 0x9825
	pc.output = pox_output;
    8ad2:	60f3      	str	r3, [r6, #12]
	pc.command_size = 5; // assume to be fixed
    8ad4:	2305      	movs	r3, #5
	pc.input = pox_input;
    8ad6:	6072      	str	r2, [r6, #4]
	if(memcmp(pc.command, "[stp]", pc.command_size) == 0) {
    8ad8:	f2c0 0100 	movt	r1, #0
    8adc:	2205      	movs	r2, #5
    8ade:	0028      	movs	r0, r5
    8ae0:	f2c0 0400 	movt	r4, #0
	pc.command_size = 5; // assume to be fixed
    8ae4:	7733      	strb	r3, [r6, #28]
	pc.command = req; // either [stp] or [clt]
    8ae6:	61b5      	str	r5, [r6, #24]
	if(memcmp(pc.command, "[stp]", pc.command_size) == 0) {
    8ae8:	47a0      	blx	r4
    8aea:	2800      	cmp	r0, #0
    8aec:	d100      	bne.n	8af0 <new_single+0x84>
    8aee:	e101      	b.n	8cf4 <new_single+0x288>
		
		#ifdef ATTACK_A3
		memset(&B, 1, sizeof(Map));
		#endif
		
	} else if(memcmp(pc.command, "[clt]", pc.command_size) == 0) {
    8af0:	f649 4180 	movw	r1, #40064	; 0x9c80
    8af4:	2205      	movs	r2, #5
    8af6:	f2c0 0100 	movt	r1, #0
    8afa:	0028      	movs	r0, r5
    8afc:	47a0      	blx	r4
    8afe:	2800      	cmp	r0, #0
    8b00:	d000      	beq.n	8b04 <new_single+0x98>
    8b02:	e0e0      	b.n	8cc6 <new_single+0x25a>
		uart_puts("[Test] Collect: ");
    8b04:	f649 4088 	movw	r0, #40072	; 0x9c88
    8b08:	f248 34a1 	movw	r4, #33697	; 0x83a1
    8b0c:	f2c0 0000 	movt	r0, #0
    8b10:	f2c0 0400 	movt	r4, #0
    8b14:	47a0      	blx	r4
		uint32_t counter = *((uint32_t*)(req+5));
    8b16:	ab04      	add	r3, sp, #16
    8b18:	469c      	mov	ip, r3
    8b1a:	2229      	movs	r2, #41	; 0x29
    8b1c:	4462      	add	r2, ip
    8b1e:	7853      	ldrb	r3, [r2, #1]
    8b20:	7811      	ldrb	r1, [r2, #0]
    8b22:	021b      	lsls	r3, r3, #8
    8b24:	4319      	orrs	r1, r3
    8b26:	7893      	ldrb	r3, [r2, #2]
    8b28:	78d2      	ldrb	r2, [r2, #3]
    8b2a:	041b      	lsls	r3, r3, #16
    8b2c:	430b      	orrs	r3, r1
    8b2e:	0612      	lsls	r2, r2, #24
    8b30:	431a      	orrs	r2, r3
		uint32_t func = *((uint32_t*)(req+5+4));
    8b32:	232d      	movs	r3, #45	; 0x2d
    8b34:	4463      	add	r3, ip
		uint32_t counter = *((uint32_t*)(req+5));
    8b36:	9200      	str	r2, [sp, #0]
		uint32_t func = *((uint32_t*)(req+5+4));
    8b38:	001a      	movs	r2, r3
		float f = *((float*)(req+5+4*2));
    8b3a:	2731      	movs	r7, #49	; 0x31
		uint32_t func = *((uint32_t*)(req+5+4));
    8b3c:	7819      	ldrb	r1, [r3, #0]
    8b3e:	785b      	ldrb	r3, [r3, #1]
		float f = *((float*)(req+5+4*2));
    8b40:	4467      	add	r7, ip
		uint32_t func = *((uint32_t*)(req+5+4));
    8b42:	021b      	lsls	r3, r3, #8
    8b44:	4319      	orrs	r1, r3
    8b46:	7893      	ldrb	r3, [r2, #2]
    8b48:	78d2      	ldrb	r2, [r2, #3]
    8b4a:	041b      	lsls	r3, r3, #16
    8b4c:	430b      	orrs	r3, r1
    8b4e:	0612      	lsls	r2, r2, #24
    8b50:	431a      	orrs	r2, r3
		float f = *((float*)(req+5+4*2));
    8b52:	787b      	ldrb	r3, [r7, #1]
		uint32_t func = *((uint32_t*)(req+5+4));
    8b54:	9201      	str	r2, [sp, #4]
		float f = *((float*)(req+5+4*2));
    8b56:	783a      	ldrb	r2, [r7, #0]
    8b58:	021b      	lsls	r3, r3, #8
    8b5a:	431a      	orrs	r2, r3
    8b5c:	78bb      	ldrb	r3, [r7, #2]
		float p = *((float*)(req+5+4*3));
		float q = *((float*)(req+5+4*4));
		uart_puts("Returning ");
    8b5e:	f649 409c 	movw	r0, #40092	; 0x9c9c
		float f = *((float*)(req+5+4*2));
    8b62:	041b      	lsls	r3, r3, #16
    8b64:	4313      	orrs	r3, r2
    8b66:	78fa      	ldrb	r2, [r7, #3]
		uart_puts("Returning ");
    8b68:	f2c0 0000 	movt	r0, #0
		float f = *((float*)(req+5+4*2));
    8b6c:	0612      	lsls	r2, r2, #24
    8b6e:	0011      	movs	r1, r2
    8b70:	4319      	orrs	r1, r3
		float p = *((float*)(req+5+4*3));
    8b72:	2335      	movs	r3, #53	; 0x35
    8b74:	4463      	add	r3, ip
    8b76:	001a      	movs	r2, r3
		float f = *((float*)(req+5+4*2));
    8b78:	468a      	mov	sl, r1
		float p = *((float*)(req+5+4*3));
    8b7a:	7819      	ldrb	r1, [r3, #0]
    8b7c:	785b      	ldrb	r3, [r3, #1]
		uart_put_bytes(req, REQUEST_SIZE);
		uart_puts(", counter=");
		uart_puti(counter);
    8b7e:	f248 38c9 	movw	r8, #33737	; 0x83c9
		float p = *((float*)(req+5+4*3));
    8b82:	021b      	lsls	r3, r3, #8
    8b84:	4319      	orrs	r1, r3
    8b86:	7893      	ldrb	r3, [r2, #2]
    8b88:	78d2      	ldrb	r2, [r2, #3]
    8b8a:	041b      	lsls	r3, r3, #16
    8b8c:	0612      	lsls	r2, r2, #24
    8b8e:	430b      	orrs	r3, r1
    8b90:	0011      	movs	r1, r2
    8b92:	4319      	orrs	r1, r3
		float q = *((float*)(req+5+4*4));
    8b94:	2339      	movs	r3, #57	; 0x39
    8b96:	4463      	add	r3, ip
    8b98:	001a      	movs	r2, r3
		float p = *((float*)(req+5+4*3));
    8b9a:	9102      	str	r1, [sp, #8]
		float q = *((float*)(req+5+4*4));
    8b9c:	7819      	ldrb	r1, [r3, #0]
    8b9e:	785b      	ldrb	r3, [r3, #1]
		uart_puti(counter);
    8ba0:	f2c0 0800 	movt	r8, #0
		float q = *((float*)(req+5+4*4));
    8ba4:	021b      	lsls	r3, r3, #8
    8ba6:	4319      	orrs	r1, r3
    8ba8:	7893      	ldrb	r3, [r2, #2]
    8baa:	78d2      	ldrb	r2, [r2, #3]
    8bac:	041b      	lsls	r3, r3, #16
    8bae:	0612      	lsls	r2, r2, #24
    8bb0:	430b      	orrs	r3, r1
    8bb2:	0011      	movs	r1, r2
    8bb4:	4319      	orrs	r1, r3
    8bb6:	9103      	str	r1, [sp, #12]
		uart_puts("Returning ");
    8bb8:	47a0      	blx	r4
		uart_put_bytes(req, REQUEST_SIZE);
    8bba:	0028      	movs	r0, r5
    8bbc:	f248 55a5 	movw	r5, #34213	; 0x85a5
    8bc0:	2139      	movs	r1, #57	; 0x39
    8bc2:	f2c0 0500 	movt	r5, #0
    8bc6:	47a8      	blx	r5
		uart_puts(", counter=");
    8bc8:	f649 4040 	movw	r0, #40000	; 0x9c40
    8bcc:	f2c0 0000 	movt	r0, #0
    8bd0:	47a0      	blx	r4
		uart_puti(counter);
    8bd2:	9800      	ldr	r0, [sp, #0]
    8bd4:	47c0      	blx	r8
		uart_puts(", func=");
    8bd6:	f649 404c 	movw	r0, #40012	; 0x9c4c
    8bda:	f2c0 0000 	movt	r0, #0
    8bde:	47a0      	blx	r4
		uart_puti(func);
    8be0:	9801      	ldr	r0, [sp, #4]
    8be2:	47c0      	blx	r8
		uart_puts(", f=");
    8be4:	f649 40a8 	movw	r0, #40104	; 0x9ca8
    8be8:	f2c0 0000 	movt	r0, #0
    8bec:	47a0      	blx	r4
		uart_puti((int) (f*10000));
    8bee:	f249 4b41 	movw	fp, #37953	; 0x9441
    8bf2:	f244 0100 	movw	r1, #16384	; 0x4000
    8bf6:	4650      	mov	r0, sl
    8bf8:	f249 6a99 	movw	sl, #38553	; 0x9699
    8bfc:	f2c4 611c 	movt	r1, #17948	; 0x461c
    8c00:	f2c0 0b00 	movt	fp, #0
    8c04:	47d8      	blx	fp
    8c06:	f2c0 0a00 	movt	sl, #0
    8c0a:	47d0      	blx	sl
    8c0c:	47c0      	blx	r8
		uart_puts(", p=");
    8c0e:	f649 40b0 	movw	r0, #40112	; 0x9cb0
    8c12:	f2c0 0000 	movt	r0, #0
    8c16:	47a0      	blx	r4
		uart_puti((int) (p*10000));
    8c18:	f244 0100 	movw	r1, #16384	; 0x4000
    8c1c:	9802      	ldr	r0, [sp, #8]
    8c1e:	f2c4 611c 	movt	r1, #17948	; 0x461c
    8c22:	47d8      	blx	fp
    8c24:	47d0      	blx	sl
    8c26:	47c0      	blx	r8
		uart_puts(", q=");
    8c28:	f649 40b8 	movw	r0, #40120	; 0x9cb8
    8c2c:	f2c0 0000 	movt	r0, #0
    8c30:	47a0      	blx	r4
		uart_puti((int) (q*10000));
    8c32:	f244 0100 	movw	r1, #16384	; 0x4000
    8c36:	9803      	ldr	r0, [sp, #12]
    8c38:	f2c4 611c 	movt	r1, #17948	; 0x461c
    8c3c:	47d8      	blx	fp
    8c3e:	47d0      	blx	sl
    8c40:	47c0      	blx	r8
		uart_puts(" = done  [/Test] \n");
    8c42:	f649 4054 	movw	r0, #40020	; 0x9c54
    8c46:	f2c0 0000 	movt	r0, #0
    8c4a:	47a0      	blx	r4
		
		uint8_t *token = (uint8_t*) (req+PLAINTEXT_SIZE);
		
		pc.counter = counter;
    8c4c:	9b00      	ldr	r3, [sp, #0]
		pc.addr = func;
    8c4e:	9a01      	ldr	r2, [sp, #4]
		pc.counter = counter;
    8c50:	6173      	str	r3, [r6, #20]
		pc.input_size = 12;
    8c52:	230c      	movs	r3, #12
    8c54:	60b3      	str	r3, [r6, #8]
		pc.output_size = 32;
    8c56:	3314      	adds	r3, #20
    8c58:	6133      	str	r3, [r6, #16]
		// pox_input = f, p, q
		memcpy(pox_input, req+5+4*2, 12);
    8c5a:	f649 0343 	movw	r3, #38979	; 0x9843
		pc.addr = func;
    8c5e:	6032      	str	r2, [r6, #0]
		memcpy(pox_input, req+5+4*2, 12);
    8c60:	0039      	movs	r1, r7
    8c62:	220c      	movs	r2, #12
    8c64:	f2c0 0300 	movt	r3, #0
    8c68:	4648      	mov	r0, r9
    8c6a:	4798      	blx	r3
		
		secure_pox(&pc, token);
    8c6c:	ab04      	add	r3, sp, #16
    8c6e:	469c      	mov	ip, r3
    8c70:	273d      	movs	r7, #61	; 0x3d
    8c72:	f647 4301 	movw	r3, #31745	; 0x7c01
    8c76:	4467      	add	r7, ip
    8c78:	0030      	movs	r0, r6
    8c7a:	0039      	movs	r1, r7
    8c7c:	f2c0 0300 	movt	r3, #0
    8c80:	4798      	blx	r3
    8c82:	260a      	movs	r6, #10
		
		for(int i=0; i<10; i++) {
			uart_puts("[OS]");
    8c84:	f649 4068 	movw	r0, #40040	; 0x9c68
    8c88:	f2c0 0000 	movt	r0, #0
    8c8c:	47a0      	blx	r4
			uart_put_bytes(pox_output, 32);
    8c8e:	f242 2000 	movw	r0, #8704	; 0x2200
    8c92:	2120      	movs	r1, #32
    8c94:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8c98:	47a8      	blx	r5
			uart_puts(" ");
    8c9a:	f649 40d8 	movw	r0, #40152	; 0x9cd8
    8c9e:	f2c0 0000 	movt	r0, #0
    8ca2:	47a0      	blx	r4
			uart_put_bytes(token, 32);
    8ca4:	2120      	movs	r1, #32
    8ca6:	0038      	movs	r0, r7
    8ca8:	47a8      	blx	r5
			uart_puts("[OE]\n");
    8caa:	f649 4070 	movw	r0, #40048	; 0x9c70
    8cae:	3e01      	subs	r6, #1
    8cb0:	f2c0 0000 	movt	r0, #0
    8cb4:	47a0      	blx	r4
		for(int i=0; i<10; i++) {
    8cb6:	2e00      	cmp	r6, #0
    8cb8:	d1e4      	bne.n	8c84 <new_single+0x218>
		uart_puts("[Over]\n");
    8cba:	f649 4078 	movw	r0, #40056	; 0x9c78
    8cbe:	f2c0 0000 	movt	r0, #0
    8cc2:	47a0      	blx	r4
    8cc4:	e00f      	b.n	8ce6 <new_single+0x27a>
		}
		uart_puts("[Over]\n");
	} else {
		uart_puts("failed to parse command: ");
    8cc6:	f649 40c0 	movw	r0, #40128	; 0x9cc0
    8cca:	f248 34a1 	movw	r4, #33697	; 0x83a1
    8cce:	f2c0 0000 	movt	r0, #0
    8cd2:	f2c0 0400 	movt	r4, #0
    8cd6:	47a0      	blx	r4
		uart_puts(req);
    8cd8:	0028      	movs	r0, r5
    8cda:	47a0      	blx	r4
		uart_puts("\n");
    8cdc:	f649 502c 	movw	r0, #40236	; 0x9d2c
    8ce0:	f2c0 0000 	movt	r0, #0
    8ce4:	47a0      	blx	r4
	}
	
}
    8ce6:	b027      	add	sp, #156	; 0x9c
    8ce8:	bc3c      	pop	{r2, r3, r4, r5}
    8cea:	4690      	mov	r8, r2
    8cec:	4699      	mov	r9, r3
    8cee:	46a2      	mov	sl, r4
    8cf0:	46ab      	mov	fp, r5
    8cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_puts("[Test] Setup: ");
    8cf4:	f649 4024 	movw	r0, #39972	; 0x9c24
    8cf8:	f248 34a1 	movw	r4, #33697	; 0x83a1
    8cfc:	f2c0 0000 	movt	r0, #0
    8d00:	f2c0 0400 	movt	r4, #0
    8d04:	47a0      	blx	r4
		uint32_t counter = *((uint32_t*)(req+5));
    8d06:	ab04      	add	r3, sp, #16
    8d08:	469c      	mov	ip, r3
    8d0a:	2229      	movs	r2, #41	; 0x29
    8d0c:	4462      	add	r2, ip
    8d0e:	7853      	ldrb	r3, [r2, #1]
    8d10:	7811      	ldrb	r1, [r2, #0]
    8d12:	021b      	lsls	r3, r3, #8
    8d14:	4319      	orrs	r1, r3
    8d16:	7893      	ldrb	r3, [r2, #2]
    8d18:	78d2      	ldrb	r2, [r2, #3]
    8d1a:	041b      	lsls	r3, r3, #16
    8d1c:	430b      	orrs	r3, r1
    8d1e:	0612      	lsls	r2, r2, #24
    8d20:	431a      	orrs	r2, r3
    8d22:	4690      	mov	r8, r2
		uint32_t func = *((uint32_t*)(req+5+4));
    8d24:	222d      	movs	r2, #45	; 0x2d
		uart_puts("returning ");
    8d26:	f649 4034 	movw	r0, #39988	; 0x9c34
		uint32_t func = *((uint32_t*)(req+5+4));
    8d2a:	4462      	add	r2, ip
    8d2c:	7853      	ldrb	r3, [r2, #1]
    8d2e:	7817      	ldrb	r7, [r2, #0]
    8d30:	021b      	lsls	r3, r3, #8
    8d32:	433b      	orrs	r3, r7
    8d34:	7897      	ldrb	r7, [r2, #2]
		uart_puts("returning ");
    8d36:	f2c0 0000 	movt	r0, #0
		uint32_t func = *((uint32_t*)(req+5+4));
    8d3a:	043f      	lsls	r7, r7, #16
    8d3c:	433b      	orrs	r3, r7
    8d3e:	78d7      	ldrb	r7, [r2, #3]
		uart_puti(counter);
    8d40:	f248 3ac9 	movw	sl, #33737	; 0x83c9
		uint32_t func = *((uint32_t*)(req+5+4));
    8d44:	063f      	lsls	r7, r7, #24
    8d46:	431f      	orrs	r7, r3
		uart_puts("returning ");
    8d48:	47a0      	blx	r4
		uart_put_bytes(req, REQUEST_SIZE);
    8d4a:	0028      	movs	r0, r5
    8d4c:	f248 55a5 	movw	r5, #34213	; 0x85a5
    8d50:	2139      	movs	r1, #57	; 0x39
    8d52:	f2c0 0500 	movt	r5, #0
    8d56:	47a8      	blx	r5
		uart_puts(", counter=");
    8d58:	f649 4040 	movw	r0, #40000	; 0x9c40
    8d5c:	f2c0 0000 	movt	r0, #0
    8d60:	47a0      	blx	r4
		uart_puti(counter);
    8d62:	f2c0 0a00 	movt	sl, #0
    8d66:	4640      	mov	r0, r8
    8d68:	47d0      	blx	sl
		uart_puts(", func=");
    8d6a:	f649 404c 	movw	r0, #40012	; 0x9c4c
    8d6e:	f2c0 0000 	movt	r0, #0
    8d72:	47a0      	blx	r4
		uart_puti(func);
    8d74:	0038      	movs	r0, r7
    8d76:	47d0      	blx	sl
		uart_puts(" = done  [/Test] \n");
    8d78:	f649 4054 	movw	r0, #40020	; 0x9c54
    8d7c:	f2c0 0000 	movt	r0, #0
    8d80:	47a0      	blx	r4
		pc.counter = counter;
    8d82:	4643      	mov	r3, r8
    8d84:	6173      	str	r3, [r6, #20]
		pc.input_size = 12;
    8d86:	230c      	movs	r3, #12
    8d88:	60b3      	str	r3, [r6, #8]
		pc.output_size = 32;
    8d8a:	3314      	adds	r3, #20
    8d8c:	6133      	str	r3, [r6, #16]
		memcpy(pox_input, req+5+4*2, 12);
    8d8e:	ab04      	add	r3, sp, #16
    8d90:	469c      	mov	ip, r3
    8d92:	2131      	movs	r1, #49	; 0x31
    8d94:	f649 0343 	movw	r3, #38979	; 0x9843
    8d98:	4461      	add	r1, ip
    8d9a:	220c      	movs	r2, #12
    8d9c:	f2c0 0300 	movt	r3, #0
    8da0:	4648      	mov	r0, r9
		pc.addr = func;
    8da2:	9705      	str	r7, [sp, #20]
		memcpy(pox_input, req+5+4*2, 12);
    8da4:	4798      	blx	r3
		secure_pox(&pc, token);
    8da6:	ab04      	add	r3, sp, #16
    8da8:	469c      	mov	ip, r3
    8daa:	273d      	movs	r7, #61	; 0x3d
    8dac:	f647 4301 	movw	r3, #31745	; 0x7c01
    8db0:	4467      	add	r7, ip
    8db2:	0030      	movs	r0, r6
    8db4:	0039      	movs	r1, r7
    8db6:	f2c0 0300 	movt	r3, #0
    8dba:	4798      	blx	r3
    8dbc:	260a      	movs	r6, #10
			uart_puts("[OS]");
    8dbe:	f649 4068 	movw	r0, #40040	; 0x9c68
    8dc2:	f2c0 0000 	movt	r0, #0
    8dc6:	47a0      	blx	r4
			uart_put_bytes(pox_output, 32);
    8dc8:	f242 2000 	movw	r0, #8704	; 0x2200
    8dcc:	2120      	movs	r1, #32
    8dce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8dd2:	47a8      	blx	r5
			uart_puts(" ");
    8dd4:	f649 40d8 	movw	r0, #40152	; 0x9cd8
    8dd8:	f2c0 0000 	movt	r0, #0
    8ddc:	47a0      	blx	r4
			uart_put_bytes(token, 32);
    8dde:	2120      	movs	r1, #32
    8de0:	0038      	movs	r0, r7
    8de2:	47a8      	blx	r5
			uart_puts("[OE]\n");
    8de4:	f649 4070 	movw	r0, #40048	; 0x9c70
    8de8:	3e01      	subs	r6, #1
    8dea:	f2c0 0000 	movt	r0, #0
    8dee:	47a0      	blx	r4
		for(int i=0; i<10; i++) {
    8df0:	2e00      	cmp	r6, #0
    8df2:	d1e4      	bne.n	8dbe <new_single+0x352>
		uart_puts("[Over]\n");
    8df4:	f649 4078 	movw	r0, #40056	; 0x9c78
    8df8:	f2c0 0000 	movt	r0, #0
    8dfc:	47a0      	blx	r4
    8dfe:	e772      	b.n	8ce6 <new_single+0x27a>

00008e00 <main>:
/* Non-Secure main() */
int main(void)
{
	
	//__disable_irq();
	timer_init(PERIOD_1S);
    8e00:	f248 13f1 	movw	r3, #33265	; 0x81f1
{
    8e04:	b570      	push	{r4, r5, r6, lr}
	timer_init(PERIOD_1S);
    8e06:	f240 10f4 	movw	r0, #500	; 0x1f4
    8e0a:	f2c0 0300 	movt	r3, #0
    8e0e:	4798      	blx	r3
	
	uart_init(115200);
    8e10:	20e1      	movs	r0, #225	; 0xe1
    8e12:	f248 239d 	movw	r3, #33437	; 0x829d
    8e16:	0240      	lsls	r0, r0, #9
    8e18:	f2c0 0300 	movt	r3, #0
    8e1c:	4798      	blx	r3
	uart_puts(" A lot of helloooooo ");
    8e1e:	f248 35a1 	movw	r5, #33697	; 0x83a1
    8e22:	f649 40dc 	movw	r0, #40156	; 0x9cdc
    8e26:	f2c0 0500 	movt	r5, #0
    8e2a:	f2c0 0000 	movt	r0, #0
    8e2e:	47a8      	blx	r5
	uart_puts("wrapper_initB at: ");
    8e30:	f649 40f4 	movw	r0, #40180	; 0x9cf4
    8e34:	f2c0 0000 	movt	r0, #0
    8e38:	47a8      	blx	r5
	uart_puti(&wrapper_initB);
    8e3a:	f248 34c9 	movw	r4, #33737	; 0x83c9
    8e3e:	f248 50cd 	movw	r0, #34253	; 0x85cd
    8e42:	f2c0 0400 	movt	r4, #0
    8e46:	f2c0 0000 	movt	r0, #0
    8e4a:	47a0      	blx	r4
	uart_puts(" wrapper_LDP_energy at: ");
    8e4c:	f649 5008 	movw	r0, #40200	; 0x9d08
    8e50:	f2c0 0000 	movt	r0, #0
    8e54:	47a8      	blx	r5
	uart_puti(&wrapper_LDP_energy);
    8e56:	f648 1081 	movw	r0, #35201	; 0x8981
    8e5a:	f2c0 0000 	movt	r0, #0
    8e5e:	47a0      	blx	r4
	uart_puts("[Start] \n");
    8e60:	f649 5024 	movw	r0, #40228	; 0x9d24
    8e64:	f648 266d 	movw	r6, #35437	; 0x8a6d
    8e68:	f2c0 0000 	movt	r0, #0
    8e6c:	f248 5431 	movw	r4, #34097	; 0x8531
    8e70:	47a8      	blx	r5
    8e72:	f2c0 0600 	movt	r6, #0
    8e76:	f2c0 0400 	movt	r4, #0
	
	for(;;) {
		new_single();
    8e7a:	47b0      	blx	r6
		char r = uart_getc();
    8e7c:	47a0      	blx	r4
		if(r!=c1) continue;
    8e7e:	284f      	cmp	r0, #79	; 0x4f
    8e80:	d1fc      	bne.n	8e7c <main+0x7c>
		r = uart_getc();
    8e82:	47a0      	blx	r4
		if(r!=c2) continue;
    8e84:	2841      	cmp	r0, #65	; 0x41
    8e86:	d1f9      	bne.n	8e7c <main+0x7c>
		r = uart_getc();
    8e88:	47a0      	blx	r4
		if(r!=c3) continue;
    8e8a:	284b      	cmp	r0, #75	; 0x4b
    8e8c:	d1f6      	bne.n	8e7c <main+0x7c>
		read_until('O', 'A', 'K');
		uart_puts("[Next]\n");
    8e8e:	f649 5030 	movw	r0, #40240	; 0x9d30
    8e92:	f2c0 0000 	movt	r0, #0
    8e96:	47a8      	blx	r5
		new_single();
    8e98:	e7ef      	b.n	8e7a <main+0x7a>
    8e9a:	46c0      	nop			; (mov r8, r8)

00008e9c <__aeabi_cfrcmple>:
    8e9c:	4684      	mov	ip, r0
    8e9e:	1c08      	adds	r0, r1, #0
    8ea0:	4661      	mov	r1, ip
    8ea2:	e7ff      	b.n	8ea4 <__aeabi_cfcmpeq>

00008ea4 <__aeabi_cfcmpeq>:
    8ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8ea6:	f000 fa8d 	bl	93c4 <__lesf2>
    8eaa:	2800      	cmp	r0, #0
    8eac:	d401      	bmi.n	8eb2 <__aeabi_cfcmpeq+0xe>
    8eae:	2100      	movs	r1, #0
    8eb0:	42c8      	cmn	r0, r1
    8eb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00008eb4 <__aeabi_fcmpeq>:
    8eb4:	b510      	push	{r4, lr}
    8eb6:	f000 fa25 	bl	9304 <__eqsf2>
    8eba:	4240      	negs	r0, r0
    8ebc:	3001      	adds	r0, #1
    8ebe:	bd10      	pop	{r4, pc}

00008ec0 <__aeabi_fcmplt>:
    8ec0:	b510      	push	{r4, lr}
    8ec2:	f000 fa7f 	bl	93c4 <__lesf2>
    8ec6:	2800      	cmp	r0, #0
    8ec8:	db01      	blt.n	8ece <__aeabi_fcmplt+0xe>
    8eca:	2000      	movs	r0, #0
    8ecc:	bd10      	pop	{r4, pc}
    8ece:	2001      	movs	r0, #1
    8ed0:	bd10      	pop	{r4, pc}
    8ed2:	46c0      	nop			; (mov r8, r8)

00008ed4 <__aeabi_fcmple>:
    8ed4:	b510      	push	{r4, lr}
    8ed6:	f000 fa75 	bl	93c4 <__lesf2>
    8eda:	2800      	cmp	r0, #0
    8edc:	dd01      	ble.n	8ee2 <__aeabi_fcmple+0xe>
    8ede:	2000      	movs	r0, #0
    8ee0:	bd10      	pop	{r4, pc}
    8ee2:	2001      	movs	r0, #1
    8ee4:	bd10      	pop	{r4, pc}
    8ee6:	46c0      	nop			; (mov r8, r8)

00008ee8 <__aeabi_fcmpgt>:
    8ee8:	b510      	push	{r4, lr}
    8eea:	f000 fa31 	bl	9350 <__gesf2>
    8eee:	2800      	cmp	r0, #0
    8ef0:	dc01      	bgt.n	8ef6 <__aeabi_fcmpgt+0xe>
    8ef2:	2000      	movs	r0, #0
    8ef4:	bd10      	pop	{r4, pc}
    8ef6:	2001      	movs	r0, #1
    8ef8:	bd10      	pop	{r4, pc}
    8efa:	46c0      	nop			; (mov r8, r8)

00008efc <__aeabi_fcmpge>:
    8efc:	b510      	push	{r4, lr}
    8efe:	f000 fa27 	bl	9350 <__gesf2>
    8f02:	2800      	cmp	r0, #0
    8f04:	da01      	bge.n	8f0a <__aeabi_fcmpge+0xe>
    8f06:	2000      	movs	r0, #0
    8f08:	bd10      	pop	{r4, pc}
    8f0a:	2001      	movs	r0, #1
    8f0c:	bd10      	pop	{r4, pc}
    8f0e:	46c0      	nop			; (mov r8, r8)

00008f10 <__aeabi_uldivmod>:
    8f10:	2b00      	cmp	r3, #0
    8f12:	d111      	bne.n	8f38 <__aeabi_uldivmod+0x28>
    8f14:	2a00      	cmp	r2, #0
    8f16:	d10f      	bne.n	8f38 <__aeabi_uldivmod+0x28>
    8f18:	2900      	cmp	r1, #0
    8f1a:	d100      	bne.n	8f1e <__aeabi_uldivmod+0xe>
    8f1c:	2800      	cmp	r0, #0
    8f1e:	d002      	beq.n	8f26 <__aeabi_uldivmod+0x16>
    8f20:	2100      	movs	r1, #0
    8f22:	43c9      	mvns	r1, r1
    8f24:	1c08      	adds	r0, r1, #0
    8f26:	b407      	push	{r0, r1, r2}
    8f28:	4802      	ldr	r0, [pc, #8]	; (8f34 <__aeabi_uldivmod+0x24>)
    8f2a:	a102      	add	r1, pc, #8	; (adr r1, 8f34 <__aeabi_uldivmod+0x24>)
    8f2c:	1840      	adds	r0, r0, r1
    8f2e:	9002      	str	r0, [sp, #8]
    8f30:	bd03      	pop	{r0, r1, pc}
    8f32:	46c0      	nop			; (mov r8, r8)
    8f34:	00000841 	.word	0x00000841
    8f38:	b403      	push	{r0, r1}
    8f3a:	4668      	mov	r0, sp
    8f3c:	b501      	push	{r0, lr}
    8f3e:	9802      	ldr	r0, [sp, #8]
    8f40:	f000 f806 	bl	8f50 <__udivmoddi4>
    8f44:	9b01      	ldr	r3, [sp, #4]
    8f46:	469e      	mov	lr, r3
    8f48:	b002      	add	sp, #8
    8f4a:	bc0c      	pop	{r2, r3}
    8f4c:	4770      	bx	lr
    8f4e:	46c0      	nop			; (mov r8, r8)

00008f50 <__udivmoddi4>:
    8f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f52:	4657      	mov	r7, sl
    8f54:	4645      	mov	r5, r8
    8f56:	46de      	mov	lr, fp
    8f58:	464e      	mov	r6, r9
    8f5a:	4698      	mov	r8, r3
    8f5c:	b5e0      	push	{r5, r6, r7, lr}
    8f5e:	b083      	sub	sp, #12
    8f60:	0017      	movs	r7, r2
    8f62:	9201      	str	r2, [sp, #4]
    8f64:	0016      	movs	r6, r2
    8f66:	4642      	mov	r2, r8
    8f68:	0005      	movs	r5, r0
    8f6a:	000c      	movs	r4, r1
    8f6c:	4683      	mov	fp, r0
    8f6e:	468a      	mov	sl, r1
    8f70:	2a00      	cmp	r2, #0
    8f72:	d14c      	bne.n	900e <__udivmoddi4+0xbe>
    8f74:	428f      	cmp	r7, r1
    8f76:	d800      	bhi.n	8f7a <__udivmoddi4+0x2a>
    8f78:	e078      	b.n	906c <__udivmoddi4+0x11c>
    8f7a:	0038      	movs	r0, r7
    8f7c:	f000 fbfc 	bl	9778 <__clzsi2>
    8f80:	b150      	cbz	r0, 8f98 <__udivmoddi4+0x48>
    8f82:	2320      	movs	r3, #32
    8f84:	002a      	movs	r2, r5
    8f86:	1a1b      	subs	r3, r3, r0
    8f88:	40da      	lsrs	r2, r3
    8f8a:	4084      	lsls	r4, r0
    8f8c:	0013      	movs	r3, r2
    8f8e:	4085      	lsls	r5, r0
    8f90:	4323      	orrs	r3, r4
    8f92:	4086      	lsls	r6, r0
    8f94:	469a      	mov	sl, r3
    8f96:	46ab      	mov	fp, r5
    8f98:	0c37      	lsrs	r7, r6, #16
    8f9a:	fbba f2f7 	udiv	r2, sl, r7
    8f9e:	0039      	movs	r1, r7
    8fa0:	4653      	mov	r3, sl
    8fa2:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8fa6:	4351      	muls	r1, r2
    8fa8:	0015      	movs	r5, r2
    8faa:	1a59      	subs	r1, r3, r1
    8fac:	465b      	mov	r3, fp
    8fae:	4034      	ands	r4, r6
    8fb0:	4365      	muls	r5, r4
    8fb2:	0409      	lsls	r1, r1, #16
    8fb4:	0c1b      	lsrs	r3, r3, #16
    8fb6:	430b      	orrs	r3, r1
    8fb8:	429d      	cmp	r5, r3
    8fba:	d909      	bls.n	8fd0 <__udivmoddi4+0x80>
    8fbc:	199b      	adds	r3, r3, r6
    8fbe:	1e51      	subs	r1, r2, #1
    8fc0:	429e      	cmp	r6, r3
    8fc2:	d900      	bls.n	8fc6 <__udivmoddi4+0x76>
    8fc4:	e17c      	b.n	92c0 <__udivmoddi4+0x370>
    8fc6:	429d      	cmp	r5, r3
    8fc8:	d800      	bhi.n	8fcc <__udivmoddi4+0x7c>
    8fca:	e179      	b.n	92c0 <__udivmoddi4+0x370>
    8fcc:	3a02      	subs	r2, #2
    8fce:	199b      	adds	r3, r3, r6
    8fd0:	1b59      	subs	r1, r3, r5
    8fd2:	fbb1 f3f7 	udiv	r3, r1, r7
    8fd6:	435c      	muls	r4, r3
    8fd8:	435f      	muls	r7, r3
    8fda:	0025      	movs	r5, r4
    8fdc:	1bc9      	subs	r1, r1, r7
    8fde:	f64f 74ff 	movw	r4, #65535	; 0xffff
    8fe2:	465f      	mov	r7, fp
    8fe4:	0409      	lsls	r1, r1, #16
    8fe6:	403c      	ands	r4, r7
    8fe8:	430c      	orrs	r4, r1
    8fea:	42a5      	cmp	r5, r4
    8fec:	d900      	bls.n	8ff0 <__udivmoddi4+0xa0>
    8fee:	e15c      	b.n	92aa <__udivmoddi4+0x35a>
    8ff0:	0412      	lsls	r2, r2, #16
    8ff2:	4313      	orrs	r3, r2
    8ff4:	2200      	movs	r2, #0
    8ff6:	1b64      	subs	r4, r4, r5
    8ff8:	9201      	str	r2, [sp, #4]
    8ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8ffc:	b12a      	cbz	r2, 900a <__udivmoddi4+0xba>
    8ffe:	40c4      	lsrs	r4, r0
    9000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9002:	980c      	ldr	r0, [sp, #48]	; 0x30
    9004:	6014      	str	r4, [r2, #0]
    9006:	2200      	movs	r2, #0
    9008:	6042      	str	r2, [r0, #4]
    900a:	0018      	movs	r0, r3
    900c:	e00a      	b.n	9024 <__udivmoddi4+0xd4>
    900e:	4588      	cmp	r8, r1
    9010:	d910      	bls.n	9034 <__udivmoddi4+0xe4>
    9012:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9014:	2b00      	cmp	r3, #0
    9016:	d100      	bne.n	901a <__udivmoddi4+0xca>
    9018:	e170      	b.n	92fc <__udivmoddi4+0x3ac>
    901a:	6018      	str	r0, [r3, #0]
    901c:	6059      	str	r1, [r3, #4]
    901e:	2300      	movs	r3, #0
    9020:	2000      	movs	r0, #0
    9022:	9301      	str	r3, [sp, #4]
    9024:	9901      	ldr	r1, [sp, #4]
    9026:	b003      	add	sp, #12
    9028:	bc3c      	pop	{r2, r3, r4, r5}
    902a:	4690      	mov	r8, r2
    902c:	4699      	mov	r9, r3
    902e:	46a2      	mov	sl, r4
    9030:	46ab      	mov	fp, r5
    9032:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9034:	4640      	mov	r0, r8
    9036:	f000 fb9f 	bl	9778 <__clzsi2>
    903a:	9001      	str	r0, [sp, #4]
    903c:	2800      	cmp	r0, #0
    903e:	d000      	beq.n	9042 <__udivmoddi4+0xf2>
    9040:	e0a3      	b.n	918a <__udivmoddi4+0x23a>
    9042:	45a0      	cmp	r8, r4
    9044:	d302      	bcc.n	904c <__udivmoddi4+0xfc>
    9046:	42af      	cmp	r7, r5
    9048:	d900      	bls.n	904c <__udivmoddi4+0xfc>
    904a:	e151      	b.n	92f0 <__udivmoddi4+0x3a0>
    904c:	1bef      	subs	r7, r5, r7
    904e:	4643      	mov	r3, r8
    9050:	42bd      	cmp	r5, r7
    9052:	41ad      	sbcs	r5, r5
    9054:	1ae4      	subs	r4, r4, r3
    9056:	426d      	negs	r5, r5
    9058:	1b63      	subs	r3, r4, r5
    905a:	469a      	mov	sl, r3
    905c:	2001      	movs	r0, #1
    905e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9060:	2b00      	cmp	r3, #0
    9062:	d0df      	beq.n	9024 <__udivmoddi4+0xd4>
    9064:	4652      	mov	r2, sl
    9066:	601f      	str	r7, [r3, #0]
    9068:	605a      	str	r2, [r3, #4]
    906a:	e7db      	b.n	9024 <__udivmoddi4+0xd4>
    906c:	b917      	cbnz	r7, 9074 <__udivmoddi4+0x124>
    906e:	3601      	adds	r6, #1
    9070:	fbb6 f6f7 	udiv	r6, r6, r7
    9074:	0030      	movs	r0, r6
    9076:	f000 fb7f 	bl	9778 <__clzsi2>
    907a:	bbb8      	cbnz	r0, 90ec <__udivmoddi4+0x19c>
    907c:	f64f 77ff 	movw	r7, #65535	; 0xffff
    9080:	2301      	movs	r3, #1
    9082:	1ba5      	subs	r5, r4, r6
    9084:	4037      	ands	r7, r6
    9086:	0c34      	lsrs	r4, r6, #16
    9088:	9301      	str	r3, [sp, #4]
    908a:	fbb5 f3f4 	udiv	r3, r5, r4
    908e:	003a      	movs	r2, r7
    9090:	435a      	muls	r2, r3
    9092:	4694      	mov	ip, r2
    9094:	0022      	movs	r2, r4
    9096:	435a      	muls	r2, r3
    9098:	1aaa      	subs	r2, r5, r2
    909a:	465d      	mov	r5, fp
    909c:	0412      	lsls	r2, r2, #16
    909e:	0c2d      	lsrs	r5, r5, #16
    90a0:	432a      	orrs	r2, r5
    90a2:	4594      	cmp	ip, r2
    90a4:	d907      	bls.n	90b6 <__udivmoddi4+0x166>
    90a6:	1992      	adds	r2, r2, r6
    90a8:	1e5d      	subs	r5, r3, #1
    90aa:	4296      	cmp	r6, r2
    90ac:	d802      	bhi.n	90b4 <__udivmoddi4+0x164>
    90ae:	4594      	cmp	ip, r2
    90b0:	d900      	bls.n	90b4 <__udivmoddi4+0x164>
    90b2:	e120      	b.n	92f6 <__udivmoddi4+0x3a6>
    90b4:	002b      	movs	r3, r5
    90b6:	4665      	mov	r5, ip
    90b8:	1b52      	subs	r2, r2, r5
    90ba:	fbb2 f5f4 	udiv	r5, r2, r4
    90be:	436c      	muls	r4, r5
    90c0:	4659      	mov	r1, fp
    90c2:	1b12      	subs	r2, r2, r4
    90c4:	f64f 74ff 	movw	r4, #65535	; 0xffff
    90c8:	436f      	muls	r7, r5
    90ca:	0412      	lsls	r2, r2, #16
    90cc:	400c      	ands	r4, r1
    90ce:	4314      	orrs	r4, r2
    90d0:	42a7      	cmp	r7, r4
    90d2:	d907      	bls.n	90e4 <__udivmoddi4+0x194>
    90d4:	19a4      	adds	r4, r4, r6
    90d6:	1e6a      	subs	r2, r5, #1
    90d8:	42a6      	cmp	r6, r4
    90da:	d802      	bhi.n	90e2 <__udivmoddi4+0x192>
    90dc:	42a7      	cmp	r7, r4
    90de:	d900      	bls.n	90e2 <__udivmoddi4+0x192>
    90e0:	e103      	b.n	92ea <__udivmoddi4+0x39a>
    90e2:	0015      	movs	r5, r2
    90e4:	041b      	lsls	r3, r3, #16
    90e6:	1be4      	subs	r4, r4, r7
    90e8:	432b      	orrs	r3, r5
    90ea:	e786      	b.n	8ffa <__udivmoddi4+0xaa>
    90ec:	2120      	movs	r1, #32
    90ee:	002a      	movs	r2, r5
    90f0:	0023      	movs	r3, r4
    90f2:	1a09      	subs	r1, r1, r0
    90f4:	4086      	lsls	r6, r0
    90f6:	4084      	lsls	r4, r0
    90f8:	40ca      	lsrs	r2, r1
    90fa:	40cb      	lsrs	r3, r1
    90fc:	4322      	orrs	r2, r4
    90fe:	0c34      	lsrs	r4, r6, #16
    9100:	fbb3 f1f4 	udiv	r1, r3, r4
    9104:	4085      	lsls	r5, r0
    9106:	f64f 77ff 	movw	r7, #65535	; 0xffff
    910a:	46ab      	mov	fp, r5
    910c:	000d      	movs	r5, r1
    910e:	4037      	ands	r7, r6
    9110:	437d      	muls	r5, r7
    9112:	46ac      	mov	ip, r5
    9114:	0025      	movs	r5, r4
    9116:	434d      	muls	r5, r1
    9118:	1b5d      	subs	r5, r3, r5
    911a:	042d      	lsls	r5, r5, #16
    911c:	0c13      	lsrs	r3, r2, #16
    911e:	4691      	mov	r9, r2
    9120:	432b      	orrs	r3, r5
    9122:	459c      	cmp	ip, r3
    9124:	d909      	bls.n	913a <__udivmoddi4+0x1ea>
    9126:	199b      	adds	r3, r3, r6
    9128:	1e4d      	subs	r5, r1, #1
    912a:	429e      	cmp	r6, r3
    912c:	d900      	bls.n	9130 <__udivmoddi4+0x1e0>
    912e:	e0da      	b.n	92e6 <__udivmoddi4+0x396>
    9130:	459c      	cmp	ip, r3
    9132:	d800      	bhi.n	9136 <__udivmoddi4+0x1e6>
    9134:	e0d7      	b.n	92e6 <__udivmoddi4+0x396>
    9136:	3902      	subs	r1, #2
    9138:	199b      	adds	r3, r3, r6
    913a:	4662      	mov	r2, ip
    913c:	1a9b      	subs	r3, r3, r2
    913e:	fbb3 fcf4 	udiv	ip, r3, r4
    9142:	4662      	mov	r2, ip
    9144:	f64f 78ff 	movw	r8, #65535	; 0xffff
    9148:	4362      	muls	r2, r4
    914a:	1a9b      	subs	r3, r3, r2
    914c:	041b      	lsls	r3, r3, #16
    914e:	469a      	mov	sl, r3
    9150:	4642      	mov	r2, r8
    9152:	464b      	mov	r3, r9
    9154:	4665      	mov	r5, ip
    9156:	401a      	ands	r2, r3
    9158:	4653      	mov	r3, sl
    915a:	437d      	muls	r5, r7
    915c:	4313      	orrs	r3, r2
    915e:	429d      	cmp	r5, r3
    9160:	d90d      	bls.n	917e <__udivmoddi4+0x22e>
    9162:	4662      	mov	r2, ip
    9164:	199b      	adds	r3, r3, r6
    9166:	3a01      	subs	r2, #1
    9168:	429e      	cmp	r6, r3
    916a:	d900      	bls.n	916e <__udivmoddi4+0x21e>
    916c:	e0b7      	b.n	92de <__udivmoddi4+0x38e>
    916e:	429d      	cmp	r5, r3
    9170:	d800      	bhi.n	9174 <__udivmoddi4+0x224>
    9172:	e0b4      	b.n	92de <__udivmoddi4+0x38e>
    9174:	2202      	movs	r2, #2
    9176:	4252      	negs	r2, r2
    9178:	4690      	mov	r8, r2
    917a:	199b      	adds	r3, r3, r6
    917c:	44c4      	add	ip, r8
    917e:	1b5d      	subs	r5, r3, r5
    9180:	4663      	mov	r3, ip
    9182:	0409      	lsls	r1, r1, #16
    9184:	4319      	orrs	r1, r3
    9186:	9101      	str	r1, [sp, #4]
    9188:	e77f      	b.n	908a <__udivmoddi4+0x13a>
    918a:	2320      	movs	r3, #32
    918c:	9801      	ldr	r0, [sp, #4]
    918e:	003a      	movs	r2, r7
    9190:	1a1b      	subs	r3, r3, r0
    9192:	469c      	mov	ip, r3
    9194:	4643      	mov	r3, r8
    9196:	4661      	mov	r1, ip
    9198:	4083      	lsls	r3, r0
    919a:	40ca      	lsrs	r2, r1
    919c:	4313      	orrs	r3, r2
    919e:	002a      	movs	r2, r5
    91a0:	0026      	movs	r6, r4
    91a2:	40ca      	lsrs	r2, r1
    91a4:	4084      	lsls	r4, r0
    91a6:	40ce      	lsrs	r6, r1
    91a8:	4322      	orrs	r2, r4
    91aa:	0c1c      	lsrs	r4, r3, #16
    91ac:	4087      	lsls	r7, r0
    91ae:	4085      	lsls	r5, r0
    91b0:	fbb6 f0f4 	udiv	r0, r6, r4
    91b4:	4691      	mov	r9, r2
    91b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    91ba:	0001      	movs	r1, r0
    91bc:	401a      	ands	r2, r3
    91be:	4351      	muls	r1, r2
    91c0:	4688      	mov	r8, r1
    91c2:	0021      	movs	r1, r4
    91c4:	4341      	muls	r1, r0
    91c6:	1a76      	subs	r6, r6, r1
    91c8:	4649      	mov	r1, r9
    91ca:	0436      	lsls	r6, r6, #16
    91cc:	0c09      	lsrs	r1, r1, #16
    91ce:	430e      	orrs	r6, r1
    91d0:	45b0      	cmp	r8, r6
    91d2:	d909      	bls.n	91e8 <__udivmoddi4+0x298>
    91d4:	1e41      	subs	r1, r0, #1
    91d6:	18f6      	adds	r6, r6, r3
    91d8:	468a      	mov	sl, r1
    91da:	42b3      	cmp	r3, r6
    91dc:	d900      	bls.n	91e0 <__udivmoddi4+0x290>
    91de:	e080      	b.n	92e2 <__udivmoddi4+0x392>
    91e0:	45b0      	cmp	r8, r6
    91e2:	d97e      	bls.n	92e2 <__udivmoddi4+0x392>
    91e4:	3802      	subs	r0, #2
    91e6:	18f6      	adds	r6, r6, r3
    91e8:	4641      	mov	r1, r8
    91ea:	1a76      	subs	r6, r6, r1
    91ec:	fbb6 f8f4 	udiv	r8, r6, r4
    91f0:	4641      	mov	r1, r8
    91f2:	434c      	muls	r4, r1
    91f4:	434a      	muls	r2, r1
    91f6:	1b36      	subs	r6, r6, r4
    91f8:	4649      	mov	r1, r9
    91fa:	f64f 74ff 	movw	r4, #65535	; 0xffff
    91fe:	0436      	lsls	r6, r6, #16
    9200:	400c      	ands	r4, r1
    9202:	4334      	orrs	r4, r6
    9204:	42a2      	cmp	r2, r4
    9206:	d90b      	bls.n	9220 <__udivmoddi4+0x2d0>
    9208:	4641      	mov	r1, r8
    920a:	18e4      	adds	r4, r4, r3
    920c:	1e4e      	subs	r6, r1, #1
    920e:	42a3      	cmp	r3, r4
    9210:	d863      	bhi.n	92da <__udivmoddi4+0x38a>
    9212:	42a2      	cmp	r2, r4
    9214:	d961      	bls.n	92da <__udivmoddi4+0x38a>
    9216:	2102      	movs	r1, #2
    9218:	4249      	negs	r1, r1
    921a:	4689      	mov	r9, r1
    921c:	18e4      	adds	r4, r4, r3
    921e:	44c8      	add	r8, r9
    9220:	4641      	mov	r1, r8
    9222:	f64f 76ff 	movw	r6, #65535	; 0xffff
    9226:	0400      	lsls	r0, r0, #16
    9228:	4308      	orrs	r0, r1
    922a:	0031      	movs	r1, r6
    922c:	4001      	ands	r1, r0
    922e:	468a      	mov	sl, r1
    9230:	0c01      	lsrs	r1, r0, #16
    9232:	4688      	mov	r8, r1
    9234:	4651      	mov	r1, sl
    9236:	403e      	ands	r6, r7
    9238:	4371      	muls	r1, r6
    923a:	4689      	mov	r9, r1
    923c:	4641      	mov	r1, r8
    923e:	1aa2      	subs	r2, r4, r2
    9240:	0c3c      	lsrs	r4, r7, #16
    9242:	434e      	muls	r6, r1
    9244:	4361      	muls	r1, r4
    9246:	4688      	mov	r8, r1
    9248:	4651      	mov	r1, sl
    924a:	434c      	muls	r4, r1
    924c:	4649      	mov	r1, r9
    924e:	0c09      	lsrs	r1, r1, #16
    9250:	468a      	mov	sl, r1
    9252:	19a4      	adds	r4, r4, r6
    9254:	4454      	add	r4, sl
    9256:	42a6      	cmp	r6, r4
    9258:	d903      	bls.n	9262 <__udivmoddi4+0x312>
    925a:	2180      	movs	r1, #128	; 0x80
    925c:	0249      	lsls	r1, r1, #9
    925e:	468a      	mov	sl, r1
    9260:	44d0      	add	r8, sl
    9262:	0c26      	lsrs	r6, r4, #16
    9264:	4446      	add	r6, r8
    9266:	f64f 78ff 	movw	r8, #65535	; 0xffff
    926a:	0421      	lsls	r1, r4, #16
    926c:	468a      	mov	sl, r1
    926e:	464c      	mov	r4, r9
    9270:	4641      	mov	r1, r8
    9272:	4021      	ands	r1, r4
    9274:	4689      	mov	r9, r1
    9276:	4654      	mov	r4, sl
    9278:	444c      	add	r4, r9
    927a:	42b2      	cmp	r2, r6
    927c:	d324      	bcc.n	92c8 <__udivmoddi4+0x378>
    927e:	d021      	beq.n	92c4 <__udivmoddi4+0x374>
    9280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9282:	b183      	cbz	r3, 92a6 <__udivmoddi4+0x356>
    9284:	1b2c      	subs	r4, r5, r4
    9286:	42a5      	cmp	r5, r4
    9288:	41ad      	sbcs	r5, r5
    928a:	1b92      	subs	r2, r2, r6
    928c:	426d      	negs	r5, r5
    928e:	1b52      	subs	r2, r2, r5
    9290:	0013      	movs	r3, r2
    9292:	4661      	mov	r1, ip
    9294:	408b      	lsls	r3, r1
    9296:	9901      	ldr	r1, [sp, #4]
    9298:	40cc      	lsrs	r4, r1
    929a:	40ca      	lsrs	r2, r1
    929c:	431c      	orrs	r4, r3
    929e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    92a0:	601c      	str	r4, [r3, #0]
    92a2:	605a      	str	r2, [r3, #4]
    92a4:	2300      	movs	r3, #0
    92a6:	9301      	str	r3, [sp, #4]
    92a8:	e6bc      	b.n	9024 <__udivmoddi4+0xd4>
    92aa:	19a4      	adds	r4, r4, r6
    92ac:	1e59      	subs	r1, r3, #1
    92ae:	42a6      	cmp	r6, r4
    92b0:	d804      	bhi.n	92bc <__udivmoddi4+0x36c>
    92b2:	42a5      	cmp	r5, r4
    92b4:	d902      	bls.n	92bc <__udivmoddi4+0x36c>
    92b6:	3b02      	subs	r3, #2
    92b8:	19a4      	adds	r4, r4, r6
    92ba:	e699      	b.n	8ff0 <__udivmoddi4+0xa0>
    92bc:	000b      	movs	r3, r1
    92be:	e697      	b.n	8ff0 <__udivmoddi4+0xa0>
    92c0:	000a      	movs	r2, r1
    92c2:	e685      	b.n	8fd0 <__udivmoddi4+0x80>
    92c4:	42a5      	cmp	r5, r4
    92c6:	d2db      	bcs.n	9280 <__udivmoddi4+0x330>
    92c8:	1be7      	subs	r7, r4, r7
    92ca:	1af3      	subs	r3, r6, r3
    92cc:	42bc      	cmp	r4, r7
    92ce:	41b6      	sbcs	r6, r6
    92d0:	4276      	negs	r6, r6
    92d2:	3801      	subs	r0, #1
    92d4:	1b9e      	subs	r6, r3, r6
    92d6:	003c      	movs	r4, r7
    92d8:	e7d2      	b.n	9280 <__udivmoddi4+0x330>
    92da:	46b0      	mov	r8, r6
    92dc:	e7a0      	b.n	9220 <__udivmoddi4+0x2d0>
    92de:	4694      	mov	ip, r2
    92e0:	e74d      	b.n	917e <__udivmoddi4+0x22e>
    92e2:	4650      	mov	r0, sl
    92e4:	e780      	b.n	91e8 <__udivmoddi4+0x298>
    92e6:	0029      	movs	r1, r5
    92e8:	e727      	b.n	913a <__udivmoddi4+0x1ea>
    92ea:	3d02      	subs	r5, #2
    92ec:	19a4      	adds	r4, r4, r6
    92ee:	e6f9      	b.n	90e4 <__udivmoddi4+0x194>
    92f0:	2000      	movs	r0, #0
    92f2:	002f      	movs	r7, r5
    92f4:	e6b3      	b.n	905e <__udivmoddi4+0x10e>
    92f6:	3b02      	subs	r3, #2
    92f8:	1992      	adds	r2, r2, r6
    92fa:	e6dc      	b.n	90b6 <__udivmoddi4+0x166>
    92fc:	2300      	movs	r3, #0
    92fe:	2000      	movs	r0, #0
    9300:	9301      	str	r3, [sp, #4]
    9302:	e68f      	b.n	9024 <__udivmoddi4+0xd4>

00009304 <__eqsf2>:
    9304:	b570      	push	{r4, r5, r6, lr}
    9306:	0042      	lsls	r2, r0, #1
    9308:	0245      	lsls	r5, r0, #9
    930a:	024e      	lsls	r6, r1, #9
    930c:	004c      	lsls	r4, r1, #1
    930e:	0fc3      	lsrs	r3, r0, #31
    9310:	0a6d      	lsrs	r5, r5, #9
    9312:	0e12      	lsrs	r2, r2, #24
    9314:	0a76      	lsrs	r6, r6, #9
    9316:	0e24      	lsrs	r4, r4, #24
    9318:	0fc9      	lsrs	r1, r1, #31
    931a:	2001      	movs	r0, #1
    931c:	2aff      	cmp	r2, #255	; 0xff
    931e:	d006      	beq.n	932e <__eqsf2+0x2a>
    9320:	2cff      	cmp	r4, #255	; 0xff
    9322:	d003      	beq.n	932c <__eqsf2+0x28>
    9324:	42a2      	cmp	r2, r4
    9326:	d101      	bne.n	932c <__eqsf2+0x28>
    9328:	42b5      	cmp	r5, r6
    932a:	d006      	beq.n	933a <__eqsf2+0x36>
    932c:	bd70      	pop	{r4, r5, r6, pc}
    932e:	2d00      	cmp	r5, #0
    9330:	d1fc      	bne.n	932c <__eqsf2+0x28>
    9332:	2cff      	cmp	r4, #255	; 0xff
    9334:	d1fa      	bne.n	932c <__eqsf2+0x28>
    9336:	2e00      	cmp	r6, #0
    9338:	d1f8      	bne.n	932c <__eqsf2+0x28>
    933a:	428b      	cmp	r3, r1
    933c:	d006      	beq.n	934c <__eqsf2+0x48>
    933e:	2001      	movs	r0, #1
    9340:	2a00      	cmp	r2, #0
    9342:	d1f3      	bne.n	932c <__eqsf2+0x28>
    9344:	0028      	movs	r0, r5
    9346:	1e45      	subs	r5, r0, #1
    9348:	41a8      	sbcs	r0, r5
    934a:	e7ef      	b.n	932c <__eqsf2+0x28>
    934c:	2000      	movs	r0, #0
    934e:	e7ed      	b.n	932c <__eqsf2+0x28>

00009350 <__gesf2>:
    9350:	b5f0      	push	{r4, r5, r6, r7, lr}
    9352:	0042      	lsls	r2, r0, #1
    9354:	0245      	lsls	r5, r0, #9
    9356:	024c      	lsls	r4, r1, #9
    9358:	0fc3      	lsrs	r3, r0, #31
    935a:	0048      	lsls	r0, r1, #1
    935c:	0a6d      	lsrs	r5, r5, #9
    935e:	0e12      	lsrs	r2, r2, #24
    9360:	0a64      	lsrs	r4, r4, #9
    9362:	0e00      	lsrs	r0, r0, #24
    9364:	0fc9      	lsrs	r1, r1, #31
    9366:	2aff      	cmp	r2, #255	; 0xff
    9368:	d01d      	beq.n	93a6 <__gesf2+0x56>
    936a:	28ff      	cmp	r0, #255	; 0xff
    936c:	d010      	beq.n	9390 <__gesf2+0x40>
    936e:	b93a      	cbnz	r2, 9380 <__gesf2+0x30>
    9370:	426e      	negs	r6, r5
    9372:	416e      	adcs	r6, r5
    9374:	b2f6      	uxtb	r6, r6
    9376:	b980      	cbnz	r0, 939a <__gesf2+0x4a>
    9378:	b97c      	cbnz	r4, 939a <__gesf2+0x4a>
    937a:	2000      	movs	r0, #0
    937c:	b13d      	cbz	r5, 938e <__gesf2+0x3e>
    937e:	e003      	b.n	9388 <__gesf2+0x38>
    9380:	b900      	cbnz	r0, 9384 <__gesf2+0x34>
    9382:	b10c      	cbz	r4, 9388 <__gesf2+0x38>
    9384:	428b      	cmp	r3, r1
    9386:	d011      	beq.n	93ac <__gesf2+0x5c>
    9388:	2101      	movs	r1, #1
    938a:	4258      	negs	r0, r3
    938c:	4308      	orrs	r0, r1
    938e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9390:	2c00      	cmp	r4, #0
    9392:	d0ec      	beq.n	936e <__gesf2+0x1e>
    9394:	2002      	movs	r0, #2
    9396:	4240      	negs	r0, r0
    9398:	e7f9      	b.n	938e <__gesf2+0x3e>
    939a:	2e00      	cmp	r6, #0
    939c:	d0f2      	beq.n	9384 <__gesf2+0x34>
    939e:	2001      	movs	r0, #1
    93a0:	3901      	subs	r1, #1
    93a2:	4308      	orrs	r0, r1
    93a4:	e7f3      	b.n	938e <__gesf2+0x3e>
    93a6:	2d00      	cmp	r5, #0
    93a8:	d0df      	beq.n	936a <__gesf2+0x1a>
    93aa:	e7f3      	b.n	9394 <__gesf2+0x44>
    93ac:	4282      	cmp	r2, r0
    93ae:	dceb      	bgt.n	9388 <__gesf2+0x38>
    93b0:	db04      	blt.n	93bc <__gesf2+0x6c>
    93b2:	42a5      	cmp	r5, r4
    93b4:	d8e8      	bhi.n	9388 <__gesf2+0x38>
    93b6:	2000      	movs	r0, #0
    93b8:	42a5      	cmp	r5, r4
    93ba:	d2e8      	bcs.n	938e <__gesf2+0x3e>
    93bc:	2101      	movs	r1, #1
    93be:	1e58      	subs	r0, r3, #1
    93c0:	4308      	orrs	r0, r1
    93c2:	e7e4      	b.n	938e <__gesf2+0x3e>

000093c4 <__lesf2>:
    93c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    93c6:	0042      	lsls	r2, r0, #1
    93c8:	024d      	lsls	r5, r1, #9
    93ca:	004c      	lsls	r4, r1, #1
    93cc:	0246      	lsls	r6, r0, #9
    93ce:	0a76      	lsrs	r6, r6, #9
    93d0:	0e12      	lsrs	r2, r2, #24
    93d2:	0fc3      	lsrs	r3, r0, #31
    93d4:	0a6d      	lsrs	r5, r5, #9
    93d6:	0e24      	lsrs	r4, r4, #24
    93d8:	0fc9      	lsrs	r1, r1, #31
    93da:	2aff      	cmp	r2, #255	; 0xff
    93dc:	d016      	beq.n	940c <__lesf2+0x48>
    93de:	2cff      	cmp	r4, #255	; 0xff
    93e0:	d010      	beq.n	9404 <__lesf2+0x40>
    93e2:	b942      	cbnz	r2, 93f6 <__lesf2+0x32>
    93e4:	4270      	negs	r0, r6
    93e6:	4170      	adcs	r0, r6
    93e8:	b2c0      	uxtb	r0, r0
    93ea:	b19c      	cbz	r4, 9414 <__lesf2+0x50>
    93ec:	b120      	cbz	r0, 93f8 <__lesf2+0x34>
    93ee:	2001      	movs	r0, #1
    93f0:	3901      	subs	r1, #1
    93f2:	4308      	orrs	r0, r1
    93f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93f6:	b19c      	cbz	r4, 9420 <__lesf2+0x5c>
    93f8:	4299      	cmp	r1, r3
    93fa:	d014      	beq.n	9426 <__lesf2+0x62>
    93fc:	2001      	movs	r0, #1
    93fe:	425b      	negs	r3, r3
    9400:	4318      	orrs	r0, r3
    9402:	e7f7      	b.n	93f4 <__lesf2+0x30>
    9404:	2002      	movs	r0, #2
    9406:	2d00      	cmp	r5, #0
    9408:	d1f4      	bne.n	93f4 <__lesf2+0x30>
    940a:	e7ea      	b.n	93e2 <__lesf2+0x1e>
    940c:	2002      	movs	r0, #2
    940e:	2e00      	cmp	r6, #0
    9410:	d1f0      	bne.n	93f4 <__lesf2+0x30>
    9412:	e7e4      	b.n	93de <__lesf2+0x1a>
    9414:	2d00      	cmp	r5, #0
    9416:	d1e9      	bne.n	93ec <__lesf2+0x28>
    9418:	2000      	movs	r0, #0
    941a:	2e00      	cmp	r6, #0
    941c:	d0ea      	beq.n	93f4 <__lesf2+0x30>
    941e:	e7ed      	b.n	93fc <__lesf2+0x38>
    9420:	2d00      	cmp	r5, #0
    9422:	d1e9      	bne.n	93f8 <__lesf2+0x34>
    9424:	e7ea      	b.n	93fc <__lesf2+0x38>
    9426:	42a2      	cmp	r2, r4
    9428:	dc06      	bgt.n	9438 <__lesf2+0x74>
    942a:	dbe0      	blt.n	93ee <__lesf2+0x2a>
    942c:	42ae      	cmp	r6, r5
    942e:	d803      	bhi.n	9438 <__lesf2+0x74>
    9430:	2000      	movs	r0, #0
    9432:	42ae      	cmp	r6, r5
    9434:	d3db      	bcc.n	93ee <__lesf2+0x2a>
    9436:	e7dd      	b.n	93f4 <__lesf2+0x30>
    9438:	2001      	movs	r0, #1
    943a:	4249      	negs	r1, r1
    943c:	4308      	orrs	r0, r1
    943e:	e7d9      	b.n	93f4 <__lesf2+0x30>

00009440 <__aeabi_fmul>:
    9440:	b5f0      	push	{r4, r5, r6, r7, lr}
    9442:	4646      	mov	r6, r8
    9444:	464f      	mov	r7, r9
    9446:	46d6      	mov	lr, sl
    9448:	0243      	lsls	r3, r0, #9
    944a:	b5c0      	push	{r6, r7, lr}
    944c:	0046      	lsls	r6, r0, #1
    944e:	0a5b      	lsrs	r3, r3, #9
    9450:	0e36      	lsrs	r6, r6, #24
    9452:	4688      	mov	r8, r1
    9454:	4699      	mov	r9, r3
    9456:	0fc4      	lsrs	r4, r0, #31
    9458:	2e00      	cmp	r6, #0
    945a:	d051      	beq.n	9500 <__aeabi_fmul+0xc0>
    945c:	2eff      	cmp	r6, #255	; 0xff
    945e:	d023      	beq.n	94a8 <__aeabi_fmul+0x68>
    9460:	2080      	movs	r0, #128	; 0x80
    9462:	00db      	lsls	r3, r3, #3
    9464:	04c0      	lsls	r0, r0, #19
    9466:	4318      	orrs	r0, r3
    9468:	4681      	mov	r9, r0
    946a:	2700      	movs	r7, #0
    946c:	f240 0a00 	movw	sl, #0
    9470:	3e7f      	subs	r6, #127	; 0x7f
    9472:	4643      	mov	r3, r8
    9474:	0058      	lsls	r0, r3, #1
    9476:	025d      	lsls	r5, r3, #9
    9478:	0e00      	lsrs	r0, r0, #24
    947a:	0fdb      	lsrs	r3, r3, #31
    947c:	0a6d      	lsrs	r5, r5, #9
    947e:	4698      	mov	r8, r3
    9480:	b308      	cbz	r0, 94c6 <__aeabi_fmul+0x86>
    9482:	28ff      	cmp	r0, #255	; 0xff
    9484:	d042      	beq.n	950c <__aeabi_fmul+0xcc>
    9486:	00eb      	lsls	r3, r5, #3
    9488:	2580      	movs	r5, #128	; 0x80
    948a:	04ed      	lsls	r5, r5, #19
    948c:	431d      	orrs	r5, r3
    948e:	2300      	movs	r3, #0
    9490:	387f      	subs	r0, #127	; 0x7f
    9492:	4641      	mov	r1, r8
    9494:	1836      	adds	r6, r6, r0
    9496:	4061      	eors	r1, r4
    9498:	1c70      	adds	r0, r6, #1
    949a:	431f      	orrs	r7, r3
    949c:	2f0f      	cmp	r7, #15
    949e:	d869      	bhi.n	9574 <__aeabi_fmul+0x134>
    94a0:	4a7b      	ldr	r2, [pc, #492]	; (9690 <__aeabi_fmul+0x250>)
    94a2:	00bf      	lsls	r7, r7, #2
    94a4:	59d2      	ldr	r2, [r2, r7]
    94a6:	4697      	mov	pc, r2
    94a8:	2b00      	cmp	r3, #0
    94aa:	d148      	bne.n	953e <__aeabi_fmul+0xfe>
    94ac:	4643      	mov	r3, r8
    94ae:	0058      	lsls	r0, r3, #1
    94b0:	025d      	lsls	r5, r3, #9
    94b2:	0e00      	lsrs	r0, r0, #24
    94b4:	0fdb      	lsrs	r3, r3, #31
    94b6:	2708      	movs	r7, #8
    94b8:	26ff      	movs	r6, #255	; 0xff
    94ba:	f240 0a02 	movw	sl, #2
    94be:	0a6d      	lsrs	r5, r5, #9
    94c0:	4698      	mov	r8, r3
    94c2:	2800      	cmp	r0, #0
    94c4:	d1dd      	bne.n	9482 <__aeabi_fmul+0x42>
    94c6:	2d00      	cmp	r5, #0
    94c8:	d13e      	bne.n	9548 <__aeabi_fmul+0x108>
    94ca:	2000      	movs	r0, #0
    94cc:	2301      	movs	r3, #1
    94ce:	e7e0      	b.n	9492 <__aeabi_fmul+0x52>
    94d0:	4641      	mov	r1, r8
    94d2:	2b02      	cmp	r3, #2
    94d4:	d020      	beq.n	9518 <__aeabi_fmul+0xd8>
    94d6:	2b03      	cmp	r3, #3
    94d8:	d100      	bne.n	94dc <__aeabi_fmul+0x9c>
    94da:	e0cf      	b.n	967c <__aeabi_fmul+0x23c>
    94dc:	2b01      	cmp	r3, #1
    94de:	d000      	beq.n	94e2 <__aeabi_fmul+0xa2>
    94e0:	e0ad      	b.n	963e <__aeabi_fmul+0x1fe>
    94e2:	2200      	movs	r2, #0
    94e4:	2000      	movs	r0, #0
    94e6:	4019      	ands	r1, r3
    94e8:	b2cc      	uxtb	r4, r1
    94ea:	0240      	lsls	r0, r0, #9
    94ec:	05d2      	lsls	r2, r2, #23
    94ee:	0a40      	lsrs	r0, r0, #9
    94f0:	07e4      	lsls	r4, r4, #31
    94f2:	4310      	orrs	r0, r2
    94f4:	4320      	orrs	r0, r4
    94f6:	bc1c      	pop	{r2, r3, r4}
    94f8:	4690      	mov	r8, r2
    94fa:	4699      	mov	r9, r3
    94fc:	46a2      	mov	sl, r4
    94fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9500:	b97b      	cbnz	r3, 9522 <__aeabi_fmul+0xe2>
    9502:	2704      	movs	r7, #4
    9504:	2600      	movs	r6, #0
    9506:	f240 0a01 	movw	sl, #1
    950a:	e7b2      	b.n	9472 <__aeabi_fmul+0x32>
    950c:	20ff      	movs	r0, #255	; 0xff
    950e:	2302      	movs	r3, #2
    9510:	2d00      	cmp	r5, #0
    9512:	d0be      	beq.n	9492 <__aeabi_fmul+0x52>
    9514:	2303      	movs	r3, #3
    9516:	e7bc      	b.n	9492 <__aeabi_fmul+0x52>
    9518:	2401      	movs	r4, #1
    951a:	22ff      	movs	r2, #255	; 0xff
    951c:	400c      	ands	r4, r1
    951e:	2000      	movs	r0, #0
    9520:	e7e3      	b.n	94ea <__aeabi_fmul+0xaa>
    9522:	0018      	movs	r0, r3
    9524:	f000 f928 	bl	9778 <__clzsi2>
    9528:	464a      	mov	r2, r9
    952a:	1f43      	subs	r3, r0, #5
    952c:	2676      	movs	r6, #118	; 0x76
    952e:	409a      	lsls	r2, r3
    9530:	4276      	negs	r6, r6
    9532:	4691      	mov	r9, r2
    9534:	1a36      	subs	r6, r6, r0
    9536:	2700      	movs	r7, #0
    9538:	f240 0a00 	movw	sl, #0
    953c:	e799      	b.n	9472 <__aeabi_fmul+0x32>
    953e:	270c      	movs	r7, #12
    9540:	26ff      	movs	r6, #255	; 0xff
    9542:	f240 0a03 	movw	sl, #3
    9546:	e794      	b.n	9472 <__aeabi_fmul+0x32>
    9548:	0028      	movs	r0, r5
    954a:	f000 f915 	bl	9778 <__clzsi2>
    954e:	1f43      	subs	r3, r0, #5
    9550:	409d      	lsls	r5, r3
    9552:	2376      	movs	r3, #118	; 0x76
    9554:	425b      	negs	r3, r3
    9556:	1a18      	subs	r0, r3, r0
    9558:	2300      	movs	r3, #0
    955a:	e79a      	b.n	9492 <__aeabi_fmul+0x52>
    955c:	2080      	movs	r0, #128	; 0x80
    955e:	2400      	movs	r4, #0
    9560:	03c0      	lsls	r0, r0, #15
    9562:	22ff      	movs	r2, #255	; 0xff
    9564:	e7c1      	b.n	94ea <__aeabi_fmul+0xaa>
    9566:	464d      	mov	r5, r9
    9568:	4653      	mov	r3, sl
    956a:	e7b2      	b.n	94d2 <__aeabi_fmul+0x92>
    956c:	464d      	mov	r5, r9
    956e:	0021      	movs	r1, r4
    9570:	4653      	mov	r3, sl
    9572:	e7ae      	b.n	94d2 <__aeabi_fmul+0x92>
    9574:	464b      	mov	r3, r9
    9576:	0c1b      	lsrs	r3, r3, #16
    9578:	4698      	mov	r8, r3
    957a:	464a      	mov	r2, r9
    957c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9580:	401a      	ands	r2, r3
    9582:	402b      	ands	r3, r5
    9584:	001c      	movs	r4, r3
    9586:	4354      	muls	r4, r2
    9588:	0c2f      	lsrs	r7, r5, #16
    958a:	46a4      	mov	ip, r4
    958c:	4645      	mov	r5, r8
    958e:	4644      	mov	r4, r8
    9590:	437d      	muls	r5, r7
    9592:	4357      	muls	r7, r2
    9594:	4662      	mov	r2, ip
    9596:	4363      	muls	r3, r4
    9598:	0c12      	lsrs	r2, r2, #16
    959a:	18ff      	adds	r7, r7, r3
    959c:	19d2      	adds	r2, r2, r7
    959e:	4293      	cmp	r3, r2
    95a0:	d903      	bls.n	95aa <__aeabi_fmul+0x16a>
    95a2:	2380      	movs	r3, #128	; 0x80
    95a4:	025b      	lsls	r3, r3, #9
    95a6:	4698      	mov	r8, r3
    95a8:	4445      	add	r5, r8
    95aa:	4667      	mov	r7, ip
    95ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
    95b0:	0414      	lsls	r4, r2, #16
    95b2:	403b      	ands	r3, r7
    95b4:	18e4      	adds	r4, r4, r3
    95b6:	01a3      	lsls	r3, r4, #6
    95b8:	1e5f      	subs	r7, r3, #1
    95ba:	41bb      	sbcs	r3, r7
    95bc:	0c12      	lsrs	r2, r2, #16
    95be:	0ea4      	lsrs	r4, r4, #26
    95c0:	1955      	adds	r5, r2, r5
    95c2:	431c      	orrs	r4, r3
    95c4:	01ad      	lsls	r5, r5, #6
    95c6:	4325      	orrs	r5, r4
    95c8:	012b      	lsls	r3, r5, #4
    95ca:	d504      	bpl.n	95d6 <__aeabi_fmul+0x196>
    95cc:	2301      	movs	r3, #1
    95ce:	0006      	movs	r6, r0
    95d0:	086a      	lsrs	r2, r5, #1
    95d2:	401d      	ands	r5, r3
    95d4:	4315      	orrs	r5, r2
    95d6:	0032      	movs	r2, r6
    95d8:	327f      	adds	r2, #127	; 0x7f
    95da:	2a00      	cmp	r2, #0
    95dc:	dd27      	ble.n	962e <__aeabi_fmul+0x1ee>
    95de:	076b      	lsls	r3, r5, #29
    95e0:	d004      	beq.n	95ec <__aeabi_fmul+0x1ac>
    95e2:	230f      	movs	r3, #15
    95e4:	402b      	ands	r3, r5
    95e6:	2b04      	cmp	r3, #4
    95e8:	d000      	beq.n	95ec <__aeabi_fmul+0x1ac>
    95ea:	3504      	adds	r5, #4
    95ec:	012b      	lsls	r3, r5, #4
    95ee:	d503      	bpl.n	95f8 <__aeabi_fmul+0x1b8>
    95f0:	0032      	movs	r2, r6
    95f2:	4b28      	ldr	r3, [pc, #160]	; (9694 <__aeabi_fmul+0x254>)
    95f4:	3280      	adds	r2, #128	; 0x80
    95f6:	401d      	ands	r5, r3
    95f8:	2afe      	cmp	r2, #254	; 0xfe
    95fa:	dc8d      	bgt.n	9518 <__aeabi_fmul+0xd8>
    95fc:	2401      	movs	r4, #1
    95fe:	01a8      	lsls	r0, r5, #6
    9600:	0a40      	lsrs	r0, r0, #9
    9602:	b2d2      	uxtb	r2, r2
    9604:	400c      	ands	r4, r1
    9606:	e770      	b.n	94ea <__aeabi_fmul+0xaa>
    9608:	2080      	movs	r0, #128	; 0x80
    960a:	464b      	mov	r3, r9
    960c:	03c0      	lsls	r0, r0, #15
    960e:	4203      	tst	r3, r0
    9610:	d008      	beq.n	9624 <__aeabi_fmul+0x1e4>
    9612:	4205      	tst	r5, r0
    9614:	d105      	bne.n	9622 <__aeabi_fmul+0x1e2>
    9616:	4328      	orrs	r0, r5
    9618:	0240      	lsls	r0, r0, #9
    961a:	0a40      	lsrs	r0, r0, #9
    961c:	4644      	mov	r4, r8
    961e:	22ff      	movs	r2, #255	; 0xff
    9620:	e763      	b.n	94ea <__aeabi_fmul+0xaa>
    9622:	464b      	mov	r3, r9
    9624:	4318      	orrs	r0, r3
    9626:	0240      	lsls	r0, r0, #9
    9628:	0a40      	lsrs	r0, r0, #9
    962a:	22ff      	movs	r2, #255	; 0xff
    962c:	e75d      	b.n	94ea <__aeabi_fmul+0xaa>
    962e:	2401      	movs	r4, #1
    9630:	1aa3      	subs	r3, r4, r2
    9632:	2b1b      	cmp	r3, #27
    9634:	dd05      	ble.n	9642 <__aeabi_fmul+0x202>
    9636:	400c      	ands	r4, r1
    9638:	2200      	movs	r2, #0
    963a:	2000      	movs	r0, #0
    963c:	e755      	b.n	94ea <__aeabi_fmul+0xaa>
    963e:	0006      	movs	r6, r0
    9640:	e7c9      	b.n	95d6 <__aeabi_fmul+0x196>
    9642:	002a      	movs	r2, r5
    9644:	2020      	movs	r0, #32
    9646:	40da      	lsrs	r2, r3
    9648:	1ac3      	subs	r3, r0, r3
    964a:	409d      	lsls	r5, r3
    964c:	002b      	movs	r3, r5
    964e:	1e5d      	subs	r5, r3, #1
    9650:	41ab      	sbcs	r3, r5
    9652:	4313      	orrs	r3, r2
    9654:	075a      	lsls	r2, r3, #29
    9656:	d004      	beq.n	9662 <__aeabi_fmul+0x222>
    9658:	220f      	movs	r2, #15
    965a:	401a      	ands	r2, r3
    965c:	2a04      	cmp	r2, #4
    965e:	d000      	beq.n	9662 <__aeabi_fmul+0x222>
    9660:	3304      	adds	r3, #4
    9662:	015a      	lsls	r2, r3, #5
    9664:	d504      	bpl.n	9670 <__aeabi_fmul+0x230>
    9666:	2401      	movs	r4, #1
    9668:	2201      	movs	r2, #1
    966a:	400c      	ands	r4, r1
    966c:	2000      	movs	r0, #0
    966e:	e73c      	b.n	94ea <__aeabi_fmul+0xaa>
    9670:	2401      	movs	r4, #1
    9672:	019b      	lsls	r3, r3, #6
    9674:	0a58      	lsrs	r0, r3, #9
    9676:	400c      	ands	r4, r1
    9678:	2200      	movs	r2, #0
    967a:	e736      	b.n	94ea <__aeabi_fmul+0xaa>
    967c:	2080      	movs	r0, #128	; 0x80
    967e:	2401      	movs	r4, #1
    9680:	03c0      	lsls	r0, r0, #15
    9682:	4328      	orrs	r0, r5
    9684:	0240      	lsls	r0, r0, #9
    9686:	0a40      	lsrs	r0, r0, #9
    9688:	400c      	ands	r4, r1
    968a:	22ff      	movs	r2, #255	; 0xff
    968c:	e72d      	b.n	94ea <__aeabi_fmul+0xaa>
    968e:	46c0      	nop			; (mov r8, r8)
    9690:	00009d38 	.word	0x00009d38
    9694:	f7ffffff 	.word	0xf7ffffff

00009698 <__aeabi_f2iz>:
    9698:	0241      	lsls	r1, r0, #9
    969a:	0043      	lsls	r3, r0, #1
    969c:	0fc2      	lsrs	r2, r0, #31
    969e:	0a49      	lsrs	r1, r1, #9
    96a0:	0e1b      	lsrs	r3, r3, #24
    96a2:	2000      	movs	r0, #0
    96a4:	2b7e      	cmp	r3, #126	; 0x7e
    96a6:	dd0c      	ble.n	96c2 <__aeabi_f2iz+0x2a>
    96a8:	2b9d      	cmp	r3, #157	; 0x9d
    96aa:	dc0b      	bgt.n	96c4 <__aeabi_f2iz+0x2c>
    96ac:	2080      	movs	r0, #128	; 0x80
    96ae:	0400      	lsls	r0, r0, #16
    96b0:	4301      	orrs	r1, r0
    96b2:	2b95      	cmp	r3, #149	; 0x95
    96b4:	dc09      	bgt.n	96ca <__aeabi_f2iz+0x32>
    96b6:	2096      	movs	r0, #150	; 0x96
    96b8:	1ac3      	subs	r3, r0, r3
    96ba:	40d9      	lsrs	r1, r3
    96bc:	4248      	negs	r0, r1
    96be:	b902      	cbnz	r2, 96c2 <__aeabi_f2iz+0x2a>
    96c0:	0008      	movs	r0, r1
    96c2:	4770      	bx	lr
    96c4:	4b02      	ldr	r3, [pc, #8]	; (96d0 <__aeabi_f2iz+0x38>)
    96c6:	18d0      	adds	r0, r2, r3
    96c8:	e7fb      	b.n	96c2 <__aeabi_f2iz+0x2a>
    96ca:	3b96      	subs	r3, #150	; 0x96
    96cc:	4099      	lsls	r1, r3
    96ce:	e7f5      	b.n	96bc <__aeabi_f2iz+0x24>
    96d0:	7fffffff 	.word	0x7fffffff

000096d4 <__aeabi_i2f>:
    96d4:	b570      	push	{r4, r5, r6, lr}
    96d6:	2800      	cmp	r0, #0
    96d8:	d030      	beq.n	973c <__aeabi_i2f+0x68>
    96da:	17c3      	asrs	r3, r0, #31
    96dc:	18c4      	adds	r4, r0, r3
    96de:	405c      	eors	r4, r3
    96e0:	0fc5      	lsrs	r5, r0, #31
    96e2:	0020      	movs	r0, r4
    96e4:	f000 f848 	bl	9778 <__clzsi2>
    96e8:	239e      	movs	r3, #158	; 0x9e
    96ea:	1a1b      	subs	r3, r3, r0
    96ec:	2b96      	cmp	r3, #150	; 0x96
    96ee:	dc0d      	bgt.n	970c <__aeabi_i2f+0x38>
    96f0:	2296      	movs	r2, #150	; 0x96
    96f2:	1ad2      	subs	r2, r2, r3
    96f4:	4094      	lsls	r4, r2
    96f6:	002a      	movs	r2, r5
    96f8:	0264      	lsls	r4, r4, #9
    96fa:	0a64      	lsrs	r4, r4, #9
    96fc:	b2db      	uxtb	r3, r3
    96fe:	0264      	lsls	r4, r4, #9
    9700:	05db      	lsls	r3, r3, #23
    9702:	0a60      	lsrs	r0, r4, #9
    9704:	07d2      	lsls	r2, r2, #31
    9706:	4318      	orrs	r0, r3
    9708:	4310      	orrs	r0, r2
    970a:	bd70      	pop	{r4, r5, r6, pc}
    970c:	2b99      	cmp	r3, #153	; 0x99
    970e:	dc19      	bgt.n	9744 <__aeabi_i2f+0x70>
    9710:	2299      	movs	r2, #153	; 0x99
    9712:	1ad2      	subs	r2, r2, r3
    9714:	2a00      	cmp	r2, #0
    9716:	dd29      	ble.n	976c <__aeabi_i2f+0x98>
    9718:	4094      	lsls	r4, r2
    971a:	0022      	movs	r2, r4
    971c:	4c14      	ldr	r4, [pc, #80]	; (9770 <__aeabi_i2f+0x9c>)
    971e:	4014      	ands	r4, r2
    9720:	0751      	lsls	r1, r2, #29
    9722:	d004      	beq.n	972e <__aeabi_i2f+0x5a>
    9724:	210f      	movs	r1, #15
    9726:	400a      	ands	r2, r1
    9728:	2a04      	cmp	r2, #4
    972a:	d000      	beq.n	972e <__aeabi_i2f+0x5a>
    972c:	3404      	adds	r4, #4
    972e:	0162      	lsls	r2, r4, #5
    9730:	d413      	bmi.n	975a <__aeabi_i2f+0x86>
    9732:	01a4      	lsls	r4, r4, #6
    9734:	0a64      	lsrs	r4, r4, #9
    9736:	b2db      	uxtb	r3, r3
    9738:	002a      	movs	r2, r5
    973a:	e7e0      	b.n	96fe <__aeabi_i2f+0x2a>
    973c:	2200      	movs	r2, #0
    973e:	2300      	movs	r3, #0
    9740:	2400      	movs	r4, #0
    9742:	e7dc      	b.n	96fe <__aeabi_i2f+0x2a>
    9744:	2205      	movs	r2, #5
    9746:	0021      	movs	r1, r4
    9748:	1a12      	subs	r2, r2, r0
    974a:	40d1      	lsrs	r1, r2
    974c:	22b9      	movs	r2, #185	; 0xb9
    974e:	1ad2      	subs	r2, r2, r3
    9750:	4094      	lsls	r4, r2
    9752:	1e62      	subs	r2, r4, #1
    9754:	4194      	sbcs	r4, r2
    9756:	430c      	orrs	r4, r1
    9758:	e7da      	b.n	9710 <__aeabi_i2f+0x3c>
    975a:	4b05      	ldr	r3, [pc, #20]	; (9770 <__aeabi_i2f+0x9c>)
    975c:	002a      	movs	r2, r5
    975e:	401c      	ands	r4, r3
    9760:	239f      	movs	r3, #159	; 0x9f
    9762:	01a4      	lsls	r4, r4, #6
    9764:	1a1b      	subs	r3, r3, r0
    9766:	0a64      	lsrs	r4, r4, #9
    9768:	b2db      	uxtb	r3, r3
    976a:	e7c8      	b.n	96fe <__aeabi_i2f+0x2a>
    976c:	0022      	movs	r2, r4
    976e:	e7d5      	b.n	971c <__aeabi_i2f+0x48>
    9770:	fbffffff 	.word	0xfbffffff

00009774 <__aeabi_idiv0>:
    9774:	4770      	bx	lr
    9776:	46c0      	nop			; (mov r8, r8)

00009778 <__clzsi2>:
    9778:	211c      	movs	r1, #28
    977a:	2301      	movs	r3, #1
    977c:	041b      	lsls	r3, r3, #16
    977e:	4298      	cmp	r0, r3
    9780:	d301      	bcc.n	9786 <__clzsi2+0xe>
    9782:	0c00      	lsrs	r0, r0, #16
    9784:	3910      	subs	r1, #16
    9786:	0a1b      	lsrs	r3, r3, #8
    9788:	4298      	cmp	r0, r3
    978a:	d301      	bcc.n	9790 <__clzsi2+0x18>
    978c:	0a00      	lsrs	r0, r0, #8
    978e:	3908      	subs	r1, #8
    9790:	091b      	lsrs	r3, r3, #4
    9792:	4298      	cmp	r0, r3
    9794:	d301      	bcc.n	979a <__clzsi2+0x22>
    9796:	0900      	lsrs	r0, r0, #4
    9798:	3904      	subs	r1, #4
    979a:	a202      	add	r2, pc, #8	; (adr r2, 97a4 <__clzsi2+0x2c>)
    979c:	5c10      	ldrb	r0, [r2, r0]
    979e:	1840      	adds	r0, r0, r1
    97a0:	4770      	bx	lr
    97a2:	46c0      	nop			; (mov r8, r8)
    97a4:	02020304 	.word	0x02020304
    97a8:	01010101 	.word	0x01010101
	...

000097b4 <atoi>:
    97b4:	b510      	push	{r4, lr}
    97b6:	220a      	movs	r2, #10
    97b8:	2100      	movs	r1, #0
    97ba:	f000 f979 	bl	9ab0 <strtol>
    97be:	bd10      	pop	{r4, pc}

000097c0 <__libc_init_array>:
    97c0:	b570      	push	{r4, r5, r6, lr}
    97c2:	2500      	movs	r5, #0
    97c4:	4b0e      	ldr	r3, [pc, #56]	; (9800 <__libc_init_array+0x40>)
    97c6:	4c0f      	ldr	r4, [pc, #60]	; (9804 <__libc_init_array+0x44>)
    97c8:	1ae4      	subs	r4, r4, r3
    97ca:	10a4      	asrs	r4, r4, #2
    97cc:	42a5      	cmp	r5, r4
    97ce:	d109      	bne.n	97e4 <__libc_init_array+0x24>
    97d0:	2500      	movs	r5, #0
    97d2:	f000 fb87 	bl	9ee4 <_init>
    97d6:	4c0c      	ldr	r4, [pc, #48]	; (9808 <__libc_init_array+0x48>)
    97d8:	4b0c      	ldr	r3, [pc, #48]	; (980c <__libc_init_array+0x4c>)
    97da:	1ae4      	subs	r4, r4, r3
    97dc:	10a4      	asrs	r4, r4, #2
    97de:	42a5      	cmp	r5, r4
    97e0:	d107      	bne.n	97f2 <__libc_init_array+0x32>
    97e2:	bd70      	pop	{r4, r5, r6, pc}
    97e4:	4a06      	ldr	r2, [pc, #24]	; (9800 <__libc_init_array+0x40>)
    97e6:	00ab      	lsls	r3, r5, #2
    97e8:	189b      	adds	r3, r3, r2
    97ea:	681b      	ldr	r3, [r3, #0]
    97ec:	4798      	blx	r3
    97ee:	3501      	adds	r5, #1
    97f0:	e7ec      	b.n	97cc <__libc_init_array+0xc>
    97f2:	4a06      	ldr	r2, [pc, #24]	; (980c <__libc_init_array+0x4c>)
    97f4:	00ab      	lsls	r3, r5, #2
    97f6:	189b      	adds	r3, r3, r2
    97f8:	681b      	ldr	r3, [r3, #0]
    97fa:	4798      	blx	r3
    97fc:	3501      	adds	r5, #1
    97fe:	e7ee      	b.n	97de <__libc_init_array+0x1e>
    9800:	00009ef0 	.word	0x00009ef0
    9804:	00009ef0 	.word	0x00009ef0
    9808:	00009ef4 	.word	0x00009ef4
    980c:	00009ef0 	.word	0x00009ef0

00009810 <malloc>:
    9810:	b510      	push	{r4, lr}
    9812:	4b03      	ldr	r3, [pc, #12]	; (9820 <malloc+0x10>)
    9814:	0001      	movs	r1, r0
    9816:	6818      	ldr	r0, [r3, #0]
    9818:	f000 f824 	bl	9864 <_malloc_r>
    981c:	bd10      	pop	{r4, pc}
    981e:	46c0      	nop			; (mov r8, r8)
    9820:	20002000 	.word	0x20002000

00009824 <memcmp>:
    9824:	b530      	push	{r4, r5, lr}
    9826:	2400      	movs	r4, #0
    9828:	42a2      	cmp	r2, r4
    982a:	d101      	bne.n	9830 <memcmp+0xc>
    982c:	2000      	movs	r0, #0
    982e:	e005      	b.n	983c <memcmp+0x18>
    9830:	5d03      	ldrb	r3, [r0, r4]
    9832:	1c65      	adds	r5, r4, #1
    9834:	5d0c      	ldrb	r4, [r1, r4]
    9836:	42a3      	cmp	r3, r4
    9838:	d001      	beq.n	983e <memcmp+0x1a>
    983a:	1b18      	subs	r0, r3, r4
    983c:	bd30      	pop	{r4, r5, pc}
    983e:	002c      	movs	r4, r5
    9840:	e7f2      	b.n	9828 <memcmp+0x4>

00009842 <memcpy>:
    9842:	2300      	movs	r3, #0
    9844:	b510      	push	{r4, lr}
    9846:	429a      	cmp	r2, r3
    9848:	d100      	bne.n	984c <memcpy+0xa>
    984a:	bd10      	pop	{r4, pc}
    984c:	5ccc      	ldrb	r4, [r1, r3]
    984e:	54c4      	strb	r4, [r0, r3]
    9850:	3301      	adds	r3, #1
    9852:	e7f8      	b.n	9846 <memcpy+0x4>

00009854 <memset>:
    9854:	0003      	movs	r3, r0
    9856:	1882      	adds	r2, r0, r2
    9858:	4293      	cmp	r3, r2
    985a:	d100      	bne.n	985e <memset+0xa>
    985c:	4770      	bx	lr
    985e:	7019      	strb	r1, [r3, #0]
    9860:	3301      	adds	r3, #1
    9862:	e7f9      	b.n	9858 <memset+0x4>

00009864 <_malloc_r>:
    9864:	2303      	movs	r3, #3
    9866:	b570      	push	{r4, r5, r6, lr}
    9868:	1ccd      	adds	r5, r1, #3
    986a:	439d      	bics	r5, r3
    986c:	3508      	adds	r5, #8
    986e:	0006      	movs	r6, r0
    9870:	2d0c      	cmp	r5, #12
    9872:	d21c      	bcs.n	98ae <_malloc_r+0x4a>
    9874:	250c      	movs	r5, #12
    9876:	42a9      	cmp	r1, r5
    9878:	d81b      	bhi.n	98b2 <_malloc_r+0x4e>
    987a:	0030      	movs	r0, r6
    987c:	f000 f93d 	bl	9afa <__malloc_lock>
    9880:	4a25      	ldr	r2, [pc, #148]	; (9918 <_malloc_r+0xb4>)
    9882:	6814      	ldr	r4, [r2, #0]
    9884:	0021      	movs	r1, r4
    9886:	b9c1      	cbnz	r1, 98ba <_malloc_r+0x56>
    9888:	4c24      	ldr	r4, [pc, #144]	; (991c <_malloc_r+0xb8>)
    988a:	6823      	ldr	r3, [r4, #0]
    988c:	b91b      	cbnz	r3, 9896 <_malloc_r+0x32>
    988e:	0030      	movs	r0, r6
    9890:	f000 f880 	bl	9994 <_sbrk_r>
    9894:	6020      	str	r0, [r4, #0]
    9896:	0029      	movs	r1, r5
    9898:	0030      	movs	r0, r6
    989a:	f000 f87b 	bl	9994 <_sbrk_r>
    989e:	1c43      	adds	r3, r0, #1
    98a0:	d12d      	bne.n	98fe <_malloc_r+0x9a>
    98a2:	230c      	movs	r3, #12
    98a4:	0030      	movs	r0, r6
    98a6:	6033      	str	r3, [r6, #0]
    98a8:	f000 f928 	bl	9afc <__malloc_unlock>
    98ac:	e003      	b.n	98b6 <_malloc_r+0x52>
    98ae:	2d00      	cmp	r5, #0
    98b0:	dae1      	bge.n	9876 <_malloc_r+0x12>
    98b2:	230c      	movs	r3, #12
    98b4:	6033      	str	r3, [r6, #0]
    98b6:	2000      	movs	r0, #0
    98b8:	bd70      	pop	{r4, r5, r6, pc}
    98ba:	680b      	ldr	r3, [r1, #0]
    98bc:	1b5b      	subs	r3, r3, r5
    98be:	d41b      	bmi.n	98f8 <_malloc_r+0x94>
    98c0:	2b0b      	cmp	r3, #11
    98c2:	d903      	bls.n	98cc <_malloc_r+0x68>
    98c4:	600b      	str	r3, [r1, #0]
    98c6:	18cc      	adds	r4, r1, r3
    98c8:	6025      	str	r5, [r4, #0]
    98ca:	e003      	b.n	98d4 <_malloc_r+0x70>
    98cc:	428c      	cmp	r4, r1
    98ce:	d10f      	bne.n	98f0 <_malloc_r+0x8c>
    98d0:	6863      	ldr	r3, [r4, #4]
    98d2:	6013      	str	r3, [r2, #0]
    98d4:	0030      	movs	r0, r6
    98d6:	f000 f911 	bl	9afc <__malloc_unlock>
    98da:	0020      	movs	r0, r4
    98dc:	2207      	movs	r2, #7
    98de:	300b      	adds	r0, #11
    98e0:	1d23      	adds	r3, r4, #4
    98e2:	4390      	bics	r0, r2
    98e4:	1ac3      	subs	r3, r0, r3
    98e6:	2b00      	cmp	r3, #0
    98e8:	d0e6      	beq.n	98b8 <_malloc_r+0x54>
    98ea:	425a      	negs	r2, r3
    98ec:	50e2      	str	r2, [r4, r3]
    98ee:	e7e3      	b.n	98b8 <_malloc_r+0x54>
    98f0:	684b      	ldr	r3, [r1, #4]
    98f2:	6063      	str	r3, [r4, #4]
    98f4:	000c      	movs	r4, r1
    98f6:	e7ed      	b.n	98d4 <_malloc_r+0x70>
    98f8:	000c      	movs	r4, r1
    98fa:	6849      	ldr	r1, [r1, #4]
    98fc:	e7c3      	b.n	9886 <_malloc_r+0x22>
    98fe:	2303      	movs	r3, #3
    9900:	1cc4      	adds	r4, r0, #3
    9902:	439c      	bics	r4, r3
    9904:	42a0      	cmp	r0, r4
    9906:	d0df      	beq.n	98c8 <_malloc_r+0x64>
    9908:	1a21      	subs	r1, r4, r0
    990a:	0030      	movs	r0, r6
    990c:	f000 f842 	bl	9994 <_sbrk_r>
    9910:	1c43      	adds	r3, r0, #1
    9912:	d1d9      	bne.n	98c8 <_malloc_r+0x64>
    9914:	e7c5      	b.n	98a2 <_malloc_r+0x3e>
    9916:	46c0      	nop			; (mov r8, r8)
    9918:	2000222c 	.word	0x2000222c
    991c:	20002230 	.word	0x20002230

00009920 <rand>:
    9920:	4b16      	ldr	r3, [pc, #88]	; (997c <rand+0x5c>)
    9922:	b510      	push	{r4, lr}
    9924:	681c      	ldr	r4, [r3, #0]
    9926:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    9928:	b9bb      	cbnz	r3, 995a <rand+0x3a>
    992a:	2018      	movs	r0, #24
    992c:	f7ff ff70 	bl	9810 <malloc>
    9930:	f243 330e 	movw	r3, #13070	; 0x330e
    9934:	63a0      	str	r0, [r4, #56]	; 0x38
    9936:	8003      	strh	r3, [r0, #0]
    9938:	4b11      	ldr	r3, [pc, #68]	; (9980 <rand+0x60>)
    993a:	2201      	movs	r2, #1
    993c:	8043      	strh	r3, [r0, #2]
    993e:	f241 2334 	movw	r3, #4660	; 0x1234
    9942:	8083      	strh	r3, [r0, #4]
    9944:	4b0f      	ldr	r3, [pc, #60]	; (9984 <rand+0x64>)
    9946:	80c3      	strh	r3, [r0, #6]
    9948:	4b0f      	ldr	r3, [pc, #60]	; (9988 <rand+0x68>)
    994a:	8103      	strh	r3, [r0, #8]
    994c:	2305      	movs	r3, #5
    994e:	8143      	strh	r3, [r0, #10]
    9950:	3306      	adds	r3, #6
    9952:	8183      	strh	r3, [r0, #12]
    9954:	2300      	movs	r3, #0
    9956:	6102      	str	r2, [r0, #16]
    9958:	6143      	str	r3, [r0, #20]
    995a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    995c:	4a0b      	ldr	r2, [pc, #44]	; (998c <rand+0x6c>)
    995e:	6920      	ldr	r0, [r4, #16]
    9960:	6961      	ldr	r1, [r4, #20]
    9962:	4b0b      	ldr	r3, [pc, #44]	; (9990 <rand+0x70>)
    9964:	f000 f8d8 	bl	9b18 <__aeabi_lmul>
    9968:	2201      	movs	r2, #1
    996a:	2300      	movs	r3, #0
    996c:	1880      	adds	r0, r0, r2
    996e:	4159      	adcs	r1, r3
    9970:	6120      	str	r0, [r4, #16]
    9972:	6161      	str	r1, [r4, #20]
    9974:	0048      	lsls	r0, r1, #1
    9976:	0840      	lsrs	r0, r0, #1
    9978:	bd10      	pop	{r4, pc}
    997a:	46c0      	nop			; (mov r8, r8)
    997c:	20002000 	.word	0x20002000
    9980:	ffffabcd 	.word	0xffffabcd
    9984:	ffffe66d 	.word	0xffffe66d
    9988:	ffffdeec 	.word	0xffffdeec
    998c:	4c957f2d 	.word	0x4c957f2d
    9990:	5851f42d 	.word	0x5851f42d

00009994 <_sbrk_r>:
    9994:	2300      	movs	r3, #0
    9996:	b570      	push	{r4, r5, r6, lr}
    9998:	4c05      	ldr	r4, [pc, #20]	; (99b0 <_sbrk_r+0x1c>)
    999a:	0005      	movs	r5, r0
    999c:	0008      	movs	r0, r1
    999e:	6023      	str	r3, [r4, #0]
    99a0:	f000 f8e8 	bl	9b74 <_sbrk>
    99a4:	1c43      	adds	r3, r0, #1
    99a6:	d102      	bne.n	99ae <_sbrk_r+0x1a>
    99a8:	6823      	ldr	r3, [r4, #0]
    99aa:	b103      	cbz	r3, 99ae <_sbrk_r+0x1a>
    99ac:	602b      	str	r3, [r5, #0]
    99ae:	bd70      	pop	{r4, r5, r6, pc}
    99b0:	20002748 	.word	0x20002748

000099b4 <_strtol_l.isra.0>:
    99b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99b6:	001f      	movs	r7, r3
    99b8:	000e      	movs	r6, r1
    99ba:	b087      	sub	sp, #28
    99bc:	9005      	str	r0, [sp, #20]
    99be:	9103      	str	r1, [sp, #12]
    99c0:	9202      	str	r2, [sp, #8]
    99c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    99c4:	7834      	ldrb	r4, [r6, #0]
    99c6:	f000 f885 	bl	9ad4 <__locale_ctype_ptr_l>
    99ca:	2208      	movs	r2, #8
    99cc:	1900      	adds	r0, r0, r4
    99ce:	7843      	ldrb	r3, [r0, #1]
    99d0:	1c75      	adds	r5, r6, #1
    99d2:	4013      	ands	r3, r2
    99d4:	b95b      	cbnz	r3, 99ee <_strtol_l.isra.0+0x3a>
    99d6:	2c2d      	cmp	r4, #45	; 0x2d
    99d8:	d10b      	bne.n	99f2 <_strtol_l.isra.0+0x3e>
    99da:	3301      	adds	r3, #1
    99dc:	782c      	ldrb	r4, [r5, #0]
    99de:	9301      	str	r3, [sp, #4]
    99e0:	1cb5      	adds	r5, r6, #2
    99e2:	b167      	cbz	r7, 99fe <_strtol_l.isra.0+0x4a>
    99e4:	2f10      	cmp	r7, #16
    99e6:	d114      	bne.n	9a12 <_strtol_l.isra.0+0x5e>
    99e8:	2c30      	cmp	r4, #48	; 0x30
    99ea:	d00a      	beq.n	9a02 <_strtol_l.isra.0+0x4e>
    99ec:	e011      	b.n	9a12 <_strtol_l.isra.0+0x5e>
    99ee:	002e      	movs	r6, r5
    99f0:	e7e7      	b.n	99c2 <_strtol_l.isra.0+0xe>
    99f2:	9301      	str	r3, [sp, #4]
    99f4:	2c2b      	cmp	r4, #43	; 0x2b
    99f6:	d1f4      	bne.n	99e2 <_strtol_l.isra.0+0x2e>
    99f8:	782c      	ldrb	r4, [r5, #0]
    99fa:	1cb5      	adds	r5, r6, #2
    99fc:	e7f1      	b.n	99e2 <_strtol_l.isra.0+0x2e>
    99fe:	2c30      	cmp	r4, #48	; 0x30
    9a00:	d12b      	bne.n	9a5a <_strtol_l.isra.0+0xa6>
    9a02:	2220      	movs	r2, #32
    9a04:	782b      	ldrb	r3, [r5, #0]
    9a06:	4393      	bics	r3, r2
    9a08:	2b58      	cmp	r3, #88	; 0x58
    9a0a:	d14a      	bne.n	9aa2 <_strtol_l.isra.0+0xee>
    9a0c:	2710      	movs	r7, #16
    9a0e:	786c      	ldrb	r4, [r5, #1]
    9a10:	3502      	adds	r5, #2
    9a12:	9b01      	ldr	r3, [sp, #4]
    9a14:	4a25      	ldr	r2, [pc, #148]	; (9aac <_strtol_l.isra.0+0xf8>)
    9a16:	1899      	adds	r1, r3, r2
    9a18:	fbb1 f6f7 	udiv	r6, r1, r7
    9a1c:	003b      	movs	r3, r7
    9a1e:	4373      	muls	r3, r6
    9a20:	1acb      	subs	r3, r1, r3
    9a22:	9304      	str	r3, [sp, #16]
    9a24:	2301      	movs	r3, #1
    9a26:	2200      	movs	r2, #0
    9a28:	425b      	negs	r3, r3
    9a2a:	0010      	movs	r0, r2
    9a2c:	469c      	mov	ip, r3
    9a2e:	0023      	movs	r3, r4
    9a30:	3b30      	subs	r3, #48	; 0x30
    9a32:	2b09      	cmp	r3, #9
    9a34:	d813      	bhi.n	9a5e <_strtol_l.isra.0+0xaa>
    9a36:	001c      	movs	r4, r3
    9a38:	42a7      	cmp	r7, r4
    9a3a:	dd1c      	ble.n	9a76 <_strtol_l.isra.0+0xc2>
    9a3c:	1c53      	adds	r3, r2, #1
    9a3e:	d009      	beq.n	9a54 <_strtol_l.isra.0+0xa0>
    9a40:	4662      	mov	r2, ip
    9a42:	4286      	cmp	r6, r0
    9a44:	d306      	bcc.n	9a54 <_strtol_l.isra.0+0xa0>
    9a46:	d102      	bne.n	9a4e <_strtol_l.isra.0+0x9a>
    9a48:	9b04      	ldr	r3, [sp, #16]
    9a4a:	42a3      	cmp	r3, r4
    9a4c:	db02      	blt.n	9a54 <_strtol_l.isra.0+0xa0>
    9a4e:	2201      	movs	r2, #1
    9a50:	4378      	muls	r0, r7
    9a52:	1820      	adds	r0, r4, r0
    9a54:	782c      	ldrb	r4, [r5, #0]
    9a56:	3501      	adds	r5, #1
    9a58:	e7e9      	b.n	9a2e <_strtol_l.isra.0+0x7a>
    9a5a:	270a      	movs	r7, #10
    9a5c:	e7d9      	b.n	9a12 <_strtol_l.isra.0+0x5e>
    9a5e:	0023      	movs	r3, r4
    9a60:	3b41      	subs	r3, #65	; 0x41
    9a62:	2b19      	cmp	r3, #25
    9a64:	d801      	bhi.n	9a6a <_strtol_l.isra.0+0xb6>
    9a66:	3c37      	subs	r4, #55	; 0x37
    9a68:	e7e6      	b.n	9a38 <_strtol_l.isra.0+0x84>
    9a6a:	0023      	movs	r3, r4
    9a6c:	3b61      	subs	r3, #97	; 0x61
    9a6e:	2b19      	cmp	r3, #25
    9a70:	d801      	bhi.n	9a76 <_strtol_l.isra.0+0xc2>
    9a72:	3c57      	subs	r4, #87	; 0x57
    9a74:	e7e0      	b.n	9a38 <_strtol_l.isra.0+0x84>
    9a76:	1c53      	adds	r3, r2, #1
    9a78:	d107      	bne.n	9a8a <_strtol_l.isra.0+0xd6>
    9a7a:	2322      	movs	r3, #34	; 0x22
    9a7c:	9a05      	ldr	r2, [sp, #20]
    9a7e:	0008      	movs	r0, r1
    9a80:	6013      	str	r3, [r2, #0]
    9a82:	9b02      	ldr	r3, [sp, #8]
    9a84:	b94b      	cbnz	r3, 9a9a <_strtol_l.isra.0+0xe6>
    9a86:	b007      	add	sp, #28
    9a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a8a:	9b01      	ldr	r3, [sp, #4]
    9a8c:	b103      	cbz	r3, 9a90 <_strtol_l.isra.0+0xdc>
    9a8e:	4240      	negs	r0, r0
    9a90:	9b02      	ldr	r3, [sp, #8]
    9a92:	2b00      	cmp	r3, #0
    9a94:	d0f7      	beq.n	9a86 <_strtol_l.isra.0+0xd2>
    9a96:	9b03      	ldr	r3, [sp, #12]
    9a98:	b102      	cbz	r2, 9a9c <_strtol_l.isra.0+0xe8>
    9a9a:	1e6b      	subs	r3, r5, #1
    9a9c:	9a02      	ldr	r2, [sp, #8]
    9a9e:	6013      	str	r3, [r2, #0]
    9aa0:	e7f1      	b.n	9a86 <_strtol_l.isra.0+0xd2>
    9aa2:	2430      	movs	r4, #48	; 0x30
    9aa4:	2f00      	cmp	r7, #0
    9aa6:	d1b4      	bne.n	9a12 <_strtol_l.isra.0+0x5e>
    9aa8:	3708      	adds	r7, #8
    9aaa:	e7b2      	b.n	9a12 <_strtol_l.isra.0+0x5e>
    9aac:	7fffffff 	.word	0x7fffffff

00009ab0 <strtol>:
    9ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9ab2:	0013      	movs	r3, r2
    9ab4:	4a05      	ldr	r2, [pc, #20]	; (9acc <strtol+0x1c>)
    9ab6:	0005      	movs	r5, r0
    9ab8:	6810      	ldr	r0, [r2, #0]
    9aba:	6a04      	ldr	r4, [r0, #32]
    9abc:	b904      	cbnz	r4, 9ac0 <strtol+0x10>
    9abe:	4c04      	ldr	r4, [pc, #16]	; (9ad0 <strtol+0x20>)
    9ac0:	000a      	movs	r2, r1
    9ac2:	9400      	str	r4, [sp, #0]
    9ac4:	0029      	movs	r1, r5
    9ac6:	f7ff ff75 	bl	99b4 <_strtol_l.isra.0>
    9aca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9acc:	20002000 	.word	0x20002000
    9ad0:	20002064 	.word	0x20002064

00009ad4 <__locale_ctype_ptr_l>:
    9ad4:	30ec      	adds	r0, #236	; 0xec
    9ad6:	6800      	ldr	r0, [r0, #0]
    9ad8:	4770      	bx	lr

00009ada <__ascii_mbtowc>:
    9ada:	b082      	sub	sp, #8
    9adc:	b901      	cbnz	r1, 9ae0 <__ascii_mbtowc+0x6>
    9ade:	a901      	add	r1, sp, #4
    9ae0:	0010      	movs	r0, r2
    9ae2:	b12a      	cbz	r2, 9af0 <__ascii_mbtowc+0x16>
    9ae4:	b133      	cbz	r3, 9af4 <__ascii_mbtowc+0x1a>
    9ae6:	7813      	ldrb	r3, [r2, #0]
    9ae8:	600b      	str	r3, [r1, #0]
    9aea:	7810      	ldrb	r0, [r2, #0]
    9aec:	1e43      	subs	r3, r0, #1
    9aee:	4198      	sbcs	r0, r3
    9af0:	b002      	add	sp, #8
    9af2:	4770      	bx	lr
    9af4:	2002      	movs	r0, #2
    9af6:	4240      	negs	r0, r0
    9af8:	e7fa      	b.n	9af0 <__ascii_mbtowc+0x16>

00009afa <__malloc_lock>:
    9afa:	4770      	bx	lr

00009afc <__malloc_unlock>:
    9afc:	4770      	bx	lr

00009afe <__ascii_wctomb>:
    9afe:	000b      	movs	r3, r1
    9b00:	b121      	cbz	r1, 9b0c <__ascii_wctomb+0xe>
    9b02:	2aff      	cmp	r2, #255	; 0xff
    9b04:	d904      	bls.n	9b10 <__ascii_wctomb+0x12>
    9b06:	238a      	movs	r3, #138	; 0x8a
    9b08:	6003      	str	r3, [r0, #0]
    9b0a:	3b8b      	subs	r3, #139	; 0x8b
    9b0c:	0018      	movs	r0, r3
    9b0e:	4770      	bx	lr
    9b10:	700a      	strb	r2, [r1, #0]
    9b12:	2301      	movs	r3, #1
    9b14:	e7fa      	b.n	9b0c <__ascii_wctomb+0xe>
	...

00009b18 <__aeabi_lmul>:
    9b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b1a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9b1e:	46ce      	mov	lr, r9
    9b20:	4647      	mov	r7, r8
    9b22:	002c      	movs	r4, r5
    9b24:	4015      	ands	r5, r2
    9b26:	4699      	mov	r9, r3
    9b28:	002b      	movs	r3, r5
    9b2a:	4004      	ands	r4, r0
    9b2c:	0c16      	lsrs	r6, r2, #16
    9b2e:	b580      	push	{r7, lr}
    9b30:	0c07      	lsrs	r7, r0, #16
    9b32:	4363      	muls	r3, r4
    9b34:	437d      	muls	r5, r7
    9b36:	4377      	muls	r7, r6
    9b38:	4366      	muls	r6, r4
    9b3a:	0c1c      	lsrs	r4, r3, #16
    9b3c:	1976      	adds	r6, r6, r5
    9b3e:	19a4      	adds	r4, r4, r6
    9b40:	469c      	mov	ip, r3
    9b42:	42a5      	cmp	r5, r4
    9b44:	d903      	bls.n	9b4e <__aeabi_lmul+0x36>
    9b46:	2380      	movs	r3, #128	; 0x80
    9b48:	025b      	lsls	r3, r3, #9
    9b4a:	4698      	mov	r8, r3
    9b4c:	4447      	add	r7, r8
    9b4e:	0c25      	lsrs	r5, r4, #16
    9b50:	19ef      	adds	r7, r5, r7
    9b52:	4663      	mov	r3, ip
    9b54:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9b58:	401d      	ands	r5, r3
    9b5a:	464b      	mov	r3, r9
    9b5c:	4351      	muls	r1, r2
    9b5e:	4343      	muls	r3, r0
    9b60:	0424      	lsls	r4, r4, #16
    9b62:	1964      	adds	r4, r4, r5
    9b64:	1859      	adds	r1, r3, r1
    9b66:	19c9      	adds	r1, r1, r7
    9b68:	0020      	movs	r0, r4
    9b6a:	bc0c      	pop	{r2, r3}
    9b6c:	4690      	mov	r8, r2
    9b6e:	4699      	mov	r9, r3
    9b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b72:	46c0      	nop			; (mov r8, r8)

00009b74 <_sbrk>:
    9b74:	f242 2334 	movw	r3, #8756	; 0x2234
    9b78:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9b7c:	681a      	ldr	r2, [r3, #0]
    9b7e:	b11a      	cbz	r2, 9b88 <_sbrk+0x14>
    9b80:	1810      	adds	r0, r2, r0
    9b82:	6018      	str	r0, [r3, #0]
    9b84:	0010      	movs	r0, r2
    9b86:	4770      	bx	lr
    9b88:	f242 7250 	movw	r2, #10064	; 0x2750
    9b8c:	f2c2 0200 	movt	r2, #8192	; 0x2000
    9b90:	e7f6      	b.n	9b80 <_sbrk+0xc>
    9b92:	46c0      	nop			; (mov r8, r8)
    9b94:	00006925 	.word	0x00006925
    9b98:	203a7325 	.word	0x203a7325
    9b9c:	00000000 	.word	0x00000000
    9ba0:	2070614d 	.word	0x2070614d
    9ba4:	66207369 	.word	0x66207369
    9ba8:	2e6c6c75 	.word	0x2e6c6c75
    9bac:	6e614320 	.word	0x6e614320
    9bb0:	20746f6e 	.word	0x20746f6e
    9bb4:	65736e69 	.word	0x65736e69
    9bb8:	0a2e7472 	.word	0x0a2e7472
    9bbc:	00000000 	.word	0x00000000
    9bc0:	415d535b 	.word	0x415d535b
    9bc4:	5d455b41 	.word	0x5d455b41
    9bc8:	0000000a 	.word	0x0000000a
    9bcc:	425d535b 	.word	0x425d535b
    9bd0:	5d455b42 	.word	0x5d455b42
    9bd4:	0000000a 	.word	0x0000000a
    9bd8:	005d535b 	.word	0x005d535b
    9bdc:	0a5d455b 	.word	0x0a5d455b
    9be0:	00000000 	.word	0x00000000
    9be4:	00007830 	.word	0x00007830
    9be8:	78322e25 	.word	0x78322e25
    9bec:	00000000 	.word	0x00000000
    9bf0:	6e697270 	.word	0x6e697270
    9bf4:	676e6974 	.word	0x676e6974
    9bf8:	696e6920 	.word	0x696e6920
    9bfc:	74732074 	.word	0x74732074
    9c00:	0a657461 	.word	0x0a657461
    9c04:	00000000 	.word	0x00000000
    9c08:	656e6f64 	.word	0x656e6f64
    9c0c:	696e6920 	.word	0x696e6920
    9c10:	74732074 	.word	0x74732074
    9c14:	0a657461 	.word	0x0a657461
    9c18:	00000000 	.word	0x00000000
    9c1c:	7074735b 	.word	0x7074735b
    9c20:	0000005d 	.word	0x0000005d
    9c24:	7365545b 	.word	0x7365545b
    9c28:	53205d74 	.word	0x53205d74
    9c2c:	70757465 	.word	0x70757465
    9c30:	0000203a 	.word	0x0000203a
    9c34:	75746572 	.word	0x75746572
    9c38:	6e696e72 	.word	0x6e696e72
    9c3c:	00002067 	.word	0x00002067
    9c40:	6f63202c 	.word	0x6f63202c
    9c44:	65746e75 	.word	0x65746e75
    9c48:	00003d72 	.word	0x00003d72
    9c4c:	7566202c 	.word	0x7566202c
    9c50:	003d636e 	.word	0x003d636e
    9c54:	64203d20 	.word	0x64203d20
    9c58:	20656e6f 	.word	0x20656e6f
    9c5c:	542f5b20 	.word	0x542f5b20
    9c60:	5d747365 	.word	0x5d747365
    9c64:	00000a20 	.word	0x00000a20
    9c68:	5d534f5b 	.word	0x5d534f5b
    9c6c:	00000000 	.word	0x00000000
    9c70:	5d454f5b 	.word	0x5d454f5b
    9c74:	0000000a 	.word	0x0000000a
    9c78:	65764f5b 	.word	0x65764f5b
    9c7c:	000a5d72 	.word	0x000a5d72
    9c80:	746c635b 	.word	0x746c635b
    9c84:	0000005d 	.word	0x0000005d
    9c88:	7365545b 	.word	0x7365545b
    9c8c:	43205d74 	.word	0x43205d74
    9c90:	656c6c6f 	.word	0x656c6c6f
    9c94:	203a7463 	.word	0x203a7463
    9c98:	00000000 	.word	0x00000000
    9c9c:	75746552 	.word	0x75746552
    9ca0:	6e696e72 	.word	0x6e696e72
    9ca4:	00002067 	.word	0x00002067
    9ca8:	3d66202c 	.word	0x3d66202c
    9cac:	00000000 	.word	0x00000000
    9cb0:	3d70202c 	.word	0x3d70202c
    9cb4:	00000000 	.word	0x00000000
    9cb8:	3d71202c 	.word	0x3d71202c
    9cbc:	00000000 	.word	0x00000000
    9cc0:	6c696166 	.word	0x6c696166
    9cc4:	74206465 	.word	0x74206465
    9cc8:	6170206f 	.word	0x6170206f
    9ccc:	20657372 	.word	0x20657372
    9cd0:	6d6d6f63 	.word	0x6d6d6f63
    9cd4:	3a646e61 	.word	0x3a646e61
    9cd8:	00000020 	.word	0x00000020
    9cdc:	6c204120 	.word	0x6c204120
    9ce0:	6f20746f 	.word	0x6f20746f
    9ce4:	65682066 	.word	0x65682066
    9ce8:	6f6f6c6c 	.word	0x6f6f6c6c
    9cec:	6f6f6f6f 	.word	0x6f6f6f6f
    9cf0:	00000020 	.word	0x00000020
    9cf4:	70617277 	.word	0x70617277
    9cf8:	5f726570 	.word	0x5f726570
    9cfc:	74696e69 	.word	0x74696e69
    9d00:	74612042 	.word	0x74612042
    9d04:	0000203a 	.word	0x0000203a
    9d08:	61727720 	.word	0x61727720
    9d0c:	72657070 	.word	0x72657070
    9d10:	50444c5f 	.word	0x50444c5f
    9d14:	656e655f 	.word	0x656e655f
    9d18:	20796772 	.word	0x20796772
    9d1c:	203a7461 	.word	0x203a7461
    9d20:	00000000 	.word	0x00000000
    9d24:	6174535b 	.word	0x6174535b
    9d28:	205d7472 	.word	0x205d7472
    9d2c:	0000000a 	.word	0x0000000a
    9d30:	78654e5b 	.word	0x78654e5b
    9d34:	000a5d74 	.word	0x000a5d74
    9d38:	00009574 	.word	0x00009574
    9d3c:	000094d2 	.word	0x000094d2
    9d40:	000094d2 	.word	0x000094d2
    9d44:	000094d0 	.word	0x000094d0
    9d48:	00009566 	.word	0x00009566
    9d4c:	00009566 	.word	0x00009566
    9d50:	0000955c 	.word	0x0000955c
    9d54:	000094d0 	.word	0x000094d0
    9d58:	00009566 	.word	0x00009566
    9d5c:	0000955c 	.word	0x0000955c
    9d60:	00009566 	.word	0x00009566
    9d64:	000094d0 	.word	0x000094d0
    9d68:	0000956c 	.word	0x0000956c
    9d6c:	0000956c 	.word	0x0000956c
    9d70:	0000956c 	.word	0x0000956c
    9d74:	00009608 	.word	0x00009608

00009d78 <__sf_fake_stderr>:
	...

00009d98 <__sf_fake_stdin>:
	...

00009db8 <__sf_fake_stdout>:
	...
    9dd8:	4f500043 00584953 2000002e                       C.POSIX...

00009de2 <_ctype_>:
    9de2:	20202000 20202020 28282020 20282828     .         ((((( 
    9df2:	20202020 20202020 20202020 20202020                     
    9e02:	10108820 10101010 10101010 10101010      ...............
    9e12:	04040410 04040404 10040404 10101010     ................
    9e22:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9e32:	01010101 01010101 01010101 10101010     ................
    9e42:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9e52:	02020202 02020202 02020202 10101010     ................
    9e62:	00000020 00000000 00000000 00000000      ...............
	...

00009ee4 <_init>:
    9ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ee6:	46c0      	nop			; (mov r8, r8)
    9ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9eea:	bc08      	pop	{r3}
    9eec:	469e      	mov	lr, r3
    9eee:	4770      	bx	lr

00009ef0 <__init_array_start>:
    9ef0:	00008121 	.word	0x00008121

00009ef4 <_fini>:
    9ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ef6:	46c0      	nop			; (mov r8, r8)
    9ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9efa:	bc08      	pop	{r3}
    9efc:	469e      	mov	lr, r3
    9efe:	4770      	bx	lr

00009f00 <__fini_array_start>:
    9f00:	000080f5 	.word	0x000080f5
